%% ========= DATA =============
% VAD  
%
% Actors
% ======
%  1. p0  30
%  2. p1  30
%  3. p2  30 
%  4. p3  30
%  5. p4  30
%  6. p5  30
%  7. p6  30
%  8. p7  30
%  9. 	p8  30
%  


% Communications
% ==============
%
%  1. e18       (1 -> 6)  20	
%  2. e12,14,15 (1 -> 2)	 20
%  3. e17       (1 -> 3)	 20
%  4. e13,16    (1 -> 7)	 20
%  5. e2        (2 -> 4)	 20
%  6. e1        (2 -> 5)	 20
%  7. e3        (4 -> 5)	 20
%  8. e4        (4 -> 6)	 20
%  9. e5        (5 -> 6)	 20
%  10. e10      (6 -> 8)	 20
%  11. e7       (6 -> 7)	 20
%  12. e6       (7 -> 6)	 20
%  13. e8       (7 -> 8)	 20
%  14. e11      (8 -> 9)	 20
%  15. e9       (3 -> 6)	 20

% Architecture:
%
% ___   ___ 
% |1 |--|2 |
% ---   --- 
%  |     |  
% ___   ___ 
% |3 |--|4 |
% ---   --- 

row = 2;
col = 2;

no_links = 2*2*(row-1)*col;

no_actors=9;

no_flows = 15;
% link_bandwidth = 250;
link_bandwidth = 200;

source_destination_actor = 
			[| 1, 6 | %1
			   1, 2 | %2  
			   1, 3 | %3
			   1, 7 | %4
			   2, 4 | %5
			   2, 5 | %6
			   4, 5 | %7
			   4, 6 | %8
			   5, 6 | %9
			   6, 8 | %10
			   6, 7 | %11
			   7, 6 | %12
			   7, 8 | %13
			   8, 9 | %14
			   3, 6   %15
			|];

actor_processor = [
  flow_processor[1], 
  flow_processor[5], 
  flow_processor[15], 
  flow_processor[7], 
  flow_processor[9],
  flow_processor[10],
  flow_processor[12],
  flow_processor[14],
  flow_processor[29]
  ];


inStream = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20];

b = [| 0, 0, 0, 0, inStream[1], -inStream[1] |
       0, 0, 0, 0, inStream[2], -inStream[2] |
       0, 0, 0, 0, inStream[3], -inStream[3] |
       0, 0, 0, 0, inStream[4], -inStream[4] |
       0, 0, 0, 0, inStream[5], -inStream[5] |
       0, 0, 0, 0, inStream[6], -inStream[6] |
       0, 0, 0, 0, inStream[7], -inStream[7] |
       0, 0, 0, 0, inStream[8], -inStream[8] |
       0, 0, 0, 0, inStream[9], -inStream[9] |
       0, 0, 0, 0, inStream[10], -inStream[10] |
       0, 0, 0, 0, inStream[11], -inStream[11] |
       0, 0, 0, 0, inStream[12], -inStream[12] |
       0, 0, 0, 0, inStream[13], -inStream[13] |
       0, 0, 0, 0, inStream[14], -inStream[14] |
       0, 0, 0, 0, inStream[15], -inStream[15] |];

flows = array2d(1..no_flows, 1..m, 
        [inFlow[1,i] | i in 1..k] ++ [commFlow[1,i] | i in 1..no_links] ++ [outFlow[1,i] | i in 1..k] ++
        [inFlow[2,i] | i in 1..k] ++ [commFlow[2,i] | i in 1..no_links] ++ [outFlow[2,i] | i in 1..k] ++
	[inFlow[3,i] | i in 1..k] ++ [commFlow[3,i] | i in 1..no_links] ++ [outFlow[3,i] | i in 1..k] ++
	[inFlow[4,i] | i in 1..k] ++ [commFlow[4,i] | i in 1..no_links] ++ [outFlow[4,i] | i in 1..k] ++
	[inFlow[5,i] | i in 1..k] ++ [commFlow[5,i] | i in 1..no_links] ++ [outFlow[5,i] | i in 1..k] ++
	[inFlow[6,i] | i in 1..k] ++ [commFlow[6,i] | i in 1..no_links] ++ [outFlow[6,i] | i in 1..k] ++
	[inFlow[7,i] | i in 1..k] ++ [commFlow[7,i] | i in 1..no_links] ++ [outFlow[7,i] | i in 1..k] ++
	[inFlow[8,i] | i in 1..k] ++ [commFlow[8,i] | i in 1..no_links] ++ [outFlow[8,i] | i in 1..k] ++
	[inFlow[9,i] | i in 1..k] ++ [commFlow[9,i] | i in 1..no_links] ++ [outFlow[9,i] | i in 1..k] ++
	[inFlow[10,i] | i in 1..k] ++ [commFlow[10,i] | i in 1..no_links] ++ [outFlow[10,i] | i in 1..k] ++
	[inFlow[11,i] | i in 1..k] ++ [commFlow[11,i] | i in 1..no_links] ++ [outFlow[11,i] | i in 1..k] ++
	[inFlow[12,i] | i in 1..k] ++ [commFlow[12,i] | i in 1..no_links] ++ [outFlow[12,i] | i in 1..k] ++
	[inFlow[13,i] | i in 1..k] ++ [commFlow[13,i] | i in 1..no_links] ++ [outFlow[13,i] | i in 1..k] ++
	[inFlow[14,i] | i in 1..k] ++ [commFlow[14,i] | i in 1..no_links] ++ [outFlow[14,i] | i in 1..k] ++
	[inFlow[15,i] | i in 1..k] ++ [commFlow[15,i] | i in 1..no_links] ++ [outFlow[15,i] | i in 1..k] );

balance = array2d(1..no_flows, 1..n, [b[i,j] | i in 1..no_flows, j in 1..n]);

unit_cost = [ 0, 0, 0, 0, 
	    1, 1, 1, 1, 1, 1, 1, 1,
	    0, 0, 0, 0];

processor_load = 200;

actor_load = [30, 30, 30, 30, 30, 30, 30, 30, 30];

load = array2d(1..2, 1..no_flows, 
	[if (not exists (k in 1..i-1) (source_destination_actor[k,j+1] = source_destination_actor[i,j+1] \/ 
	    	 	      	       source_destination_actor[k,((j+1) mod 2) + 1] = source_destination_actor[i,j+1])) 
	    then actor_load[source_destination_actor[i,j+1]] else 0 endif | j in 0..1, i in 1..no_flows]);


arc =[| 
    	%% from action to processors
    	5, 1 |
    	5, 2 |
	5, 3 |
	5, 4 |

	1, 2 |
	1, 3 |

	2, 1 |
	2, 4 |

	3, 1 |
	3, 4 |

	4, 2 |
	4, 3 |
	
	%% from processors to action
	1, 6 |
    	2, 6 |
	3, 6 |
	4, 6 
	|];

in_connections = [if ((i mod 2) mod 2) = 0 then (k+1)+(i div (2*k)) else ((i div 2) mod k + 1) endif | i in 0..2*no_flows*k-1];
out_connections = [if ((i mod 2) mod 2) = 0 then ((i div 2) mod k + 1) else (k+no_flows+1)+(i div (2*k)) endif | i in 0..2*no_flows*k-1];

all_connections = array2d(1..2*no_flows*k+no_links, 1..2, in_connections ++ [arc[i,j] | i in k+1..no_links+k, j in 1..2] ++ out_connections);

total_flow = [flows[i,j] | i in 1..no_flows, j in 1..k] ++ 
	     comm_full ++ 
             [flows[i,j] | i in 1..no_flows, j in k+no_links+1..2*k+no_links];

total_unit_cost = [0 | i in 1..no_flows, j in 1..k] ++ [ 1 | i in 1..no_links] ++ [0 | i in 1..no_flows, j in 1..k];

total_balance = [0 | i in 1..k] ++ [balance[i,j] | i in 1..no_flows, j in k+1..k+1] ++ [balance[i,j] | i in 1..no_flows, j in k+2..k+2];

% it is unnecessary
link_str = ["1 -> 2 = ", "1 -> 3 = ", "2 -> 1 = ", "2 -> 4 = ", "3 -> 1 = ", "3 -> 4 = ", "4 -> 2 = ", "4 -> 3 = "];