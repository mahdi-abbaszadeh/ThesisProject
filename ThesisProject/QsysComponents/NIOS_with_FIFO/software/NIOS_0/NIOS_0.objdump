
NIOS_0.elf:     file format elf32-littlenios2
NIOS_0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000104c memsz 0x0000104c flags r-x
    LOAD off    0x000020f8 vaddr 0x000200f8 paddr 0x0001106c align 2**12
         filesz 0x000000f0 memsz 0x00000104 flags rw-
    LOAD off    0x00003000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000030f8  2**0
                  CONTENTS
  2 .text         0000104c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f8  00020000  00020000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  000200f8  0001106c  000020f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  000201e8  0001115c  000021e8  2**2
                  ALLOC, SMALL_DATA
  6 .Inst_mem_0   00000000  0001115c  0001115c  000030f8  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  000201fc  000201fc  000030f8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002f8  00000000  00000000  00003120  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004648  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001699  00000000  00000000  00007a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000192e  00000000  00000000  000090f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000540  00000000  00000000  0000aa28  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000012f1  00000000  00000000  0000af68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001664  00000000  00000000  0000c259  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000d8c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000240  00000000  00000000  0000d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000efb6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000efb9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000efc5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000efc6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000efc7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000efd2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000efdd  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000007  00000000  00000000  0000efe8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000054  00000000  00000000  0000efef  2**0
                  CONTENTS, READONLY
 27 .jdi          00007547  00000000  00000000  0000f043  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0008965e  00000000  00000000  0001658a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
000200f8 l    d  .rwdata	00000000 .rwdata
000201e8 l    d  .bss	00000000 .bss
0001115c l    d  .Inst_mem_0	00000000 .Inst_mem_0
000201fc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NIOS_0_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 NIOS_0.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000103f0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000200f8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010d70 g     F .text	0000002c alt_main
00010340 g     F .text	00000080 _puts_r
00010ecc g     F .text	0000001c altera_avalon_fifo_write_almostfull
0001106c g       *ABS*	00000000 __flash_rwdata_start
000102f4 g     F .text	0000004c printf
00010f04 g     F .text	00000098 altera_avalon_fifo_init
00010f9c g     F .text	0000001c altera_avalon_fifo_write_fifo
00010d9c g     F .text	00000038 alt_putstr
00011064 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011020 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
000201ec g     O .bss	00000004 errno
000201f4 g     O .bss	00000004 alt_argv
000281d8 g       *ABS*	00000000 _gp
00010e94 g     F .text	0000001c altera_avalon_fifo_clear_event
000103c0 g     F .text	00000014 puts
000102b8 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010bac g     F .text	00000064 .hidden __udivsi3
000201d8 g     O .rwdata	00000004 _global_impure_ptr
000201fc g       *ABS*	00000000 __bss_end
0001105c g     F .text	00000004 alt_dcache_flush_all
00010eb0 g     F .text	0000001c altera_avalon_fifo_write_ienable
000201e8 g       *ABS*	00000000 __ram_rwdata_end
00010e78 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00010dd4 g     F .text	00000060 write
000200f8 g       *ABS*	00000000 __ram_rodata_end
000201e0 g     O .rwdata	00000004 jtag_uart_0
00010c10 g     F .text	00000058 .hidden __umodsi3
000201fc g       *ABS*	00000000 end
00010e80 g     F .text	0000000c altera_avalon_fifo_read_event
00030000 g       *ABS*	00000000 __alt_stack_pointer
00011028 g     F .text	00000034 altera_avalon_jtag_uart_write
000201e8 g     O .bss	00000004 input_fifo_wrclk_irq_event
00010fe0 g     F .text	0000001c altera_avalon_fifo_read_fifo
0001045c g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
00010e54 g     F .text	00000004 alt_sys_init
00010c68 g     F .text	00000028 .hidden __mulsi3
000200f8 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
00010000 g       *ABS*	00000000 __alt_mem_Inst_mem_0
000201fc g       *ABS*	00000000 __alt_stack_base
0001005c g     F .text	000000d0 print_status
00010e58 g     F .text	0000000c altera_avalon_fifo_read_status
00011018 g     F .text	00000008 altera_avalon_fifo_read_other_info
000109a4 g     F .text	000000b8 __sfvwrite_small_dev
000201e8 g       *ABS*	00000000 __bss_start
0001012c g     F .text	0000018c main
000201f0 g     O .bss	00000004 alt_envp
00010e8c g     F .text	00000008 altera_avalon_fifo_read_level
000201e4 g     O .rwdata	00000004 alt_errno
00010ab4 g     F .text	00000084 .hidden __divsi3
00020000 g       *ABS*	00000000 __flash_rodata_start
00010e34 g     F .text	00000020 alt_irq_init
00010a5c g     F .text	00000058 _write_r
000201dc g     O .rwdata	00000004 _impure_ptr
000201f8 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010ffc g     F .text	0000001c altera_avalon_fifo_write_other_info
000201e8 g       *ABS*	00000000 _edata
000201fc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010b38 g     F .text	00000074 .hidden __modsi3
00010e64 g     F .text	0000000c altera_avalon_fifo_read_ienable
00030000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010e70 g     F .text	00000008 altera_avalon_fifo_read_almostfull
000103d4 g     F .text	0000001c strlen
00010fb8 g     F .text	00000028 altera_avalon_read_fifo
00011060 g     F .text	00000004 alt_icache_flush_all
00010988 g     F .text	0000001c __vfprintf_internal
00010ee8 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00010c90 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1002c:	d6a07614 	ori	gp,gp,33240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   10034:	10807a14 	ori	r2,r2,488

    movhi r3, %hi(__bss_end)
   10038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   1003c:	18c07f14 	ori	r3,r3,508

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xfffe0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010c900 	call	10c90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010d700 	call	10d70 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xfffe0058>

0001005c <print_status>:

}


void print_status(alt_u32 control_base_address)
{
   1005c:	defffd04 	addi	sp,sp,-12
   10060:	dc000015 	stw	r16,0(sp)
   10064:	2021883a 	mov	r16,r4
printf("--------------------------------------\n");
   10068:	010000b4 	movhi	r4,2
   1006c:	21000004 	addi	r4,r4,0

}


void print_status(alt_u32 control_base_address)
{
   10070:	dfc00215 	stw	ra,8(sp)
   10074:	dc400115 	stw	r17,4(sp)
printf("--------------------------------------\n");
   10078:	00103c00 	call	103c0 <puts>
printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   1007c:	8009883a 	mov	r4,r16
   10080:	0010e8c0 	call	10e8c <altera_avalon_fifo_read_level>
   10084:	010000b4 	movhi	r4,2
   10088:	100b883a 	mov	r5,r2
   1008c:	21000a04 	addi	r4,r4,40
   10090:	00102f40 	call	102f4 <printf>
printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   10094:	04400fc4 	movi	r17,63
   10098:	880b883a 	mov	r5,r17
   1009c:	8009883a 	mov	r4,r16
   100a0:	0010e580 	call	10e58 <altera_avalon_fifo_read_status>
   100a4:	010000b4 	movhi	r4,2
   100a8:	100b883a 	mov	r5,r2
   100ac:	21000d04 	addi	r4,r4,52
   100b0:	00102f40 	call	102f4 <printf>
ALTERA_AVALON_FIFO_STATUS_ALL) );
printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   100b4:	880b883a 	mov	r5,r17
   100b8:	8009883a 	mov	r4,r16
   100bc:	0010e800 	call	10e80 <altera_avalon_fifo_read_event>
   100c0:	010000b4 	movhi	r4,2
   100c4:	100b883a 	mov	r5,r2
   100c8:	21001104 	addi	r4,r4,68
   100cc:	00102f40 	call	102f4 <printf>
ALTERA_AVALON_FIFO_EVENT_ALL) );
printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   100d0:	880b883a 	mov	r5,r17
   100d4:	8009883a 	mov	r4,r16
   100d8:	0010e640 	call	10e64 <altera_avalon_fifo_read_ienable>
   100dc:	010000b4 	movhi	r4,2
   100e0:	100b883a 	mov	r5,r2
   100e4:	21001404 	addi	r4,r4,80
   100e8:	00102f40 	call	102f4 <printf>
ALTERA_AVALON_FIFO_IENABLE_ALL) );
printf("ALMOSTEMPTY = %u\n",
   100ec:	8009883a 	mov	r4,r16
   100f0:	0010e780 	call	10e78 <altera_avalon_fifo_read_almostempty>
   100f4:	010000b4 	movhi	r4,2
   100f8:	100b883a 	mov	r5,r2
   100fc:	21001804 	addi	r4,r4,96
   10100:	00102f40 	call	102f4 <printf>
altera_avalon_fifo_read_almostempty(control_base_address) );
printf("ALMOSTFULL = %u\n\n",
   10104:	8009883a 	mov	r4,r16
   10108:	0010e700 	call	10e70 <altera_avalon_fifo_read_almostfull>
   1010c:	010000b4 	movhi	r4,2
   10110:	100b883a 	mov	r5,r2
   10114:	21001d04 	addi	r4,r4,116
altera_avalon_fifo_read_almostfull(control_base_address));
}
   10118:	dfc00217 	ldw	ra,8(sp)
   1011c:	dc400117 	ldw	r17,4(sp)
   10120:	dc000017 	ldw	r16,0(sp)
   10124:	dec00304 	addi	sp,sp,12
ALTERA_AVALON_FIFO_EVENT_ALL) );
printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
ALTERA_AVALON_FIFO_IENABLE_ALL) );
printf("ALMOSTEMPTY = %u\n",
altera_avalon_fifo_read_almostempty(control_base_address) );
printf("ALMOSTFULL = %u\n\n",
   10128:	00102f41 	jmpi	102f4 <printf>

0001012c <main>:
}*/

int main()
{
  int value = 0;
  alt_putstr("Hello from Nios II!\n");
   1012c:	010000b4 	movhi	r4,2
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

int main()
{
   10130:	deffff04 	addi	sp,sp,-4
  int value = 0;
  alt_putstr("Hello from Nios II!\n");
   10134:	21002204 	addi	r4,r4,136
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

int main()
{
   10138:	dfc00015 	stw	ra,0(sp)
  int value = 0;
  alt_putstr("Hello from Nios II!\n");
   1013c:	0010d9c0 	call	10d9c <alt_putstr>
input_fifo_wrclk_irq_event_ptr, handle_input_fifo_wrclk_interrupts );

*/

int return_code = ALTERA_AVALON_FIFO_OK;
return_code = altera_avalon_fifo_init(control_base_address,
   10140:	010000f4 	movhi	r4,3
   10144:	01c002c4 	movi	r7,11
   10148:	01800084 	movi	r6,2
   1014c:	000b883a 	mov	r5,zero
   10150:	21040804 	addi	r4,r4,4128
   10154:	0010f040 	call	10f04 <altera_avalon_fifo_init>
   10158:	010000f4 	movhi	r4,3
   1015c:	01c002c4 	movi	r7,11
   10160:	01800084 	movi	r6,2
   10164:	000b883a 	mov	r5,zero
   10168:	21040004 	addi	r4,r4,4096
   1016c:	0010f040 	call	10f04 <altera_avalon_fifo_init>

  //initialization of FIFOs
  init_input_fifo_wrclk_control(MM2STFIFO_0_IN_CSR_BASE);
  init_input_fifo_wrclk_control(ST2MMFIFO_0_IN_CSR_BASE);

  alt_putstr("MM2STFIFO status:\n");
   10170:	010000b4 	movhi	r4,2
   10174:	21002804 	addi	r4,r4,160
   10178:	0010d9c0 	call	10d9c <alt_putstr>
  print_status(MM2STFIFO_0_IN_CSR_BASE);
   1017c:	010000f4 	movhi	r4,3
   10180:	21040804 	addi	r4,r4,4128
   10184:	001005c0 	call	1005c <print_status>

  alt_putstr("ST2MMFIFO status:\n");
   10188:	010000b4 	movhi	r4,2
   1018c:	21002d04 	addi	r4,r4,180
   10190:	0010d9c0 	call	10d9c <alt_putstr>
  print_status(ST2MMFIFO_0_IN_CSR_BASE);
   10194:	010000f4 	movhi	r4,3
   10198:	21040004 	addi	r4,r4,4096
   1019c:	001005c0 	call	1005c <print_status>

  alt_putstr("write to FIFO\n");
   101a0:	010000b4 	movhi	r4,2
   101a4:	21003204 	addi	r4,r4,200
   101a8:	0010d9c0 	call	10d9c <alt_putstr>
  //altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,85);
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,1);
   101ac:	014000f4 	movhi	r5,3
   101b0:	010000f4 	movhi	r4,3
   101b4:	01800044 	movi	r6,1
   101b8:	29440804 	addi	r5,r5,4128
   101bc:	21041204 	addi	r4,r4,4168
   101c0:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,2);
   101c4:	014000f4 	movhi	r5,3
   101c8:	010000f4 	movhi	r4,3
   101cc:	01800084 	movi	r6,2
   101d0:	29440804 	addi	r5,r5,4128
   101d4:	21041204 	addi	r4,r4,4168
   101d8:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,3);
   101dc:	014000f4 	movhi	r5,3
   101e0:	010000f4 	movhi	r4,3
   101e4:	018000c4 	movi	r6,3
   101e8:	29440804 	addi	r5,r5,4128
   101ec:	21041204 	addi	r4,r4,4168
   101f0:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,4);
   101f4:	014000f4 	movhi	r5,3
   101f8:	010000f4 	movhi	r4,3
   101fc:	01800104 	movi	r6,4
   10200:	29440804 	addi	r5,r5,4128
   10204:	21041204 	addi	r4,r4,4168
   10208:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,5);
   1020c:	014000f4 	movhi	r5,3
   10210:	010000f4 	movhi	r4,3
   10214:	01800144 	movi	r6,5
   10218:	29440804 	addi	r5,r5,4128
   1021c:	21041204 	addi	r4,r4,4168
   10220:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,6);
   10224:	014000f4 	movhi	r5,3
   10228:	010000f4 	movhi	r4,3
   1022c:	01800184 	movi	r6,6
   10230:	29440804 	addi	r5,r5,4128
   10234:	21041204 	addi	r4,r4,4168
   10238:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,7);
   1023c:	014000f4 	movhi	r5,3
   10240:	010000f4 	movhi	r4,3
   10244:	018001c4 	movi	r6,7
   10248:	29440804 	addi	r5,r5,4128
   1024c:	21041204 	addi	r4,r4,4168
   10250:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,8);
   10254:	014000f4 	movhi	r5,3
   10258:	010000f4 	movhi	r4,3
   1025c:	01800204 	movi	r6,8
   10260:	29440804 	addi	r5,r5,4128
   10264:	21041204 	addi	r4,r4,4168
   10268:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>
  altera_avalon_fifo_write_fifo(MM2STFIFO_0_IN_BASE, MM2STFIFO_0_IN_CSR_BASE,9);
   1026c:	014000f4 	movhi	r5,3
   10270:	010000f4 	movhi	r4,3
   10274:	01800244 	movi	r6,9
   10278:	29440804 	addi	r5,r5,4128
   1027c:	21041204 	addi	r4,r4,4168
   10280:	0010f9c0 	call	10f9c <altera_avalon_fifo_write_fifo>

  alt_putstr("read from FIFO:\n");
   10284:	010000b4 	movhi	r4,2
   10288:	21003604 	addi	r4,r4,216
   1028c:	0010d9c0 	call	10d9c <alt_putstr>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_0_OUT_BASE, ST2MMFIFO_0_IN_CSR_BASE);
   10290:	014000f4 	movhi	r5,3
   10294:	010000f4 	movhi	r4,3
   10298:	29440004 	addi	r5,r5,4096
   1029c:	21041004 	addi	r4,r4,4160
   102a0:	0010fe00 	call	10fe0 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   102a4:	010000b4 	movhi	r4,2
   102a8:	100b883a 	mov	r5,r2
   102ac:	21003b04 	addi	r4,r4,236
   102b0:	00102f40 	call	102f4 <printf>
   102b4:	003fff06 	br	102b4 <__alt_data_end+0xfffe02b4>

000102b8 <_printf_r>:
   102b8:	defffd04 	addi	sp,sp,-12
   102bc:	dfc00015 	stw	ra,0(sp)
   102c0:	d9800115 	stw	r6,4(sp)
   102c4:	d9c00215 	stw	r7,8(sp)
   102c8:	20c00217 	ldw	r3,8(r4)
   102cc:	01800074 	movhi	r6,1
   102d0:	31826904 	addi	r6,r6,2468
   102d4:	19800115 	stw	r6,4(r3)
   102d8:	280d883a 	mov	r6,r5
   102dc:	21400217 	ldw	r5,8(r4)
   102e0:	d9c00104 	addi	r7,sp,4
   102e4:	001045c0 	call	1045c <___vfprintf_internal_r>
   102e8:	dfc00017 	ldw	ra,0(sp)
   102ec:	dec00304 	addi	sp,sp,12
   102f0:	f800283a 	ret

000102f4 <printf>:
   102f4:	defffc04 	addi	sp,sp,-16
   102f8:	dfc00015 	stw	ra,0(sp)
   102fc:	d9400115 	stw	r5,4(sp)
   10300:	d9800215 	stw	r6,8(sp)
   10304:	d9c00315 	stw	r7,12(sp)
   10308:	008000b4 	movhi	r2,2
   1030c:	10807704 	addi	r2,r2,476
   10310:	10800017 	ldw	r2,0(r2)
   10314:	01400074 	movhi	r5,1
   10318:	29426904 	addi	r5,r5,2468
   1031c:	10c00217 	ldw	r3,8(r2)
   10320:	d9800104 	addi	r6,sp,4
   10324:	19400115 	stw	r5,4(r3)
   10328:	200b883a 	mov	r5,r4
   1032c:	11000217 	ldw	r4,8(r2)
   10330:	00109880 	call	10988 <__vfprintf_internal>
   10334:	dfc00017 	ldw	ra,0(sp)
   10338:	dec00404 	addi	sp,sp,16
   1033c:	f800283a 	ret

00010340 <_puts_r>:
   10340:	defffd04 	addi	sp,sp,-12
   10344:	dc000015 	stw	r16,0(sp)
   10348:	2021883a 	mov	r16,r4
   1034c:	2809883a 	mov	r4,r5
   10350:	dfc00215 	stw	ra,8(sp)
   10354:	dc400115 	stw	r17,4(sp)
   10358:	2823883a 	mov	r17,r5
   1035c:	00103d40 	call	103d4 <strlen>
   10360:	81400217 	ldw	r5,8(r16)
   10364:	01000074 	movhi	r4,1
   10368:	21026904 	addi	r4,r4,2468
   1036c:	29000115 	stw	r4,4(r5)
   10370:	100f883a 	mov	r7,r2
   10374:	880d883a 	mov	r6,r17
   10378:	8009883a 	mov	r4,r16
   1037c:	00109a40 	call	109a4 <__sfvwrite_small_dev>
   10380:	00ffffc4 	movi	r3,-1
   10384:	10c00926 	beq	r2,r3,103ac <_puts_r+0x6c>
   10388:	81400217 	ldw	r5,8(r16)
   1038c:	018000b4 	movhi	r6,2
   10390:	01c00044 	movi	r7,1
   10394:	28800117 	ldw	r2,4(r5)
   10398:	31802104 	addi	r6,r6,132
   1039c:	8009883a 	mov	r4,r16
   103a0:	103ee83a 	callr	r2
   103a4:	10bfffe0 	cmpeqi	r2,r2,-1
   103a8:	0085c83a 	sub	r2,zero,r2
   103ac:	dfc00217 	ldw	ra,8(sp)
   103b0:	dc400117 	ldw	r17,4(sp)
   103b4:	dc000017 	ldw	r16,0(sp)
   103b8:	dec00304 	addi	sp,sp,12
   103bc:	f800283a 	ret

000103c0 <puts>:
   103c0:	008000b4 	movhi	r2,2
   103c4:	10807704 	addi	r2,r2,476
   103c8:	200b883a 	mov	r5,r4
   103cc:	11000017 	ldw	r4,0(r2)
   103d0:	00103401 	jmpi	10340 <_puts_r>

000103d4 <strlen>:
   103d4:	2005883a 	mov	r2,r4
   103d8:	10c00007 	ldb	r3,0(r2)
   103dc:	18000226 	beq	r3,zero,103e8 <strlen+0x14>
   103e0:	10800044 	addi	r2,r2,1
   103e4:	003ffc06 	br	103d8 <__alt_data_end+0xfffe03d8>
   103e8:	1105c83a 	sub	r2,r2,r4
   103ec:	f800283a 	ret

000103f0 <print_repeat>:
   103f0:	defffb04 	addi	sp,sp,-20
   103f4:	dc800315 	stw	r18,12(sp)
   103f8:	dc400215 	stw	r17,8(sp)
   103fc:	dc000115 	stw	r16,4(sp)
   10400:	dfc00415 	stw	ra,16(sp)
   10404:	2025883a 	mov	r18,r4
   10408:	2823883a 	mov	r17,r5
   1040c:	d9800005 	stb	r6,0(sp)
   10410:	3821883a 	mov	r16,r7
   10414:	04000a0e 	bge	zero,r16,10440 <print_repeat+0x50>
   10418:	88800117 	ldw	r2,4(r17)
   1041c:	01c00044 	movi	r7,1
   10420:	d80d883a 	mov	r6,sp
   10424:	880b883a 	mov	r5,r17
   10428:	9009883a 	mov	r4,r18
   1042c:	103ee83a 	callr	r2
   10430:	843fffc4 	addi	r16,r16,-1
   10434:	103ff726 	beq	r2,zero,10414 <__alt_data_end+0xfffe0414>
   10438:	00bfffc4 	movi	r2,-1
   1043c:	00000106 	br	10444 <print_repeat+0x54>
   10440:	0005883a 	mov	r2,zero
   10444:	dfc00417 	ldw	ra,16(sp)
   10448:	dc800317 	ldw	r18,12(sp)
   1044c:	dc400217 	ldw	r17,8(sp)
   10450:	dc000117 	ldw	r16,4(sp)
   10454:	dec00504 	addi	sp,sp,20
   10458:	f800283a 	ret

0001045c <___vfprintf_internal_r>:
   1045c:	deffe504 	addi	sp,sp,-108
   10460:	d8c00804 	addi	r3,sp,32
   10464:	ddc01815 	stw	r23,96(sp)
   10468:	dd801715 	stw	r22,92(sp)
   1046c:	dd401615 	stw	r21,88(sp)
   10470:	dd001515 	stw	r20,84(sp)
   10474:	dcc01415 	stw	r19,80(sp)
   10478:	dc801315 	stw	r18,76(sp)
   1047c:	dc401215 	stw	r17,72(sp)
   10480:	dc001115 	stw	r16,68(sp)
   10484:	dfc01a15 	stw	ra,104(sp)
   10488:	df001915 	stw	fp,100(sp)
   1048c:	2029883a 	mov	r20,r4
   10490:	2823883a 	mov	r17,r5
   10494:	382d883a 	mov	r22,r7
   10498:	d9800f15 	stw	r6,60(sp)
   1049c:	0021883a 	mov	r16,zero
   104a0:	d8000e15 	stw	zero,56(sp)
   104a4:	d8000a15 	stw	zero,40(sp)
   104a8:	002b883a 	mov	r21,zero
   104ac:	0027883a 	mov	r19,zero
   104b0:	0025883a 	mov	r18,zero
   104b4:	d8000c15 	stw	zero,48(sp)
   104b8:	d8000b15 	stw	zero,44(sp)
   104bc:	002f883a 	mov	r23,zero
   104c0:	d8c00915 	stw	r3,36(sp)
   104c4:	d8c00f17 	ldw	r3,60(sp)
   104c8:	19000003 	ldbu	r4,0(r3)
   104cc:	20803fcc 	andi	r2,r4,255
   104d0:	1080201c 	xori	r2,r2,128
   104d4:	10bfe004 	addi	r2,r2,-128
   104d8:	10011e26 	beq	r2,zero,10954 <___vfprintf_internal_r+0x4f8>
   104dc:	00c00044 	movi	r3,1
   104e0:	b8c01426 	beq	r23,r3,10534 <___vfprintf_internal_r+0xd8>
   104e4:	1dc00216 	blt	r3,r23,104f0 <___vfprintf_internal_r+0x94>
   104e8:	b8000626 	beq	r23,zero,10504 <___vfprintf_internal_r+0xa8>
   104ec:	00011506 	br	10944 <___vfprintf_internal_r+0x4e8>
   104f0:	01400084 	movi	r5,2
   104f4:	b9401d26 	beq	r23,r5,1056c <___vfprintf_internal_r+0x110>
   104f8:	014000c4 	movi	r5,3
   104fc:	b9402b26 	beq	r23,r5,105ac <___vfprintf_internal_r+0x150>
   10500:	00011006 	br	10944 <___vfprintf_internal_r+0x4e8>
   10504:	01400944 	movi	r5,37
   10508:	1140fc26 	beq	r2,r5,108fc <___vfprintf_internal_r+0x4a0>
   1050c:	88800117 	ldw	r2,4(r17)
   10510:	d9000005 	stb	r4,0(sp)
   10514:	01c00044 	movi	r7,1
   10518:	d80d883a 	mov	r6,sp
   1051c:	880b883a 	mov	r5,r17
   10520:	a009883a 	mov	r4,r20
   10524:	103ee83a 	callr	r2
   10528:	1000d81e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   1052c:	84000044 	addi	r16,r16,1
   10530:	00010406 	br	10944 <___vfprintf_internal_r+0x4e8>
   10534:	01400c04 	movi	r5,48
   10538:	1140fa26 	beq	r2,r5,10924 <___vfprintf_internal_r+0x4c8>
   1053c:	01400944 	movi	r5,37
   10540:	11400a1e 	bne	r2,r5,1056c <___vfprintf_internal_r+0x110>
   10544:	d8800005 	stb	r2,0(sp)
   10548:	88800117 	ldw	r2,4(r17)
   1054c:	b80f883a 	mov	r7,r23
   10550:	d80d883a 	mov	r6,sp
   10554:	880b883a 	mov	r5,r17
   10558:	a009883a 	mov	r4,r20
   1055c:	103ee83a 	callr	r2
   10560:	1000ca1e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   10564:	84000044 	addi	r16,r16,1
   10568:	0000f506 	br	10940 <___vfprintf_internal_r+0x4e4>
   1056c:	25fff404 	addi	r23,r4,-48
   10570:	bdc03fcc 	andi	r23,r23,255
   10574:	00c00244 	movi	r3,9
   10578:	1dc00936 	bltu	r3,r23,105a0 <___vfprintf_internal_r+0x144>
   1057c:	00bfffc4 	movi	r2,-1
   10580:	90800426 	beq	r18,r2,10594 <___vfprintf_internal_r+0x138>
   10584:	01400284 	movi	r5,10
   10588:	9009883a 	mov	r4,r18
   1058c:	0010c680 	call	10c68 <__mulsi3>
   10590:	00000106 	br	10598 <___vfprintf_internal_r+0x13c>
   10594:	0005883a 	mov	r2,zero
   10598:	b8a5883a 	add	r18,r23,r2
   1059c:	0000e206 	br	10928 <___vfprintf_internal_r+0x4cc>
   105a0:	01400b84 	movi	r5,46
   105a4:	1140e426 	beq	r2,r5,10938 <___vfprintf_internal_r+0x4dc>
   105a8:	05c00084 	movi	r23,2
   105ac:	213ff404 	addi	r4,r4,-48
   105b0:	27003fcc 	andi	fp,r4,255
   105b4:	00c00244 	movi	r3,9
   105b8:	1f000936 	bltu	r3,fp,105e0 <___vfprintf_internal_r+0x184>
   105bc:	00bfffc4 	movi	r2,-1
   105c0:	98800426 	beq	r19,r2,105d4 <___vfprintf_internal_r+0x178>
   105c4:	01400284 	movi	r5,10
   105c8:	9809883a 	mov	r4,r19
   105cc:	0010c680 	call	10c68 <__mulsi3>
   105d0:	00000106 	br	105d8 <___vfprintf_internal_r+0x17c>
   105d4:	0005883a 	mov	r2,zero
   105d8:	e0a7883a 	add	r19,fp,r2
   105dc:	0000d906 	br	10944 <___vfprintf_internal_r+0x4e8>
   105e0:	00c01b04 	movi	r3,108
   105e4:	10c0d226 	beq	r2,r3,10930 <___vfprintf_internal_r+0x4d4>
   105e8:	013fffc4 	movi	r4,-1
   105ec:	99000226 	beq	r19,r4,105f8 <___vfprintf_internal_r+0x19c>
   105f0:	d8000b15 	stw	zero,44(sp)
   105f4:	00000106 	br	105fc <___vfprintf_internal_r+0x1a0>
   105f8:	04c00044 	movi	r19,1
   105fc:	01001a44 	movi	r4,105
   10600:	11001626 	beq	r2,r4,1065c <___vfprintf_internal_r+0x200>
   10604:	20800916 	blt	r4,r2,1062c <___vfprintf_internal_r+0x1d0>
   10608:	010018c4 	movi	r4,99
   1060c:	11008826 	beq	r2,r4,10830 <___vfprintf_internal_r+0x3d4>
   10610:	01001904 	movi	r4,100
   10614:	11001126 	beq	r2,r4,1065c <___vfprintf_internal_r+0x200>
   10618:	01001604 	movi	r4,88
   1061c:	1100c81e 	bne	r2,r4,10940 <___vfprintf_internal_r+0x4e4>
   10620:	00c00044 	movi	r3,1
   10624:	d8c00e15 	stw	r3,56(sp)
   10628:	00001506 	br	10680 <___vfprintf_internal_r+0x224>
   1062c:	01001cc4 	movi	r4,115
   10630:	11009826 	beq	r2,r4,10894 <___vfprintf_internal_r+0x438>
   10634:	20800416 	blt	r4,r2,10648 <___vfprintf_internal_r+0x1ec>
   10638:	01001bc4 	movi	r4,111
   1063c:	1100c01e 	bne	r2,r4,10940 <___vfprintf_internal_r+0x4e4>
   10640:	05400204 	movi	r21,8
   10644:	00000f06 	br	10684 <___vfprintf_internal_r+0x228>
   10648:	01001d44 	movi	r4,117
   1064c:	11000d26 	beq	r2,r4,10684 <___vfprintf_internal_r+0x228>
   10650:	01001e04 	movi	r4,120
   10654:	11000a26 	beq	r2,r4,10680 <___vfprintf_internal_r+0x224>
   10658:	0000b906 	br	10940 <___vfprintf_internal_r+0x4e4>
   1065c:	d8c00a17 	ldw	r3,40(sp)
   10660:	b7000104 	addi	fp,r22,4
   10664:	18000726 	beq	r3,zero,10684 <___vfprintf_internal_r+0x228>
   10668:	df000d15 	stw	fp,52(sp)
   1066c:	b5c00017 	ldw	r23,0(r22)
   10670:	b800080e 	bge	r23,zero,10694 <___vfprintf_internal_r+0x238>
   10674:	05efc83a 	sub	r23,zero,r23
   10678:	02400044 	movi	r9,1
   1067c:	00000606 	br	10698 <___vfprintf_internal_r+0x23c>
   10680:	05400404 	movi	r21,16
   10684:	b0c00104 	addi	r3,r22,4
   10688:	d8c00d15 	stw	r3,52(sp)
   1068c:	b5c00017 	ldw	r23,0(r22)
   10690:	d8000a15 	stw	zero,40(sp)
   10694:	0013883a 	mov	r9,zero
   10698:	d839883a 	mov	fp,sp
   1069c:	b8001726 	beq	r23,zero,106fc <___vfprintf_internal_r+0x2a0>
   106a0:	a80b883a 	mov	r5,r21
   106a4:	b809883a 	mov	r4,r23
   106a8:	da401015 	stw	r9,64(sp)
   106ac:	0010bac0 	call	10bac <__udivsi3>
   106b0:	a80b883a 	mov	r5,r21
   106b4:	1009883a 	mov	r4,r2
   106b8:	102d883a 	mov	r22,r2
   106bc:	0010c680 	call	10c68 <__mulsi3>
   106c0:	b885c83a 	sub	r2,r23,r2
   106c4:	00c00244 	movi	r3,9
   106c8:	da401017 	ldw	r9,64(sp)
   106cc:	18800216 	blt	r3,r2,106d8 <___vfprintf_internal_r+0x27c>
   106d0:	10800c04 	addi	r2,r2,48
   106d4:	00000506 	br	106ec <___vfprintf_internal_r+0x290>
   106d8:	d8c00e17 	ldw	r3,56(sp)
   106dc:	18000226 	beq	r3,zero,106e8 <___vfprintf_internal_r+0x28c>
   106e0:	10800dc4 	addi	r2,r2,55
   106e4:	00000106 	br	106ec <___vfprintf_internal_r+0x290>
   106e8:	108015c4 	addi	r2,r2,87
   106ec:	e0800005 	stb	r2,0(fp)
   106f0:	b02f883a 	mov	r23,r22
   106f4:	e7000044 	addi	fp,fp,1
   106f8:	003fe806 	br	1069c <__alt_data_end+0xfffe069c>
   106fc:	e6efc83a 	sub	r23,fp,sp
   10700:	9dc5c83a 	sub	r2,r19,r23
   10704:	0080090e 	bge	zero,r2,1072c <___vfprintf_internal_r+0x2d0>
   10708:	e085883a 	add	r2,fp,r2
   1070c:	01400c04 	movi	r5,48
   10710:	d8c00917 	ldw	r3,36(sp)
   10714:	e009883a 	mov	r4,fp
   10718:	e0c0032e 	bgeu	fp,r3,10728 <___vfprintf_internal_r+0x2cc>
   1071c:	e7000044 	addi	fp,fp,1
   10720:	21400005 	stb	r5,0(r4)
   10724:	e0bffa1e 	bne	fp,r2,10710 <__alt_data_end+0xfffe0710>
   10728:	e6efc83a 	sub	r23,fp,sp
   1072c:	d8c00b17 	ldw	r3,44(sp)
   10730:	4dd1883a 	add	r8,r9,r23
   10734:	922dc83a 	sub	r22,r18,r8
   10738:	18001626 	beq	r3,zero,10794 <___vfprintf_internal_r+0x338>
   1073c:	48000a26 	beq	r9,zero,10768 <___vfprintf_internal_r+0x30c>
   10740:	00800b44 	movi	r2,45
   10744:	d8800805 	stb	r2,32(sp)
   10748:	88800117 	ldw	r2,4(r17)
   1074c:	01c00044 	movi	r7,1
   10750:	d9800804 	addi	r6,sp,32
   10754:	880b883a 	mov	r5,r17
   10758:	a009883a 	mov	r4,r20
   1075c:	103ee83a 	callr	r2
   10760:	10004a1e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   10764:	84000044 	addi	r16,r16,1
   10768:	0580070e 	bge	zero,r22,10788 <___vfprintf_internal_r+0x32c>
   1076c:	b00f883a 	mov	r7,r22
   10770:	01800c04 	movi	r6,48
   10774:	880b883a 	mov	r5,r17
   10778:	a009883a 	mov	r4,r20
   1077c:	00103f00 	call	103f0 <print_repeat>
   10780:	1000421e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   10784:	85a1883a 	add	r16,r16,r22
   10788:	e02d883a 	mov	r22,fp
   1078c:	bf2fc83a 	sub	r23,r23,fp
   10790:	00002006 	br	10814 <___vfprintf_internal_r+0x3b8>
   10794:	0580090e 	bge	zero,r22,107bc <___vfprintf_internal_r+0x360>
   10798:	b00f883a 	mov	r7,r22
   1079c:	01800804 	movi	r6,32
   107a0:	880b883a 	mov	r5,r17
   107a4:	a009883a 	mov	r4,r20
   107a8:	da401015 	stw	r9,64(sp)
   107ac:	00103f00 	call	103f0 <print_repeat>
   107b0:	da401017 	ldw	r9,64(sp)
   107b4:	1000351e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   107b8:	85a1883a 	add	r16,r16,r22
   107bc:	483ff226 	beq	r9,zero,10788 <__alt_data_end+0xfffe0788>
   107c0:	00800b44 	movi	r2,45
   107c4:	d8800805 	stb	r2,32(sp)
   107c8:	88800117 	ldw	r2,4(r17)
   107cc:	01c00044 	movi	r7,1
   107d0:	d9800804 	addi	r6,sp,32
   107d4:	880b883a 	mov	r5,r17
   107d8:	a009883a 	mov	r4,r20
   107dc:	103ee83a 	callr	r2
   107e0:	10002a1e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   107e4:	84000044 	addi	r16,r16,1
   107e8:	003fe706 	br	10788 <__alt_data_end+0xfffe0788>
   107ec:	b5bfffc4 	addi	r22,r22,-1
   107f0:	b0800003 	ldbu	r2,0(r22)
   107f4:	01c00044 	movi	r7,1
   107f8:	d9800804 	addi	r6,sp,32
   107fc:	d8800805 	stb	r2,32(sp)
   10800:	88800117 	ldw	r2,4(r17)
   10804:	880b883a 	mov	r5,r17
   10808:	a009883a 	mov	r4,r20
   1080c:	103ee83a 	callr	r2
   10810:	10001e1e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   10814:	8585c83a 	sub	r2,r16,r22
   10818:	b5c9883a 	add	r4,r22,r23
   1081c:	e085883a 	add	r2,fp,r2
   10820:	013ff216 	blt	zero,r4,107ec <__alt_data_end+0xfffe07ec>
   10824:	1021883a 	mov	r16,r2
   10828:	dd800d17 	ldw	r22,52(sp)
   1082c:	00004406 	br	10940 <___vfprintf_internal_r+0x4e4>
   10830:	00800044 	movi	r2,1
   10834:	1480080e 	bge	r2,r18,10858 <___vfprintf_internal_r+0x3fc>
   10838:	95ffffc4 	addi	r23,r18,-1
   1083c:	b80f883a 	mov	r7,r23
   10840:	01800804 	movi	r6,32
   10844:	880b883a 	mov	r5,r17
   10848:	a009883a 	mov	r4,r20
   1084c:	00103f00 	call	103f0 <print_repeat>
   10850:	10000e1e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   10854:	85e1883a 	add	r16,r16,r23
   10858:	b0800017 	ldw	r2,0(r22)
   1085c:	01c00044 	movi	r7,1
   10860:	d80d883a 	mov	r6,sp
   10864:	d8800005 	stb	r2,0(sp)
   10868:	88800117 	ldw	r2,4(r17)
   1086c:	880b883a 	mov	r5,r17
   10870:	a009883a 	mov	r4,r20
   10874:	b5c00104 	addi	r23,r22,4
   10878:	103ee83a 	callr	r2
   1087c:	1000031e 	bne	r2,zero,1088c <___vfprintf_internal_r+0x430>
   10880:	84000044 	addi	r16,r16,1
   10884:	b82d883a 	mov	r22,r23
   10888:	00002d06 	br	10940 <___vfprintf_internal_r+0x4e4>
   1088c:	00bfffc4 	movi	r2,-1
   10890:	00003106 	br	10958 <___vfprintf_internal_r+0x4fc>
   10894:	b5c00017 	ldw	r23,0(r22)
   10898:	b7000104 	addi	fp,r22,4
   1089c:	b809883a 	mov	r4,r23
   108a0:	00103d40 	call	103d4 <strlen>
   108a4:	9091c83a 	sub	r8,r18,r2
   108a8:	102d883a 	mov	r22,r2
   108ac:	0200090e 	bge	zero,r8,108d4 <___vfprintf_internal_r+0x478>
   108b0:	400f883a 	mov	r7,r8
   108b4:	01800804 	movi	r6,32
   108b8:	880b883a 	mov	r5,r17
   108bc:	a009883a 	mov	r4,r20
   108c0:	da001015 	stw	r8,64(sp)
   108c4:	00103f00 	call	103f0 <print_repeat>
   108c8:	da001017 	ldw	r8,64(sp)
   108cc:	103fef1e 	bne	r2,zero,1088c <__alt_data_end+0xfffe088c>
   108d0:	8221883a 	add	r16,r16,r8
   108d4:	88800117 	ldw	r2,4(r17)
   108d8:	b00f883a 	mov	r7,r22
   108dc:	b80d883a 	mov	r6,r23
   108e0:	880b883a 	mov	r5,r17
   108e4:	a009883a 	mov	r4,r20
   108e8:	103ee83a 	callr	r2
   108ec:	103fe71e 	bne	r2,zero,1088c <__alt_data_end+0xfffe088c>
   108f0:	85a1883a 	add	r16,r16,r22
   108f4:	e02d883a 	mov	r22,fp
   108f8:	00001106 	br	10940 <___vfprintf_internal_r+0x4e4>
   108fc:	00c00044 	movi	r3,1
   10900:	04ffffc4 	movi	r19,-1
   10904:	d8000e15 	stw	zero,56(sp)
   10908:	d8c00a15 	stw	r3,40(sp)
   1090c:	05400284 	movi	r21,10
   10910:	9825883a 	mov	r18,r19
   10914:	d8000c15 	stw	zero,48(sp)
   10918:	d8000b15 	stw	zero,44(sp)
   1091c:	182f883a 	mov	r23,r3
   10920:	00000806 	br	10944 <___vfprintf_internal_r+0x4e8>
   10924:	ddc00b15 	stw	r23,44(sp)
   10928:	05c00084 	movi	r23,2
   1092c:	00000506 	br	10944 <___vfprintf_internal_r+0x4e8>
   10930:	00c00044 	movi	r3,1
   10934:	d8c00c15 	stw	r3,48(sp)
   10938:	05c000c4 	movi	r23,3
   1093c:	00000106 	br	10944 <___vfprintf_internal_r+0x4e8>
   10940:	002f883a 	mov	r23,zero
   10944:	d8c00f17 	ldw	r3,60(sp)
   10948:	18c00044 	addi	r3,r3,1
   1094c:	d8c00f15 	stw	r3,60(sp)
   10950:	003edc06 	br	104c4 <__alt_data_end+0xfffe04c4>
   10954:	8005883a 	mov	r2,r16
   10958:	dfc01a17 	ldw	ra,104(sp)
   1095c:	df001917 	ldw	fp,100(sp)
   10960:	ddc01817 	ldw	r23,96(sp)
   10964:	dd801717 	ldw	r22,92(sp)
   10968:	dd401617 	ldw	r21,88(sp)
   1096c:	dd001517 	ldw	r20,84(sp)
   10970:	dcc01417 	ldw	r19,80(sp)
   10974:	dc801317 	ldw	r18,76(sp)
   10978:	dc401217 	ldw	r17,72(sp)
   1097c:	dc001117 	ldw	r16,68(sp)
   10980:	dec01b04 	addi	sp,sp,108
   10984:	f800283a 	ret

00010988 <__vfprintf_internal>:
   10988:	008000b4 	movhi	r2,2
   1098c:	10807704 	addi	r2,r2,476
   10990:	300f883a 	mov	r7,r6
   10994:	280d883a 	mov	r6,r5
   10998:	200b883a 	mov	r5,r4
   1099c:	11000017 	ldw	r4,0(r2)
   109a0:	001045c1 	jmpi	1045c <___vfprintf_internal_r>

000109a4 <__sfvwrite_small_dev>:
   109a4:	2880000b 	ldhu	r2,0(r5)
   109a8:	1080020c 	andi	r2,r2,8
   109ac:	10002126 	beq	r2,zero,10a34 <__sfvwrite_small_dev+0x90>
   109b0:	2880008f 	ldh	r2,2(r5)
   109b4:	defffa04 	addi	sp,sp,-24
   109b8:	dc000015 	stw	r16,0(sp)
   109bc:	dfc00515 	stw	ra,20(sp)
   109c0:	dd000415 	stw	r20,16(sp)
   109c4:	dcc00315 	stw	r19,12(sp)
   109c8:	dc800215 	stw	r18,8(sp)
   109cc:	dc400115 	stw	r17,4(sp)
   109d0:	2821883a 	mov	r16,r5
   109d4:	10001216 	blt	r2,zero,10a20 <__sfvwrite_small_dev+0x7c>
   109d8:	2027883a 	mov	r19,r4
   109dc:	3025883a 	mov	r18,r6
   109e0:	3823883a 	mov	r17,r7
   109e4:	05010004 	movi	r20,1024
   109e8:	04400b0e 	bge	zero,r17,10a18 <__sfvwrite_small_dev+0x74>
   109ec:	880f883a 	mov	r7,r17
   109f0:	a440010e 	bge	r20,r17,109f8 <__sfvwrite_small_dev+0x54>
   109f4:	01c10004 	movi	r7,1024
   109f8:	8140008f 	ldh	r5,2(r16)
   109fc:	900d883a 	mov	r6,r18
   10a00:	9809883a 	mov	r4,r19
   10a04:	0010a5c0 	call	10a5c <_write_r>
   10a08:	0080050e 	bge	zero,r2,10a20 <__sfvwrite_small_dev+0x7c>
   10a0c:	88a3c83a 	sub	r17,r17,r2
   10a10:	90a5883a 	add	r18,r18,r2
   10a14:	003ff406 	br	109e8 <__alt_data_end+0xfffe09e8>
   10a18:	0005883a 	mov	r2,zero
   10a1c:	00000706 	br	10a3c <__sfvwrite_small_dev+0x98>
   10a20:	8080000b 	ldhu	r2,0(r16)
   10a24:	10801014 	ori	r2,r2,64
   10a28:	8080000d 	sth	r2,0(r16)
   10a2c:	00bfffc4 	movi	r2,-1
   10a30:	00000206 	br	10a3c <__sfvwrite_small_dev+0x98>
   10a34:	00bfffc4 	movi	r2,-1
   10a38:	f800283a 	ret
   10a3c:	dfc00517 	ldw	ra,20(sp)
   10a40:	dd000417 	ldw	r20,16(sp)
   10a44:	dcc00317 	ldw	r19,12(sp)
   10a48:	dc800217 	ldw	r18,8(sp)
   10a4c:	dc400117 	ldw	r17,4(sp)
   10a50:	dc000017 	ldw	r16,0(sp)
   10a54:	dec00604 	addi	sp,sp,24
   10a58:	f800283a 	ret

00010a5c <_write_r>:
   10a5c:	defffd04 	addi	sp,sp,-12
   10a60:	dc000015 	stw	r16,0(sp)
   10a64:	040000b4 	movhi	r16,2
   10a68:	dc400115 	stw	r17,4(sp)
   10a6c:	84007b04 	addi	r16,r16,492
   10a70:	2023883a 	mov	r17,r4
   10a74:	2809883a 	mov	r4,r5
   10a78:	300b883a 	mov	r5,r6
   10a7c:	380d883a 	mov	r6,r7
   10a80:	dfc00215 	stw	ra,8(sp)
   10a84:	80000015 	stw	zero,0(r16)
   10a88:	0010dd40 	call	10dd4 <write>
   10a8c:	00ffffc4 	movi	r3,-1
   10a90:	10c0031e 	bne	r2,r3,10aa0 <_write_r+0x44>
   10a94:	80c00017 	ldw	r3,0(r16)
   10a98:	18000126 	beq	r3,zero,10aa0 <_write_r+0x44>
   10a9c:	88c00015 	stw	r3,0(r17)
   10aa0:	dfc00217 	ldw	ra,8(sp)
   10aa4:	dc400117 	ldw	r17,4(sp)
   10aa8:	dc000017 	ldw	r16,0(sp)
   10aac:	dec00304 	addi	sp,sp,12
   10ab0:	f800283a 	ret

00010ab4 <__divsi3>:
   10ab4:	20001b16 	blt	r4,zero,10b24 <__divsi3+0x70>
   10ab8:	000f883a 	mov	r7,zero
   10abc:	28001616 	blt	r5,zero,10b18 <__divsi3+0x64>
   10ac0:	200d883a 	mov	r6,r4
   10ac4:	29001a2e 	bgeu	r5,r4,10b30 <__divsi3+0x7c>
   10ac8:	00800804 	movi	r2,32
   10acc:	00c00044 	movi	r3,1
   10ad0:	00000106 	br	10ad8 <__divsi3+0x24>
   10ad4:	10000d26 	beq	r2,zero,10b0c <__divsi3+0x58>
   10ad8:	294b883a 	add	r5,r5,r5
   10adc:	10bfffc4 	addi	r2,r2,-1
   10ae0:	18c7883a 	add	r3,r3,r3
   10ae4:	293ffb36 	bltu	r5,r4,10ad4 <__alt_data_end+0xfffe0ad4>
   10ae8:	0005883a 	mov	r2,zero
   10aec:	18000726 	beq	r3,zero,10b0c <__divsi3+0x58>
   10af0:	0005883a 	mov	r2,zero
   10af4:	31400236 	bltu	r6,r5,10b00 <__divsi3+0x4c>
   10af8:	314dc83a 	sub	r6,r6,r5
   10afc:	10c4b03a 	or	r2,r2,r3
   10b00:	1806d07a 	srli	r3,r3,1
   10b04:	280ad07a 	srli	r5,r5,1
   10b08:	183ffa1e 	bne	r3,zero,10af4 <__alt_data_end+0xfffe0af4>
   10b0c:	38000126 	beq	r7,zero,10b14 <__divsi3+0x60>
   10b10:	0085c83a 	sub	r2,zero,r2
   10b14:	f800283a 	ret
   10b18:	014bc83a 	sub	r5,zero,r5
   10b1c:	39c0005c 	xori	r7,r7,1
   10b20:	003fe706 	br	10ac0 <__alt_data_end+0xfffe0ac0>
   10b24:	0109c83a 	sub	r4,zero,r4
   10b28:	01c00044 	movi	r7,1
   10b2c:	003fe306 	br	10abc <__alt_data_end+0xfffe0abc>
   10b30:	00c00044 	movi	r3,1
   10b34:	003fee06 	br	10af0 <__alt_data_end+0xfffe0af0>

00010b38 <__modsi3>:
   10b38:	20001716 	blt	r4,zero,10b98 <__modsi3+0x60>
   10b3c:	000f883a 	mov	r7,zero
   10b40:	2005883a 	mov	r2,r4
   10b44:	28001216 	blt	r5,zero,10b90 <__modsi3+0x58>
   10b48:	2900162e 	bgeu	r5,r4,10ba4 <__modsi3+0x6c>
   10b4c:	01800804 	movi	r6,32
   10b50:	00c00044 	movi	r3,1
   10b54:	00000106 	br	10b5c <__modsi3+0x24>
   10b58:	30000a26 	beq	r6,zero,10b84 <__modsi3+0x4c>
   10b5c:	294b883a 	add	r5,r5,r5
   10b60:	31bfffc4 	addi	r6,r6,-1
   10b64:	18c7883a 	add	r3,r3,r3
   10b68:	293ffb36 	bltu	r5,r4,10b58 <__alt_data_end+0xfffe0b58>
   10b6c:	18000526 	beq	r3,zero,10b84 <__modsi3+0x4c>
   10b70:	1806d07a 	srli	r3,r3,1
   10b74:	11400136 	bltu	r2,r5,10b7c <__modsi3+0x44>
   10b78:	1145c83a 	sub	r2,r2,r5
   10b7c:	280ad07a 	srli	r5,r5,1
   10b80:	183ffb1e 	bne	r3,zero,10b70 <__alt_data_end+0xfffe0b70>
   10b84:	38000126 	beq	r7,zero,10b8c <__modsi3+0x54>
   10b88:	0085c83a 	sub	r2,zero,r2
   10b8c:	f800283a 	ret
   10b90:	014bc83a 	sub	r5,zero,r5
   10b94:	003fec06 	br	10b48 <__alt_data_end+0xfffe0b48>
   10b98:	0109c83a 	sub	r4,zero,r4
   10b9c:	01c00044 	movi	r7,1
   10ba0:	003fe706 	br	10b40 <__alt_data_end+0xfffe0b40>
   10ba4:	00c00044 	movi	r3,1
   10ba8:	003ff106 	br	10b70 <__alt_data_end+0xfffe0b70>

00010bac <__udivsi3>:
   10bac:	200d883a 	mov	r6,r4
   10bb0:	2900152e 	bgeu	r5,r4,10c08 <__udivsi3+0x5c>
   10bb4:	28001416 	blt	r5,zero,10c08 <__udivsi3+0x5c>
   10bb8:	00800804 	movi	r2,32
   10bbc:	00c00044 	movi	r3,1
   10bc0:	00000206 	br	10bcc <__udivsi3+0x20>
   10bc4:	10000e26 	beq	r2,zero,10c00 <__udivsi3+0x54>
   10bc8:	28000516 	blt	r5,zero,10be0 <__udivsi3+0x34>
   10bcc:	294b883a 	add	r5,r5,r5
   10bd0:	10bfffc4 	addi	r2,r2,-1
   10bd4:	18c7883a 	add	r3,r3,r3
   10bd8:	293ffa36 	bltu	r5,r4,10bc4 <__alt_data_end+0xfffe0bc4>
   10bdc:	18000826 	beq	r3,zero,10c00 <__udivsi3+0x54>
   10be0:	0005883a 	mov	r2,zero
   10be4:	31400236 	bltu	r6,r5,10bf0 <__udivsi3+0x44>
   10be8:	314dc83a 	sub	r6,r6,r5
   10bec:	10c4b03a 	or	r2,r2,r3
   10bf0:	1806d07a 	srli	r3,r3,1
   10bf4:	280ad07a 	srli	r5,r5,1
   10bf8:	183ffa1e 	bne	r3,zero,10be4 <__alt_data_end+0xfffe0be4>
   10bfc:	f800283a 	ret
   10c00:	0005883a 	mov	r2,zero
   10c04:	f800283a 	ret
   10c08:	00c00044 	movi	r3,1
   10c0c:	003ff406 	br	10be0 <__alt_data_end+0xfffe0be0>

00010c10 <__umodsi3>:
   10c10:	2005883a 	mov	r2,r4
   10c14:	2900122e 	bgeu	r5,r4,10c60 <__umodsi3+0x50>
   10c18:	28001116 	blt	r5,zero,10c60 <__umodsi3+0x50>
   10c1c:	01800804 	movi	r6,32
   10c20:	00c00044 	movi	r3,1
   10c24:	00000206 	br	10c30 <__umodsi3+0x20>
   10c28:	30000c26 	beq	r6,zero,10c5c <__umodsi3+0x4c>
   10c2c:	28000516 	blt	r5,zero,10c44 <__umodsi3+0x34>
   10c30:	294b883a 	add	r5,r5,r5
   10c34:	31bfffc4 	addi	r6,r6,-1
   10c38:	18c7883a 	add	r3,r3,r3
   10c3c:	293ffa36 	bltu	r5,r4,10c28 <__alt_data_end+0xfffe0c28>
   10c40:	18000626 	beq	r3,zero,10c5c <__umodsi3+0x4c>
   10c44:	1806d07a 	srli	r3,r3,1
   10c48:	11400136 	bltu	r2,r5,10c50 <__umodsi3+0x40>
   10c4c:	1145c83a 	sub	r2,r2,r5
   10c50:	280ad07a 	srli	r5,r5,1
   10c54:	183ffb1e 	bne	r3,zero,10c44 <__alt_data_end+0xfffe0c44>
   10c58:	f800283a 	ret
   10c5c:	f800283a 	ret
   10c60:	00c00044 	movi	r3,1
   10c64:	003ff706 	br	10c44 <__alt_data_end+0xfffe0c44>

00010c68 <__mulsi3>:
   10c68:	0005883a 	mov	r2,zero
   10c6c:	20000726 	beq	r4,zero,10c8c <__mulsi3+0x24>
   10c70:	20c0004c 	andi	r3,r4,1
   10c74:	2008d07a 	srli	r4,r4,1
   10c78:	18000126 	beq	r3,zero,10c80 <__mulsi3+0x18>
   10c7c:	1145883a 	add	r2,r2,r5
   10c80:	294b883a 	add	r5,r5,r5
   10c84:	203ffa1e 	bne	r4,zero,10c70 <__alt_data_end+0xfffe0c70>
   10c88:	f800283a 	ret
   10c8c:	f800283a 	ret

00010c90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10c90:	deffff04 	addi	sp,sp,-4
   10c94:	010000b4 	movhi	r4,2
   10c98:	01400074 	movhi	r5,1
   10c9c:	dfc00015 	stw	ra,0(sp)
   10ca0:	21003e04 	addi	r4,r4,248
   10ca4:	29441b04 	addi	r5,r5,4204

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10ca8:	2140061e 	bne	r4,r5,10cc4 <alt_load+0x34>
   10cac:	01000074 	movhi	r4,1
   10cb0:	01400074 	movhi	r5,1
   10cb4:	21000804 	addi	r4,r4,32
   10cb8:	29400804 	addi	r5,r5,32
   10cbc:	2140121e 	bne	r4,r5,10d08 <alt_load+0x78>
   10cc0:	00000b06 	br	10cf0 <alt_load+0x60>
   10cc4:	00c000b4 	movhi	r3,2
   10cc8:	18c07a04 	addi	r3,r3,488
   10ccc:	1907c83a 	sub	r3,r3,r4
   10cd0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10cd4:	10fff526 	beq	r2,r3,10cac <__alt_data_end+0xfffe0cac>
    {
      *to++ = *from++;
   10cd8:	114f883a 	add	r7,r2,r5
   10cdc:	39c00017 	ldw	r7,0(r7)
   10ce0:	110d883a 	add	r6,r2,r4
   10ce4:	10800104 	addi	r2,r2,4
   10ce8:	31c00015 	stw	r7,0(r6)
   10cec:	003ff906 	br	10cd4 <__alt_data_end+0xfffe0cd4>
   10cf0:	010000b4 	movhi	r4,2
   10cf4:	014000b4 	movhi	r5,2
   10cf8:	21000004 	addi	r4,r4,0
   10cfc:	29400004 	addi	r5,r5,0

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10d00:	2140101e 	bne	r4,r5,10d44 <alt_load+0xb4>
   10d04:	00000b06 	br	10d34 <alt_load+0xa4>
   10d08:	00c00074 	movhi	r3,1
   10d0c:	18c00804 	addi	r3,r3,32
   10d10:	1907c83a 	sub	r3,r3,r4
   10d14:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10d18:	10fff526 	beq	r2,r3,10cf0 <__alt_data_end+0xfffe0cf0>
    {
      *to++ = *from++;
   10d1c:	114f883a 	add	r7,r2,r5
   10d20:	39c00017 	ldw	r7,0(r7)
   10d24:	110d883a 	add	r6,r2,r4
   10d28:	10800104 	addi	r2,r2,4
   10d2c:	31c00015 	stw	r7,0(r6)
   10d30:	003ff906 	br	10d18 <__alt_data_end+0xfffe0d18>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10d34:	001105c0 	call	1105c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10d38:	dfc00017 	ldw	ra,0(sp)
   10d3c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10d40:	00110601 	jmpi	11060 <alt_icache_flush_all>
   10d44:	00c000b4 	movhi	r3,2
   10d48:	18c03e04 	addi	r3,r3,248
   10d4c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10d50:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10d54:	18bff726 	beq	r3,r2,10d34 <__alt_data_end+0xfffe0d34>
    {
      *to++ = *from++;
   10d58:	114f883a 	add	r7,r2,r5
   10d5c:	39c00017 	ldw	r7,0(r7)
   10d60:	110d883a 	add	r6,r2,r4
   10d64:	10800104 	addi	r2,r2,4
   10d68:	31c00015 	stw	r7,0(r6)
   10d6c:	003ff906 	br	10d54 <__alt_data_end+0xfffe0d54>

00010d70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d70:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d74:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d78:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d7c:	0010e340 	call	10e34 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d80:	0010e540 	call	10e54 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d84:	d1a00617 	ldw	r6,-32744(gp)
   10d88:	d1600717 	ldw	r5,-32740(gp)
   10d8c:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10d90:	dfc00017 	ldw	ra,0(sp)
   10d94:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d98:	001012c1 	jmpi	1012c <main>

00010d9c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10d9c:	defffe04 	addi	sp,sp,-8
   10da0:	dc000015 	stw	r16,0(sp)
   10da4:	dfc00115 	stw	ra,4(sp)
   10da8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10dac:	00103d40 	call	103d4 <strlen>
   10db0:	010000b4 	movhi	r4,2
   10db4:	000f883a 	mov	r7,zero
   10db8:	100d883a 	mov	r6,r2
   10dbc:	800b883a 	mov	r5,r16
   10dc0:	21007804 	addi	r4,r4,480
#else
    return fputs(str, stdout);
#endif
#endif
}
   10dc4:	dfc00117 	ldw	ra,4(sp)
   10dc8:	dc000017 	ldw	r16,0(sp)
   10dcc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10dd0:	00110281 	jmpi	11028 <altera_avalon_jtag_uart_write>

00010dd4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10dd4:	00800044 	movi	r2,1
   10dd8:	20800226 	beq	r4,r2,10de4 <write+0x10>
   10ddc:	00800084 	movi	r2,2
   10de0:	2080041e 	bne	r4,r2,10df4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10de4:	010000b4 	movhi	r4,2
   10de8:	000f883a 	mov	r7,zero
   10dec:	21007804 	addi	r4,r4,480
   10df0:	00110281 	jmpi	11028 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10df4:	d0a00317 	ldw	r2,-32756(gp)
   10df8:	10000926 	beq	r2,zero,10e20 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10dfc:	deffff04 	addi	sp,sp,-4
   10e00:	dfc00015 	stw	ra,0(sp)
   10e04:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10e08:	00c01444 	movi	r3,81
   10e0c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10e10:	00bfffc4 	movi	r2,-1
   10e14:	dfc00017 	ldw	ra,0(sp)
   10e18:	dec00104 	addi	sp,sp,4
   10e1c:	f800283a 	ret
   10e20:	d0a00504 	addi	r2,gp,-32748
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10e24:	00c01444 	movi	r3,81
   10e28:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10e2c:	00bfffc4 	movi	r2,-1
   10e30:	f800283a 	ret

00010e34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10e34:	deffff04 	addi	sp,sp,-4
   10e38:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   10e3c:	00110640 	call	11064 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10e40:	00800044 	movi	r2,1
   10e44:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10e48:	dfc00017 	ldw	ra,0(sp)
   10e4c:	dec00104 	addi	sp,sp,4
   10e50:	f800283a 	ret

00010e54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10e54:	f800283a 	ret

00010e58 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   10e58:	20800137 	ldwio	r2,4(r4)
}
   10e5c:	1144703a 	and	r2,r2,r5
   10e60:	f800283a 	ret

00010e64 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   10e64:	20800337 	ldwio	r2,12(r4)
}
   10e68:	1144703a 	and	r2,r2,r5
   10e6c:	f800283a 	ret

00010e70 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   10e70:	20800437 	ldwio	r2,16(r4)
   10e74:	f800283a 	ret

00010e78 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   10e78:	20800537 	ldwio	r2,20(r4)
   10e7c:	f800283a 	ret

00010e80 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   10e80:	20800237 	ldwio	r2,8(r4)
}
   10e84:	1144703a 	and	r2,r2,r5
   10e88:	f800283a 	ret

00010e8c <altera_avalon_fifo_read_level>:
   10e8c:	20800037 	ldwio	r2,0(r4)
   10e90:	f800283a 	ret

00010e94 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   10e94:	21000204 	addi	r4,r4,8
   10e98:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   10e9c:	20800037 	ldwio	r2,0(r4)
   10ea0:	114a703a 	and	r5,r2,r5
   10ea4:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   10ea8:	0085c83a 	sub	r2,zero,r2
   10eac:	f800283a 	ret

00010eb0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   10eb0:	21000304 	addi	r4,r4,12
   10eb4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   10eb8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   10ebc:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   10ec0:	28c00126 	beq	r5,r3,10ec8 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   10ec4:	00bfff84 	movi	r2,-2
}
   10ec8:	f800283a 	ret

00010ecc <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   10ecc:	21000404 	addi	r4,r4,16
   10ed0:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   10ed4:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   10ed8:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   10edc:	28c00126 	beq	r5,r3,10ee4 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   10ee0:	00bfff44 	movi	r2,-3
}
   10ee4:	f800283a 	ret

00010ee8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   10ee8:	21000504 	addi	r4,r4,20
   10eec:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   10ef0:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   10ef4:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   10ef8:	28c00126 	beq	r5,r3,10f00 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   10efc:	00bfff44 	movi	r2,-3
}
   10f00:	f800283a 	ret

00010f04 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   10f04:	defffb04 	addi	sp,sp,-20
   10f08:	dcc00315 	stw	r19,12(sp)
   10f0c:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   10f10:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   10f14:	dc800215 	stw	r18,8(sp)
   10f18:	dc400115 	stw	r17,4(sp)
   10f1c:	dc000015 	stw	r16,0(sp)
   10f20:	dfc00415 	stw	ra,16(sp)
   10f24:	2021883a 	mov	r16,r4
   10f28:	3023883a 	mov	r17,r6
   10f2c:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   10f30:	0010e940 	call	10e94 <altera_avalon_fifo_clear_event>
   10f34:	10000f1e 	bne	r2,zero,10f74 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   10f38:	980b883a 	mov	r5,r19
   10f3c:	8009883a 	mov	r4,r16
   10f40:	0010eb00 	call	10eb0 <altera_avalon_fifo_write_ienable>
   10f44:	10000d1e 	bne	r2,zero,10f7c <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   10f48:	900b883a 	mov	r5,r18
   10f4c:	8009883a 	mov	r4,r16
   10f50:	0010ecc0 	call	10ecc <altera_avalon_fifo_write_almostfull>
   10f54:	10000226 	beq	r2,zero,10f60 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   10f58:	00bfff44 	movi	r2,-3
   10f5c:	00000806 	br	10f80 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   10f60:	880b883a 	mov	r5,r17
   10f64:	8009883a 	mov	r4,r16
   10f68:	0010ee80 	call	10ee8 <altera_avalon_fifo_write_almostempty>
   10f6c:	10000426 	beq	r2,zero,10f80 <altera_avalon_fifo_init+0x7c>
   10f70:	003ff906 	br	10f58 <__alt_data_end+0xfffe0f58>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   10f74:	00bfffc4 	movi	r2,-1
   10f78:	00000106 	br	10f80 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   10f7c:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   10f80:	dfc00417 	ldw	ra,16(sp)
   10f84:	dcc00317 	ldw	r19,12(sp)
   10f88:	dc800217 	ldw	r18,8(sp)
   10f8c:	dc400117 	ldw	r17,4(sp)
   10f90:	dc000017 	ldw	r16,0(sp)
   10f94:	dec00504 	addi	sp,sp,20
   10f98:	f800283a 	ret

00010f9c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   10f9c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   10fa0:	1080004c 	andi	r2,r2,1
   10fa4:	1000021e 	bne	r2,zero,10fb0 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   10fa8:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   10fac:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   10fb0:	00bfff04 	movi	r2,-4
    }
}
   10fb4:	f800283a 	ret

00010fb8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   10fb8:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   10fbc:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   10fc0:	1080008c 	andi	r2,r2,2
   10fc4:	1000041e 	bne	r2,zero,10fd8 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   10fc8:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   10fcc:	20c00037 	ldwio	r3,0(r4)
   10fd0:	30c00015 	stw	r3,0(r6)
   10fd4:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   10fd8:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   10fdc:	f800283a 	ret

00010fe0 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   10fe0:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   10fe4:	1080008c 	andi	r2,r2,2
   10fe8:	1000021e 	bne	r2,zero,10ff4 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   10fec:	20800037 	ldwio	r2,0(r4)
   10ff0:	f800283a 	ret
    }
    return 0;
   10ff4:	0005883a 	mov	r2,zero
}
   10ff8:	f800283a 	ret

00010ffc <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   10ffc:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11000:	1080004c 	andi	r2,r2,1
   11004:	1000021e 	bne	r2,zero,11010 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   11008:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   1100c:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   11010:	00bfff04 	movi	r2,-4
    }
}
   11014:	f800283a 	ret

00011018 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   11018:	20800137 	ldwio	r2,4(r4)
   1101c:	f800283a 	ret

00011020 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   11020:	20800037 	ldwio	r2,0(r4)
   11024:	f800283a 	ret

00011028 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11028:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1102c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11030:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11034:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11038:	2980072e 	bgeu	r5,r6,11058 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1103c:	38c00037 	ldwio	r3,0(r7)
   11040:	18ffffec 	andhi	r3,r3,65535
   11044:	183ffc26 	beq	r3,zero,11038 <__alt_data_end+0xfffe1038>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11048:	28c00007 	ldb	r3,0(r5)
   1104c:	20c00035 	stwio	r3,0(r4)
   11050:	29400044 	addi	r5,r5,1
   11054:	003ff806 	br	11038 <__alt_data_end+0xfffe1038>

  return count;
}
   11058:	f800283a 	ret

0001105c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1105c:	f800283a 	ret

00011060 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11060:	f800283a 	ret

00011064 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11064:	000170fa 	wrctl	ienable,zero
   11068:	f800283a 	ret
