
NIOS_1.elf:     file format elf32-littlenios2
NIOS_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00001170 memsz 0x00001170 flags r-x
    LOAD off    0x00003170 vaddr 0x00021170 paddr 0x00021260 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00003350 vaddr 0x00021350 paddr 0x00021350 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00003260  2**0
                  CONTENTS
  2 .text         00001088  00020000  00020000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  00021088  00021088  00003088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00021170  00021260  00003170  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00021350  00021350  00003350  2**2
                  ALLOC, SMALL_DATA
  6 .Inst_mem_1   00000000  00010020  00010020  00003260  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00021364  00021364  00003260  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002f8  00000000  00000000  00003288  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004692  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001699  00000000  00000000  00007c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001933  00000000  00000000  000092ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000540  00000000  00000000  0000abe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000012f1  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000016bc  00000000  00000000  0000c411  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000dad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000240  00000000  00000000  0000dae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000f1c6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000f1c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000f1d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000f1d6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000f1d7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000f1e2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000f1ed  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000007  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000054  00000000  00000000  0000f1ff  2**0
                  CONTENTS, READONLY
 27 .jdi          00007547  00000000  00000000  0000f253  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0008965e  00000000  00000000  0001679a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00020000 l    d  .text	00000000 .text
00021088 l    d  .rodata	00000000 .rodata
00021170 l    d  .rwdata	00000000 .rwdata
00021350 l    d  .bss	00000000 .bss
00010020 l    d  .Inst_mem_1	00000000 .Inst_mem_1
00021364 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NIOS_1_bsp//obj/HAL/src/crt0.o
00020038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 NIOS_1.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002040c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00021170 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00020d8c g     F .text	0000002c alt_main
0002035c g     F .text	00000080 _puts_r
00020ee8 g     F .text	0000001c altera_avalon_fifo_write_almostfull
00021260 g       *ABS*	00000000 __flash_rwdata_start
00020310 g     F .text	0000004c printf
00020f20 g     F .text	00000098 altera_avalon_fifo_init
00020fb8 g     F .text	0000001c altera_avalon_fifo_write_fifo
00020db8 g     F .text	00000038 alt_putstr
00021080 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
0002103c g     F .text	00000008 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00021354 g     O .bss	00000004 errno
0002135c g     O .bss	00000004 alt_argv
00029250 g       *ABS*	00000000 _gp
00020eb0 g     F .text	0000001c altera_avalon_fifo_clear_event
000203dc g     F .text	00000014 puts
000202d4 g     F .text	0000003c _printf_r
00020bc8 g     F .text	00000064 .hidden __udivsi3
00021250 g     O .rwdata	00000004 _global_impure_ptr
00021364 g       *ABS*	00000000 __bss_end
00021078 g     F .text	00000004 alt_dcache_flush_all
00020ecc g     F .text	0000001c altera_avalon_fifo_write_ienable
00021260 g       *ABS*	00000000 __ram_rwdata_end
00020e94 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00020df0 g     F .text	00000060 write
00021170 g       *ABS*	00000000 __ram_rodata_end
00021258 g     O .rwdata	00000004 jtag_uart_0
00020c2c g     F .text	00000058 .hidden __umodsi3
00021364 g       *ABS*	00000000 end
00020e9c g     F .text	0000000c altera_avalon_fifo_read_event
00030000 g       *ABS*	00000000 __alt_stack_pointer
00021044 g     F .text	00000034 altera_avalon_jtag_uart_write
00021350 g     O .bss	00000004 input_fifo_wrclk_irq_event
00020ffc g     F .text	0000001c altera_avalon_fifo_read_fifo
00020478 g     F .text	0000052c ___vfprintf_internal_r
00020000 g     F .text	0000003c _start
00020e70 g     F .text	00000004 alt_sys_init
00020c84 g     F .text	00000028 .hidden __mulsi3
00021170 g       *ABS*	00000000 __ram_rwdata_start
00021088 g       *ABS*	00000000 __ram_rodata_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00021364 g       *ABS*	00000000 __alt_stack_base
0002003c g     F .text	000000d0 print_status
00020e74 g     F .text	0000000c altera_avalon_fifo_read_status
00021034 g     F .text	00000008 altera_avalon_fifo_read_other_info
000209c0 g     F .text	000000b8 __sfvwrite_small_dev
00021350 g       *ABS*	00000000 __bss_start
0002010c g     F .text	000001c8 main
00021358 g     O .bss	00000004 alt_envp
00020ea8 g     F .text	00000008 altera_avalon_fifo_read_level
0002125c g     O .rwdata	00000004 alt_errno
00020ad0 g     F .text	00000084 .hidden __divsi3
00021088 g       *ABS*	00000000 __flash_rodata_start
00020e50 g     F .text	00000020 alt_irq_init
00020a78 g     F .text	00000058 _write_r
00021254 g     O .rwdata	00000004 _impure_ptr
00021360 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00021018 g     F .text	0000001c altera_avalon_fifo_write_other_info
00021260 g       *ABS*	00000000 _edata
00021364 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00020b54 g     F .text	00000074 .hidden __modsi3
00020e80 g     F .text	0000000c altera_avalon_fifo_read_ienable
00030000 g       *ABS*	00000000 __alt_data_end
00010000 g       *ABS*	00000000 __alt_mem_Inst_mem_1
0001000c g       .entry	00000000 _exit
00020e8c g     F .text	00000008 altera_avalon_fifo_read_almostfull
000203f0 g     F .text	0000001c strlen
00020fd4 g     F .text	00000028 altera_avalon_read_fifo
0002107c g     F .text	00000004 alt_icache_flush_all
000209a4 g     F .text	0000001c __vfprintf_internal
00020f04 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00020cac g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   10004:	08400014 	ori	at,at,0
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00020000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20000:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20008:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2000c:	d6a49414 	ori	gp,gp,37456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20010:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20014:	1084d414 	ori	r2,r2,4944

    movhi r3, %hi(__bss_end)
   20018:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2001c:	18c4d914 	ori	r3,r3,4964

    beq r2, r3, 1f
   20020:	10c00326 	beq	r2,r3,20030 <_start+0x30>

0:
    stw zero, (r2)
   20024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2002c:	10fffd36 	bltu	r2,r3,20024 <__alt_data_end+0xffff0024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20030:	0020cac0 	call	20cac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20034:	0020d8c0 	call	20d8c <alt_main>

00020038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20038:	003fff06 	br	20038 <__alt_data_end+0xffff0038>

0002003c <print_status>:

}


void print_status(alt_u32 control_base_address)
{
   2003c:	defffd04 	addi	sp,sp,-12
   20040:	dc000015 	stw	r16,0(sp)
   20044:	2021883a 	mov	r16,r4
printf("--------------------------------------\n");
   20048:	010000b4 	movhi	r4,2
   2004c:	21042204 	addi	r4,r4,4232

}


void print_status(alt_u32 control_base_address)
{
   20050:	dfc00215 	stw	ra,8(sp)
   20054:	dc400115 	stw	r17,4(sp)
printf("--------------------------------------\n");
   20058:	00203dc0 	call	203dc <puts>
printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   2005c:	8009883a 	mov	r4,r16
   20060:	0020ea80 	call	20ea8 <altera_avalon_fifo_read_level>
   20064:	010000b4 	movhi	r4,2
   20068:	100b883a 	mov	r5,r2
   2006c:	21042c04 	addi	r4,r4,4272
   20070:	00203100 	call	20310 <printf>
printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   20074:	04400fc4 	movi	r17,63
   20078:	880b883a 	mov	r5,r17
   2007c:	8009883a 	mov	r4,r16
   20080:	0020e740 	call	20e74 <altera_avalon_fifo_read_status>
   20084:	010000b4 	movhi	r4,2
   20088:	100b883a 	mov	r5,r2
   2008c:	21042f04 	addi	r4,r4,4284
   20090:	00203100 	call	20310 <printf>
ALTERA_AVALON_FIFO_STATUS_ALL) );
printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   20094:	880b883a 	mov	r5,r17
   20098:	8009883a 	mov	r4,r16
   2009c:	0020e9c0 	call	20e9c <altera_avalon_fifo_read_event>
   200a0:	010000b4 	movhi	r4,2
   200a4:	100b883a 	mov	r5,r2
   200a8:	21043304 	addi	r4,r4,4300
   200ac:	00203100 	call	20310 <printf>
ALTERA_AVALON_FIFO_EVENT_ALL) );
printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   200b0:	880b883a 	mov	r5,r17
   200b4:	8009883a 	mov	r4,r16
   200b8:	0020e800 	call	20e80 <altera_avalon_fifo_read_ienable>
   200bc:	010000b4 	movhi	r4,2
   200c0:	100b883a 	mov	r5,r2
   200c4:	21043604 	addi	r4,r4,4312
   200c8:	00203100 	call	20310 <printf>
ALTERA_AVALON_FIFO_IENABLE_ALL) );
printf("ALMOSTEMPTY = %u\n",
   200cc:	8009883a 	mov	r4,r16
   200d0:	0020e940 	call	20e94 <altera_avalon_fifo_read_almostempty>
   200d4:	010000b4 	movhi	r4,2
   200d8:	100b883a 	mov	r5,r2
   200dc:	21043a04 	addi	r4,r4,4328
   200e0:	00203100 	call	20310 <printf>
altera_avalon_fifo_read_almostempty(control_base_address) );
printf("ALMOSTFULL = %u\n\n",
   200e4:	8009883a 	mov	r4,r16
   200e8:	0020e8c0 	call	20e8c <altera_avalon_fifo_read_almostfull>
   200ec:	010000b4 	movhi	r4,2
   200f0:	100b883a 	mov	r5,r2
   200f4:	21043f04 	addi	r4,r4,4348
altera_avalon_fifo_read_almostfull(control_base_address));
}
   200f8:	dfc00217 	ldw	ra,8(sp)
   200fc:	dc400117 	ldw	r17,4(sp)
   20100:	dc000017 	ldw	r16,0(sp)
   20104:	dec00304 	addi	sp,sp,12
ALTERA_AVALON_FIFO_EVENT_ALL) );
printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
ALTERA_AVALON_FIFO_IENABLE_ALL) );
printf("ALMOSTEMPTY = %u\n",
altera_avalon_fifo_read_almostempty(control_base_address) );
printf("ALMOSTFULL = %u\n\n",
   20108:	00203101 	jmpi	20310 <printf>

0002010c <main>:
}*/

int main()
{
  int value = 0;
  alt_putstr("Hello from Nios II!\n");
   2010c:	010000b4 	movhi	r4,2
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

int main()
{
   20110:	deffff04 	addi	sp,sp,-4
  int value = 0;
  alt_putstr("Hello from Nios II!\n");
   20114:	21044404 	addi	r4,r4,4368
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

int main()
{
   20118:	dfc00015 	stw	ra,0(sp)
  int value = 0;
  alt_putstr("Hello from Nios II!\n");
   2011c:	0020db80 	call	20db8 <alt_putstr>
input_fifo_wrclk_irq_event_ptr, handle_input_fifo_wrclk_interrupts );

*/

int return_code = ALTERA_AVALON_FIFO_OK;
return_code = altera_avalon_fifo_init(control_base_address,
   20120:	010000f4 	movhi	r4,3
   20124:	01c002c4 	movi	r7,11
   20128:	01800084 	movi	r6,2
   2012c:	000b883a 	mov	r5,zero
   20130:	21040004 	addi	r4,r4,4096
   20134:	0020f200 	call	20f20 <altera_avalon_fifo_init>
   20138:	010000f4 	movhi	r4,3
   2013c:	01c002c4 	movi	r7,11
   20140:	01800084 	movi	r6,2
   20144:	000b883a 	mov	r5,zero
   20148:	21040804 	addi	r4,r4,4128
   2014c:	0020f200 	call	20f20 <altera_avalon_fifo_init>

  //initialization of FIFOs
  init_input_fifo_wrclk_control(MM2STFIFO_1_IN_CSR_BASE);
  init_input_fifo_wrclk_control(ST2MMFIFO_1_IN_CSR_BASE);

  alt_putstr("MM2STFIFO status:\n");
   20150:	010000b4 	movhi	r4,2
   20154:	21044a04 	addi	r4,r4,4392
   20158:	0020db80 	call	20db8 <alt_putstr>
  print_status(MM2STFIFO_1_IN_CSR_BASE);
   2015c:	010000f4 	movhi	r4,3
   20160:	21040004 	addi	r4,r4,4096
   20164:	002003c0 	call	2003c <print_status>

  alt_putstr("ST2MMFIFO status:\n");
   20168:	010000b4 	movhi	r4,2
   2016c:	21044f04 	addi	r4,r4,4412
   20170:	0020db80 	call	20db8 <alt_putstr>
  print_status(ST2MMFIFO_1_IN_CSR_BASE);
   20174:	010000f4 	movhi	r4,3
   20178:	21040804 	addi	r4,r4,4128
   2017c:	002003c0 	call	2003c <print_status>

  /*alt_putstr("write to FIFO\n");
  altera_avalon_fifo_write_fifo(MM2STFIFO_1_IN_BASE, MM2STFIFO_1_IN_CSR_BASE,85);*/
  //altera_avalon_fifo_write_fifo(MM2STFIFO_1_IN_BASE, MM2STFIFO_1_IN_CSR_BASE,69);

  alt_putstr("read from FIFO:\n");
   20180:	010000b4 	movhi	r4,2
   20184:	21045404 	addi	r4,r4,4432
   20188:	0020db80 	call	20db8 <alt_putstr>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   2018c:	014000f4 	movhi	r5,3
   20190:	010000f4 	movhi	r4,3
   20194:	29440804 	addi	r5,r5,4128
   20198:	21041004 	addi	r4,r4,4160
   2019c:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   201a0:	010000b4 	movhi	r4,2
   201a4:	100b883a 	mov	r5,r2
   201a8:	21045904 	addi	r4,r4,4452
   201ac:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   201b0:	014000f4 	movhi	r5,3
   201b4:	010000f4 	movhi	r4,3
   201b8:	29440804 	addi	r5,r5,4128
   201bc:	21041004 	addi	r4,r4,4160
   201c0:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   201c4:	010000b4 	movhi	r4,2
   201c8:	100b883a 	mov	r5,r2
   201cc:	21045904 	addi	r4,r4,4452
   201d0:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   201d4:	014000f4 	movhi	r5,3
   201d8:	010000f4 	movhi	r4,3
   201dc:	29440804 	addi	r5,r5,4128
   201e0:	21041004 	addi	r4,r4,4160
   201e4:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   201e8:	010000b4 	movhi	r4,2
   201ec:	100b883a 	mov	r5,r2
   201f0:	21045904 	addi	r4,r4,4452
   201f4:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   201f8:	014000f4 	movhi	r5,3
   201fc:	010000f4 	movhi	r4,3
   20200:	29440804 	addi	r5,r5,4128
   20204:	21041004 	addi	r4,r4,4160
   20208:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   2020c:	010000b4 	movhi	r4,2
   20210:	100b883a 	mov	r5,r2
   20214:	21045904 	addi	r4,r4,4452
   20218:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   2021c:	014000f4 	movhi	r5,3
   20220:	010000f4 	movhi	r4,3
   20224:	29440804 	addi	r5,r5,4128
   20228:	21041004 	addi	r4,r4,4160
   2022c:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   20230:	010000b4 	movhi	r4,2
   20234:	100b883a 	mov	r5,r2
   20238:	21045904 	addi	r4,r4,4452
   2023c:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   20240:	014000f4 	movhi	r5,3
   20244:	010000f4 	movhi	r4,3
   20248:	29440804 	addi	r5,r5,4128
   2024c:	21041004 	addi	r4,r4,4160
   20250:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   20254:	010000b4 	movhi	r4,2
   20258:	100b883a 	mov	r5,r2
   2025c:	21045904 	addi	r4,r4,4452
   20260:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   20264:	014000f4 	movhi	r5,3
   20268:	010000f4 	movhi	r4,3
   2026c:	29440804 	addi	r5,r5,4128
   20270:	21041004 	addi	r4,r4,4160
   20274:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   20278:	010000b4 	movhi	r4,2
   2027c:	100b883a 	mov	r5,r2
   20280:	21045904 	addi	r4,r4,4452
   20284:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   20288:	014000f4 	movhi	r5,3
   2028c:	010000f4 	movhi	r4,3
   20290:	29440804 	addi	r5,r5,4128
   20294:	21041004 	addi	r4,r4,4160
   20298:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   2029c:	010000b4 	movhi	r4,2
   202a0:	100b883a 	mov	r5,r2
   202a4:	21045904 	addi	r4,r4,4452
   202a8:	00203100 	call	20310 <printf>
  value = altera_avalon_fifo_read_fifo(ST2MMFIFO_1_OUT_BASE, ST2MMFIFO_1_IN_CSR_BASE);
   202ac:	014000f4 	movhi	r5,3
   202b0:	010000f4 	movhi	r4,3
   202b4:	29440804 	addi	r5,r5,4128
   202b8:	21041004 	addi	r4,r4,4160
   202bc:	0020ffc0 	call	20ffc <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
   202c0:	010000b4 	movhi	r4,2
   202c4:	100b883a 	mov	r5,r2
   202c8:	21045904 	addi	r4,r4,4452
   202cc:	00203100 	call	20310 <printf>
   202d0:	003fff06 	br	202d0 <__alt_data_end+0xffff02d0>

000202d4 <_printf_r>:
   202d4:	defffd04 	addi	sp,sp,-12
   202d8:	dfc00015 	stw	ra,0(sp)
   202dc:	d9800115 	stw	r6,4(sp)
   202e0:	d9c00215 	stw	r7,8(sp)
   202e4:	20c00217 	ldw	r3,8(r4)
   202e8:	018000b4 	movhi	r6,2
   202ec:	31827004 	addi	r6,r6,2496
   202f0:	19800115 	stw	r6,4(r3)
   202f4:	280d883a 	mov	r6,r5
   202f8:	21400217 	ldw	r5,8(r4)
   202fc:	d9c00104 	addi	r7,sp,4
   20300:	00204780 	call	20478 <___vfprintf_internal_r>
   20304:	dfc00017 	ldw	ra,0(sp)
   20308:	dec00304 	addi	sp,sp,12
   2030c:	f800283a 	ret

00020310 <printf>:
   20310:	defffc04 	addi	sp,sp,-16
   20314:	dfc00015 	stw	ra,0(sp)
   20318:	d9400115 	stw	r5,4(sp)
   2031c:	d9800215 	stw	r6,8(sp)
   20320:	d9c00315 	stw	r7,12(sp)
   20324:	008000b4 	movhi	r2,2
   20328:	10849504 	addi	r2,r2,4692
   2032c:	10800017 	ldw	r2,0(r2)
   20330:	014000b4 	movhi	r5,2
   20334:	29427004 	addi	r5,r5,2496
   20338:	10c00217 	ldw	r3,8(r2)
   2033c:	d9800104 	addi	r6,sp,4
   20340:	19400115 	stw	r5,4(r3)
   20344:	200b883a 	mov	r5,r4
   20348:	11000217 	ldw	r4,8(r2)
   2034c:	00209a40 	call	209a4 <__vfprintf_internal>
   20350:	dfc00017 	ldw	ra,0(sp)
   20354:	dec00404 	addi	sp,sp,16
   20358:	f800283a 	ret

0002035c <_puts_r>:
   2035c:	defffd04 	addi	sp,sp,-12
   20360:	dc000015 	stw	r16,0(sp)
   20364:	2021883a 	mov	r16,r4
   20368:	2809883a 	mov	r4,r5
   2036c:	dfc00215 	stw	ra,8(sp)
   20370:	dc400115 	stw	r17,4(sp)
   20374:	2823883a 	mov	r17,r5
   20378:	00203f00 	call	203f0 <strlen>
   2037c:	81400217 	ldw	r5,8(r16)
   20380:	010000b4 	movhi	r4,2
   20384:	21027004 	addi	r4,r4,2496
   20388:	29000115 	stw	r4,4(r5)
   2038c:	100f883a 	mov	r7,r2
   20390:	880d883a 	mov	r6,r17
   20394:	8009883a 	mov	r4,r16
   20398:	00209c00 	call	209c0 <__sfvwrite_small_dev>
   2039c:	00ffffc4 	movi	r3,-1
   203a0:	10c00926 	beq	r2,r3,203c8 <_puts_r+0x6c>
   203a4:	81400217 	ldw	r5,8(r16)
   203a8:	018000b4 	movhi	r6,2
   203ac:	01c00044 	movi	r7,1
   203b0:	28800117 	ldw	r2,4(r5)
   203b4:	31844304 	addi	r6,r6,4364
   203b8:	8009883a 	mov	r4,r16
   203bc:	103ee83a 	callr	r2
   203c0:	10bfffe0 	cmpeqi	r2,r2,-1
   203c4:	0085c83a 	sub	r2,zero,r2
   203c8:	dfc00217 	ldw	ra,8(sp)
   203cc:	dc400117 	ldw	r17,4(sp)
   203d0:	dc000017 	ldw	r16,0(sp)
   203d4:	dec00304 	addi	sp,sp,12
   203d8:	f800283a 	ret

000203dc <puts>:
   203dc:	008000b4 	movhi	r2,2
   203e0:	10849504 	addi	r2,r2,4692
   203e4:	200b883a 	mov	r5,r4
   203e8:	11000017 	ldw	r4,0(r2)
   203ec:	002035c1 	jmpi	2035c <_puts_r>

000203f0 <strlen>:
   203f0:	2005883a 	mov	r2,r4
   203f4:	10c00007 	ldb	r3,0(r2)
   203f8:	18000226 	beq	r3,zero,20404 <strlen+0x14>
   203fc:	10800044 	addi	r2,r2,1
   20400:	003ffc06 	br	203f4 <__alt_data_end+0xffff03f4>
   20404:	1105c83a 	sub	r2,r2,r4
   20408:	f800283a 	ret

0002040c <print_repeat>:
   2040c:	defffb04 	addi	sp,sp,-20
   20410:	dc800315 	stw	r18,12(sp)
   20414:	dc400215 	stw	r17,8(sp)
   20418:	dc000115 	stw	r16,4(sp)
   2041c:	dfc00415 	stw	ra,16(sp)
   20420:	2025883a 	mov	r18,r4
   20424:	2823883a 	mov	r17,r5
   20428:	d9800005 	stb	r6,0(sp)
   2042c:	3821883a 	mov	r16,r7
   20430:	04000a0e 	bge	zero,r16,2045c <print_repeat+0x50>
   20434:	88800117 	ldw	r2,4(r17)
   20438:	01c00044 	movi	r7,1
   2043c:	d80d883a 	mov	r6,sp
   20440:	880b883a 	mov	r5,r17
   20444:	9009883a 	mov	r4,r18
   20448:	103ee83a 	callr	r2
   2044c:	843fffc4 	addi	r16,r16,-1
   20450:	103ff726 	beq	r2,zero,20430 <__alt_data_end+0xffff0430>
   20454:	00bfffc4 	movi	r2,-1
   20458:	00000106 	br	20460 <print_repeat+0x54>
   2045c:	0005883a 	mov	r2,zero
   20460:	dfc00417 	ldw	ra,16(sp)
   20464:	dc800317 	ldw	r18,12(sp)
   20468:	dc400217 	ldw	r17,8(sp)
   2046c:	dc000117 	ldw	r16,4(sp)
   20470:	dec00504 	addi	sp,sp,20
   20474:	f800283a 	ret

00020478 <___vfprintf_internal_r>:
   20478:	deffe504 	addi	sp,sp,-108
   2047c:	d8c00804 	addi	r3,sp,32
   20480:	ddc01815 	stw	r23,96(sp)
   20484:	dd801715 	stw	r22,92(sp)
   20488:	dd401615 	stw	r21,88(sp)
   2048c:	dd001515 	stw	r20,84(sp)
   20490:	dcc01415 	stw	r19,80(sp)
   20494:	dc801315 	stw	r18,76(sp)
   20498:	dc401215 	stw	r17,72(sp)
   2049c:	dc001115 	stw	r16,68(sp)
   204a0:	dfc01a15 	stw	ra,104(sp)
   204a4:	df001915 	stw	fp,100(sp)
   204a8:	2029883a 	mov	r20,r4
   204ac:	2823883a 	mov	r17,r5
   204b0:	382d883a 	mov	r22,r7
   204b4:	d9800f15 	stw	r6,60(sp)
   204b8:	0021883a 	mov	r16,zero
   204bc:	d8000e15 	stw	zero,56(sp)
   204c0:	d8000a15 	stw	zero,40(sp)
   204c4:	002b883a 	mov	r21,zero
   204c8:	0027883a 	mov	r19,zero
   204cc:	0025883a 	mov	r18,zero
   204d0:	d8000c15 	stw	zero,48(sp)
   204d4:	d8000b15 	stw	zero,44(sp)
   204d8:	002f883a 	mov	r23,zero
   204dc:	d8c00915 	stw	r3,36(sp)
   204e0:	d8c00f17 	ldw	r3,60(sp)
   204e4:	19000003 	ldbu	r4,0(r3)
   204e8:	20803fcc 	andi	r2,r4,255
   204ec:	1080201c 	xori	r2,r2,128
   204f0:	10bfe004 	addi	r2,r2,-128
   204f4:	10011e26 	beq	r2,zero,20970 <___vfprintf_internal_r+0x4f8>
   204f8:	00c00044 	movi	r3,1
   204fc:	b8c01426 	beq	r23,r3,20550 <___vfprintf_internal_r+0xd8>
   20500:	1dc00216 	blt	r3,r23,2050c <___vfprintf_internal_r+0x94>
   20504:	b8000626 	beq	r23,zero,20520 <___vfprintf_internal_r+0xa8>
   20508:	00011506 	br	20960 <___vfprintf_internal_r+0x4e8>
   2050c:	01400084 	movi	r5,2
   20510:	b9401d26 	beq	r23,r5,20588 <___vfprintf_internal_r+0x110>
   20514:	014000c4 	movi	r5,3
   20518:	b9402b26 	beq	r23,r5,205c8 <___vfprintf_internal_r+0x150>
   2051c:	00011006 	br	20960 <___vfprintf_internal_r+0x4e8>
   20520:	01400944 	movi	r5,37
   20524:	1140fc26 	beq	r2,r5,20918 <___vfprintf_internal_r+0x4a0>
   20528:	88800117 	ldw	r2,4(r17)
   2052c:	d9000005 	stb	r4,0(sp)
   20530:	01c00044 	movi	r7,1
   20534:	d80d883a 	mov	r6,sp
   20538:	880b883a 	mov	r5,r17
   2053c:	a009883a 	mov	r4,r20
   20540:	103ee83a 	callr	r2
   20544:	1000d81e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   20548:	84000044 	addi	r16,r16,1
   2054c:	00010406 	br	20960 <___vfprintf_internal_r+0x4e8>
   20550:	01400c04 	movi	r5,48
   20554:	1140fa26 	beq	r2,r5,20940 <___vfprintf_internal_r+0x4c8>
   20558:	01400944 	movi	r5,37
   2055c:	11400a1e 	bne	r2,r5,20588 <___vfprintf_internal_r+0x110>
   20560:	d8800005 	stb	r2,0(sp)
   20564:	88800117 	ldw	r2,4(r17)
   20568:	b80f883a 	mov	r7,r23
   2056c:	d80d883a 	mov	r6,sp
   20570:	880b883a 	mov	r5,r17
   20574:	a009883a 	mov	r4,r20
   20578:	103ee83a 	callr	r2
   2057c:	1000ca1e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   20580:	84000044 	addi	r16,r16,1
   20584:	0000f506 	br	2095c <___vfprintf_internal_r+0x4e4>
   20588:	25fff404 	addi	r23,r4,-48
   2058c:	bdc03fcc 	andi	r23,r23,255
   20590:	00c00244 	movi	r3,9
   20594:	1dc00936 	bltu	r3,r23,205bc <___vfprintf_internal_r+0x144>
   20598:	00bfffc4 	movi	r2,-1
   2059c:	90800426 	beq	r18,r2,205b0 <___vfprintf_internal_r+0x138>
   205a0:	01400284 	movi	r5,10
   205a4:	9009883a 	mov	r4,r18
   205a8:	0020c840 	call	20c84 <__mulsi3>
   205ac:	00000106 	br	205b4 <___vfprintf_internal_r+0x13c>
   205b0:	0005883a 	mov	r2,zero
   205b4:	b8a5883a 	add	r18,r23,r2
   205b8:	0000e206 	br	20944 <___vfprintf_internal_r+0x4cc>
   205bc:	01400b84 	movi	r5,46
   205c0:	1140e426 	beq	r2,r5,20954 <___vfprintf_internal_r+0x4dc>
   205c4:	05c00084 	movi	r23,2
   205c8:	213ff404 	addi	r4,r4,-48
   205cc:	27003fcc 	andi	fp,r4,255
   205d0:	00c00244 	movi	r3,9
   205d4:	1f000936 	bltu	r3,fp,205fc <___vfprintf_internal_r+0x184>
   205d8:	00bfffc4 	movi	r2,-1
   205dc:	98800426 	beq	r19,r2,205f0 <___vfprintf_internal_r+0x178>
   205e0:	01400284 	movi	r5,10
   205e4:	9809883a 	mov	r4,r19
   205e8:	0020c840 	call	20c84 <__mulsi3>
   205ec:	00000106 	br	205f4 <___vfprintf_internal_r+0x17c>
   205f0:	0005883a 	mov	r2,zero
   205f4:	e0a7883a 	add	r19,fp,r2
   205f8:	0000d906 	br	20960 <___vfprintf_internal_r+0x4e8>
   205fc:	00c01b04 	movi	r3,108
   20600:	10c0d226 	beq	r2,r3,2094c <___vfprintf_internal_r+0x4d4>
   20604:	013fffc4 	movi	r4,-1
   20608:	99000226 	beq	r19,r4,20614 <___vfprintf_internal_r+0x19c>
   2060c:	d8000b15 	stw	zero,44(sp)
   20610:	00000106 	br	20618 <___vfprintf_internal_r+0x1a0>
   20614:	04c00044 	movi	r19,1
   20618:	01001a44 	movi	r4,105
   2061c:	11001626 	beq	r2,r4,20678 <___vfprintf_internal_r+0x200>
   20620:	20800916 	blt	r4,r2,20648 <___vfprintf_internal_r+0x1d0>
   20624:	010018c4 	movi	r4,99
   20628:	11008826 	beq	r2,r4,2084c <___vfprintf_internal_r+0x3d4>
   2062c:	01001904 	movi	r4,100
   20630:	11001126 	beq	r2,r4,20678 <___vfprintf_internal_r+0x200>
   20634:	01001604 	movi	r4,88
   20638:	1100c81e 	bne	r2,r4,2095c <___vfprintf_internal_r+0x4e4>
   2063c:	00c00044 	movi	r3,1
   20640:	d8c00e15 	stw	r3,56(sp)
   20644:	00001506 	br	2069c <___vfprintf_internal_r+0x224>
   20648:	01001cc4 	movi	r4,115
   2064c:	11009826 	beq	r2,r4,208b0 <___vfprintf_internal_r+0x438>
   20650:	20800416 	blt	r4,r2,20664 <___vfprintf_internal_r+0x1ec>
   20654:	01001bc4 	movi	r4,111
   20658:	1100c01e 	bne	r2,r4,2095c <___vfprintf_internal_r+0x4e4>
   2065c:	05400204 	movi	r21,8
   20660:	00000f06 	br	206a0 <___vfprintf_internal_r+0x228>
   20664:	01001d44 	movi	r4,117
   20668:	11000d26 	beq	r2,r4,206a0 <___vfprintf_internal_r+0x228>
   2066c:	01001e04 	movi	r4,120
   20670:	11000a26 	beq	r2,r4,2069c <___vfprintf_internal_r+0x224>
   20674:	0000b906 	br	2095c <___vfprintf_internal_r+0x4e4>
   20678:	d8c00a17 	ldw	r3,40(sp)
   2067c:	b7000104 	addi	fp,r22,4
   20680:	18000726 	beq	r3,zero,206a0 <___vfprintf_internal_r+0x228>
   20684:	df000d15 	stw	fp,52(sp)
   20688:	b5c00017 	ldw	r23,0(r22)
   2068c:	b800080e 	bge	r23,zero,206b0 <___vfprintf_internal_r+0x238>
   20690:	05efc83a 	sub	r23,zero,r23
   20694:	02400044 	movi	r9,1
   20698:	00000606 	br	206b4 <___vfprintf_internal_r+0x23c>
   2069c:	05400404 	movi	r21,16
   206a0:	b0c00104 	addi	r3,r22,4
   206a4:	d8c00d15 	stw	r3,52(sp)
   206a8:	b5c00017 	ldw	r23,0(r22)
   206ac:	d8000a15 	stw	zero,40(sp)
   206b0:	0013883a 	mov	r9,zero
   206b4:	d839883a 	mov	fp,sp
   206b8:	b8001726 	beq	r23,zero,20718 <___vfprintf_internal_r+0x2a0>
   206bc:	a80b883a 	mov	r5,r21
   206c0:	b809883a 	mov	r4,r23
   206c4:	da401015 	stw	r9,64(sp)
   206c8:	0020bc80 	call	20bc8 <__udivsi3>
   206cc:	a80b883a 	mov	r5,r21
   206d0:	1009883a 	mov	r4,r2
   206d4:	102d883a 	mov	r22,r2
   206d8:	0020c840 	call	20c84 <__mulsi3>
   206dc:	b885c83a 	sub	r2,r23,r2
   206e0:	00c00244 	movi	r3,9
   206e4:	da401017 	ldw	r9,64(sp)
   206e8:	18800216 	blt	r3,r2,206f4 <___vfprintf_internal_r+0x27c>
   206ec:	10800c04 	addi	r2,r2,48
   206f0:	00000506 	br	20708 <___vfprintf_internal_r+0x290>
   206f4:	d8c00e17 	ldw	r3,56(sp)
   206f8:	18000226 	beq	r3,zero,20704 <___vfprintf_internal_r+0x28c>
   206fc:	10800dc4 	addi	r2,r2,55
   20700:	00000106 	br	20708 <___vfprintf_internal_r+0x290>
   20704:	108015c4 	addi	r2,r2,87
   20708:	e0800005 	stb	r2,0(fp)
   2070c:	b02f883a 	mov	r23,r22
   20710:	e7000044 	addi	fp,fp,1
   20714:	003fe806 	br	206b8 <__alt_data_end+0xffff06b8>
   20718:	e6efc83a 	sub	r23,fp,sp
   2071c:	9dc5c83a 	sub	r2,r19,r23
   20720:	0080090e 	bge	zero,r2,20748 <___vfprintf_internal_r+0x2d0>
   20724:	e085883a 	add	r2,fp,r2
   20728:	01400c04 	movi	r5,48
   2072c:	d8c00917 	ldw	r3,36(sp)
   20730:	e009883a 	mov	r4,fp
   20734:	e0c0032e 	bgeu	fp,r3,20744 <___vfprintf_internal_r+0x2cc>
   20738:	e7000044 	addi	fp,fp,1
   2073c:	21400005 	stb	r5,0(r4)
   20740:	e0bffa1e 	bne	fp,r2,2072c <__alt_data_end+0xffff072c>
   20744:	e6efc83a 	sub	r23,fp,sp
   20748:	d8c00b17 	ldw	r3,44(sp)
   2074c:	4dd1883a 	add	r8,r9,r23
   20750:	922dc83a 	sub	r22,r18,r8
   20754:	18001626 	beq	r3,zero,207b0 <___vfprintf_internal_r+0x338>
   20758:	48000a26 	beq	r9,zero,20784 <___vfprintf_internal_r+0x30c>
   2075c:	00800b44 	movi	r2,45
   20760:	d8800805 	stb	r2,32(sp)
   20764:	88800117 	ldw	r2,4(r17)
   20768:	01c00044 	movi	r7,1
   2076c:	d9800804 	addi	r6,sp,32
   20770:	880b883a 	mov	r5,r17
   20774:	a009883a 	mov	r4,r20
   20778:	103ee83a 	callr	r2
   2077c:	10004a1e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   20780:	84000044 	addi	r16,r16,1
   20784:	0580070e 	bge	zero,r22,207a4 <___vfprintf_internal_r+0x32c>
   20788:	b00f883a 	mov	r7,r22
   2078c:	01800c04 	movi	r6,48
   20790:	880b883a 	mov	r5,r17
   20794:	a009883a 	mov	r4,r20
   20798:	002040c0 	call	2040c <print_repeat>
   2079c:	1000421e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   207a0:	85a1883a 	add	r16,r16,r22
   207a4:	e02d883a 	mov	r22,fp
   207a8:	bf2fc83a 	sub	r23,r23,fp
   207ac:	00002006 	br	20830 <___vfprintf_internal_r+0x3b8>
   207b0:	0580090e 	bge	zero,r22,207d8 <___vfprintf_internal_r+0x360>
   207b4:	b00f883a 	mov	r7,r22
   207b8:	01800804 	movi	r6,32
   207bc:	880b883a 	mov	r5,r17
   207c0:	a009883a 	mov	r4,r20
   207c4:	da401015 	stw	r9,64(sp)
   207c8:	002040c0 	call	2040c <print_repeat>
   207cc:	da401017 	ldw	r9,64(sp)
   207d0:	1000351e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   207d4:	85a1883a 	add	r16,r16,r22
   207d8:	483ff226 	beq	r9,zero,207a4 <__alt_data_end+0xffff07a4>
   207dc:	00800b44 	movi	r2,45
   207e0:	d8800805 	stb	r2,32(sp)
   207e4:	88800117 	ldw	r2,4(r17)
   207e8:	01c00044 	movi	r7,1
   207ec:	d9800804 	addi	r6,sp,32
   207f0:	880b883a 	mov	r5,r17
   207f4:	a009883a 	mov	r4,r20
   207f8:	103ee83a 	callr	r2
   207fc:	10002a1e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   20800:	84000044 	addi	r16,r16,1
   20804:	003fe706 	br	207a4 <__alt_data_end+0xffff07a4>
   20808:	b5bfffc4 	addi	r22,r22,-1
   2080c:	b0800003 	ldbu	r2,0(r22)
   20810:	01c00044 	movi	r7,1
   20814:	d9800804 	addi	r6,sp,32
   20818:	d8800805 	stb	r2,32(sp)
   2081c:	88800117 	ldw	r2,4(r17)
   20820:	880b883a 	mov	r5,r17
   20824:	a009883a 	mov	r4,r20
   20828:	103ee83a 	callr	r2
   2082c:	10001e1e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   20830:	8585c83a 	sub	r2,r16,r22
   20834:	b5c9883a 	add	r4,r22,r23
   20838:	e085883a 	add	r2,fp,r2
   2083c:	013ff216 	blt	zero,r4,20808 <__alt_data_end+0xffff0808>
   20840:	1021883a 	mov	r16,r2
   20844:	dd800d17 	ldw	r22,52(sp)
   20848:	00004406 	br	2095c <___vfprintf_internal_r+0x4e4>
   2084c:	00800044 	movi	r2,1
   20850:	1480080e 	bge	r2,r18,20874 <___vfprintf_internal_r+0x3fc>
   20854:	95ffffc4 	addi	r23,r18,-1
   20858:	b80f883a 	mov	r7,r23
   2085c:	01800804 	movi	r6,32
   20860:	880b883a 	mov	r5,r17
   20864:	a009883a 	mov	r4,r20
   20868:	002040c0 	call	2040c <print_repeat>
   2086c:	10000e1e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   20870:	85e1883a 	add	r16,r16,r23
   20874:	b0800017 	ldw	r2,0(r22)
   20878:	01c00044 	movi	r7,1
   2087c:	d80d883a 	mov	r6,sp
   20880:	d8800005 	stb	r2,0(sp)
   20884:	88800117 	ldw	r2,4(r17)
   20888:	880b883a 	mov	r5,r17
   2088c:	a009883a 	mov	r4,r20
   20890:	b5c00104 	addi	r23,r22,4
   20894:	103ee83a 	callr	r2
   20898:	1000031e 	bne	r2,zero,208a8 <___vfprintf_internal_r+0x430>
   2089c:	84000044 	addi	r16,r16,1
   208a0:	b82d883a 	mov	r22,r23
   208a4:	00002d06 	br	2095c <___vfprintf_internal_r+0x4e4>
   208a8:	00bfffc4 	movi	r2,-1
   208ac:	00003106 	br	20974 <___vfprintf_internal_r+0x4fc>
   208b0:	b5c00017 	ldw	r23,0(r22)
   208b4:	b7000104 	addi	fp,r22,4
   208b8:	b809883a 	mov	r4,r23
   208bc:	00203f00 	call	203f0 <strlen>
   208c0:	9091c83a 	sub	r8,r18,r2
   208c4:	102d883a 	mov	r22,r2
   208c8:	0200090e 	bge	zero,r8,208f0 <___vfprintf_internal_r+0x478>
   208cc:	400f883a 	mov	r7,r8
   208d0:	01800804 	movi	r6,32
   208d4:	880b883a 	mov	r5,r17
   208d8:	a009883a 	mov	r4,r20
   208dc:	da001015 	stw	r8,64(sp)
   208e0:	002040c0 	call	2040c <print_repeat>
   208e4:	da001017 	ldw	r8,64(sp)
   208e8:	103fef1e 	bne	r2,zero,208a8 <__alt_data_end+0xffff08a8>
   208ec:	8221883a 	add	r16,r16,r8
   208f0:	88800117 	ldw	r2,4(r17)
   208f4:	b00f883a 	mov	r7,r22
   208f8:	b80d883a 	mov	r6,r23
   208fc:	880b883a 	mov	r5,r17
   20900:	a009883a 	mov	r4,r20
   20904:	103ee83a 	callr	r2
   20908:	103fe71e 	bne	r2,zero,208a8 <__alt_data_end+0xffff08a8>
   2090c:	85a1883a 	add	r16,r16,r22
   20910:	e02d883a 	mov	r22,fp
   20914:	00001106 	br	2095c <___vfprintf_internal_r+0x4e4>
   20918:	00c00044 	movi	r3,1
   2091c:	04ffffc4 	movi	r19,-1
   20920:	d8000e15 	stw	zero,56(sp)
   20924:	d8c00a15 	stw	r3,40(sp)
   20928:	05400284 	movi	r21,10
   2092c:	9825883a 	mov	r18,r19
   20930:	d8000c15 	stw	zero,48(sp)
   20934:	d8000b15 	stw	zero,44(sp)
   20938:	182f883a 	mov	r23,r3
   2093c:	00000806 	br	20960 <___vfprintf_internal_r+0x4e8>
   20940:	ddc00b15 	stw	r23,44(sp)
   20944:	05c00084 	movi	r23,2
   20948:	00000506 	br	20960 <___vfprintf_internal_r+0x4e8>
   2094c:	00c00044 	movi	r3,1
   20950:	d8c00c15 	stw	r3,48(sp)
   20954:	05c000c4 	movi	r23,3
   20958:	00000106 	br	20960 <___vfprintf_internal_r+0x4e8>
   2095c:	002f883a 	mov	r23,zero
   20960:	d8c00f17 	ldw	r3,60(sp)
   20964:	18c00044 	addi	r3,r3,1
   20968:	d8c00f15 	stw	r3,60(sp)
   2096c:	003edc06 	br	204e0 <__alt_data_end+0xffff04e0>
   20970:	8005883a 	mov	r2,r16
   20974:	dfc01a17 	ldw	ra,104(sp)
   20978:	df001917 	ldw	fp,100(sp)
   2097c:	ddc01817 	ldw	r23,96(sp)
   20980:	dd801717 	ldw	r22,92(sp)
   20984:	dd401617 	ldw	r21,88(sp)
   20988:	dd001517 	ldw	r20,84(sp)
   2098c:	dcc01417 	ldw	r19,80(sp)
   20990:	dc801317 	ldw	r18,76(sp)
   20994:	dc401217 	ldw	r17,72(sp)
   20998:	dc001117 	ldw	r16,68(sp)
   2099c:	dec01b04 	addi	sp,sp,108
   209a0:	f800283a 	ret

000209a4 <__vfprintf_internal>:
   209a4:	008000b4 	movhi	r2,2
   209a8:	10849504 	addi	r2,r2,4692
   209ac:	300f883a 	mov	r7,r6
   209b0:	280d883a 	mov	r6,r5
   209b4:	200b883a 	mov	r5,r4
   209b8:	11000017 	ldw	r4,0(r2)
   209bc:	00204781 	jmpi	20478 <___vfprintf_internal_r>

000209c0 <__sfvwrite_small_dev>:
   209c0:	2880000b 	ldhu	r2,0(r5)
   209c4:	1080020c 	andi	r2,r2,8
   209c8:	10002126 	beq	r2,zero,20a50 <__sfvwrite_small_dev+0x90>
   209cc:	2880008f 	ldh	r2,2(r5)
   209d0:	defffa04 	addi	sp,sp,-24
   209d4:	dc000015 	stw	r16,0(sp)
   209d8:	dfc00515 	stw	ra,20(sp)
   209dc:	dd000415 	stw	r20,16(sp)
   209e0:	dcc00315 	stw	r19,12(sp)
   209e4:	dc800215 	stw	r18,8(sp)
   209e8:	dc400115 	stw	r17,4(sp)
   209ec:	2821883a 	mov	r16,r5
   209f0:	10001216 	blt	r2,zero,20a3c <__sfvwrite_small_dev+0x7c>
   209f4:	2027883a 	mov	r19,r4
   209f8:	3025883a 	mov	r18,r6
   209fc:	3823883a 	mov	r17,r7
   20a00:	05010004 	movi	r20,1024
   20a04:	04400b0e 	bge	zero,r17,20a34 <__sfvwrite_small_dev+0x74>
   20a08:	880f883a 	mov	r7,r17
   20a0c:	a440010e 	bge	r20,r17,20a14 <__sfvwrite_small_dev+0x54>
   20a10:	01c10004 	movi	r7,1024
   20a14:	8140008f 	ldh	r5,2(r16)
   20a18:	900d883a 	mov	r6,r18
   20a1c:	9809883a 	mov	r4,r19
   20a20:	0020a780 	call	20a78 <_write_r>
   20a24:	0080050e 	bge	zero,r2,20a3c <__sfvwrite_small_dev+0x7c>
   20a28:	88a3c83a 	sub	r17,r17,r2
   20a2c:	90a5883a 	add	r18,r18,r2
   20a30:	003ff406 	br	20a04 <__alt_data_end+0xffff0a04>
   20a34:	0005883a 	mov	r2,zero
   20a38:	00000706 	br	20a58 <__sfvwrite_small_dev+0x98>
   20a3c:	8080000b 	ldhu	r2,0(r16)
   20a40:	10801014 	ori	r2,r2,64
   20a44:	8080000d 	sth	r2,0(r16)
   20a48:	00bfffc4 	movi	r2,-1
   20a4c:	00000206 	br	20a58 <__sfvwrite_small_dev+0x98>
   20a50:	00bfffc4 	movi	r2,-1
   20a54:	f800283a 	ret
   20a58:	dfc00517 	ldw	ra,20(sp)
   20a5c:	dd000417 	ldw	r20,16(sp)
   20a60:	dcc00317 	ldw	r19,12(sp)
   20a64:	dc800217 	ldw	r18,8(sp)
   20a68:	dc400117 	ldw	r17,4(sp)
   20a6c:	dc000017 	ldw	r16,0(sp)
   20a70:	dec00604 	addi	sp,sp,24
   20a74:	f800283a 	ret

00020a78 <_write_r>:
   20a78:	defffd04 	addi	sp,sp,-12
   20a7c:	dc000015 	stw	r16,0(sp)
   20a80:	040000b4 	movhi	r16,2
   20a84:	dc400115 	stw	r17,4(sp)
   20a88:	8404d504 	addi	r16,r16,4948
   20a8c:	2023883a 	mov	r17,r4
   20a90:	2809883a 	mov	r4,r5
   20a94:	300b883a 	mov	r5,r6
   20a98:	380d883a 	mov	r6,r7
   20a9c:	dfc00215 	stw	ra,8(sp)
   20aa0:	80000015 	stw	zero,0(r16)
   20aa4:	0020df00 	call	20df0 <write>
   20aa8:	00ffffc4 	movi	r3,-1
   20aac:	10c0031e 	bne	r2,r3,20abc <_write_r+0x44>
   20ab0:	80c00017 	ldw	r3,0(r16)
   20ab4:	18000126 	beq	r3,zero,20abc <_write_r+0x44>
   20ab8:	88c00015 	stw	r3,0(r17)
   20abc:	dfc00217 	ldw	ra,8(sp)
   20ac0:	dc400117 	ldw	r17,4(sp)
   20ac4:	dc000017 	ldw	r16,0(sp)
   20ac8:	dec00304 	addi	sp,sp,12
   20acc:	f800283a 	ret

00020ad0 <__divsi3>:
   20ad0:	20001b16 	blt	r4,zero,20b40 <__divsi3+0x70>
   20ad4:	000f883a 	mov	r7,zero
   20ad8:	28001616 	blt	r5,zero,20b34 <__divsi3+0x64>
   20adc:	200d883a 	mov	r6,r4
   20ae0:	29001a2e 	bgeu	r5,r4,20b4c <__divsi3+0x7c>
   20ae4:	00800804 	movi	r2,32
   20ae8:	00c00044 	movi	r3,1
   20aec:	00000106 	br	20af4 <__divsi3+0x24>
   20af0:	10000d26 	beq	r2,zero,20b28 <__divsi3+0x58>
   20af4:	294b883a 	add	r5,r5,r5
   20af8:	10bfffc4 	addi	r2,r2,-1
   20afc:	18c7883a 	add	r3,r3,r3
   20b00:	293ffb36 	bltu	r5,r4,20af0 <__alt_data_end+0xffff0af0>
   20b04:	0005883a 	mov	r2,zero
   20b08:	18000726 	beq	r3,zero,20b28 <__divsi3+0x58>
   20b0c:	0005883a 	mov	r2,zero
   20b10:	31400236 	bltu	r6,r5,20b1c <__divsi3+0x4c>
   20b14:	314dc83a 	sub	r6,r6,r5
   20b18:	10c4b03a 	or	r2,r2,r3
   20b1c:	1806d07a 	srli	r3,r3,1
   20b20:	280ad07a 	srli	r5,r5,1
   20b24:	183ffa1e 	bne	r3,zero,20b10 <__alt_data_end+0xffff0b10>
   20b28:	38000126 	beq	r7,zero,20b30 <__divsi3+0x60>
   20b2c:	0085c83a 	sub	r2,zero,r2
   20b30:	f800283a 	ret
   20b34:	014bc83a 	sub	r5,zero,r5
   20b38:	39c0005c 	xori	r7,r7,1
   20b3c:	003fe706 	br	20adc <__alt_data_end+0xffff0adc>
   20b40:	0109c83a 	sub	r4,zero,r4
   20b44:	01c00044 	movi	r7,1
   20b48:	003fe306 	br	20ad8 <__alt_data_end+0xffff0ad8>
   20b4c:	00c00044 	movi	r3,1
   20b50:	003fee06 	br	20b0c <__alt_data_end+0xffff0b0c>

00020b54 <__modsi3>:
   20b54:	20001716 	blt	r4,zero,20bb4 <__modsi3+0x60>
   20b58:	000f883a 	mov	r7,zero
   20b5c:	2005883a 	mov	r2,r4
   20b60:	28001216 	blt	r5,zero,20bac <__modsi3+0x58>
   20b64:	2900162e 	bgeu	r5,r4,20bc0 <__modsi3+0x6c>
   20b68:	01800804 	movi	r6,32
   20b6c:	00c00044 	movi	r3,1
   20b70:	00000106 	br	20b78 <__modsi3+0x24>
   20b74:	30000a26 	beq	r6,zero,20ba0 <__modsi3+0x4c>
   20b78:	294b883a 	add	r5,r5,r5
   20b7c:	31bfffc4 	addi	r6,r6,-1
   20b80:	18c7883a 	add	r3,r3,r3
   20b84:	293ffb36 	bltu	r5,r4,20b74 <__alt_data_end+0xffff0b74>
   20b88:	18000526 	beq	r3,zero,20ba0 <__modsi3+0x4c>
   20b8c:	1806d07a 	srli	r3,r3,1
   20b90:	11400136 	bltu	r2,r5,20b98 <__modsi3+0x44>
   20b94:	1145c83a 	sub	r2,r2,r5
   20b98:	280ad07a 	srli	r5,r5,1
   20b9c:	183ffb1e 	bne	r3,zero,20b8c <__alt_data_end+0xffff0b8c>
   20ba0:	38000126 	beq	r7,zero,20ba8 <__modsi3+0x54>
   20ba4:	0085c83a 	sub	r2,zero,r2
   20ba8:	f800283a 	ret
   20bac:	014bc83a 	sub	r5,zero,r5
   20bb0:	003fec06 	br	20b64 <__alt_data_end+0xffff0b64>
   20bb4:	0109c83a 	sub	r4,zero,r4
   20bb8:	01c00044 	movi	r7,1
   20bbc:	003fe706 	br	20b5c <__alt_data_end+0xffff0b5c>
   20bc0:	00c00044 	movi	r3,1
   20bc4:	003ff106 	br	20b8c <__alt_data_end+0xffff0b8c>

00020bc8 <__udivsi3>:
   20bc8:	200d883a 	mov	r6,r4
   20bcc:	2900152e 	bgeu	r5,r4,20c24 <__udivsi3+0x5c>
   20bd0:	28001416 	blt	r5,zero,20c24 <__udivsi3+0x5c>
   20bd4:	00800804 	movi	r2,32
   20bd8:	00c00044 	movi	r3,1
   20bdc:	00000206 	br	20be8 <__udivsi3+0x20>
   20be0:	10000e26 	beq	r2,zero,20c1c <__udivsi3+0x54>
   20be4:	28000516 	blt	r5,zero,20bfc <__udivsi3+0x34>
   20be8:	294b883a 	add	r5,r5,r5
   20bec:	10bfffc4 	addi	r2,r2,-1
   20bf0:	18c7883a 	add	r3,r3,r3
   20bf4:	293ffa36 	bltu	r5,r4,20be0 <__alt_data_end+0xffff0be0>
   20bf8:	18000826 	beq	r3,zero,20c1c <__udivsi3+0x54>
   20bfc:	0005883a 	mov	r2,zero
   20c00:	31400236 	bltu	r6,r5,20c0c <__udivsi3+0x44>
   20c04:	314dc83a 	sub	r6,r6,r5
   20c08:	10c4b03a 	or	r2,r2,r3
   20c0c:	1806d07a 	srli	r3,r3,1
   20c10:	280ad07a 	srli	r5,r5,1
   20c14:	183ffa1e 	bne	r3,zero,20c00 <__alt_data_end+0xffff0c00>
   20c18:	f800283a 	ret
   20c1c:	0005883a 	mov	r2,zero
   20c20:	f800283a 	ret
   20c24:	00c00044 	movi	r3,1
   20c28:	003ff406 	br	20bfc <__alt_data_end+0xffff0bfc>

00020c2c <__umodsi3>:
   20c2c:	2005883a 	mov	r2,r4
   20c30:	2900122e 	bgeu	r5,r4,20c7c <__umodsi3+0x50>
   20c34:	28001116 	blt	r5,zero,20c7c <__umodsi3+0x50>
   20c38:	01800804 	movi	r6,32
   20c3c:	00c00044 	movi	r3,1
   20c40:	00000206 	br	20c4c <__umodsi3+0x20>
   20c44:	30000c26 	beq	r6,zero,20c78 <__umodsi3+0x4c>
   20c48:	28000516 	blt	r5,zero,20c60 <__umodsi3+0x34>
   20c4c:	294b883a 	add	r5,r5,r5
   20c50:	31bfffc4 	addi	r6,r6,-1
   20c54:	18c7883a 	add	r3,r3,r3
   20c58:	293ffa36 	bltu	r5,r4,20c44 <__alt_data_end+0xffff0c44>
   20c5c:	18000626 	beq	r3,zero,20c78 <__umodsi3+0x4c>
   20c60:	1806d07a 	srli	r3,r3,1
   20c64:	11400136 	bltu	r2,r5,20c6c <__umodsi3+0x40>
   20c68:	1145c83a 	sub	r2,r2,r5
   20c6c:	280ad07a 	srli	r5,r5,1
   20c70:	183ffb1e 	bne	r3,zero,20c60 <__alt_data_end+0xffff0c60>
   20c74:	f800283a 	ret
   20c78:	f800283a 	ret
   20c7c:	00c00044 	movi	r3,1
   20c80:	003ff706 	br	20c60 <__alt_data_end+0xffff0c60>

00020c84 <__mulsi3>:
   20c84:	0005883a 	mov	r2,zero
   20c88:	20000726 	beq	r4,zero,20ca8 <__mulsi3+0x24>
   20c8c:	20c0004c 	andi	r3,r4,1
   20c90:	2008d07a 	srli	r4,r4,1
   20c94:	18000126 	beq	r3,zero,20c9c <__mulsi3+0x18>
   20c98:	1145883a 	add	r2,r2,r5
   20c9c:	294b883a 	add	r5,r5,r5
   20ca0:	203ffa1e 	bne	r4,zero,20c8c <__alt_data_end+0xffff0c8c>
   20ca4:	f800283a 	ret
   20ca8:	f800283a 	ret

00020cac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20cac:	deffff04 	addi	sp,sp,-4
   20cb0:	010000b4 	movhi	r4,2
   20cb4:	014000b4 	movhi	r5,2
   20cb8:	dfc00015 	stw	ra,0(sp)
   20cbc:	21045c04 	addi	r4,r4,4464
   20cc0:	29449804 	addi	r5,r5,4704

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20cc4:	2140061e 	bne	r4,r5,20ce0 <alt_load+0x34>
   20cc8:	01000074 	movhi	r4,1
   20ccc:	01400074 	movhi	r5,1
   20cd0:	21000804 	addi	r4,r4,32
   20cd4:	29400804 	addi	r5,r5,32
   20cd8:	2140121e 	bne	r4,r5,20d24 <alt_load+0x78>
   20cdc:	00000b06 	br	20d0c <alt_load+0x60>
   20ce0:	00c000b4 	movhi	r3,2
   20ce4:	18c49804 	addi	r3,r3,4704
   20ce8:	1907c83a 	sub	r3,r3,r4
   20cec:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20cf0:	10fff526 	beq	r2,r3,20cc8 <__alt_data_end+0xffff0cc8>
    {
      *to++ = *from++;
   20cf4:	114f883a 	add	r7,r2,r5
   20cf8:	39c00017 	ldw	r7,0(r7)
   20cfc:	110d883a 	add	r6,r2,r4
   20d00:	10800104 	addi	r2,r2,4
   20d04:	31c00015 	stw	r7,0(r6)
   20d08:	003ff906 	br	20cf0 <__alt_data_end+0xffff0cf0>
   20d0c:	010000b4 	movhi	r4,2
   20d10:	014000b4 	movhi	r5,2
   20d14:	21042204 	addi	r4,r4,4232
   20d18:	29442204 	addi	r5,r5,4232

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20d1c:	2140101e 	bne	r4,r5,20d60 <alt_load+0xb4>
   20d20:	00000b06 	br	20d50 <alt_load+0xa4>
   20d24:	00c00074 	movhi	r3,1
   20d28:	18c00804 	addi	r3,r3,32
   20d2c:	1907c83a 	sub	r3,r3,r4
   20d30:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20d34:	10fff526 	beq	r2,r3,20d0c <__alt_data_end+0xffff0d0c>
    {
      *to++ = *from++;
   20d38:	114f883a 	add	r7,r2,r5
   20d3c:	39c00017 	ldw	r7,0(r7)
   20d40:	110d883a 	add	r6,r2,r4
   20d44:	10800104 	addi	r2,r2,4
   20d48:	31c00015 	stw	r7,0(r6)
   20d4c:	003ff906 	br	20d34 <__alt_data_end+0xffff0d34>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20d50:	00210780 	call	21078 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   20d54:	dfc00017 	ldw	ra,0(sp)
   20d58:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   20d5c:	002107c1 	jmpi	2107c <alt_icache_flush_all>
   20d60:	00c000b4 	movhi	r3,2
   20d64:	18c45c04 	addi	r3,r3,4464
   20d68:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20d6c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20d70:	18bff726 	beq	r3,r2,20d50 <__alt_data_end+0xffff0d50>
    {
      *to++ = *from++;
   20d74:	114f883a 	add	r7,r2,r5
   20d78:	39c00017 	ldw	r7,0(r7)
   20d7c:	110d883a 	add	r6,r2,r4
   20d80:	10800104 	addi	r2,r2,4
   20d84:	31c00015 	stw	r7,0(r6)
   20d88:	003ff906 	br	20d70 <__alt_data_end+0xffff0d70>

00020d8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20d8c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20d90:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20d94:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20d98:	0020e500 	call	20e50 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20d9c:	0020e700 	call	20e70 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20da0:	d1a04217 	ldw	r6,-32504(gp)
   20da4:	d1604317 	ldw	r5,-32500(gp)
   20da8:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20dac:	dfc00017 	ldw	ra,0(sp)
   20db0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20db4:	002010c1 	jmpi	2010c <main>

00020db8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   20db8:	defffe04 	addi	sp,sp,-8
   20dbc:	dc000015 	stw	r16,0(sp)
   20dc0:	dfc00115 	stw	ra,4(sp)
   20dc4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   20dc8:	00203f00 	call	203f0 <strlen>
   20dcc:	010000b4 	movhi	r4,2
   20dd0:	000f883a 	mov	r7,zero
   20dd4:	100d883a 	mov	r6,r2
   20dd8:	800b883a 	mov	r5,r16
   20ddc:	21049604 	addi	r4,r4,4696
#else
    return fputs(str, stdout);
#endif
#endif
}
   20de0:	dfc00117 	ldw	ra,4(sp)
   20de4:	dc000017 	ldw	r16,0(sp)
   20de8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   20dec:	00210441 	jmpi	21044 <altera_avalon_jtag_uart_write>

00020df0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   20df0:	00800044 	movi	r2,1
   20df4:	20800226 	beq	r4,r2,20e00 <write+0x10>
   20df8:	00800084 	movi	r2,2
   20dfc:	2080041e 	bne	r4,r2,20e10 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   20e00:	010000b4 	movhi	r4,2
   20e04:	000f883a 	mov	r7,zero
   20e08:	21049604 	addi	r4,r4,4696
   20e0c:	00210441 	jmpi	21044 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   20e10:	d0a00317 	ldw	r2,-32756(gp)
   20e14:	10000926 	beq	r2,zero,20e3c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20e18:	deffff04 	addi	sp,sp,-4
   20e1c:	dfc00015 	stw	ra,0(sp)
   20e20:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20e24:	00c01444 	movi	r3,81
   20e28:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20e2c:	00bfffc4 	movi	r2,-1
   20e30:	dfc00017 	ldw	ra,0(sp)
   20e34:	dec00104 	addi	sp,sp,4
   20e38:	f800283a 	ret
   20e3c:	d0a04104 	addi	r2,gp,-32508
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   20e40:	00c01444 	movi	r3,81
   20e44:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   20e48:	00bfffc4 	movi	r2,-1
   20e4c:	f800283a 	ret

00020e50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20e50:	deffff04 	addi	sp,sp,-4
   20e54:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
   20e58:	00210800 	call	21080 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20e5c:	00800044 	movi	r2,1
   20e60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20e64:	dfc00017 	ldw	ra,0(sp)
   20e68:	dec00104 	addi	sp,sp,4
   20e6c:	f800283a 	ret

00020e70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20e70:	f800283a 	ret

00020e74 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   20e74:	20800137 	ldwio	r2,4(r4)
}
   20e78:	1144703a 	and	r2,r2,r5
   20e7c:	f800283a 	ret

00020e80 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   20e80:	20800337 	ldwio	r2,12(r4)
}
   20e84:	1144703a 	and	r2,r2,r5
   20e88:	f800283a 	ret

00020e8c <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   20e8c:	20800437 	ldwio	r2,16(r4)
   20e90:	f800283a 	ret

00020e94 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   20e94:	20800537 	ldwio	r2,20(r4)
   20e98:	f800283a 	ret

00020e9c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   20e9c:	20800237 	ldwio	r2,8(r4)
}
   20ea0:	1144703a 	and	r2,r2,r5
   20ea4:	f800283a 	ret

00020ea8 <altera_avalon_fifo_read_level>:
   20ea8:	20800037 	ldwio	r2,0(r4)
   20eac:	f800283a 	ret

00020eb0 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   20eb0:	21000204 	addi	r4,r4,8
   20eb4:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   20eb8:	20800037 	ldwio	r2,0(r4)
   20ebc:	114a703a 	and	r5,r2,r5
   20ec0:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   20ec4:	0085c83a 	sub	r2,zero,r2
   20ec8:	f800283a 	ret

00020ecc <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   20ecc:	21000304 	addi	r4,r4,12
   20ed0:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   20ed4:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   20ed8:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   20edc:	28c00126 	beq	r5,r3,20ee4 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   20ee0:	00bfff84 	movi	r2,-2
}
   20ee4:	f800283a 	ret

00020ee8 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   20ee8:	21000404 	addi	r4,r4,16
   20eec:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   20ef0:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   20ef4:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   20ef8:	28c00126 	beq	r5,r3,20f00 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   20efc:	00bfff44 	movi	r2,-3
}
   20f00:	f800283a 	ret

00020f04 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   20f04:	21000504 	addi	r4,r4,20
   20f08:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   20f0c:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   20f10:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   20f14:	28c00126 	beq	r5,r3,20f1c <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   20f18:	00bfff44 	movi	r2,-3
}
   20f1c:	f800283a 	ret

00020f20 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   20f20:	defffb04 	addi	sp,sp,-20
   20f24:	dcc00315 	stw	r19,12(sp)
   20f28:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   20f2c:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   20f30:	dc800215 	stw	r18,8(sp)
   20f34:	dc400115 	stw	r17,4(sp)
   20f38:	dc000015 	stw	r16,0(sp)
   20f3c:	dfc00415 	stw	ra,16(sp)
   20f40:	2021883a 	mov	r16,r4
   20f44:	3023883a 	mov	r17,r6
   20f48:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   20f4c:	0020eb00 	call	20eb0 <altera_avalon_fifo_clear_event>
   20f50:	10000f1e 	bne	r2,zero,20f90 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   20f54:	980b883a 	mov	r5,r19
   20f58:	8009883a 	mov	r4,r16
   20f5c:	0020ecc0 	call	20ecc <altera_avalon_fifo_write_ienable>
   20f60:	10000d1e 	bne	r2,zero,20f98 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   20f64:	900b883a 	mov	r5,r18
   20f68:	8009883a 	mov	r4,r16
   20f6c:	0020ee80 	call	20ee8 <altera_avalon_fifo_write_almostfull>
   20f70:	10000226 	beq	r2,zero,20f7c <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   20f74:	00bfff44 	movi	r2,-3
   20f78:	00000806 	br	20f9c <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   20f7c:	880b883a 	mov	r5,r17
   20f80:	8009883a 	mov	r4,r16
   20f84:	0020f040 	call	20f04 <altera_avalon_fifo_write_almostempty>
   20f88:	10000426 	beq	r2,zero,20f9c <altera_avalon_fifo_init+0x7c>
   20f8c:	003ff906 	br	20f74 <__alt_data_end+0xffff0f74>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   20f90:	00bfffc4 	movi	r2,-1
   20f94:	00000106 	br	20f9c <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   20f98:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   20f9c:	dfc00417 	ldw	ra,16(sp)
   20fa0:	dcc00317 	ldw	r19,12(sp)
   20fa4:	dc800217 	ldw	r18,8(sp)
   20fa8:	dc400117 	ldw	r17,4(sp)
   20fac:	dc000017 	ldw	r16,0(sp)
   20fb0:	dec00504 	addi	sp,sp,20
   20fb4:	f800283a 	ret

00020fb8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   20fb8:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   20fbc:	1080004c 	andi	r2,r2,1
   20fc0:	1000021e 	bne	r2,zero,20fcc <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   20fc4:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   20fc8:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   20fcc:	00bfff04 	movi	r2,-4
    }
}
   20fd0:	f800283a 	ret

00020fd4 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   20fd4:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   20fd8:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   20fdc:	1080008c 	andi	r2,r2,2
   20fe0:	1000041e 	bne	r2,zero,20ff4 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   20fe4:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   20fe8:	20c00037 	ldwio	r3,0(r4)
   20fec:	30c00015 	stw	r3,0(r6)
   20ff0:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   20ff4:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   20ff8:	f800283a 	ret

00020ffc <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   20ffc:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   21000:	1080008c 	andi	r2,r2,2
   21004:	1000021e 	bne	r2,zero,21010 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   21008:	20800037 	ldwio	r2,0(r4)
   2100c:	f800283a 	ret
    }
    return 0;
   21010:	0005883a 	mov	r2,zero
}
   21014:	f800283a 	ret

00021018 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21018:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   2101c:	1080004c 	andi	r2,r2,1
   21020:	1000021e 	bne	r2,zero,2102c <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   21024:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   21028:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   2102c:	00bfff04 	movi	r2,-4
    }
}
   21030:	f800283a 	ret

00021034 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   21034:	20800137 	ldwio	r2,4(r4)
   21038:	f800283a 	ret

0002103c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   2103c:	20800037 	ldwio	r2,0(r4)
   21040:	f800283a 	ret

00021044 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   21044:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21048:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   2104c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21050:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   21054:	2980072e 	bgeu	r5,r6,21074 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21058:	38c00037 	ldwio	r3,0(r7)
   2105c:	18ffffec 	andhi	r3,r3,65535
   21060:	183ffc26 	beq	r3,zero,21054 <__alt_data_end+0xffff1054>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21064:	28c00007 	ldb	r3,0(r5)
   21068:	20c00035 	stwio	r3,0(r4)
   2106c:	29400044 	addi	r5,r5,1
   21070:	003ff806 	br	21054 <__alt_data_end+0xffff1054>

  return count;
}
   21074:	f800283a 	ret

00021078 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21078:	f800283a 	ret

0002107c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2107c:	f800283a 	ret

00021080 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   21080:	000170fa 	wrctl	ienable,zero
   21084:	f800283a 	ret
