
NIOS_00.elf:     file format elf32-littlenios2
NIOS_00.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001458 memsz 0x00001458 flags r-x
    LOAD off    0x00002478 vaddr 0x00005478 paddr 0x00005568 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00002658 vaddr 0x00005658 paddr 0x00005658 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00002568  2**0
                  CONTENTS
  2 .text         00001330  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000128  00005350  00005350  00002350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00005478  00005568  00002478  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00005658  00005658  00002658  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_00  00000000  0000566c  0000566c  00002568  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000318  00000000  00000000  00002590  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004b51  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000177b  00000000  00000000  000073f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001ac7  00000000  00000000  00008b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000590  00000000  00000000  0000a63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000136f  00000000  00000000  0000abcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001a14  00000000  00000000  0000bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000d950  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  0000d960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000f032  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0000f035  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000f03d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000f03e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000f03f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000f04a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000f055  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000053  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 26 .jdi          0000e954  00000000  00000000  0000f0bb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2162  00000000  00000000  0001da0f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00005350 l    d  .rodata	00000000 .rodata
00005478 l    d  .rwdata	00000000 .rwdata
00005658 l    d  .bss	00000000 .bss
0000566c l    d  .data_mem_00	00000000 .data_mem_00
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NIOS_00_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_00.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000046d4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005478 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00005054 g     F .text	0000002c alt_main
00004624 g     F .text	00000080 _puts_r
000051b0 g     F .text	0000001c altera_avalon_fifo_write_almostfull
00005568 g       *ABS*	00000000 __flash_rwdata_start
000045d8 g     F .text	0000004c printf
000051e8 g     F .text	00000098 altera_avalon_fifo_init
00005280 g     F .text	0000001c altera_avalon_fifo_write_fifo
00005080 g     F .text	00000038 alt_putstr
00005348 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00005304 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000565c g     O .bss	00000004 errno
00005664 g     O .bss	00000004 alt_argv
0000d558 g       *ABS*	00000000 _gp
00005178 g     F .text	0000001c altera_avalon_fifo_clear_event
00004574 g     F .text	00000028 memcpy
000046a4 g     F .text	00000014 puts
0000459c g     F .text	0000003c _printf_r
00004e90 g     F .text	00000064 .hidden __udivsi3
00004000 g       *ABS*	00000000 __alt_mem_data_mem_00
00005558 g     O .rwdata	00000004 _global_impure_ptr
0000566c g       *ABS*	00000000 __bss_end
00005340 g     F .text	00000004 alt_dcache_flush_all
00005194 g     F .text	0000001c altera_avalon_fifo_write_ienable
00005568 g       *ABS*	00000000 __ram_rwdata_end
0000515c g     F .text	00000008 altera_avalon_fifo_read_almostempty
000050b8 g     F .text	00000060 write
00005478 g       *ABS*	00000000 __ram_rodata_end
00005560 g     O .rwdata	00000004 jtag_uart_0
00004ef4 g     F .text	00000058 .hidden __umodsi3
0000566c g       *ABS*	00000000 end
00005164 g     F .text	0000000c altera_avalon_fifo_read_event
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000530c g     F .text	00000034 altera_avalon_jtag_uart_write
00005658 g     O .bss	00000004 input_fifo_wrclk_irq_event
000052c4 g     F .text	0000001c altera_avalon_fifo_read_fifo
00004740 g     F .text	0000052c ___vfprintf_internal_r
0000412c g     F .text	000001a4 send_packet
00004020 g     F .text	0000003c _start
00005138 g     F .text	00000004 alt_sys_init
00004f4c g     F .text	00000028 .hidden __mulsi3
00005478 g       *ABS*	00000000 __ram_rwdata_start
00005350 g       *ABS*	00000000 __ram_rodata_start
0000566c g       *ABS*	00000000 __alt_stack_base
0000405c g     F .text	000000d0 print_status
0000513c g     F .text	0000000c altera_avalon_fifo_read_status
000052fc g     F .text	00000008 altera_avalon_fifo_read_other_info
00004c88 g     F .text	000000b8 __sfvwrite_small_dev
00005658 g       *ABS*	00000000 __bss_start
000042d0 g     F .text	000002a4 main
00005660 g     O .bss	00000004 alt_envp
00005170 g     F .text	00000008 altera_avalon_fifo_read_level
00005564 g     O .rwdata	00000004 alt_errno
00004d98 g     F .text	00000084 .hidden __divsi3
00005350 g       *ABS*	00000000 __flash_rodata_start
00005118 g     F .text	00000020 alt_irq_init
00004d40 g     F .text	00000058 _write_r
0000555c g     O .rwdata	00000004 _impure_ptr
00005668 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
000052e0 g     F .text	0000001c altera_avalon_fifo_write_other_info
00005568 g       *ABS*	00000000 _edata
0000566c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004e1c g     F .text	00000074 .hidden __modsi3
00005148 g     F .text	0000000c altera_avalon_fifo_read_ienable
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00005154 g     F .text	00000008 altera_avalon_fifo_read_almostfull
000046b8 g     F .text	0000001c strlen
0000529c g     F .text	00000028 altera_avalon_read_fifo
00005344 g     F .text	00000004 alt_icache_flush_all
00004c6c g     F .text	0000001c __vfprintf_internal
000051cc g     F .text	0000001c altera_avalon_fifo_write_almostempty
00004f74 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b55614 	ori	gp,gp,54616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10959614 	ori	r2,r2,22104

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d59b14 	ori	r3,r3,22124

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff6aec>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004f740 	call	4f74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00050540 	call	5054 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff6b00>

0000405c <print_status>:

}


void print_status(alt_u32 control_base_address)
{
    405c:	defffd04 	addi	sp,sp,-12
    4060:	dc000015 	stw	r16,0(sp)
    4064:	2021883a 	mov	r16,r4
printf("--------------------------------------\n");
    4068:	01000034 	movhi	r4,0
    406c:	2114d404 	addi	r4,r4,21328

}


void print_status(alt_u32 control_base_address)
{
    4070:	dfc00215 	stw	ra,8(sp)
    4074:	dc400115 	stw	r17,4(sp)
printf("--------------------------------------\n");
    4078:	00046a40 	call	46a4 <puts>
printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
    407c:	8009883a 	mov	r4,r16
    4080:	00051700 	call	5170 <altera_avalon_fifo_read_level>
    4084:	01000034 	movhi	r4,0
    4088:	100b883a 	mov	r5,r2
    408c:	2114de04 	addi	r4,r4,21368
    4090:	00045d80 	call	45d8 <printf>
printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
    4094:	04400fc4 	movi	r17,63
    4098:	880b883a 	mov	r5,r17
    409c:	8009883a 	mov	r4,r16
    40a0:	000513c0 	call	513c <altera_avalon_fifo_read_status>
    40a4:	01000034 	movhi	r4,0
    40a8:	100b883a 	mov	r5,r2
    40ac:	2114e104 	addi	r4,r4,21380
    40b0:	00045d80 	call	45d8 <printf>
ALTERA_AVALON_FIFO_STATUS_ALL) );
printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
    40b4:	880b883a 	mov	r5,r17
    40b8:	8009883a 	mov	r4,r16
    40bc:	00051640 	call	5164 <altera_avalon_fifo_read_event>
    40c0:	01000034 	movhi	r4,0
    40c4:	100b883a 	mov	r5,r2
    40c8:	2114e504 	addi	r4,r4,21396
    40cc:	00045d80 	call	45d8 <printf>
ALTERA_AVALON_FIFO_EVENT_ALL) );
printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    40d0:	880b883a 	mov	r5,r17
    40d4:	8009883a 	mov	r4,r16
    40d8:	00051480 	call	5148 <altera_avalon_fifo_read_ienable>
    40dc:	01000034 	movhi	r4,0
    40e0:	100b883a 	mov	r5,r2
    40e4:	2114e804 	addi	r4,r4,21408
    40e8:	00045d80 	call	45d8 <printf>
ALTERA_AVALON_FIFO_IENABLE_ALL) );
printf("ALMOSTEMPTY = %u\n",
    40ec:	8009883a 	mov	r4,r16
    40f0:	000515c0 	call	515c <altera_avalon_fifo_read_almostempty>
    40f4:	01000034 	movhi	r4,0
    40f8:	100b883a 	mov	r5,r2
    40fc:	2114ec04 	addi	r4,r4,21424
    4100:	00045d80 	call	45d8 <printf>
altera_avalon_fifo_read_almostempty(control_base_address) );
printf("ALMOSTFULL = %u\n\n",
    4104:	8009883a 	mov	r4,r16
    4108:	00051540 	call	5154 <altera_avalon_fifo_read_almostfull>
    410c:	01000034 	movhi	r4,0
    4110:	100b883a 	mov	r5,r2
    4114:	2114f104 	addi	r4,r4,21444
altera_avalon_fifo_read_almostfull(control_base_address));
}
    4118:	dfc00217 	ldw	ra,8(sp)
    411c:	dc400117 	ldw	r17,4(sp)
    4120:	dc000017 	ldw	r16,0(sp)
    4124:	dec00304 	addi	sp,sp,12
ALTERA_AVALON_FIFO_EVENT_ALL) );
printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
ALTERA_AVALON_FIFO_IENABLE_ALL) );
printf("ALMOSTEMPTY = %u\n",
altera_avalon_fifo_read_almostempty(control_base_address) );
printf("ALMOSTFULL = %u\n\n",
    4128:	00045d81 	jmpi	45d8 <printf>

0000412c <send_packet>:
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

void send_packet(alt_u32 base_address, alt_u32 ctrl_address,
                 unsigned char src, unsigned char  dest, unsigned char packsize, unsigned char *data){
    412c:	defffb04 	addi	sp,sp,-20

    unsigned int temp;

    temp = ((packsize)<<16) | ((src)<<8) | (dest);
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    4130:	d8800503 	ldbu	r2,20(sp)
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

void send_packet(alt_u32 base_address, alt_u32 ctrl_address,
                 unsigned char src, unsigned char  dest, unsigned char packsize, unsigned char *data){
    4134:	dcc00315 	stw	r19,12(sp)

    unsigned int temp;

    temp = ((packsize)<<16) | ((src)<<8) | (dest);
    4138:	34c03fcc 	andi	r19,r6,255
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    413c:	980c923a 	slli	r6,r19,8
    4140:	1004943a 	slli	r2,r2,16
    4144:	39c03fcc 	andi	r7,r7,255
    4148:	31ccb03a 	or	r6,r6,r7
    414c:	308cb03a 	or	r6,r6,r2
altera_avalon_fifo_clear_event(INPUT_FIFO_IN_CSR_BASE,
ALTERA_AVALON_FIFO_EVENT_ALL);
}*/

void send_packet(alt_u32 base_address, alt_u32 ctrl_address,
                 unsigned char src, unsigned char  dest, unsigned char packsize, unsigned char *data){
    4150:	dfc00415 	stw	ra,16(sp)
    4154:	dc800215 	stw	r18,8(sp)
    4158:	dc400115 	stw	r17,4(sp)
    415c:	2825883a 	mov	r18,r5
    4160:	2023883a 	mov	r17,r4
    4164:	dc000015 	stw	r16,0(sp)
    4168:	dc000617 	ldw	r16,24(sp)

    unsigned int temp;

    temp = ((packsize)<<16) | ((src)<<8) | (dest);
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    416c:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>

    temp = (src)<<24;
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    4170:	980c963a 	slli	r6,r19,24
    4174:	900b883a 	mov	r5,r18
    4178:	8809883a 	mov	r4,r17
    417c:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>
    4180:	80800043 	ldbu	r2,1(r16)
    4184:	81000003 	ldbu	r4,0(r16)
    4188:	818000c3 	ldbu	r6,3(r16)
    418c:	1004923a 	slli	r2,r2,8

    temp = ((*(data + 3))<<24) | ((*(data + 2))<<16) | ((*(data + 1))<<8) | ((*data));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    4190:	900b883a 	mov	r5,r18
    4194:	300c963a 	slli	r6,r6,24
    4198:	1106b03a 	or	r3,r2,r4
    419c:	80800083 	ldbu	r2,2(r16)
    41a0:	8809883a 	mov	r4,r17
    41a4:	1004943a 	slli	r2,r2,16
    41a8:	10c4b03a 	or	r2,r2,r3
    41ac:	308cb03a 	or	r6,r6,r2
    41b0:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>
    41b4:	80800143 	ldbu	r2,5(r16)
    41b8:	81000103 	ldbu	r4,4(r16)
    41bc:	818001c3 	ldbu	r6,7(r16)
    41c0:	1004923a 	slli	r2,r2,8

    temp = ((*(data + 7))<<24) | ((*(data + 6))<<16) | ((*(data + 5))<<8) | ((*(data + 4)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    41c4:	900b883a 	mov	r5,r18
    41c8:	300c963a 	slli	r6,r6,24
    41cc:	1106b03a 	or	r3,r2,r4
    41d0:	80800183 	ldbu	r2,6(r16)
    41d4:	8809883a 	mov	r4,r17
    41d8:	1004943a 	slli	r2,r2,16
    41dc:	10c4b03a 	or	r2,r2,r3
    41e0:	308cb03a 	or	r6,r6,r2
    41e4:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>
    41e8:	80800243 	ldbu	r2,9(r16)
    41ec:	81000203 	ldbu	r4,8(r16)
    41f0:	818002c3 	ldbu	r6,11(r16)
    41f4:	1004923a 	slli	r2,r2,8

    temp = ((*(data + 11))<<24) | ((*(data + 10))<<16) | ((*(data + 9))<<8) | ((*(data + 8)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    41f8:	900b883a 	mov	r5,r18
    41fc:	300c963a 	slli	r6,r6,24
    4200:	1106b03a 	or	r3,r2,r4
    4204:	80800283 	ldbu	r2,10(r16)
    4208:	8809883a 	mov	r4,r17
    420c:	1004943a 	slli	r2,r2,16
    4210:	10c4b03a 	or	r2,r2,r3
    4214:	308cb03a 	or	r6,r6,r2
    4218:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>
    421c:	80800343 	ldbu	r2,13(r16)
    4220:	81000303 	ldbu	r4,12(r16)
    4224:	818003c3 	ldbu	r6,15(r16)
    4228:	1004923a 	slli	r2,r2,8

    temp = ((*(data + 15))<<24) | ((*(data + 14))<<16) | ((*(data + 13))<<8) | ((*(data + 12)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    422c:	900b883a 	mov	r5,r18
    4230:	300c963a 	slli	r6,r6,24
    4234:	1106b03a 	or	r3,r2,r4
    4238:	80800383 	ldbu	r2,14(r16)
    423c:	8809883a 	mov	r4,r17
    4240:	1004943a 	slli	r2,r2,16
    4244:	10c4b03a 	or	r2,r2,r3
    4248:	308cb03a 	or	r6,r6,r2
    424c:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>
    4250:	80800443 	ldbu	r2,17(r16)
    4254:	81000403 	ldbu	r4,16(r16)
    4258:	818004c3 	ldbu	r6,19(r16)
    425c:	1004923a 	slli	r2,r2,8

    temp = ((*(data + 19))<<24) | ((*(data + 18))<<16) | ((*(data + 17))<<8) | ((*(data + 16)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    4260:	900b883a 	mov	r5,r18
    4264:	300c963a 	slli	r6,r6,24
    4268:	1106b03a 	or	r3,r2,r4
    426c:	80800483 	ldbu	r2,18(r16)
    4270:	8809883a 	mov	r4,r17
    4274:	1004943a 	slli	r2,r2,16
    4278:	10c4b03a 	or	r2,r2,r3
    427c:	308cb03a 	or	r6,r6,r2
    4280:	00052800 	call	5280 <altera_avalon_fifo_write_fifo>
    4284:	80800543 	ldbu	r2,21(r16)
    4288:	81000503 	ldbu	r4,20(r16)
    428c:	818005c3 	ldbu	r6,23(r16)
    4290:	1004923a 	slli	r2,r2,8

    temp = ((*(data + 23))<<24) | ((*(data + 22))<<16) | ((*(data + 21))<<8) | ((*(data + 20)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    4294:	900b883a 	mov	r5,r18
    4298:	300c963a 	slli	r6,r6,24
    429c:	1106b03a 	or	r3,r2,r4
    42a0:	80800583 	ldbu	r2,22(r16)
    42a4:	8809883a 	mov	r4,r17
    42a8:	1004943a 	slli	r2,r2,16
    42ac:	10c4b03a 	or	r2,r2,r3
    42b0:	308cb03a 	or	r6,r6,r2

}
    42b4:	dfc00417 	ldw	ra,16(sp)
    42b8:	dcc00317 	ldw	r19,12(sp)
    42bc:	dc800217 	ldw	r18,8(sp)
    42c0:	dc400117 	ldw	r17,4(sp)
    42c4:	dc000017 	ldw	r16,0(sp)
    42c8:	dec00504 	addi	sp,sp,20

    temp = ((*(data + 19))<<24) | ((*(data + 18))<<16) | ((*(data + 17))<<8) | ((*(data + 16)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);

    temp = ((*(data + 23))<<24) | ((*(data + 22))<<16) | ((*(data + 21))<<8) | ((*(data + 20)));
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);
    42cc:	00052801 	jmpi	5280 <altera_avalon_fifo_write_fifo>

000042d0 <main>:

}

int main()
{
    42d0:	defff704 	addi	sp,sp,-36
  int status;
  int value;
  unsigned char array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
    42d4:	01400034 	movhi	r5,0
    42d8:	01800604 	movi	r6,24
    42dc:	29551744 	addi	r5,r5,21597
    42e0:	d9000204 	addi	r4,sp,8
    altera_avalon_fifo_write_fifo(base_address, ctrl_address, temp);

}

int main()
{
    42e4:	dfc00815 	stw	ra,32(sp)
  int status;
  int value;
  unsigned char array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
    42e8:	00045740 	call	4574 <memcpy>
  alt_putstr("Hello from Nios II!\n");
    42ec:	01000034 	movhi	r4,0
    42f0:	2114f604 	addi	r4,r4,21464
    42f4:	00050800 	call	5080 <alt_putstr>
input_fifo_wrclk_irq_event_ptr, handle_input_fifo_wrclk_interrupts );

*/

int return_code = ALTERA_AVALON_FIFO_OK;
return_code = altera_avalon_fifo_init(control_base_address,
    42f8:	01c002c4 	movi	r7,11
    42fc:	01800084 	movi	r6,2
    4300:	000b883a 	mov	r5,zero
    4304:	01240814 	movui	r4,36896
    4308:	00051e80 	call	51e8 <altera_avalon_fifo_init>
    430c:	01c002c4 	movi	r7,11
    4310:	01800084 	movi	r6,2
    4314:	000b883a 	mov	r5,zero
    4318:	01240014 	movui	r4,36864
    431c:	00051e80 	call	51e8 <altera_avalon_fifo_init>

  //initialization of FIFOs
  init_input_fifo_wrclk_control(FIFO_SINK_00_IN_CSR_BASE);
  init_input_fifo_wrclk_control(FIFO_SOURCE_00_IN_CSR_BASE);

  alt_putstr("source status:\n");
    4320:	01000034 	movhi	r4,0
    4324:	2114fc04 	addi	r4,r4,21488
    4328:	00050800 	call	5080 <alt_putstr>
  print_status(FIFO_SOURCE_00_IN_CSR_BASE);
    432c:	01240014 	movui	r4,36864
    4330:	000405c0 	call	405c <print_status>

  alt_putstr("sink status:\n");
    4334:	01000034 	movhi	r4,0
    4338:	21150004 	addi	r4,r4,21504
    433c:	00050800 	call	5080 <alt_putstr>
  print_status(FIFO_SINK_00_IN_CSR_BASE);
    4340:	01240814 	movui	r4,36896
    4344:	000405c0 	call	405c <print_status>

  alt_putstr("read from FIFO:\n");
    4348:	01000034 	movhi	r4,0
    434c:	21150404 	addi	r4,r4,21520
    4350:	00050800 	call	5080 <alt_putstr>

    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4354:	01640814 	movui	r5,36896
    4358:	01241014 	movui	r4,36928
    435c:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    4360:	01000034 	movhi	r4,0
    4364:	100b883a 	mov	r5,r2
    4368:	21150904 	addi	r4,r4,21540
    436c:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4370:	01640814 	movui	r5,36896
    4374:	01241014 	movui	r4,36928
    4378:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    437c:	01000034 	movhi	r4,0
    4380:	100b883a 	mov	r5,r2
    4384:	21150904 	addi	r4,r4,21540
    4388:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    438c:	01640814 	movui	r5,36896
    4390:	01241014 	movui	r4,36928
    4394:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    4398:	01000034 	movhi	r4,0
    439c:	100b883a 	mov	r5,r2
    43a0:	21150904 	addi	r4,r4,21540
    43a4:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    43a8:	01640814 	movui	r5,36896
    43ac:	01241014 	movui	r4,36928
    43b0:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    43b4:	01000034 	movhi	r4,0
    43b8:	100b883a 	mov	r5,r2
    43bc:	21150904 	addi	r4,r4,21540
    43c0:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    43c4:	01640814 	movui	r5,36896
    43c8:	01241014 	movui	r4,36928
    43cc:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    43d0:	01000034 	movhi	r4,0
    43d4:	100b883a 	mov	r5,r2
    43d8:	21150904 	addi	r4,r4,21540
    43dc:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    43e0:	01640814 	movui	r5,36896
    43e4:	01241014 	movui	r4,36928
    43e8:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    43ec:	01000034 	movhi	r4,0
    43f0:	100b883a 	mov	r5,r2
    43f4:	21150904 	addi	r4,r4,21540
    43f8:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    43fc:	01640814 	movui	r5,36896
    4400:	01241014 	movui	r4,36928
    4404:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    4408:	01000034 	movhi	r4,0
    440c:	100b883a 	mov	r5,r2
    4410:	21150904 	addi	r4,r4,21540
    4414:	00045d80 	call	45d8 <printf>
    value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4418:	01640814 	movui	r5,36896
    441c:	01241014 	movui	r4,36928
    4420:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
    printf("value = %d\n",value);
    4424:	01000034 	movhi	r4,0
    4428:	100b883a 	mov	r5,r2
    442c:	21150904 	addi	r4,r4,21540
    4430:	00045d80 	call	45d8 <printf>


  alt_putstr("write to FIFO\n");
    4434:	01000034 	movhi	r4,0
    4438:	21150c04 	addi	r4,r4,21552
    443c:	00050800 	call	5080 <alt_putstr>



  //writeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee

  send_packet(FIFO_SOURCE_00_IN_BASE,FIFO_SOURCE_00_IN_CSR_BASE,0x0,0x1,0x20,array);
    4440:	d8800204 	addi	r2,sp,8
    4444:	d8800115 	stw	r2,4(sp)
    4448:	00800804 	movi	r2,32
    444c:	01241214 	movui	r4,36936
    4450:	d8800015 	stw	r2,0(sp)
    4454:	01c00044 	movi	r7,1
    4458:	000d883a 	mov	r6,zero
    445c:	01640014 	movui	r5,36864
    4460:	000412c0 	call	412c <send_packet>
  altera_avalon_fifo_write_fifo(FIFO_SOURCE_00_IN_BASE, FIFO_SOURCE_00_IN_CSR_BASE,0x0);
  altera_avalon_fifo_write_fifo(FIFO_SOURCE_00_IN_BASE, FIFO_SOURCE_00_IN_CSR_BASE,0x0);
  altera_avalon_fifo_write_fifo(FIFO_SOURCE_00_IN_BASE, FIFO_SOURCE_00_IN_CSR_BASE,0x0);
  altera_avalon_fifo_write_fifo(FIFO_SOURCE_00_IN_BASE, FIFO_SOURCE_00_IN_CSR_BASE,0x0);*/

  alt_putstr("waiting for receiving data:\n");
    4464:	01000034 	movhi	r4,0
    4468:	21151004 	addi	r4,r4,21568
    446c:	00050800 	call	5080 <alt_putstr>
  status = altera_avalon_fifo_read_status(FIFO_SINK_00_IN_CSR_BASE,ALTERA_AVALON_FIFO_STATUS_ALL);
  while(status & 0x02){
	  status = altera_avalon_fifo_read_status(FIFO_SINK_00_IN_CSR_BASE,ALTERA_AVALON_FIFO_STATUS_ALL);
    4470:	01400fc4 	movi	r5,63
    4474:	01240814 	movui	r4,36896
    4478:	000513c0 	call	513c <altera_avalon_fifo_read_status>
  altera_avalon_fifo_write_fifo(FIFO_SOURCE_00_IN_BASE, FIFO_SOURCE_00_IN_CSR_BASE,0x0);
  altera_avalon_fifo_write_fifo(FIFO_SOURCE_00_IN_BASE, FIFO_SOURCE_00_IN_CSR_BASE,0x0);*/

  alt_putstr("waiting for receiving data:\n");
  status = altera_avalon_fifo_read_status(FIFO_SINK_00_IN_CSR_BASE,ALTERA_AVALON_FIFO_STATUS_ALL);
  while(status & 0x02){
    447c:	1080008c 	andi	r2,r2,2
    4480:	103ffb1e 	bne	r2,zero,4470 <_gp+0xffff6f18>
	  status = altera_avalon_fifo_read_status(FIFO_SINK_00_IN_CSR_BASE,ALTERA_AVALON_FIFO_STATUS_ALL);
  }

  alt_putstr("read from FIFO:\n");
    4484:	01000034 	movhi	r4,0
    4488:	21150404 	addi	r4,r4,21520
    448c:	00050800 	call	5080 <alt_putstr>

  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4490:	01640814 	movui	r5,36896
    4494:	01241014 	movui	r4,36928
    4498:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    449c:	01000034 	movhi	r4,0
    44a0:	100b883a 	mov	r5,r2
    44a4:	21150904 	addi	r4,r4,21540
    44a8:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    44ac:	01640814 	movui	r5,36896
    44b0:	01241014 	movui	r4,36928
    44b4:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    44b8:	01000034 	movhi	r4,0
    44bc:	100b883a 	mov	r5,r2
    44c0:	21150904 	addi	r4,r4,21540
    44c4:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    44c8:	01640814 	movui	r5,36896
    44cc:	01241014 	movui	r4,36928
    44d0:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    44d4:	01000034 	movhi	r4,0
    44d8:	100b883a 	mov	r5,r2
    44dc:	21150904 	addi	r4,r4,21540
    44e0:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    44e4:	01640814 	movui	r5,36896
    44e8:	01241014 	movui	r4,36928
    44ec:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    44f0:	01000034 	movhi	r4,0
    44f4:	100b883a 	mov	r5,r2
    44f8:	21150904 	addi	r4,r4,21540
    44fc:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4500:	01640814 	movui	r5,36896
    4504:	01241014 	movui	r4,36928
    4508:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    450c:	01000034 	movhi	r4,0
    4510:	100b883a 	mov	r5,r2
    4514:	21150904 	addi	r4,r4,21540
    4518:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    451c:	01640814 	movui	r5,36896
    4520:	01241014 	movui	r4,36928
    4524:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    4528:	01000034 	movhi	r4,0
    452c:	100b883a 	mov	r5,r2
    4530:	21150904 	addi	r4,r4,21540
    4534:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4538:	01640814 	movui	r5,36896
    453c:	01241014 	movui	r4,36928
    4540:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    4544:	01000034 	movhi	r4,0
    4548:	100b883a 	mov	r5,r2
    454c:	21150904 	addi	r4,r4,21540
    4550:	00045d80 	call	45d8 <printf>
  value = altera_avalon_fifo_read_fifo(FIFO_SINK_00_OUT_BASE, FIFO_SINK_00_IN_CSR_BASE);
    4554:	01640814 	movui	r5,36896
    4558:	01241014 	movui	r4,36928
    455c:	00052c40 	call	52c4 <altera_avalon_fifo_read_fifo>
  printf("value = %d\n",value);
    4560:	01000034 	movhi	r4,0
    4564:	100b883a 	mov	r5,r2
    4568:	21150904 	addi	r4,r4,21540
    456c:	00045d80 	call	45d8 <printf>
    4570:	003fff06 	br	4570 <_gp+0xffff7018>

00004574 <memcpy>:
    4574:	2005883a 	mov	r2,r4
    4578:	2007883a 	mov	r3,r4
    457c:	218d883a 	add	r6,r4,r6
    4580:	19800526 	beq	r3,r6,4598 <memcpy+0x24>
    4584:	29000003 	ldbu	r4,0(r5)
    4588:	18c00044 	addi	r3,r3,1
    458c:	29400044 	addi	r5,r5,1
    4590:	193fffc5 	stb	r4,-1(r3)
    4594:	003ffa06 	br	4580 <_gp+0xffff7028>
    4598:	f800283a 	ret

0000459c <_printf_r>:
    459c:	defffd04 	addi	sp,sp,-12
    45a0:	dfc00015 	stw	ra,0(sp)
    45a4:	d9800115 	stw	r6,4(sp)
    45a8:	d9c00215 	stw	r7,8(sp)
    45ac:	20c00217 	ldw	r3,8(r4)
    45b0:	01800034 	movhi	r6,0
    45b4:	31932204 	addi	r6,r6,19592
    45b8:	19800115 	stw	r6,4(r3)
    45bc:	280d883a 	mov	r6,r5
    45c0:	21400217 	ldw	r5,8(r4)
    45c4:	d9c00104 	addi	r7,sp,4
    45c8:	00047400 	call	4740 <___vfprintf_internal_r>
    45cc:	dfc00017 	ldw	ra,0(sp)
    45d0:	dec00304 	addi	sp,sp,12
    45d4:	f800283a 	ret

000045d8 <printf>:
    45d8:	defffc04 	addi	sp,sp,-16
    45dc:	dfc00015 	stw	ra,0(sp)
    45e0:	d9400115 	stw	r5,4(sp)
    45e4:	d9800215 	stw	r6,8(sp)
    45e8:	d9c00315 	stw	r7,12(sp)
    45ec:	00800034 	movhi	r2,0
    45f0:	10955704 	addi	r2,r2,21852
    45f4:	10800017 	ldw	r2,0(r2)
    45f8:	01400034 	movhi	r5,0
    45fc:	29532204 	addi	r5,r5,19592
    4600:	10c00217 	ldw	r3,8(r2)
    4604:	d9800104 	addi	r6,sp,4
    4608:	19400115 	stw	r5,4(r3)
    460c:	200b883a 	mov	r5,r4
    4610:	11000217 	ldw	r4,8(r2)
    4614:	0004c6c0 	call	4c6c <__vfprintf_internal>
    4618:	dfc00017 	ldw	ra,0(sp)
    461c:	dec00404 	addi	sp,sp,16
    4620:	f800283a 	ret

00004624 <_puts_r>:
    4624:	defffd04 	addi	sp,sp,-12
    4628:	dc000015 	stw	r16,0(sp)
    462c:	2021883a 	mov	r16,r4
    4630:	2809883a 	mov	r4,r5
    4634:	dfc00215 	stw	ra,8(sp)
    4638:	dc400115 	stw	r17,4(sp)
    463c:	2823883a 	mov	r17,r5
    4640:	00046b80 	call	46b8 <strlen>
    4644:	81400217 	ldw	r5,8(r16)
    4648:	01000034 	movhi	r4,0
    464c:	21132204 	addi	r4,r4,19592
    4650:	29000115 	stw	r4,4(r5)
    4654:	100f883a 	mov	r7,r2
    4658:	880d883a 	mov	r6,r17
    465c:	8009883a 	mov	r4,r16
    4660:	0004c880 	call	4c88 <__sfvwrite_small_dev>
    4664:	00ffffc4 	movi	r3,-1
    4668:	10c00926 	beq	r2,r3,4690 <_puts_r+0x6c>
    466c:	81400217 	ldw	r5,8(r16)
    4670:	01800034 	movhi	r6,0
    4674:	01c00044 	movi	r7,1
    4678:	28800117 	ldw	r2,4(r5)
    467c:	3194f504 	addi	r6,r6,21460
    4680:	8009883a 	mov	r4,r16
    4684:	103ee83a 	callr	r2
    4688:	10bfffe0 	cmpeqi	r2,r2,-1
    468c:	0085c83a 	sub	r2,zero,r2
    4690:	dfc00217 	ldw	ra,8(sp)
    4694:	dc400117 	ldw	r17,4(sp)
    4698:	dc000017 	ldw	r16,0(sp)
    469c:	dec00304 	addi	sp,sp,12
    46a0:	f800283a 	ret

000046a4 <puts>:
    46a4:	00800034 	movhi	r2,0
    46a8:	10955704 	addi	r2,r2,21852
    46ac:	200b883a 	mov	r5,r4
    46b0:	11000017 	ldw	r4,0(r2)
    46b4:	00046241 	jmpi	4624 <_puts_r>

000046b8 <strlen>:
    46b8:	2005883a 	mov	r2,r4
    46bc:	10c00007 	ldb	r3,0(r2)
    46c0:	18000226 	beq	r3,zero,46cc <strlen+0x14>
    46c4:	10800044 	addi	r2,r2,1
    46c8:	003ffc06 	br	46bc <_gp+0xffff7164>
    46cc:	1105c83a 	sub	r2,r2,r4
    46d0:	f800283a 	ret

000046d4 <print_repeat>:
    46d4:	defffb04 	addi	sp,sp,-20
    46d8:	dc800315 	stw	r18,12(sp)
    46dc:	dc400215 	stw	r17,8(sp)
    46e0:	dc000115 	stw	r16,4(sp)
    46e4:	dfc00415 	stw	ra,16(sp)
    46e8:	2025883a 	mov	r18,r4
    46ec:	2823883a 	mov	r17,r5
    46f0:	d9800005 	stb	r6,0(sp)
    46f4:	3821883a 	mov	r16,r7
    46f8:	04000a0e 	bge	zero,r16,4724 <print_repeat+0x50>
    46fc:	88800117 	ldw	r2,4(r17)
    4700:	01c00044 	movi	r7,1
    4704:	d80d883a 	mov	r6,sp
    4708:	880b883a 	mov	r5,r17
    470c:	9009883a 	mov	r4,r18
    4710:	103ee83a 	callr	r2
    4714:	843fffc4 	addi	r16,r16,-1
    4718:	103ff726 	beq	r2,zero,46f8 <_gp+0xffff71a0>
    471c:	00bfffc4 	movi	r2,-1
    4720:	00000106 	br	4728 <print_repeat+0x54>
    4724:	0005883a 	mov	r2,zero
    4728:	dfc00417 	ldw	ra,16(sp)
    472c:	dc800317 	ldw	r18,12(sp)
    4730:	dc400217 	ldw	r17,8(sp)
    4734:	dc000117 	ldw	r16,4(sp)
    4738:	dec00504 	addi	sp,sp,20
    473c:	f800283a 	ret

00004740 <___vfprintf_internal_r>:
    4740:	deffe504 	addi	sp,sp,-108
    4744:	d8c00804 	addi	r3,sp,32
    4748:	ddc01815 	stw	r23,96(sp)
    474c:	dd801715 	stw	r22,92(sp)
    4750:	dd401615 	stw	r21,88(sp)
    4754:	dd001515 	stw	r20,84(sp)
    4758:	dcc01415 	stw	r19,80(sp)
    475c:	dc801315 	stw	r18,76(sp)
    4760:	dc401215 	stw	r17,72(sp)
    4764:	dc001115 	stw	r16,68(sp)
    4768:	dfc01a15 	stw	ra,104(sp)
    476c:	df001915 	stw	fp,100(sp)
    4770:	2029883a 	mov	r20,r4
    4774:	2823883a 	mov	r17,r5
    4778:	382d883a 	mov	r22,r7
    477c:	d9800f15 	stw	r6,60(sp)
    4780:	0021883a 	mov	r16,zero
    4784:	d8000e15 	stw	zero,56(sp)
    4788:	d8000a15 	stw	zero,40(sp)
    478c:	002b883a 	mov	r21,zero
    4790:	0027883a 	mov	r19,zero
    4794:	0025883a 	mov	r18,zero
    4798:	d8000c15 	stw	zero,48(sp)
    479c:	d8000b15 	stw	zero,44(sp)
    47a0:	002f883a 	mov	r23,zero
    47a4:	d8c00915 	stw	r3,36(sp)
    47a8:	d8c00f17 	ldw	r3,60(sp)
    47ac:	19000003 	ldbu	r4,0(r3)
    47b0:	20803fcc 	andi	r2,r4,255
    47b4:	1080201c 	xori	r2,r2,128
    47b8:	10bfe004 	addi	r2,r2,-128
    47bc:	10011e26 	beq	r2,zero,4c38 <___vfprintf_internal_r+0x4f8>
    47c0:	00c00044 	movi	r3,1
    47c4:	b8c01426 	beq	r23,r3,4818 <___vfprintf_internal_r+0xd8>
    47c8:	1dc00216 	blt	r3,r23,47d4 <___vfprintf_internal_r+0x94>
    47cc:	b8000626 	beq	r23,zero,47e8 <___vfprintf_internal_r+0xa8>
    47d0:	00011506 	br	4c28 <___vfprintf_internal_r+0x4e8>
    47d4:	01400084 	movi	r5,2
    47d8:	b9401d26 	beq	r23,r5,4850 <___vfprintf_internal_r+0x110>
    47dc:	014000c4 	movi	r5,3
    47e0:	b9402b26 	beq	r23,r5,4890 <___vfprintf_internal_r+0x150>
    47e4:	00011006 	br	4c28 <___vfprintf_internal_r+0x4e8>
    47e8:	01400944 	movi	r5,37
    47ec:	1140fc26 	beq	r2,r5,4be0 <___vfprintf_internal_r+0x4a0>
    47f0:	88800117 	ldw	r2,4(r17)
    47f4:	d9000005 	stb	r4,0(sp)
    47f8:	01c00044 	movi	r7,1
    47fc:	d80d883a 	mov	r6,sp
    4800:	880b883a 	mov	r5,r17
    4804:	a009883a 	mov	r4,r20
    4808:	103ee83a 	callr	r2
    480c:	1000d81e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4810:	84000044 	addi	r16,r16,1
    4814:	00010406 	br	4c28 <___vfprintf_internal_r+0x4e8>
    4818:	01400c04 	movi	r5,48
    481c:	1140fa26 	beq	r2,r5,4c08 <___vfprintf_internal_r+0x4c8>
    4820:	01400944 	movi	r5,37
    4824:	11400a1e 	bne	r2,r5,4850 <___vfprintf_internal_r+0x110>
    4828:	d8800005 	stb	r2,0(sp)
    482c:	88800117 	ldw	r2,4(r17)
    4830:	b80f883a 	mov	r7,r23
    4834:	d80d883a 	mov	r6,sp
    4838:	880b883a 	mov	r5,r17
    483c:	a009883a 	mov	r4,r20
    4840:	103ee83a 	callr	r2
    4844:	1000ca1e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4848:	84000044 	addi	r16,r16,1
    484c:	0000f506 	br	4c24 <___vfprintf_internal_r+0x4e4>
    4850:	25fff404 	addi	r23,r4,-48
    4854:	bdc03fcc 	andi	r23,r23,255
    4858:	00c00244 	movi	r3,9
    485c:	1dc00936 	bltu	r3,r23,4884 <___vfprintf_internal_r+0x144>
    4860:	00bfffc4 	movi	r2,-1
    4864:	90800426 	beq	r18,r2,4878 <___vfprintf_internal_r+0x138>
    4868:	01400284 	movi	r5,10
    486c:	9009883a 	mov	r4,r18
    4870:	0004f4c0 	call	4f4c <__mulsi3>
    4874:	00000106 	br	487c <___vfprintf_internal_r+0x13c>
    4878:	0005883a 	mov	r2,zero
    487c:	b8a5883a 	add	r18,r23,r2
    4880:	0000e206 	br	4c0c <___vfprintf_internal_r+0x4cc>
    4884:	01400b84 	movi	r5,46
    4888:	1140e426 	beq	r2,r5,4c1c <___vfprintf_internal_r+0x4dc>
    488c:	05c00084 	movi	r23,2
    4890:	213ff404 	addi	r4,r4,-48
    4894:	27003fcc 	andi	fp,r4,255
    4898:	00c00244 	movi	r3,9
    489c:	1f000936 	bltu	r3,fp,48c4 <___vfprintf_internal_r+0x184>
    48a0:	00bfffc4 	movi	r2,-1
    48a4:	98800426 	beq	r19,r2,48b8 <___vfprintf_internal_r+0x178>
    48a8:	01400284 	movi	r5,10
    48ac:	9809883a 	mov	r4,r19
    48b0:	0004f4c0 	call	4f4c <__mulsi3>
    48b4:	00000106 	br	48bc <___vfprintf_internal_r+0x17c>
    48b8:	0005883a 	mov	r2,zero
    48bc:	e0a7883a 	add	r19,fp,r2
    48c0:	0000d906 	br	4c28 <___vfprintf_internal_r+0x4e8>
    48c4:	00c01b04 	movi	r3,108
    48c8:	10c0d226 	beq	r2,r3,4c14 <___vfprintf_internal_r+0x4d4>
    48cc:	013fffc4 	movi	r4,-1
    48d0:	99000226 	beq	r19,r4,48dc <___vfprintf_internal_r+0x19c>
    48d4:	d8000b15 	stw	zero,44(sp)
    48d8:	00000106 	br	48e0 <___vfprintf_internal_r+0x1a0>
    48dc:	04c00044 	movi	r19,1
    48e0:	01001a44 	movi	r4,105
    48e4:	11001626 	beq	r2,r4,4940 <___vfprintf_internal_r+0x200>
    48e8:	20800916 	blt	r4,r2,4910 <___vfprintf_internal_r+0x1d0>
    48ec:	010018c4 	movi	r4,99
    48f0:	11008826 	beq	r2,r4,4b14 <___vfprintf_internal_r+0x3d4>
    48f4:	01001904 	movi	r4,100
    48f8:	11001126 	beq	r2,r4,4940 <___vfprintf_internal_r+0x200>
    48fc:	01001604 	movi	r4,88
    4900:	1100c81e 	bne	r2,r4,4c24 <___vfprintf_internal_r+0x4e4>
    4904:	00c00044 	movi	r3,1
    4908:	d8c00e15 	stw	r3,56(sp)
    490c:	00001506 	br	4964 <___vfprintf_internal_r+0x224>
    4910:	01001cc4 	movi	r4,115
    4914:	11009826 	beq	r2,r4,4b78 <___vfprintf_internal_r+0x438>
    4918:	20800416 	blt	r4,r2,492c <___vfprintf_internal_r+0x1ec>
    491c:	01001bc4 	movi	r4,111
    4920:	1100c01e 	bne	r2,r4,4c24 <___vfprintf_internal_r+0x4e4>
    4924:	05400204 	movi	r21,8
    4928:	00000f06 	br	4968 <___vfprintf_internal_r+0x228>
    492c:	01001d44 	movi	r4,117
    4930:	11000d26 	beq	r2,r4,4968 <___vfprintf_internal_r+0x228>
    4934:	01001e04 	movi	r4,120
    4938:	11000a26 	beq	r2,r4,4964 <___vfprintf_internal_r+0x224>
    493c:	0000b906 	br	4c24 <___vfprintf_internal_r+0x4e4>
    4940:	d8c00a17 	ldw	r3,40(sp)
    4944:	b7000104 	addi	fp,r22,4
    4948:	18000726 	beq	r3,zero,4968 <___vfprintf_internal_r+0x228>
    494c:	df000d15 	stw	fp,52(sp)
    4950:	b5c00017 	ldw	r23,0(r22)
    4954:	b800080e 	bge	r23,zero,4978 <___vfprintf_internal_r+0x238>
    4958:	05efc83a 	sub	r23,zero,r23
    495c:	02400044 	movi	r9,1
    4960:	00000606 	br	497c <___vfprintf_internal_r+0x23c>
    4964:	05400404 	movi	r21,16
    4968:	b0c00104 	addi	r3,r22,4
    496c:	d8c00d15 	stw	r3,52(sp)
    4970:	b5c00017 	ldw	r23,0(r22)
    4974:	d8000a15 	stw	zero,40(sp)
    4978:	0013883a 	mov	r9,zero
    497c:	d839883a 	mov	fp,sp
    4980:	b8001726 	beq	r23,zero,49e0 <___vfprintf_internal_r+0x2a0>
    4984:	a80b883a 	mov	r5,r21
    4988:	b809883a 	mov	r4,r23
    498c:	da401015 	stw	r9,64(sp)
    4990:	0004e900 	call	4e90 <__udivsi3>
    4994:	a80b883a 	mov	r5,r21
    4998:	1009883a 	mov	r4,r2
    499c:	102d883a 	mov	r22,r2
    49a0:	0004f4c0 	call	4f4c <__mulsi3>
    49a4:	b885c83a 	sub	r2,r23,r2
    49a8:	00c00244 	movi	r3,9
    49ac:	da401017 	ldw	r9,64(sp)
    49b0:	18800216 	blt	r3,r2,49bc <___vfprintf_internal_r+0x27c>
    49b4:	10800c04 	addi	r2,r2,48
    49b8:	00000506 	br	49d0 <___vfprintf_internal_r+0x290>
    49bc:	d8c00e17 	ldw	r3,56(sp)
    49c0:	18000226 	beq	r3,zero,49cc <___vfprintf_internal_r+0x28c>
    49c4:	10800dc4 	addi	r2,r2,55
    49c8:	00000106 	br	49d0 <___vfprintf_internal_r+0x290>
    49cc:	108015c4 	addi	r2,r2,87
    49d0:	e0800005 	stb	r2,0(fp)
    49d4:	b02f883a 	mov	r23,r22
    49d8:	e7000044 	addi	fp,fp,1
    49dc:	003fe806 	br	4980 <_gp+0xffff7428>
    49e0:	e6efc83a 	sub	r23,fp,sp
    49e4:	9dc5c83a 	sub	r2,r19,r23
    49e8:	0080090e 	bge	zero,r2,4a10 <___vfprintf_internal_r+0x2d0>
    49ec:	e085883a 	add	r2,fp,r2
    49f0:	01400c04 	movi	r5,48
    49f4:	d8c00917 	ldw	r3,36(sp)
    49f8:	e009883a 	mov	r4,fp
    49fc:	e0c0032e 	bgeu	fp,r3,4a0c <___vfprintf_internal_r+0x2cc>
    4a00:	e7000044 	addi	fp,fp,1
    4a04:	21400005 	stb	r5,0(r4)
    4a08:	e0bffa1e 	bne	fp,r2,49f4 <_gp+0xffff749c>
    4a0c:	e6efc83a 	sub	r23,fp,sp
    4a10:	d8c00b17 	ldw	r3,44(sp)
    4a14:	4dd1883a 	add	r8,r9,r23
    4a18:	922dc83a 	sub	r22,r18,r8
    4a1c:	18001626 	beq	r3,zero,4a78 <___vfprintf_internal_r+0x338>
    4a20:	48000a26 	beq	r9,zero,4a4c <___vfprintf_internal_r+0x30c>
    4a24:	00800b44 	movi	r2,45
    4a28:	d8800805 	stb	r2,32(sp)
    4a2c:	88800117 	ldw	r2,4(r17)
    4a30:	01c00044 	movi	r7,1
    4a34:	d9800804 	addi	r6,sp,32
    4a38:	880b883a 	mov	r5,r17
    4a3c:	a009883a 	mov	r4,r20
    4a40:	103ee83a 	callr	r2
    4a44:	10004a1e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4a48:	84000044 	addi	r16,r16,1
    4a4c:	0580070e 	bge	zero,r22,4a6c <___vfprintf_internal_r+0x32c>
    4a50:	b00f883a 	mov	r7,r22
    4a54:	01800c04 	movi	r6,48
    4a58:	880b883a 	mov	r5,r17
    4a5c:	a009883a 	mov	r4,r20
    4a60:	00046d40 	call	46d4 <print_repeat>
    4a64:	1000421e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4a68:	85a1883a 	add	r16,r16,r22
    4a6c:	e02d883a 	mov	r22,fp
    4a70:	bf2fc83a 	sub	r23,r23,fp
    4a74:	00002006 	br	4af8 <___vfprintf_internal_r+0x3b8>
    4a78:	0580090e 	bge	zero,r22,4aa0 <___vfprintf_internal_r+0x360>
    4a7c:	b00f883a 	mov	r7,r22
    4a80:	01800804 	movi	r6,32
    4a84:	880b883a 	mov	r5,r17
    4a88:	a009883a 	mov	r4,r20
    4a8c:	da401015 	stw	r9,64(sp)
    4a90:	00046d40 	call	46d4 <print_repeat>
    4a94:	da401017 	ldw	r9,64(sp)
    4a98:	1000351e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4a9c:	85a1883a 	add	r16,r16,r22
    4aa0:	483ff226 	beq	r9,zero,4a6c <_gp+0xffff7514>
    4aa4:	00800b44 	movi	r2,45
    4aa8:	d8800805 	stb	r2,32(sp)
    4aac:	88800117 	ldw	r2,4(r17)
    4ab0:	01c00044 	movi	r7,1
    4ab4:	d9800804 	addi	r6,sp,32
    4ab8:	880b883a 	mov	r5,r17
    4abc:	a009883a 	mov	r4,r20
    4ac0:	103ee83a 	callr	r2
    4ac4:	10002a1e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4ac8:	84000044 	addi	r16,r16,1
    4acc:	003fe706 	br	4a6c <_gp+0xffff7514>
    4ad0:	b5bfffc4 	addi	r22,r22,-1
    4ad4:	b0800003 	ldbu	r2,0(r22)
    4ad8:	01c00044 	movi	r7,1
    4adc:	d9800804 	addi	r6,sp,32
    4ae0:	d8800805 	stb	r2,32(sp)
    4ae4:	88800117 	ldw	r2,4(r17)
    4ae8:	880b883a 	mov	r5,r17
    4aec:	a009883a 	mov	r4,r20
    4af0:	103ee83a 	callr	r2
    4af4:	10001e1e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4af8:	8585c83a 	sub	r2,r16,r22
    4afc:	b5c9883a 	add	r4,r22,r23
    4b00:	e085883a 	add	r2,fp,r2
    4b04:	013ff216 	blt	zero,r4,4ad0 <_gp+0xffff7578>
    4b08:	1021883a 	mov	r16,r2
    4b0c:	dd800d17 	ldw	r22,52(sp)
    4b10:	00004406 	br	4c24 <___vfprintf_internal_r+0x4e4>
    4b14:	00800044 	movi	r2,1
    4b18:	1480080e 	bge	r2,r18,4b3c <___vfprintf_internal_r+0x3fc>
    4b1c:	95ffffc4 	addi	r23,r18,-1
    4b20:	b80f883a 	mov	r7,r23
    4b24:	01800804 	movi	r6,32
    4b28:	880b883a 	mov	r5,r17
    4b2c:	a009883a 	mov	r4,r20
    4b30:	00046d40 	call	46d4 <print_repeat>
    4b34:	10000e1e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4b38:	85e1883a 	add	r16,r16,r23
    4b3c:	b0800017 	ldw	r2,0(r22)
    4b40:	01c00044 	movi	r7,1
    4b44:	d80d883a 	mov	r6,sp
    4b48:	d8800005 	stb	r2,0(sp)
    4b4c:	88800117 	ldw	r2,4(r17)
    4b50:	880b883a 	mov	r5,r17
    4b54:	a009883a 	mov	r4,r20
    4b58:	b5c00104 	addi	r23,r22,4
    4b5c:	103ee83a 	callr	r2
    4b60:	1000031e 	bne	r2,zero,4b70 <___vfprintf_internal_r+0x430>
    4b64:	84000044 	addi	r16,r16,1
    4b68:	b82d883a 	mov	r22,r23
    4b6c:	00002d06 	br	4c24 <___vfprintf_internal_r+0x4e4>
    4b70:	00bfffc4 	movi	r2,-1
    4b74:	00003106 	br	4c3c <___vfprintf_internal_r+0x4fc>
    4b78:	b5c00017 	ldw	r23,0(r22)
    4b7c:	b7000104 	addi	fp,r22,4
    4b80:	b809883a 	mov	r4,r23
    4b84:	00046b80 	call	46b8 <strlen>
    4b88:	9091c83a 	sub	r8,r18,r2
    4b8c:	102d883a 	mov	r22,r2
    4b90:	0200090e 	bge	zero,r8,4bb8 <___vfprintf_internal_r+0x478>
    4b94:	400f883a 	mov	r7,r8
    4b98:	01800804 	movi	r6,32
    4b9c:	880b883a 	mov	r5,r17
    4ba0:	a009883a 	mov	r4,r20
    4ba4:	da001015 	stw	r8,64(sp)
    4ba8:	00046d40 	call	46d4 <print_repeat>
    4bac:	da001017 	ldw	r8,64(sp)
    4bb0:	103fef1e 	bne	r2,zero,4b70 <_gp+0xffff7618>
    4bb4:	8221883a 	add	r16,r16,r8
    4bb8:	88800117 	ldw	r2,4(r17)
    4bbc:	b00f883a 	mov	r7,r22
    4bc0:	b80d883a 	mov	r6,r23
    4bc4:	880b883a 	mov	r5,r17
    4bc8:	a009883a 	mov	r4,r20
    4bcc:	103ee83a 	callr	r2
    4bd0:	103fe71e 	bne	r2,zero,4b70 <_gp+0xffff7618>
    4bd4:	85a1883a 	add	r16,r16,r22
    4bd8:	e02d883a 	mov	r22,fp
    4bdc:	00001106 	br	4c24 <___vfprintf_internal_r+0x4e4>
    4be0:	00c00044 	movi	r3,1
    4be4:	04ffffc4 	movi	r19,-1
    4be8:	d8000e15 	stw	zero,56(sp)
    4bec:	d8c00a15 	stw	r3,40(sp)
    4bf0:	05400284 	movi	r21,10
    4bf4:	9825883a 	mov	r18,r19
    4bf8:	d8000c15 	stw	zero,48(sp)
    4bfc:	d8000b15 	stw	zero,44(sp)
    4c00:	182f883a 	mov	r23,r3
    4c04:	00000806 	br	4c28 <___vfprintf_internal_r+0x4e8>
    4c08:	ddc00b15 	stw	r23,44(sp)
    4c0c:	05c00084 	movi	r23,2
    4c10:	00000506 	br	4c28 <___vfprintf_internal_r+0x4e8>
    4c14:	00c00044 	movi	r3,1
    4c18:	d8c00c15 	stw	r3,48(sp)
    4c1c:	05c000c4 	movi	r23,3
    4c20:	00000106 	br	4c28 <___vfprintf_internal_r+0x4e8>
    4c24:	002f883a 	mov	r23,zero
    4c28:	d8c00f17 	ldw	r3,60(sp)
    4c2c:	18c00044 	addi	r3,r3,1
    4c30:	d8c00f15 	stw	r3,60(sp)
    4c34:	003edc06 	br	47a8 <_gp+0xffff7250>
    4c38:	8005883a 	mov	r2,r16
    4c3c:	dfc01a17 	ldw	ra,104(sp)
    4c40:	df001917 	ldw	fp,100(sp)
    4c44:	ddc01817 	ldw	r23,96(sp)
    4c48:	dd801717 	ldw	r22,92(sp)
    4c4c:	dd401617 	ldw	r21,88(sp)
    4c50:	dd001517 	ldw	r20,84(sp)
    4c54:	dcc01417 	ldw	r19,80(sp)
    4c58:	dc801317 	ldw	r18,76(sp)
    4c5c:	dc401217 	ldw	r17,72(sp)
    4c60:	dc001117 	ldw	r16,68(sp)
    4c64:	dec01b04 	addi	sp,sp,108
    4c68:	f800283a 	ret

00004c6c <__vfprintf_internal>:
    4c6c:	00800034 	movhi	r2,0
    4c70:	10955704 	addi	r2,r2,21852
    4c74:	300f883a 	mov	r7,r6
    4c78:	280d883a 	mov	r6,r5
    4c7c:	200b883a 	mov	r5,r4
    4c80:	11000017 	ldw	r4,0(r2)
    4c84:	00047401 	jmpi	4740 <___vfprintf_internal_r>

00004c88 <__sfvwrite_small_dev>:
    4c88:	2880000b 	ldhu	r2,0(r5)
    4c8c:	1080020c 	andi	r2,r2,8
    4c90:	10002126 	beq	r2,zero,4d18 <__sfvwrite_small_dev+0x90>
    4c94:	2880008f 	ldh	r2,2(r5)
    4c98:	defffa04 	addi	sp,sp,-24
    4c9c:	dc000015 	stw	r16,0(sp)
    4ca0:	dfc00515 	stw	ra,20(sp)
    4ca4:	dd000415 	stw	r20,16(sp)
    4ca8:	dcc00315 	stw	r19,12(sp)
    4cac:	dc800215 	stw	r18,8(sp)
    4cb0:	dc400115 	stw	r17,4(sp)
    4cb4:	2821883a 	mov	r16,r5
    4cb8:	10001216 	blt	r2,zero,4d04 <__sfvwrite_small_dev+0x7c>
    4cbc:	2027883a 	mov	r19,r4
    4cc0:	3025883a 	mov	r18,r6
    4cc4:	3823883a 	mov	r17,r7
    4cc8:	05010004 	movi	r20,1024
    4ccc:	04400b0e 	bge	zero,r17,4cfc <__sfvwrite_small_dev+0x74>
    4cd0:	880f883a 	mov	r7,r17
    4cd4:	a440010e 	bge	r20,r17,4cdc <__sfvwrite_small_dev+0x54>
    4cd8:	01c10004 	movi	r7,1024
    4cdc:	8140008f 	ldh	r5,2(r16)
    4ce0:	900d883a 	mov	r6,r18
    4ce4:	9809883a 	mov	r4,r19
    4ce8:	0004d400 	call	4d40 <_write_r>
    4cec:	0080050e 	bge	zero,r2,4d04 <__sfvwrite_small_dev+0x7c>
    4cf0:	88a3c83a 	sub	r17,r17,r2
    4cf4:	90a5883a 	add	r18,r18,r2
    4cf8:	003ff406 	br	4ccc <_gp+0xffff7774>
    4cfc:	0005883a 	mov	r2,zero
    4d00:	00000706 	br	4d20 <__sfvwrite_small_dev+0x98>
    4d04:	8080000b 	ldhu	r2,0(r16)
    4d08:	10801014 	ori	r2,r2,64
    4d0c:	8080000d 	sth	r2,0(r16)
    4d10:	00bfffc4 	movi	r2,-1
    4d14:	00000206 	br	4d20 <__sfvwrite_small_dev+0x98>
    4d18:	00bfffc4 	movi	r2,-1
    4d1c:	f800283a 	ret
    4d20:	dfc00517 	ldw	ra,20(sp)
    4d24:	dd000417 	ldw	r20,16(sp)
    4d28:	dcc00317 	ldw	r19,12(sp)
    4d2c:	dc800217 	ldw	r18,8(sp)
    4d30:	dc400117 	ldw	r17,4(sp)
    4d34:	dc000017 	ldw	r16,0(sp)
    4d38:	dec00604 	addi	sp,sp,24
    4d3c:	f800283a 	ret

00004d40 <_write_r>:
    4d40:	defffd04 	addi	sp,sp,-12
    4d44:	dc000015 	stw	r16,0(sp)
    4d48:	04000034 	movhi	r16,0
    4d4c:	dc400115 	stw	r17,4(sp)
    4d50:	84159704 	addi	r16,r16,22108
    4d54:	2023883a 	mov	r17,r4
    4d58:	2809883a 	mov	r4,r5
    4d5c:	300b883a 	mov	r5,r6
    4d60:	380d883a 	mov	r6,r7
    4d64:	dfc00215 	stw	ra,8(sp)
    4d68:	80000015 	stw	zero,0(r16)
    4d6c:	00050b80 	call	50b8 <write>
    4d70:	00ffffc4 	movi	r3,-1
    4d74:	10c0031e 	bne	r2,r3,4d84 <_write_r+0x44>
    4d78:	80c00017 	ldw	r3,0(r16)
    4d7c:	18000126 	beq	r3,zero,4d84 <_write_r+0x44>
    4d80:	88c00015 	stw	r3,0(r17)
    4d84:	dfc00217 	ldw	ra,8(sp)
    4d88:	dc400117 	ldw	r17,4(sp)
    4d8c:	dc000017 	ldw	r16,0(sp)
    4d90:	dec00304 	addi	sp,sp,12
    4d94:	f800283a 	ret

00004d98 <__divsi3>:
    4d98:	20001b16 	blt	r4,zero,4e08 <__divsi3+0x70>
    4d9c:	000f883a 	mov	r7,zero
    4da0:	28001616 	blt	r5,zero,4dfc <__divsi3+0x64>
    4da4:	200d883a 	mov	r6,r4
    4da8:	29001a2e 	bgeu	r5,r4,4e14 <__divsi3+0x7c>
    4dac:	00800804 	movi	r2,32
    4db0:	00c00044 	movi	r3,1
    4db4:	00000106 	br	4dbc <__divsi3+0x24>
    4db8:	10000d26 	beq	r2,zero,4df0 <__divsi3+0x58>
    4dbc:	294b883a 	add	r5,r5,r5
    4dc0:	10bfffc4 	addi	r2,r2,-1
    4dc4:	18c7883a 	add	r3,r3,r3
    4dc8:	293ffb36 	bltu	r5,r4,4db8 <_gp+0xffff7860>
    4dcc:	0005883a 	mov	r2,zero
    4dd0:	18000726 	beq	r3,zero,4df0 <__divsi3+0x58>
    4dd4:	0005883a 	mov	r2,zero
    4dd8:	31400236 	bltu	r6,r5,4de4 <__divsi3+0x4c>
    4ddc:	314dc83a 	sub	r6,r6,r5
    4de0:	10c4b03a 	or	r2,r2,r3
    4de4:	1806d07a 	srli	r3,r3,1
    4de8:	280ad07a 	srli	r5,r5,1
    4dec:	183ffa1e 	bne	r3,zero,4dd8 <_gp+0xffff7880>
    4df0:	38000126 	beq	r7,zero,4df8 <__divsi3+0x60>
    4df4:	0085c83a 	sub	r2,zero,r2
    4df8:	f800283a 	ret
    4dfc:	014bc83a 	sub	r5,zero,r5
    4e00:	39c0005c 	xori	r7,r7,1
    4e04:	003fe706 	br	4da4 <_gp+0xffff784c>
    4e08:	0109c83a 	sub	r4,zero,r4
    4e0c:	01c00044 	movi	r7,1
    4e10:	003fe306 	br	4da0 <_gp+0xffff7848>
    4e14:	00c00044 	movi	r3,1
    4e18:	003fee06 	br	4dd4 <_gp+0xffff787c>

00004e1c <__modsi3>:
    4e1c:	20001716 	blt	r4,zero,4e7c <__modsi3+0x60>
    4e20:	000f883a 	mov	r7,zero
    4e24:	2005883a 	mov	r2,r4
    4e28:	28001216 	blt	r5,zero,4e74 <__modsi3+0x58>
    4e2c:	2900162e 	bgeu	r5,r4,4e88 <__modsi3+0x6c>
    4e30:	01800804 	movi	r6,32
    4e34:	00c00044 	movi	r3,1
    4e38:	00000106 	br	4e40 <__modsi3+0x24>
    4e3c:	30000a26 	beq	r6,zero,4e68 <__modsi3+0x4c>
    4e40:	294b883a 	add	r5,r5,r5
    4e44:	31bfffc4 	addi	r6,r6,-1
    4e48:	18c7883a 	add	r3,r3,r3
    4e4c:	293ffb36 	bltu	r5,r4,4e3c <_gp+0xffff78e4>
    4e50:	18000526 	beq	r3,zero,4e68 <__modsi3+0x4c>
    4e54:	1806d07a 	srli	r3,r3,1
    4e58:	11400136 	bltu	r2,r5,4e60 <__modsi3+0x44>
    4e5c:	1145c83a 	sub	r2,r2,r5
    4e60:	280ad07a 	srli	r5,r5,1
    4e64:	183ffb1e 	bne	r3,zero,4e54 <_gp+0xffff78fc>
    4e68:	38000126 	beq	r7,zero,4e70 <__modsi3+0x54>
    4e6c:	0085c83a 	sub	r2,zero,r2
    4e70:	f800283a 	ret
    4e74:	014bc83a 	sub	r5,zero,r5
    4e78:	003fec06 	br	4e2c <_gp+0xffff78d4>
    4e7c:	0109c83a 	sub	r4,zero,r4
    4e80:	01c00044 	movi	r7,1
    4e84:	003fe706 	br	4e24 <_gp+0xffff78cc>
    4e88:	00c00044 	movi	r3,1
    4e8c:	003ff106 	br	4e54 <_gp+0xffff78fc>

00004e90 <__udivsi3>:
    4e90:	200d883a 	mov	r6,r4
    4e94:	2900152e 	bgeu	r5,r4,4eec <__udivsi3+0x5c>
    4e98:	28001416 	blt	r5,zero,4eec <__udivsi3+0x5c>
    4e9c:	00800804 	movi	r2,32
    4ea0:	00c00044 	movi	r3,1
    4ea4:	00000206 	br	4eb0 <__udivsi3+0x20>
    4ea8:	10000e26 	beq	r2,zero,4ee4 <__udivsi3+0x54>
    4eac:	28000516 	blt	r5,zero,4ec4 <__udivsi3+0x34>
    4eb0:	294b883a 	add	r5,r5,r5
    4eb4:	10bfffc4 	addi	r2,r2,-1
    4eb8:	18c7883a 	add	r3,r3,r3
    4ebc:	293ffa36 	bltu	r5,r4,4ea8 <_gp+0xffff7950>
    4ec0:	18000826 	beq	r3,zero,4ee4 <__udivsi3+0x54>
    4ec4:	0005883a 	mov	r2,zero
    4ec8:	31400236 	bltu	r6,r5,4ed4 <__udivsi3+0x44>
    4ecc:	314dc83a 	sub	r6,r6,r5
    4ed0:	10c4b03a 	or	r2,r2,r3
    4ed4:	1806d07a 	srli	r3,r3,1
    4ed8:	280ad07a 	srli	r5,r5,1
    4edc:	183ffa1e 	bne	r3,zero,4ec8 <_gp+0xffff7970>
    4ee0:	f800283a 	ret
    4ee4:	0005883a 	mov	r2,zero
    4ee8:	f800283a 	ret
    4eec:	00c00044 	movi	r3,1
    4ef0:	003ff406 	br	4ec4 <_gp+0xffff796c>

00004ef4 <__umodsi3>:
    4ef4:	2005883a 	mov	r2,r4
    4ef8:	2900122e 	bgeu	r5,r4,4f44 <__umodsi3+0x50>
    4efc:	28001116 	blt	r5,zero,4f44 <__umodsi3+0x50>
    4f00:	01800804 	movi	r6,32
    4f04:	00c00044 	movi	r3,1
    4f08:	00000206 	br	4f14 <__umodsi3+0x20>
    4f0c:	30000c26 	beq	r6,zero,4f40 <__umodsi3+0x4c>
    4f10:	28000516 	blt	r5,zero,4f28 <__umodsi3+0x34>
    4f14:	294b883a 	add	r5,r5,r5
    4f18:	31bfffc4 	addi	r6,r6,-1
    4f1c:	18c7883a 	add	r3,r3,r3
    4f20:	293ffa36 	bltu	r5,r4,4f0c <_gp+0xffff79b4>
    4f24:	18000626 	beq	r3,zero,4f40 <__umodsi3+0x4c>
    4f28:	1806d07a 	srli	r3,r3,1
    4f2c:	11400136 	bltu	r2,r5,4f34 <__umodsi3+0x40>
    4f30:	1145c83a 	sub	r2,r2,r5
    4f34:	280ad07a 	srli	r5,r5,1
    4f38:	183ffb1e 	bne	r3,zero,4f28 <_gp+0xffff79d0>
    4f3c:	f800283a 	ret
    4f40:	f800283a 	ret
    4f44:	00c00044 	movi	r3,1
    4f48:	003ff706 	br	4f28 <_gp+0xffff79d0>

00004f4c <__mulsi3>:
    4f4c:	0005883a 	mov	r2,zero
    4f50:	20000726 	beq	r4,zero,4f70 <__mulsi3+0x24>
    4f54:	20c0004c 	andi	r3,r4,1
    4f58:	2008d07a 	srli	r4,r4,1
    4f5c:	18000126 	beq	r3,zero,4f64 <__mulsi3+0x18>
    4f60:	1145883a 	add	r2,r2,r5
    4f64:	294b883a 	add	r5,r5,r5
    4f68:	203ffa1e 	bne	r4,zero,4f54 <_gp+0xffff79fc>
    4f6c:	f800283a 	ret
    4f70:	f800283a 	ret

00004f74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4f74:	deffff04 	addi	sp,sp,-4
    4f78:	01000034 	movhi	r4,0
    4f7c:	01400034 	movhi	r5,0
    4f80:	dfc00015 	stw	ra,0(sp)
    4f84:	21151e04 	addi	r4,r4,21624
    4f88:	29555a04 	addi	r5,r5,21864

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4f8c:	2140061e 	bne	r4,r5,4fa8 <alt_load+0x34>
    4f90:	01000034 	movhi	r4,0
    4f94:	01400034 	movhi	r5,0
    4f98:	21100804 	addi	r4,r4,16416
    4f9c:	29500804 	addi	r5,r5,16416
    4fa0:	2140121e 	bne	r4,r5,4fec <alt_load+0x78>
    4fa4:	00000b06 	br	4fd4 <alt_load+0x60>
    4fa8:	00c00034 	movhi	r3,0
    4fac:	18d55a04 	addi	r3,r3,21864
    4fb0:	1907c83a 	sub	r3,r3,r4
    4fb4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4fb8:	10fff526 	beq	r2,r3,4f90 <_gp+0xffff7a38>
    {
      *to++ = *from++;
    4fbc:	114f883a 	add	r7,r2,r5
    4fc0:	39c00017 	ldw	r7,0(r7)
    4fc4:	110d883a 	add	r6,r2,r4
    4fc8:	10800104 	addi	r2,r2,4
    4fcc:	31c00015 	stw	r7,0(r6)
    4fd0:	003ff906 	br	4fb8 <_gp+0xffff7a60>
    4fd4:	01000034 	movhi	r4,0
    4fd8:	01400034 	movhi	r5,0
    4fdc:	2114d404 	addi	r4,r4,21328
    4fe0:	2954d404 	addi	r5,r5,21328

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4fe4:	2140101e 	bne	r4,r5,5028 <alt_load+0xb4>
    4fe8:	00000b06 	br	5018 <alt_load+0xa4>
    4fec:	00c00034 	movhi	r3,0
    4ff0:	18d00804 	addi	r3,r3,16416
    4ff4:	1907c83a 	sub	r3,r3,r4
    4ff8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4ffc:	10fff526 	beq	r2,r3,4fd4 <_gp+0xffff7a7c>
    {
      *to++ = *from++;
    5000:	114f883a 	add	r7,r2,r5
    5004:	39c00017 	ldw	r7,0(r7)
    5008:	110d883a 	add	r6,r2,r4
    500c:	10800104 	addi	r2,r2,4
    5010:	31c00015 	stw	r7,0(r6)
    5014:	003ff906 	br	4ffc <_gp+0xffff7aa4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5018:	00053400 	call	5340 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    501c:	dfc00017 	ldw	ra,0(sp)
    5020:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5024:	00053441 	jmpi	5344 <alt_icache_flush_all>
    5028:	00c00034 	movhi	r3,0
    502c:	18d51e04 	addi	r3,r3,21624
    5030:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5034:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5038:	18bff726 	beq	r3,r2,5018 <_gp+0xffff7ac0>
    {
      *to++ = *from++;
    503c:	114f883a 	add	r7,r2,r5
    5040:	39c00017 	ldw	r7,0(r7)
    5044:	110d883a 	add	r6,r2,r4
    5048:	10800104 	addi	r2,r2,4
    504c:	31c00015 	stw	r7,0(r6)
    5050:	003ff906 	br	5038 <_gp+0xffff7ae0>

00005054 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5054:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5058:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    505c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5060:	00051180 	call	5118 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5064:	00051380 	call	5138 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5068:	d1a04217 	ldw	r6,-32504(gp)
    506c:	d1604317 	ldw	r5,-32500(gp)
    5070:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5074:	dfc00017 	ldw	ra,0(sp)
    5078:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    507c:	00042d01 	jmpi	42d0 <main>

00005080 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    5080:	defffe04 	addi	sp,sp,-8
    5084:	dc000015 	stw	r16,0(sp)
    5088:	dfc00115 	stw	ra,4(sp)
    508c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    5090:	00046b80 	call	46b8 <strlen>
    5094:	01000034 	movhi	r4,0
    5098:	000f883a 	mov	r7,zero
    509c:	100d883a 	mov	r6,r2
    50a0:	800b883a 	mov	r5,r16
    50a4:	21155804 	addi	r4,r4,21856
#else
    return fputs(str, stdout);
#endif
#endif
}
    50a8:	dfc00117 	ldw	ra,4(sp)
    50ac:	dc000017 	ldw	r16,0(sp)
    50b0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    50b4:	000530c1 	jmpi	530c <altera_avalon_jtag_uart_write>

000050b8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    50b8:	00800044 	movi	r2,1
    50bc:	20800226 	beq	r4,r2,50c8 <write+0x10>
    50c0:	00800084 	movi	r2,2
    50c4:	2080041e 	bne	r4,r2,50d8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    50c8:	01000034 	movhi	r4,0
    50cc:	000f883a 	mov	r7,zero
    50d0:	21155804 	addi	r4,r4,21856
    50d4:	000530c1 	jmpi	530c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    50d8:	d0a00317 	ldw	r2,-32756(gp)
    50dc:	10000926 	beq	r2,zero,5104 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    50e0:	deffff04 	addi	sp,sp,-4
    50e4:	dfc00015 	stw	ra,0(sp)
    50e8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    50ec:	00c01444 	movi	r3,81
    50f0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    50f4:	00bfffc4 	movi	r2,-1
    50f8:	dfc00017 	ldw	ra,0(sp)
    50fc:	dec00104 	addi	sp,sp,4
    5100:	f800283a 	ret
    5104:	d0a04104 	addi	r2,gp,-32508
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5108:	00c01444 	movi	r3,81
    510c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5110:	00bfffc4 	movi	r2,-1
    5114:	f800283a 	ret

00005118 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5118:	deffff04 	addi	sp,sp,-4
    511c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_00, nios2_00);
    5120:	00053480 	call	5348 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5124:	00800044 	movi	r2,1
    5128:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    512c:	dfc00017 	ldw	ra,0(sp)
    5130:	dec00104 	addi	sp,sp,4
    5134:	f800283a 	ret

00005138 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5138:	f800283a 	ret

0000513c <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    513c:	20800137 	ldwio	r2,4(r4)
}
    5140:	1144703a 	and	r2,r2,r5
    5144:	f800283a 	ret

00005148 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
    5148:	20800337 	ldwio	r2,12(r4)
}
    514c:	1144703a 	and	r2,r2,r5
    5150:	f800283a 	ret

00005154 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
    5154:	20800437 	ldwio	r2,16(r4)
    5158:	f800283a 	ret

0000515c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
    515c:	20800537 	ldwio	r2,20(r4)
    5160:	f800283a 	ret

00005164 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
    5164:	20800237 	ldwio	r2,8(r4)
}
    5168:	1144703a 	and	r2,r2,r5
    516c:	f800283a 	ret

00005170 <altera_avalon_fifo_read_level>:
    5170:	20800037 	ldwio	r2,0(r4)
    5174:	f800283a 	ret

00005178 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
    5178:	21000204 	addi	r4,r4,8
    517c:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
    5180:	20800037 	ldwio	r2,0(r4)
    5184:	114a703a 	and	r5,r2,r5
    5188:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
    518c:	0085c83a 	sub	r2,zero,r2
    5190:	f800283a 	ret

00005194 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    5194:	21000304 	addi	r4,r4,12
    5198:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    519c:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    51a0:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
    51a4:	28c00126 	beq	r5,r3,51ac <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    51a8:	00bfff84 	movi	r2,-2
}
    51ac:	f800283a 	ret

000051b0 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    51b0:	21000404 	addi	r4,r4,16
    51b4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    51b8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    51bc:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
    51c0:	28c00126 	beq	r5,r3,51c8 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    51c4:	00bfff44 	movi	r2,-3
}
    51c8:	f800283a 	ret

000051cc <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    51cc:	21000504 	addi	r4,r4,20
    51d0:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    51d4:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    51d8:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
    51dc:	28c00126 	beq	r5,r3,51e4 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    51e0:	00bfff44 	movi	r2,-3
}
    51e4:	f800283a 	ret

000051e8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    51e8:	defffb04 	addi	sp,sp,-20
    51ec:	dcc00315 	stw	r19,12(sp)
    51f0:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    51f4:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    51f8:	dc800215 	stw	r18,8(sp)
    51fc:	dc400115 	stw	r17,4(sp)
    5200:	dc000015 	stw	r16,0(sp)
    5204:	dfc00415 	stw	ra,16(sp)
    5208:	2021883a 	mov	r16,r4
    520c:	3023883a 	mov	r17,r6
    5210:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    5214:	00051780 	call	5178 <altera_avalon_fifo_clear_event>
    5218:	10000f1e 	bne	r2,zero,5258 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    521c:	980b883a 	mov	r5,r19
    5220:	8009883a 	mov	r4,r16
    5224:	00051940 	call	5194 <altera_avalon_fifo_write_ienable>
    5228:	10000d1e 	bne	r2,zero,5260 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
    522c:	900b883a 	mov	r5,r18
    5230:	8009883a 	mov	r4,r16
    5234:	00051b00 	call	51b0 <altera_avalon_fifo_write_almostfull>
    5238:	10000226 	beq	r2,zero,5244 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    523c:	00bfff44 	movi	r2,-3
    5240:	00000806 	br	5264 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
    5244:	880b883a 	mov	r5,r17
    5248:	8009883a 	mov	r4,r16
    524c:	00051cc0 	call	51cc <altera_avalon_fifo_write_almostempty>
    5250:	10000426 	beq	r2,zero,5264 <altera_avalon_fifo_init+0x7c>
    5254:	003ff906 	br	523c <_gp+0xffff7ce4>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    5258:	00bfffc4 	movi	r2,-1
    525c:	00000106 	br	5264 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    5260:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
    5264:	dfc00417 	ldw	ra,16(sp)
    5268:	dcc00317 	ldw	r19,12(sp)
    526c:	dc800217 	ldw	r18,8(sp)
    5270:	dc400117 	ldw	r17,4(sp)
    5274:	dc000017 	ldw	r16,0(sp)
    5278:	dec00504 	addi	sp,sp,20
    527c:	f800283a 	ret

00005280 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    5280:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    5284:	1080004c 	andi	r2,r2,1
    5288:	1000021e 	bne	r2,zero,5294 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
    528c:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
    5290:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    5294:	00bfff04 	movi	r2,-4
    }
}
    5298:	f800283a 	ret

0000529c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    529c:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    52a0:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    52a4:	1080008c 	andi	r2,r2,2
    52a8:	1000041e 	bne	r2,zero,52bc <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
    52ac:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    52b0:	20c00037 	ldwio	r3,0(r4)
    52b4:	30c00015 	stw	r3,0(r6)
    52b8:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    52bc:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
    52c0:	f800283a 	ret

000052c4 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    52c4:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    52c8:	1080008c 	andi	r2,r2,2
    52cc:	1000021e 	bne	r2,zero,52d8 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    52d0:	20800037 	ldwio	r2,0(r4)
    52d4:	f800283a 	ret
    }
    return 0;
    52d8:	0005883a 	mov	r2,zero
}
    52dc:	f800283a 	ret

000052e0 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
    52e0:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
    52e4:	1080004c 	andi	r2,r2,1
    52e8:	1000021e 	bne	r2,zero,52f4 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
    52ec:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
    52f0:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    52f4:	00bfff04 	movi	r2,-4
    }
}
    52f8:	f800283a 	ret

000052fc <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
    52fc:	20800137 	ldwio	r2,4(r4)
    5300:	f800283a 	ret

00005304 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
    5304:	20800037 	ldwio	r2,0(r4)
    5308:	f800283a 	ret

0000530c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    530c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5310:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    5314:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5318:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    531c:	2980072e 	bgeu	r5,r6,533c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5320:	38c00037 	ldwio	r3,0(r7)
    5324:	18ffffec 	andhi	r3,r3,65535
    5328:	183ffc26 	beq	r3,zero,531c <_gp+0xffff7dc4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    532c:	28c00007 	ldb	r3,0(r5)
    5330:	20c00035 	stwio	r3,0(r4)
    5334:	29400044 	addi	r5,r5,1
    5338:	003ff806 	br	531c <_gp+0xffff7dc4>

  return count;
}
    533c:	f800283a 	ret

00005340 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5340:	f800283a 	ret

00005344 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5344:	f800283a 	ret

00005348 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5348:	000170fa 	wrctl	ienable,zero
    534c:	f800283a 	ret
