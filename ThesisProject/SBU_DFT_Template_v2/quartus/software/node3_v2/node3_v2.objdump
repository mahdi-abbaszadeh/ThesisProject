
node3_v2.elf:     file format elf32-littlenios2
node3_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002020 memsz 0x00002020 flags r-x
    LOAD off    0x00003040 vaddr 0x00012040 paddr 0x00012134 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003228 vaddr 0x00012228 paddr 0x00012228 align 2**12
         filesz 0x00000000 memsz 0x000001bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00003134  2**0
                  CONTENTS
  2 .text         00001f2c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f4  00011f4c  00011f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00012040  00012134  00003040  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001bc  00012228  00012228  00003228  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_3   00000000  000123e4  000123e4  00003134  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000420  00000000  00000000  00003158  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000768f  00000000  00000000  00003578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002572  00000000  00000000  0000ac07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000298d  00000000  00000000  0000d179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a08  00000000  00000000  0000fb08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a34  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000028d0  00000000  00000000  00011f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014814  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003c8  00000000  00000000  00014858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000167a6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  000167a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000167b0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000167b1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000167b2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000167bd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000167c8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000167d3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  000167de  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  00016830  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  000243f2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00011f4c l    d  .rodata	00000000 .rodata
00012040 l    d  .rwdata	00000000 .rwdata
00012228 l    d  .bss	00000000 .bss
000123e4 l    d  .data_mem_3	00000000 .data_mem_3
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node3_v2_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_3.c
000103d4 l     F .text	00000060 send_data.part.1
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011258 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012040 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012128 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00011bb0 g     F .text	0000002c alt_main
0001236c g     O .bss	00000014 edge_p1_p3
00011158 g     F .text	00000080 _puts_r
00011d24 g     F .text	0000001c altera_avalon_fifo_write_almostfull
00012134 g       *ABS*	00000000 __flash_rwdata_start
00012228 g     O .bss	00000004 proc_3_outs
000123e4 g       *ABS*	00000000 __alt_heap_start
0001110c g     F .text	0000004c printf
00012380 g     O .bss	0000003c edges
00011d5c g     F .text	00000098 altera_avalon_fifo_init
0001222c g     O .bss	00000004 proc_3_out_0
00011df4 g     F .text	0000001c altera_avalon_fifo_write_fifo
00010ca4 g     F .text	0000008c ring_buffer_dequeue_arr
000123bc g     O .bss	00000014 edge_p3_p4
00011f44 g     F .text	00000008 altera_nios2_gen2_irq_init
00010c6c g     F .text	00000038 ring_buffer_dequeue
00010000 g     F .entry	0000000c __reset
00011e78 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012258 g     O .bss	00000004 errno
00010bcc g     F .text	0000000c ring_buffer_init
00012230 g     O .bss	00000004 proc_3_inp_1
00012260 g     O .bss	00000004 alt_argv
0001a120 g       *ABS*	00000000 _gp
00011c28 g     F .text	00000004 usleep
00011cec g     F .text	0000001c altera_avalon_fifo_clear_event
00010d30 g     F .text	0000002c ring_buffer_pop
00010e6c g     F .text	00000028 memcpy
000111d8 g     F .text	00000014 puts
000105e8 g     F .text	0000006c get_edge
00010e44 g     F .text	00000014 malloc
000110d0 g     F .text	0000003c _printf_r
00010bb8 g     F .text	00000014 ring_buffer_num_items
00011a14 g     F .text	00000064 .hidden __udivsi3
00010d5c g     F .text	00000084 ring_buffer_pop_arr
000123d0 g     O .bss	00000014 edge_p2_p3
000111ec g     F .text	00000050 _sbrk_r
00010b90 g     F .text	00000010 ring_buffer_is_empty
00012234 g     O .bss	00000008 proc_3_inps
000104fc g     F .text	00000050 start_FIFO
00010ba0 g     F .text	00000018 ring_buffer_is_full
000104d4 g     F .text	00000028 cleanUp
00012120 g     O .rwdata	00000004 _global_impure_ptr
000123e4 g       *ABS*	00000000 __bss_end
000106c0 g     F .text	00000024 init_buffer
00010b68 g     F .text	00000028 receive_poll
00011f3c g     F .text	00000004 alt_dcache_flush_all
00011d08 g     F .text	0000001c altera_avalon_fifo_write_ienable
00012134 g       *ABS*	00000000 __ram_rwdata_end
00011cd0 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00011c2c g     F .text	00000060 write
00012040 g       *ABS*	00000000 __ram_rodata_end
0001212c g     O .rwdata	00000004 jtag_uart_0
00011a78 g     F .text	00000058 .hidden __umodsi3
00010654 g     F .text	0000006c get_buffer
000123e4 g       *ABS*	00000000 end
00012268 g     O .bss	00000082 buff_p1_p3
00011cd8 g     F .text	0000000c altera_avalon_fifo_read_event
00016000 g       *ABS*	00000000 __alt_stack_pointer
00011e80 g     F .text	00000034 altera_avalon_jtag_uart_write
0001223c g     O .bss	00000004 input_fifo_wrclk_irq_event
00011e38 g     F .text	0000001c altera_avalon_fifo_read_fifo
00012240 g     O .bss	00000004 proc_3_outarg_0
000112c4 g     F .text	0000052c ___vfprintf_internal_r
00010e94 g     F .text	000000e4 _free_r
00010804 g     F .text	000001e4 send_packet
00010020 g     F .text	0000003c _start
00011cac g     F .text	00000004 alt_sys_init
00010bd8 g     F .text	00000040 ring_buffer_queue
00010334 g     F .text	000000a0 serializing_send
00010e1c g     F .text	00000028 .hidden __mulsi3
00012040 g       *ABS*	00000000 __ram_rwdata_start
00011f4c g       *ABS*	00000000 __ram_rodata_start
000102b8 g     F .text	0000007c read_data
00010000 g       *ABS*	00000000 __alt_mem_data_mem_3
00011eb4 g     F .text	00000088 alt_busy_sleep
000123e4 g       *ABS*	00000000 __alt_stack_base
00010088 g     F .text	000000d0 print_status
00011cb0 g     F .text	0000000c altera_avalon_fifo_read_status
00011e70 g     F .text	00000008 altera_avalon_fifo_read_other_info
00011bdc g     F .text	0000004c sbrk
0001180c g     F .text	000000b8 __sfvwrite_small_dev
00012228 g       *ABS*	00000000 __bss_start
0001054c g     F .text	0000009c main
0001225c g     O .bss	00000004 alt_envp
00011ce4 g     F .text	00000008 altera_avalon_fifo_read_level
00016000 g       *ABS*	00000000 __alt_heap_limit
0001005c g     F .text	0000002c proc_3
00010f78 g     F .text	00000158 _malloc_r
00012130 g     O .rwdata	00000004 alt_errno
000106e4 g     F .text	00000120 init_structures
00010de0 g     F .text	0000003c ring_buffer_peek
0001191c g     F .text	00000084 .hidden __divsi3
00011f4c g       *ABS*	00000000 __flash_rodata_start
00011c8c g     F .text	00000020 alt_irq_init
00010158 g     F .text	00000160 read_buff
00012244 g     O .bss	00000004 proc_3_inparg_1
000118c4 g     F .text	00000058 _write_r
00012124 g     O .rwdata	00000004 _impure_ptr
00012264 g     O .bss	00000004 alt_argc
00010434 g     F .text	0000001c send_data
000122ea g     O .bss	00000082 buff_p2_p3
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010450 g     F .text	00000084 proc_args_init
00010a0c g     F .text	0000015c receive_packet
00012248 g     O .bss	00000004 proc_3_inp_0
00011e54 g     F .text	0000001c altera_avalon_fifo_write_other_info
000109e8 g     F .text	00000024 read_payload
00012134 g       *ABS*	00000000 _edata
000123e4 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000119a0 g     F .text	00000074 .hidden __modsi3
00011cbc g     F .text	0000000c altera_avalon_fifo_read_ienable
00016000 g       *ABS*	00000000 __alt_data_end
00010c18 g     F .text	00000054 ring_buffer_queue_arr
0001000c g       .entry	00000000 _exit
00011cc8 g     F .text	00000008 altera_avalon_fifo_read_almostfull
0001123c g     F .text	0000001c strlen
00011e10 g     F .text	00000028 altera_avalon_read_fifo
00012250 g     O .bss	00000004 __malloc_sbrk_start
00011f40 g     F .text	00000004 alt_icache_flush_all
00012254 g     O .bss	00000004 __malloc_free_list
000117f0 g     F .text	0000001c __vfprintf_internal
00011d40 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00011ad0 g     F .text	000000e0 alt_load
0001224c g     O .bss	00000004 proc_3_inparg_0
00010e58 g     F .text	00000014 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a84814 	ori	gp,gp,41248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10888a14 	ori	r2,r2,8744

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c8f914 	ori	r3,r3,9188

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff5f24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0011ad00 	call	11ad0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0011bb00 	call	11bb0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff5f38>

0001005c <proc_3>:

void proc_3(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P3_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P3_INP1_TYPE*)inpargs[1][0];
	int* out1 = (P3_OUT0_TYPE*)outargs[0][0];
   1005c:	28800017 	ldw	r2,0(r5)

	/*printf("proc_3 -- num1: %x\n",*num1);
	printf("proc_3 -- num2: %x\n",*num2);*/

	*out1 = *num1 + *num2;
   10060:	10c00017 	ldw	r3,0(r2)
void** proc_3_outs[P3_NUM_OF_OUTS];


void proc_3(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P3_INP0_TYPE*)inpargs[0][0];
   10064:	20800017 	ldw	r2,0(r4)
	int* out1 = (P3_OUT0_TYPE*)outargs[0][0];

	/*printf("proc_3 -- num1: %x\n",*num1);
	printf("proc_3 -- num2: %x\n",*num2);*/

	*out1 = *num1 + *num2;
   10068:	11400017 	ldw	r5,0(r2)


void proc_3(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P3_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P3_INP1_TYPE*)inpargs[1][0];
   1006c:	20800117 	ldw	r2,4(r4)
	int* out1 = (P3_OUT0_TYPE*)outargs[0][0];

	/*printf("proc_3 -- num1: %x\n",*num1);
	printf("proc_3 -- num2: %x\n",*num2);*/

	*out1 = *num1 + *num2;
   10070:	29000017 	ldw	r4,0(r5)
   10074:	10800017 	ldw	r2,0(r2)
   10078:	10800017 	ldw	r2,0(r2)
   1007c:	2085883a 	add	r2,r4,r2
   10080:	18800015 	stw	r2,0(r3)
   10084:	f800283a 	ret

00010088 <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   10088:	defffd04 	addi	sp,sp,-12
   1008c:	dc000015 	stw	r16,0(sp)
   10090:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   10094:	01000074 	movhi	r4,1
   10098:	2107d304 	addi	r4,r4,8012
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   1009c:	dfc00215 	stw	ra,8(sp)
   100a0:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   100a4:	00111d80 	call	111d8 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   100a8:	8009883a 	mov	r4,r16
   100ac:	0011ce40 	call	11ce4 <altera_avalon_fifo_read_level>
   100b0:	01000074 	movhi	r4,1
   100b4:	100b883a 	mov	r5,r2
   100b8:	2107dd04 	addi	r4,r4,8052
   100bc:	001110c0 	call	1110c <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   100c0:	04400fc4 	movi	r17,63
   100c4:	880b883a 	mov	r5,r17
   100c8:	8009883a 	mov	r4,r16
   100cc:	0011cb00 	call	11cb0 <altera_avalon_fifo_read_status>
   100d0:	01000074 	movhi	r4,1
   100d4:	100b883a 	mov	r5,r2
   100d8:	2107e004 	addi	r4,r4,8064
   100dc:	001110c0 	call	1110c <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   100e0:	880b883a 	mov	r5,r17
   100e4:	8009883a 	mov	r4,r16
   100e8:	0011cd80 	call	11cd8 <altera_avalon_fifo_read_event>
   100ec:	01000074 	movhi	r4,1
   100f0:	100b883a 	mov	r5,r2
   100f4:	2107e404 	addi	r4,r4,8080
   100f8:	001110c0 	call	1110c <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   100fc:	880b883a 	mov	r5,r17
   10100:	8009883a 	mov	r4,r16
   10104:	0011cbc0 	call	11cbc <altera_avalon_fifo_read_ienable>
   10108:	01000074 	movhi	r4,1
   1010c:	100b883a 	mov	r5,r2
   10110:	2107e704 	addi	r4,r4,8092
   10114:	001110c0 	call	1110c <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   10118:	8009883a 	mov	r4,r16
   1011c:	0011cd00 	call	11cd0 <altera_avalon_fifo_read_almostempty>
   10120:	01000074 	movhi	r4,1
   10124:	100b883a 	mov	r5,r2
   10128:	2107eb04 	addi	r4,r4,8108
   1012c:	001110c0 	call	1110c <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   10130:	8009883a 	mov	r4,r16
   10134:	0011cc80 	call	11cc8 <altera_avalon_fifo_read_almostfull>
   10138:	01000074 	movhi	r4,1
   1013c:	100b883a 	mov	r5,r2
   10140:	2107f004 	addi	r4,r4,8128
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   10144:	dfc00217 	ldw	ra,8(sp)
   10148:	dc400117 	ldw	r17,4(sp)
   1014c:	dc000017 	ldw	r16,0(sp)
   10150:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   10154:	001110c1 	jmpi	1110c <printf>

00010158 <read_buff>:
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){

	/*printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);*/

	if(proc_num == 3){
   10158:	297fffcc 	andi	r5,r5,65535
   1015c:	008000c4 	movi	r2,3
   10160:	2880541e 	bne	r5,r2,102b4 <read_buff+0x15c>
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   10164:	defff904 	addi	sp,sp,-28
   10168:	df000515 	stw	fp,20(sp)
   1016c:	dc000015 	stw	r16,0(sp)
   10170:	dfc00615 	stw	ra,24(sp)
   10174:	dd000415 	stw	r20,16(sp)
   10178:	dcc00315 	stw	r19,12(sp)
   1017c:	dc800215 	stw	r18,8(sp)
   10180:	dc400115 	stw	r17,4(sp)

	/*printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);*/

	if(proc_num == 3){
		if(input_num == 0){
   10184:	31803fcc 	andi	r6,r6,255
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   10188:	df000504 	addi	fp,sp,20
   1018c:	2021883a 	mov	r16,r4

	/*printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);*/

	if(proc_num == 3){
		if(input_num == 0){
   10190:	30001b1e 	bne	r6,zero,10200 <read_buff+0xa8>
			uint8_t tmp[edge->size_of_token_type];
   10194:	20800203 	ldbu	r2,8(r4)

	/*printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);*/

	if(proc_num == 3){
		if(input_num == 0){
   10198:	d825883a 	mov	r18,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   1019c:	0023883a 	mov	r17,zero
	/*printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);*/

	if(proc_num == 3){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   101a0:	108000c4 	addi	r2,r2,3
   101a4:	10807f0c 	andi	r2,r2,508
   101a8:	d8b7c83a 	sub	sp,sp,r2
   101ac:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   101b0:	05000604 	movi	r20,24

	if(proc_num == 3){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   101b4:	80800183 	ldbu	r2,6(r16)
   101b8:	88802e0e 	bge	r17,r2,10274 <read_buff+0x11c>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   101bc:	81800203 	ldbu	r6,8(r16)
   101c0:	81000317 	ldw	r4,12(r16)
   101c4:	980b883a 	mov	r5,r19
   101c8:	0010ca40 	call	10ca4 <ring_buffer_dequeue_arr>
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   101cc:	81400203 	ldbu	r5,8(r16)
   101d0:	81000317 	ldw	r4,12(r16)
   101d4:	a14bc83a 	sub	r5,r20,r5
   101d8:	29403fcc 	andi	r5,r5,255
   101dc:	0010d5c0 	call	10d5c <ring_buffer_pop_arr>
				//printf("circular buffer size(after pop): %d\n",ring_buffer_num_items((edge->buffer)));
				/*for(int i =0; i< sizeof(tmp); i++){
					printf("tmp[i]: %d\n",tmp[i]);
				}*/
				proc_3_inp_0[i] = ( (P3_INP0_TYPE*)tmp )[0];
   101e0:	d1204a17 	ldw	r4,-32472(gp)
   101e4:	8c45883a 	add	r2,r17,r17
   101e8:	98c00017 	ldw	r3,0(r19)
   101ec:	1085883a 	add	r2,r2,r2
   101f0:	2085883a 	add	r2,r4,r2
   101f4:	10c00015 	stw	r3,0(r2)

	if(proc_num == 3){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   101f8:	8c400044 	addi	r17,r17,1
   101fc:	003fed06 	br	101b4 <_gp+0xffff6094>
			/*for(int i =0; i< sizeof(proc_3_inp_0); i++){
				printf("proc_3_inp_0[i]: %d\n",proc_3_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P3_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
   10200:	00800044 	movi	r2,1
   10204:	3080221e 	bne	r6,r2,10290 <read_buff+0x138>
			uint8_t tmp[edge->size_of_token_type];
   10208:	20800203 	ldbu	r2,8(r4)
			/*for(int i =0; i< sizeof(proc_3_inp_0); i++){
				printf("proc_3_inp_0[i]: %d\n",proc_3_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P3_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
   1020c:	d825883a 	mov	r18,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   10210:	0023883a 	mov	r17,zero
				printf("proc_3_inp_0[i]: %d\n",proc_3_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P3_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];
   10214:	108000c4 	addi	r2,r2,3
   10218:	10807f0c 	andi	r2,r2,508
   1021c:	d8b7c83a 	sub	sp,sp,r2
   10220:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   10224:	05000604 	movi	r20,24
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P3_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   10228:	80800183 	ldbu	r2,6(r16)
   1022c:	8880110e 	bge	r17,r2,10274 <read_buff+0x11c>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   10230:	81800203 	ldbu	r6,8(r16)
   10234:	81000317 	ldw	r4,12(r16)
   10238:	980b883a 	mov	r5,r19
   1023c:	0010ca40 	call	10ca4 <ring_buffer_dequeue_arr>
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   10240:	81400203 	ldbu	r5,8(r16)
   10244:	81000317 	ldw	r4,12(r16)
   10248:	a14bc83a 	sub	r5,r20,r5
   1024c:	29403fcc 	andi	r5,r5,255
   10250:	0010d5c0 	call	10d5c <ring_buffer_pop_arr>
				//printf("circular buffer size(after pop): %d\n",ring_buffer_num_items((edge->buffer)));
				/*for(int i =0; i< sizeof(tmp); i++){
					printf("tmp[i]: %d\n",tmp[i]);
				}*/
				proc_3_inp_1[i] = ( (P3_INP1_TYPE*)tmp )[0];
   10254:	d1204417 	ldw	r4,-32496(gp)
   10258:	8c45883a 	add	r2,r17,r17
   1025c:	98c00017 	ldw	r3,0(r19)
   10260:	1085883a 	add	r2,r2,r2
   10264:	2085883a 	add	r2,r4,r2
   10268:	10c00015 	stw	r3,0(r2)
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P3_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   1026c:	8c400044 	addi	r17,r17,1
   10270:	003fed06 	br	10228 <_gp+0xffff6108>
				proc_3_inp_1[i] = ( (P3_INP1_TYPE*)tmp )[0];
			}
			/*for(int i =0; i< sizeof(proc_3_inp_0); i++){
				printf("proc_3_inp_0[i]: %d\n",proc_3_inp_1[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P3_INP0_TYPE*)tmp )[0]);
   10274:	99c00017 	ldw	r7,0(r19)
   10278:	8180008b 	ldhu	r6,2(r16)
   1027c:	8140010b 	ldhu	r5,4(r16)
   10280:	01000074 	movhi	r4,1
   10284:	2107f504 	addi	r4,r4,8148
   10288:	001110c0 	call	1110c <printf>
   1028c:	9037883a 	mov	sp,r18
		}

	}
}
   10290:	e6fffb04 	addi	sp,fp,-20
   10294:	dfc00617 	ldw	ra,24(sp)
   10298:	df000517 	ldw	fp,20(sp)
   1029c:	dd000417 	ldw	r20,16(sp)
   102a0:	dcc00317 	ldw	r19,12(sp)
   102a4:	dc800217 	ldw	r18,8(sp)
   102a8:	dc400117 	ldw	r17,4(sp)
   102ac:	dc000017 	ldw	r16,0(sp)
   102b0:	dec00704 	addi	sp,sp,28
   102b4:	f800283a 	ret

000102b8 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   102b8:	defffb04 	addi	sp,sp,-20
   102bc:	dcc00315 	stw	r19,12(sp)
   102c0:	dc800215 	stw	r18,8(sp)
   102c4:	dc400115 	stw	r17,4(sp)
   102c8:	dfc00415 	stw	ra,16(sp)
   102cc:	dc000015 	stw	r16,0(sp)
   102d0:	2023883a 	mov	r17,r4
   102d4:	2825883a 	mov	r18,r5
   102d8:	3027883a 	mov	r19,r6

	//printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
   102dc:	88c00317 	ldw	r3,12(r17)
   102e0:	89000183 	ldbu	r4,6(r17)
   102e4:	01400604 	movi	r5,24
   102e8:	18802043 	ldbu	r2,129(r3)
   102ec:	1c002003 	ldbu	r16,128(r3)
   102f0:	1421c83a 	sub	r16,r2,r16
   102f4:	84001fcc 	andi	r16,r16,127
   102f8:	0010e1c0 	call	10e1c <__mulsi3>
   102fc:	8080030e 	bge	r16,r2,1030c <read_data+0x54>
		//alt_putstr("waiting for receiving data:\n");
		receive_poll();
   10300:	0010b680 	call	10b68 <receive_poll>

		//alt_putstr("read from FIFO:\n");
		receive_packet();
   10304:	0010a0c0 	call	10a0c <receive_packet>
   10308:	003ff406 	br	102dc <_gp+0xffff61bc>
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
   1030c:	99803fcc 	andi	r6,r19,255
   10310:	917fffcc 	andi	r5,r18,65535
   10314:	8809883a 	mov	r4,r17
}
   10318:	dfc00417 	ldw	ra,16(sp)
   1031c:	dcc00317 	ldw	r19,12(sp)
   10320:	dc800217 	ldw	r18,8(sp)
   10324:	dc400117 	ldw	r17,4(sp)
   10328:	dc000017 	ldw	r16,0(sp)
   1032c:	dec00504 	addi	sp,sp,20

		//alt_putstr("read from FIFO:\n");
		receive_packet();
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
   10330:	00101581 	jmpi	10158 <read_buff>

00010334 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array){
   10334:	defff604 	addi	sp,sp,-40
   10338:	dc000815 	stw	r16,32(sp)
   1033c:	dfc00915 	stw	ra,36(sp)
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   10340:	20c00203 	ldbu	r3,8(r4)
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
}

void serializing_send(struct Edge *edge, unsigned char *array){
   10344:	2021883a 	mov	r16,r4
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   10348:	0005883a 	mov	r2,zero
   1034c:	10c0070e 	bge	r2,r3,1036c <serializing_send+0x38>
		send_array[i] = array[i];
   10350:	d9800204 	addi	r6,sp,8
   10354:	3089883a 	add	r4,r6,r2
   10358:	288d883a 	add	r6,r5,r2
   1035c:	31800003 	ldbu	r6,0(r6)
}

void serializing_send(struct Edge *edge, unsigned char *array){
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   10360:	10800044 	addi	r2,r2,1
		send_array[i] = array[i];
   10364:	21800005 	stb	r6,0(r4)
   10368:	003ff806 	br	1034c <_gp+0xffff622c>
		//printf("in serialized data function: array[i]: %d\n",array[i]);
	}

	if(edge->external == 1){
   1036c:	80800403 	ldbu	r2,16(r16)
   10370:	10000a26 	beq	r2,zero,1039c <serializing_send+0x68>
		//printf("external\n");
		//alt_putstr("write to FIFO\n");
		/*for(int i = 0; i < 24; ++i)
			printf("send_array: %d\n",send_array[i]);*/
		send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   10374:	d8800204 	addi	r2,sp,8
   10378:	81c0010b 	ldhu	r7,4(r16)
   1037c:	8180008b 	ldhu	r6,2(r16)
   10380:	81400043 	ldbu	r5,1(r16)
   10384:	81000003 	ldbu	r4,0(r16)
   10388:	d8800115 	stw	r2,4(sp)
   1038c:	00800804 	movi	r2,32
   10390:	d8800015 	stw	r2,0(sp)
   10394:	00108040 	call	10804 <send_packet>
   10398:	00000406 	br	103ac <serializing_send+0x78>
	}
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
   1039c:	81000317 	ldw	r4,12(r16)
   103a0:	01800604 	movi	r6,24
   103a4:	d9400204 	addi	r5,sp,8
   103a8:	0010c180 	call	10c18 <ring_buffer_queue_arr>
	}
	printf("processor number %d sends data to %d ,which is %x\n",edge->proc_src,edge->proc_dest,( (int*)send_array )[0]);
   103ac:	d9c00217 	ldw	r7,8(sp)
   103b0:	8180010b 	ldhu	r6,4(r16)
   103b4:	8140008b 	ldhu	r5,2(r16)
   103b8:	01000074 	movhi	r4,1
   103bc:	21080304 	addi	r4,r4,8204
   103c0:	001110c0 	call	1110c <printf>

}
   103c4:	dfc00917 	ldw	ra,36(sp)
   103c8:	dc000817 	ldw	r16,32(sp)
   103cc:	dec00a04 	addi	sp,sp,40
   103d0:	f800283a 	ret

000103d4 <send_data.part.1>:

/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   103d4:	defffc04 	addi	sp,sp,-16
   103d8:	dc800215 	stw	r18,8(sp)
   103dc:	dc400115 	stw	r17,4(sp)
   103e0:	dc000015 	stw	r16,0(sp)
   103e4:	dfc00315 	stw	ra,12(sp)
   103e8:	2023883a 	mov	r17,r4
   103ec:	0021883a 	mov	r16,zero

	if(proc_num == 3){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_3_outarg_0[i]));
   103f0:	d4a04804 	addi	r18,gp,-32480
/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 3){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   103f4:	888001c3 	ldbu	r2,7(r17)
   103f8:	8080080e 	bge	r16,r2,1041c <send_data.part.1+0x48>
				serializing_send(edge, ((unsigned char*)proc_3_outarg_0[i]));
   103fc:	8405883a 	add	r2,r16,r16
   10400:	1085883a 	add	r2,r2,r2
   10404:	1485883a 	add	r2,r2,r18
   10408:	11400017 	ldw	r5,0(r2)
   1040c:	8809883a 	mov	r4,r17
/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 3){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   10410:	84000044 	addi	r16,r16,1
				serializing_send(edge, ((unsigned char*)proc_3_outarg_0[i]));
   10414:	00103340 	call	10334 <serializing_send>
   10418:	003ff606 	br	103f4 <_gp+0xffff62d4>
			}
		}
	}
}
   1041c:	dfc00317 	ldw	ra,12(sp)
   10420:	dc800217 	ldw	r18,8(sp)
   10424:	dc400117 	ldw	r17,4(sp)
   10428:	dc000017 	ldw	r16,0(sp)
   1042c:	dec00404 	addi	sp,sp,16
   10430:	f800283a 	ret

00010434 <send_data>:
}

/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 3){
   10434:	297fffcc 	andi	r5,r5,65535
   10438:	008000c4 	movi	r2,3
   1043c:	2880031e 	bne	r5,r2,1044c <send_data+0x18>
		if(output_num == 0){
   10440:	31803fcc 	andi	r6,r6,255
   10444:	3000011e 	bne	r6,zero,1044c <send_data+0x18>
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_3_outarg_0[i]));
			}
		}
	}
}
   10448:	00103d41 	jmpi	103d4 <send_data.part.1>
   1044c:	f800283a 	ret

00010450 <proc_args_init>:

void proc_args_init(){
   10450:	defffc04 	addi	sp,sp,-16
   10454:	dc000015 	stw	r16,0(sp)
	// space allocation for input and output for proc 3
	proc_3_inp_0 = (P3_INP0_TYPE*)malloc(P3_INP0_NUM_OF_TOKEN*sizeof(P3_INP0_TYPE));
   10458:	04000104 	movi	r16,4
   1045c:	8009883a 	mov	r4,r16
			}
		}
	}
}

void proc_args_init(){
   10460:	dfc00315 	stw	ra,12(sp)
   10464:	dc800215 	stw	r18,8(sp)
   10468:	dc400115 	stw	r17,4(sp)
	// space allocation for input and output for proc 3
	proc_3_inp_0 = (P3_INP0_TYPE*)malloc(P3_INP0_NUM_OF_TOKEN*sizeof(P3_INP0_TYPE));
   1046c:	0010e440 	call	10e44 <malloc>
	proc_3_inp_1 = (P3_INP1_TYPE*)malloc(P3_INP1_NUM_OF_TOKEN*sizeof(P3_INP1_TYPE));
   10470:	8009883a 	mov	r4,r16
	}
}

void proc_args_init(){
	// space allocation for input and output for proc 3
	proc_3_inp_0 = (P3_INP0_TYPE*)malloc(P3_INP0_NUM_OF_TOKEN*sizeof(P3_INP0_TYPE));
   10474:	1025883a 	mov	r18,r2
   10478:	d0a04a15 	stw	r2,-32472(gp)
	proc_3_inp_1 = (P3_INP1_TYPE*)malloc(P3_INP1_NUM_OF_TOKEN*sizeof(P3_INP1_TYPE));
   1047c:	0010e440 	call	10e44 <malloc>
	proc_3_out_0 = (P3_OUT0_TYPE*)malloc(P3_OUT0_NUM_OF_TOKEN*sizeof(P3_OUT0_TYPE));
   10480:	8009883a 	mov	r4,r16
}

void proc_args_init(){
	// space allocation for input and output for proc 3
	proc_3_inp_0 = (P3_INP0_TYPE*)malloc(P3_INP0_NUM_OF_TOKEN*sizeof(P3_INP0_TYPE));
	proc_3_inp_1 = (P3_INP1_TYPE*)malloc(P3_INP1_NUM_OF_TOKEN*sizeof(P3_INP1_TYPE));
   10484:	1023883a 	mov	r17,r2
   10488:	d0a04415 	stw	r2,-32496(gp)
	proc_3_out_0 = (P3_OUT0_TYPE*)malloc(P3_OUT0_NUM_OF_TOKEN*sizeof(P3_OUT0_TYPE));
   1048c:	0010e440 	call	10e44 <malloc>
   10490:	d0a04315 	stw	r2,-32500(gp)

	// pointers to elements for proc 3
    proc_3_inparg_0[0] = &proc_3_inp_0[0];
    proc_3_inparg_1[0] = &proc_3_inp_1[0];
    proc_3_outarg_0[0] = &proc_3_out_0[0];
   10494:	d0a04815 	stw	r2,-32480(gp)

    // top level pointers to be passed for proc 3
    proc_3_inps[0] = proc_3_inparg_0;
   10498:	d0e04b04 	addi	r3,gp,-32468
   1049c:	d0a04504 	addi	r2,gp,-32492
   104a0:	10c00015 	stw	r3,0(r2)
    proc_3_inps[1] = proc_3_inparg_1;
   104a4:	d0e04904 	addi	r3,gp,-32476
   104a8:	10c00115 	stw	r3,4(r2)
    proc_3_outs[0] = proc_3_outarg_0;
   104ac:	d0a04804 	addi	r2,gp,-32480
	proc_3_inp_0 = (P3_INP0_TYPE*)malloc(P3_INP0_NUM_OF_TOKEN*sizeof(P3_INP0_TYPE));
	proc_3_inp_1 = (P3_INP1_TYPE*)malloc(P3_INP1_NUM_OF_TOKEN*sizeof(P3_INP1_TYPE));
	proc_3_out_0 = (P3_OUT0_TYPE*)malloc(P3_OUT0_NUM_OF_TOKEN*sizeof(P3_OUT0_TYPE));

	// pointers to elements for proc 3
    proc_3_inparg_0[0] = &proc_3_inp_0[0];
   104b0:	d4a04b15 	stw	r18,-32468(gp)
    proc_3_inparg_1[0] = &proc_3_inp_1[0];
   104b4:	d4604915 	stw	r17,-32476(gp)
    proc_3_outarg_0[0] = &proc_3_out_0[0];

    // top level pointers to be passed for proc 3
    proc_3_inps[0] = proc_3_inparg_0;
    proc_3_inps[1] = proc_3_inparg_1;
    proc_3_outs[0] = proc_3_outarg_0;
   104b8:	d0a04215 	stw	r2,-32504(gp)
}
   104bc:	dfc00317 	ldw	ra,12(sp)
   104c0:	dc800217 	ldw	r18,8(sp)
   104c4:	dc400117 	ldw	r17,4(sp)
   104c8:	dc000017 	ldw	r16,0(sp)
   104cc:	dec00404 	addi	sp,sp,16
   104d0:	f800283a 	ret

000104d4 <cleanUp>:

void cleanUp(){
	// clean up proc 3
	free(proc_3_inp_0);
   104d4:	d1204a17 	ldw	r4,-32472(gp)
    proc_3_inps[0] = proc_3_inparg_0;
    proc_3_inps[1] = proc_3_inparg_1;
    proc_3_outs[0] = proc_3_outarg_0;
}

void cleanUp(){
   104d8:	deffff04 	addi	sp,sp,-4
   104dc:	dfc00015 	stw	ra,0(sp)
	// clean up proc 3
	free(proc_3_inp_0);
   104e0:	0010e580 	call	10e58 <free>
	free(proc_3_inp_1);
   104e4:	d1204417 	ldw	r4,-32496(gp)
   104e8:	0010e580 	call	10e58 <free>
	free(proc_3_out_0);
   104ec:	d1204317 	ldw	r4,-32500(gp)
}
   104f0:	dfc00017 	ldw	ra,0(sp)
   104f4:	dec00104 	addi	sp,sp,4

void cleanUp(){
	// clean up proc 3
	free(proc_3_inp_0);
	free(proc_3_inp_1);
	free(proc_3_out_0);
   104f8:	0010e581 	jmpi	10e58 <free>

000104fc <start_FIFO>:
}

void start_FIFO(){
   104fc:	defffd04 	addi	sp,sp,-12
   10500:	dc400115 	stw	r17,4(sp)
   10504:	dc000015 	stw	r16,0(sp)
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   10508:	044002c4 	movi	r17,11
   1050c:	04000084 	movi	r16,2
   10510:	880f883a 	mov	r7,r17
   10514:	800d883a 	mov	r6,r16
   10518:	000b883a 	mov	r5,zero
   1051c:	01240814 	movui	r4,36896
	free(proc_3_inp_0);
	free(proc_3_inp_1);
	free(proc_3_out_0);
}

void start_FIFO(){
   10520:	dfc00215 	stw	ra,8(sp)
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   10524:	0011d5c0 	call	11d5c <altera_avalon_fifo_init>
   10528:	880f883a 	mov	r7,r17
   1052c:	800d883a 	mov	r6,r16
   10530:	000b883a 	mov	r5,zero
   10534:	01240014 	movui	r4,36864
	//alt_putstr("source status:\n");
	//print_status(FIFO_SOURCE_3_IN_CSR_BASE);

	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_3_IN_CSR_BASE);
}
   10538:	dfc00217 	ldw	ra,8(sp)
   1053c:	dc400117 	ldw	r17,4(sp)
   10540:	dc000017 	ldw	r16,0(sp)
   10544:	dec00304 	addi	sp,sp,12
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   10548:	0011d5c1 	jmpi	11d5c <altera_avalon_fifo_init>

0001054c <main>:
	//print_status(FIFO_SINK_3_IN_CSR_BASE);
}

/* This is only for current node */
int main()
{
   1054c:	defffe04 	addi	sp,sp,-8
   10550:	dfc00115 	stw	ra,4(sp)
   10554:	dc000015 	stw	r16,0(sp)
	start_FIFO();
   10558:	00104fc0 	call	104fc <start_FIFO>
	proc_args_init();
	init_structures();
   1055c:	04000144 	movi	r16,5

/* This is only for current node */
int main()
{
	start_FIFO();
	proc_args_init();
   10560:	00104500 	call	10450 <proc_args_init>
	init_structures();
   10564:	00106e40 	call	106e4 <init_structures>
	for(int k = 0; k < 5; k++){

	  for(int i = 0; i <P3_NUM_OF_INPS; ++i){
		  //alt_putstr("before get edge(for receive)\n");
		  /* This is only for current node */
		  struct Edge *edge = get_edge(3,i,0/*it means input edges*/);
   10568:	000d883a 	mov	r6,zero
   1056c:	000b883a 	mov	r5,zero
   10570:	010000c4 	movi	r4,3
   10574:	00105e80 	call	105e8 <get_edge>
		  printf("edge node dest: %d\n",edge->node_dest);
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc proc_dest: %d\n",edge->proc_dest);*/

		  //alt_putstr("before read_data\n");
		  read_data(edge,3/*which process*/, i/*which input*/);
   10578:	1009883a 	mov	r4,r2
   1057c:	000d883a 	mov	r6,zero
   10580:	014000c4 	movi	r5,3
   10584:	00102b80 	call	102b8 <read_data>
	for(int k = 0; k < 5; k++){

	  for(int i = 0; i <P3_NUM_OF_INPS; ++i){
		  //alt_putstr("before get edge(for receive)\n");
		  /* This is only for current node */
		  struct Edge *edge = get_edge(3,i,0/*it means input edges*/);
   10588:	000d883a 	mov	r6,zero
   1058c:	01400044 	movi	r5,1
   10590:	010000c4 	movi	r4,3
   10594:	00105e80 	call	105e8 <get_edge>
		  printf("edge node dest: %d\n",edge->node_dest);
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc proc_dest: %d\n",edge->proc_dest);*/

		  //alt_putstr("before read_data\n");
		  read_data(edge,3/*which process*/, i/*which input*/);
   10598:	1009883a 	mov	r4,r2
   1059c:	01800044 	movi	r6,1
   105a0:	014000c4 	movi	r5,3
   105a4:	00102b80 	call	102b8 <read_data>
		  //alt_putstr("after read_data\n");
	  }

	  //alt_putstr("before call proc_3\n");
	  proc_3(proc_3_inps, proc_3_outs);
   105a8:	d1604204 	addi	r5,gp,-32504
   105ac:	d1204504 	addi	r4,gp,-32492
   105b0:	001005c0 	call	1005c <proc_3>


	  for(int i = 0; i <P3_NUM_OF_OUTS; ++i){

		  //alt_putstr("before get edge(for send)\n");
		  struct Edge *edge = get_edge(3,i,1/*it means output edges*/);
   105b4:	01800044 	movi	r6,1
   105b8:	000b883a 	mov	r5,zero
   105bc:	010000c4 	movi	r4,3
   105c0:	00105e80 	call	105e8 <get_edge>
   105c4:	1009883a 	mov	r4,r2
   105c8:	00103d40 	call	103d4 <send_data.part.1>

		  //alt_putstr("before send_data\n");
		  send_data(edge,3/*which process*/, i/*which output*/);
		  //alt_putstr("after send_data\n");
	  }
	  usleep(4000000000);
   105cc:	013b9af4 	movhi	r4,61035
   105d0:	210a0004 	addi	r4,r4,10240
   105d4:	843fffc4 	addi	r16,r16,-1
   105d8:	0011c280 	call	11c28 <usleep>
	start_FIFO();
	proc_args_init();
	init_structures();


	for(int k = 0; k < 5; k++){
   105dc:	803fe21e 	bne	r16,zero,10568 <_gp+0xffff6448>
		  send_data(edge,3/*which process*/, i/*which output*/);
		  //alt_putstr("after send_data\n");
	  }
	  usleep(4000000000);
	}
	  cleanUp();
   105e0:	00104d40 	call	104d4 <cleanUp>
   105e4:	003fff06 	br	105e4 <_gp+0xffff64c4>

000105e8 <get_edge>:
/****************** Structure ******************/

/* This is only for current node */
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   105e8:	31803fcc 	andi	r6,r6,255
   105ec:	30000a1e 	bne	r6,zero,10618 <get_edge+0x30>
        if (proc_num == 3) {
   105f0:	21003fcc 	andi	r4,r4,255
   105f4:	008000c4 	movi	r2,3
   105f8:	2080141e 	bne	r4,r2,1064c <get_edge+0x64>
            if (port_num == 0) {
   105fc:	29403fcc 	andi	r5,r5,255
   10600:	28000f26 	beq	r5,zero,10640 <get_edge+0x58>
                return &edge_p2_p3;
            }
            if (port_num == 1) {
   10604:	00800044 	movi	r2,1
   10608:	2880101e 	bne	r5,r2,1064c <get_edge+0x64>
                return &edge_p1_p3;
   1060c:	00800074 	movhi	r2,1
   10610:	1088db04 	addi	r2,r2,9068
   10614:	f800283a 	ret
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   10618:	00800044 	movi	r2,1
   1061c:	30800b1e 	bne	r6,r2,1064c <get_edge+0x64>
        if (proc_num == 3) {
   10620:	21003fcc 	andi	r4,r4,255
   10624:	008000c4 	movi	r2,3
   10628:	2080081e 	bne	r4,r2,1064c <get_edge+0x64>
            if (port_num == 0) {
   1062c:	29403fcc 	andi	r5,r5,255
   10630:	2800061e 	bne	r5,zero,1064c <get_edge+0x64>
                return &edge_p3_p4;
   10634:	00800074 	movhi	r2,1
   10638:	1088ef04 	addi	r2,r2,9148
   1063c:	f800283a 	ret
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
        if (proc_num == 3) {
            if (port_num == 0) {
                return &edge_p2_p3;
   10640:	00800074 	movhi	r2,1
   10644:	1088f404 	addi	r2,r2,9168
   10648:	f800283a 	ret
                return &edge_p3_p4;
            }
        }
    }

    return 0;
   1064c:	0005883a 	mov	r2,zero
}
   10650:	f800283a 	ret

00010654 <get_buffer>:

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   10654:	00c00074 	movhi	r3,1
   10658:	18c8e084 	addi	r3,r3,9090
    for (int i = 0; i < 3; i++) {
   1065c:	0005883a 	mov	r2,zero
        if (edges[i].proc_src == proc_src) {
   10660:	213fffcc 	andi	r4,r4,65535
            if (edges[i].proc_dest == proc_dest) {
   10664:	297fffcc 	andi	r5,r5,65535
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 3; i++) {
   10668:	018000c4 	movi	r6,3
        if (edges[i].proc_src == proc_src) {
   1066c:	19c0000b 	ldhu	r7,0(r3)
   10670:	21c00e1e 	bne	r4,r7,106ac <get_buffer+0x58>
            if (edges[i].proc_dest == proc_dest) {
   10674:	19c0008b 	ldhu	r7,2(r3)
   10678:	29c00c1e 	bne	r5,r7,106ac <get_buffer+0x58>
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   1067c:	deffff04 	addi	sp,sp,-4
    for (int i = 0; i < 3; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   10680:	01400504 	movi	r5,20
   10684:	1009883a 	mov	r4,r2
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   10688:	dfc00015 	stw	ra,0(sp)
    for (int i = 0; i < 3; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   1068c:	0010e1c0 	call	10e1c <__mulsi3>
   10690:	00c00074 	movhi	r3,1
   10694:	18c8e304 	addi	r3,r3,9100
   10698:	10c5883a 	add	r2,r2,r3
   1069c:	10800017 	ldw	r2,0(r2)
            }
        }
    }
    return 0;
}
   106a0:	dfc00017 	ldw	ra,0(sp)
   106a4:	dec00104 	addi	sp,sp,4
   106a8:	f800283a 	ret
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 3; i++) {
   106ac:	10800044 	addi	r2,r2,1
   106b0:	18c00504 	addi	r3,r3,20
   106b4:	11bfed1e 	bne	r2,r6,1066c <_gp+0xffff654c>
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
            }
        }
    }
    return 0;
   106b8:	0005883a 	mov	r2,zero
   106bc:	f800283a 	ret

000106c0 <init_buffer>:
}

void init_buffer(){
   106c0:	deffbe04 	addi	sp,sp,-264
	ring_buffer_t buff_p2_p3;
	ring_buffer_init(&buff_p2_p3);
   106c4:	d9002084 	addi	r4,sp,130
        }
    }
    return 0;
}

void init_buffer(){
   106c8:	dfc04115 	stw	ra,260(sp)
	ring_buffer_t buff_p2_p3;
	ring_buffer_init(&buff_p2_p3);
   106cc:	0010bcc0 	call	10bcc <ring_buffer_init>

	ring_buffer_t buff_p1_p3;
	ring_buffer_init(&buff_p1_p3);
   106d0:	d809883a 	mov	r4,sp
   106d4:	0010bcc0 	call	10bcc <ring_buffer_init>
}
   106d8:	dfc04117 	ldw	ra,260(sp)
   106dc:	dec04204 	addi	sp,sp,264
   106e0:	f800283a 	ret

000106e4 <init_structures>:

/* This is only for current node */
void init_structures(){
   106e4:	defff804 	addi	sp,sp,-32
   106e8:	dfc00715 	stw	ra,28(sp)
   106ec:	dd800615 	stw	r22,24(sp)
   106f0:	dd400515 	stw	r21,20(sp)
   106f4:	dd000415 	stw	r20,16(sp)
   106f8:	dcc00315 	stw	r19,12(sp)
   106fc:	dc800215 	stw	r18,8(sp)
   10700:	dc400115 	stw	r17,4(sp)
   10704:	dc000015 	stw	r16,0(sp)
	edge_p2_p3.num_of_inp_token = P3_INP0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P3_INP0_TYPE);
	edge_p2_p3.external = 1;
	edge_p2_p3.buffer = &buff_p2_p3;

	edges[0] = edge_p2_p3;
   10708:	04800074 	movhi	r18,1
	ring_buffer_init(&buff_p1_p3);
}

/* This is only for current node */
void init_structures(){
	init_buffer();
   1070c:	00106c00 	call	106c0 <init_buffer>
	edge_p2_p3.num_of_inp_token = P3_INP0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P3_INP0_TYPE);
	edge_p2_p3.external = 1;
	edge_p2_p3.buffer = &buff_p2_p3;

	edges[0] = edge_p2_p3;
   10710:	04c00504 	movi	r19,20
   10714:	9488e004 	addi	r18,r18,9088
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   10718:	01400074 	movhi	r5,1
	edge_p2_p3.proc_src = 2;
	edge_p2_p3.proc_dest = 3;
	edge_p2_p3.num_of_inp_token = P3_INP0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P3_INP0_TYPE);
	edge_p2_p3.external = 1;
	edge_p2_p3.buffer = &buff_p2_p3;
   1071c:	00800074 	movhi	r2,1
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   10720:	2948f404 	addi	r5,r5,9168
   10724:	04000044 	movi	r16,1
	edge_p2_p3.node_dest = 3;
	edge_p2_p3.proc_src = 2;
	edge_p2_p3.proc_dest = 3;
   10728:	044000c4 	movi	r17,3
void init_structures(){
	init_buffer();

	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
	edge_p2_p3.node_dest = 3;
   1072c:	054000c4 	movi	r21,3
	edge_p2_p3.proc_src = 2;
   10730:	05000084 	movi	r20,2
	edge_p2_p3.proc_dest = 3;
	edge_p2_p3.num_of_inp_token = P3_INP0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P3_INP0_TYPE);
   10734:	05800104 	movi	r22,4
	edge_p2_p3.external = 1;
	edge_p2_p3.buffer = &buff_p2_p3;

	edges[0] = edge_p2_p3;
   10738:	980d883a 	mov	r6,r19
   1073c:	9009883a 	mov	r4,r18
	edge_p2_p3.proc_src = 2;
	edge_p2_p3.proc_dest = 3;
	edge_p2_p3.num_of_inp_token = P3_INP0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P3_INP0_TYPE);
	edge_p2_p3.external = 1;
	edge_p2_p3.buffer = &buff_p2_p3;
   10740:	1088ba84 	addi	r2,r2,8938
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   10744:	2c000005 	stb	r16,0(r5)
	edge_p2_p3.node_dest = 3;
   10748:	2d400045 	stb	r21,1(r5)
	edge_p2_p3.proc_src = 2;
   1074c:	2d00008d 	sth	r20,2(r5)
	edge_p2_p3.proc_dest = 3;
   10750:	2c40010d 	sth	r17,4(r5)
	edge_p2_p3.num_of_inp_token = P3_INP0_NUM_OF_TOKEN;
   10754:	2c000185 	stb	r16,6(r5)
	edge_p2_p3.size_of_token_type = sizeof(P3_INP0_TYPE);
   10758:	2d800205 	stb	r22,8(r5)
	edge_p2_p3.external = 1;
   1075c:	2c000405 	stb	r16,16(r5)
	edge_p2_p3.buffer = &buff_p2_p3;
   10760:	28800315 	stw	r2,12(r5)

	edges[0] = edge_p2_p3;
   10764:	0010e6c0 	call	10e6c <memcpy>


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   10768:	01400074 	movhi	r5,1
   1076c:	2948db04 	addi	r5,r5,9068
	edge_p1_p3.node_dest = 3;
	edge_p1_p3.proc_src = 1;
   10770:	00800044 	movi	r2,1
   10774:	2880008d 	sth	r2,2(r5)
	edge_p1_p3.proc_dest = 3;
	edge_p1_p3.num_of_inp_token = P3_INP1_NUM_OF_TOKEN;
   10778:	28800185 	stb	r2,6(r5)
	edge_p1_p3.size_of_token_type = sizeof(P3_INP1_TYPE);
	edge_p1_p3.external = 1;
	edge_p1_p3.buffer = &buff_p1_p3;
   1077c:	00800074 	movhi	r2,1

	edges[1] = edge_p1_p3;
   10780:	980d883a 	mov	r6,r19
   10784:	94c9883a 	add	r4,r18,r19
	edge_p1_p3.proc_src = 1;
	edge_p1_p3.proc_dest = 3;
	edge_p1_p3.num_of_inp_token = P3_INP1_NUM_OF_TOKEN;
	edge_p1_p3.size_of_token_type = sizeof(P3_INP1_TYPE);
	edge_p1_p3.external = 1;
	edge_p1_p3.buffer = &buff_p1_p3;
   10788:	10889a04 	addi	r2,r2,8808
	edges[0] = edge_p2_p3;


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
	edge_p1_p3.node_dest = 3;
   1078c:	2c400045 	stb	r17,1(r5)
	edge_p1_p3.proc_src = 1;
	edge_p1_p3.proc_dest = 3;
   10790:	2c40010d 	sth	r17,4(r5)
	edge_p1_p3.num_of_inp_token = P3_INP1_NUM_OF_TOKEN;
	edge_p1_p3.size_of_token_type = sizeof(P3_INP1_TYPE);
   10794:	2d800205 	stb	r22,8(r5)
	edge_p1_p3.external = 1;
   10798:	2c000405 	stb	r16,16(r5)

	edges[0] = edge_p2_p3;


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   1079c:	28000005 	stb	zero,0(r5)
	edge_p1_p3.proc_src = 1;
	edge_p1_p3.proc_dest = 3;
	edge_p1_p3.num_of_inp_token = P3_INP1_NUM_OF_TOKEN;
	edge_p1_p3.size_of_token_type = sizeof(P3_INP1_TYPE);
	edge_p1_p3.external = 1;
	edge_p1_p3.buffer = &buff_p1_p3;
   107a0:	28800315 	stw	r2,12(r5)

	edges[1] = edge_p1_p3;
   107a4:	0010e6c0 	call	10e6c <memcpy>


	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
   107a8:	01400074 	movhi	r5,1
   107ac:	2948ef04 	addi	r5,r5,9148
	edge_p3_p4.node_dest = 2;
	edge_p3_p4.proc_src = 3;
	edge_p3_p4.proc_dest = 4;
   107b0:	00800104 	movi	r2,4
	edge_p3_p4.num_of_out_token = P3_OUT0_NUM_OF_TOKEN;
	edge_p3_p4.size_of_token_type = sizeof(P3_OUT0_TYPE);
	edge_p3_p4.external = 1;

	edges[2] = edge_p3_p4;
   107b4:	980d883a 	mov	r6,r19
   107b8:	91000a04 	addi	r4,r18,40

	edges[1] = edge_p1_p3;


	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
   107bc:	2d400005 	stb	r21,0(r5)
	edge_p3_p4.node_dest = 2;
   107c0:	2d000045 	stb	r20,1(r5)
	edge_p3_p4.proc_src = 3;
   107c4:	2c40008d 	sth	r17,2(r5)
	edge_p3_p4.proc_dest = 4;
   107c8:	2880010d 	sth	r2,4(r5)
	edge_p3_p4.num_of_out_token = P3_OUT0_NUM_OF_TOKEN;
   107cc:	2c0001c5 	stb	r16,7(r5)
	edge_p3_p4.size_of_token_type = sizeof(P3_OUT0_TYPE);
   107d0:	28800205 	stb	r2,8(r5)
	edge_p3_p4.external = 1;
   107d4:	2c000405 	stb	r16,16(r5)

	edges[2] = edge_p3_p4;
   107d8:	0010e6c0 	call	10e6c <memcpy>
}
   107dc:	dfc00717 	ldw	ra,28(sp)
   107e0:	dd800617 	ldw	r22,24(sp)
   107e4:	dd400517 	ldw	r21,20(sp)
   107e8:	dd000417 	ldw	r20,16(sp)
   107ec:	dcc00317 	ldw	r19,12(sp)
   107f0:	dc800217 	ldw	r18,8(sp)
   107f4:	dc400117 	ldw	r17,4(sp)
   107f8:	dc000017 	ldw	r16,0(sp)
   107fc:	dec00804 	addi	sp,sp,32
   10800:	f800283a 	ret

00010804 <send_packet>:

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   10804:	defff904 	addi	sp,sp,-28
   10808:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   1080c:	25403fcc 	andi	r21,r4,255

	edges[2] = edge_p3_p4;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   10810:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10814:	d8800703 	ldbu	r2,28(sp)

	edges[2] = edge_p3_p4;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   10818:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   1081c:	a80c923a 	slli	r6,r21,8
   10820:	29403fcc 	andi	r5,r5,255
   10824:	1004943a 	slli	r2,r2,16
   10828:	314ab03a 	or	r5,r6,r5
   1082c:	a00c943a 	slli	r6,r20,16

	edges[2] = edge_p3_p4;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   10830:	dcc00315 	stw	r19,12(sp)
   10834:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10838:	9cffffcc 	andi	r19,r19,65535

	edges[2] = edge_p3_p4;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   1083c:	dc800215 	stw	r18,8(sp)
   10840:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10844:	04a40014 	movui	r18,36864
   10848:	04641214 	movui	r17,36936
   1084c:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10850:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10854:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10858:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   1085c:	298cb03a 	or	r6,r5,r6
   10860:	8809883a 	mov	r4,r17
   10864:	900b883a 	mov	r5,r18

	edges[2] = edge_p3_p4;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   10868:	dfc00615 	stw	ra,24(sp)
   1086c:	dc000015 	stw	r16,0(sp)
   10870:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10874:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10878:	ace6b03a 	or	r19,r21,r19
   1087c:	a1803fcc 	andi	r6,r20,255
   10880:	998cb03a 	or	r6,r19,r6
   10884:	900b883a 	mov	r5,r18
   10888:	8809883a 	mov	r4,r17
   1088c:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>
   10890:	80800043 	ldbu	r2,1(r16)
   10894:	81000003 	ldbu	r4,0(r16)
   10898:	818000c3 	ldbu	r6,3(r16)
   1089c:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   108a0:	900b883a 	mov	r5,r18
   108a4:	300c963a 	slli	r6,r6,24
   108a8:	1106b03a 	or	r3,r2,r4
   108ac:	80800083 	ldbu	r2,2(r16)
   108b0:	8809883a 	mov	r4,r17
   108b4:	1004943a 	slli	r2,r2,16
   108b8:	10c4b03a 	or	r2,r2,r3
   108bc:	308cb03a 	or	r6,r6,r2
   108c0:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>
   108c4:	80800143 	ldbu	r2,5(r16)
   108c8:	81000103 	ldbu	r4,4(r16)
   108cc:	818001c3 	ldbu	r6,7(r16)
   108d0:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   108d4:	900b883a 	mov	r5,r18
   108d8:	300c963a 	slli	r6,r6,24
   108dc:	1106b03a 	or	r3,r2,r4
   108e0:	80800183 	ldbu	r2,6(r16)
   108e4:	8809883a 	mov	r4,r17
   108e8:	1004943a 	slli	r2,r2,16
   108ec:	10c4b03a 	or	r2,r2,r3
   108f0:	308cb03a 	or	r6,r6,r2
   108f4:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>
   108f8:	80800243 	ldbu	r2,9(r16)
   108fc:	81000203 	ldbu	r4,8(r16)
   10900:	818002c3 	ldbu	r6,11(r16)
   10904:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10908:	900b883a 	mov	r5,r18
   1090c:	300c963a 	slli	r6,r6,24
   10910:	1106b03a 	or	r3,r2,r4
   10914:	80800283 	ldbu	r2,10(r16)
   10918:	8809883a 	mov	r4,r17
   1091c:	1004943a 	slli	r2,r2,16
   10920:	10c4b03a 	or	r2,r2,r3
   10924:	308cb03a 	or	r6,r6,r2
   10928:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>
   1092c:	80800343 	ldbu	r2,13(r16)
   10930:	81000303 	ldbu	r4,12(r16)
   10934:	818003c3 	ldbu	r6,15(r16)
   10938:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   1093c:	900b883a 	mov	r5,r18
   10940:	300c963a 	slli	r6,r6,24
   10944:	1106b03a 	or	r3,r2,r4
   10948:	80800383 	ldbu	r2,14(r16)
   1094c:	8809883a 	mov	r4,r17
   10950:	1004943a 	slli	r2,r2,16
   10954:	10c4b03a 	or	r2,r2,r3
   10958:	308cb03a 	or	r6,r6,r2
   1095c:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>
   10960:	80800443 	ldbu	r2,17(r16)
   10964:	81000403 	ldbu	r4,16(r16)
   10968:	818004c3 	ldbu	r6,19(r16)
   1096c:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   10970:	900b883a 	mov	r5,r18
   10974:	300c963a 	slli	r6,r6,24
   10978:	1106b03a 	or	r3,r2,r4
   1097c:	80800483 	ldbu	r2,18(r16)
   10980:	8809883a 	mov	r4,r17
   10984:	1004943a 	slli	r2,r2,16
   10988:	10c4b03a 	or	r2,r2,r3
   1098c:	308cb03a 	or	r6,r6,r2
   10990:	0011df40 	call	11df4 <altera_avalon_fifo_write_fifo>
   10994:	80800543 	ldbu	r2,21(r16)
   10998:	81000503 	ldbu	r4,20(r16)
   1099c:	818005c3 	ldbu	r6,23(r16)
   109a0:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   109a4:	900b883a 	mov	r5,r18
   109a8:	300c963a 	slli	r6,r6,24
   109ac:	1106b03a 	or	r3,r2,r4
   109b0:	80800583 	ldbu	r2,22(r16)
   109b4:	8809883a 	mov	r4,r17
   109b8:	1004943a 	slli	r2,r2,16
   109bc:	10c4b03a 	or	r2,r2,r3
   109c0:	308cb03a 	or	r6,r6,r2

}
   109c4:	dfc00617 	ldw	ra,24(sp)
   109c8:	dd400517 	ldw	r21,20(sp)
   109cc:	dd000417 	ldw	r20,16(sp)
   109d0:	dcc00317 	ldw	r19,12(sp)
   109d4:	dc800217 	ldw	r18,8(sp)
   109d8:	dc400117 	ldw	r17,4(sp)
   109dc:	dc000017 	ldw	r16,0(sp)
   109e0:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   109e4:	0011df41 	jmpi	11df4 <altera_avalon_fifo_write_fifo>

000109e8 <read_payload>:
}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
   109e8:	2004d23a 	srli	r2,r4,8
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
   109ec:	314b883a 	add	r5,r6,r5
   109f0:	29000005 	stb	r4,0(r5)
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   109f4:	28800045 	stb	r2,1(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
   109f8:	2004d43a 	srli	r2,r4,16
	
	*(payload + 2 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   109fc:	2008d63a 	srli	r4,r4,24
	
	*(payload + 1 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   10a00:	28800085 	stb	r2,2(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   10a04:	290000c5 	stb	r4,3(r5)
   10a08:	f800283a 	ret

00010a0c <receive_packet>:
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   10a0c:	defff704 	addi	sp,sp,-36
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a10:	01640814 	movui	r5,36896
   10a14:	01241014 	movui	r4,36928
	
	*(payload + 3 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   10a18:	dfc00815 	stw	ra,32(sp)
   10a1c:	dc400715 	stw	r17,28(sp)
   10a20:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a24:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	packet_size = temp;
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   10a28:	1004d63a 	srli	r2,r2,24
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a2c:	01640814 	movui	r5,36896
   10a30:	01241014 	movui	r4,36928
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   10a34:	1022923a 	slli	r17,r2,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a38:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
   10a3c:	1021883a 	mov	r16,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a40:	01640814 	movui	r5,36896


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   10a44:	10803fcc 	andi	r2,r2,255


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a48:	01241014 	movui	r4,36928


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   10a4c:	88a2b03a 	or	r17,r17,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a50:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   10a54:	d80d883a 	mov	r6,sp
   10a58:	1009883a 	mov	r4,r2
   10a5c:	000b883a 	mov	r5,zero
   10a60:	00109e80 	call	109e8 <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a64:	01640814 	movui	r5,36896
   10a68:	01241014 	movui	r4,36928
   10a6c:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   10a70:	d80d883a 	mov	r6,sp
   10a74:	1009883a 	mov	r4,r2
   10a78:	01400104 	movi	r5,4
   10a7c:	00109e80 	call	109e8 <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a80:	01640814 	movui	r5,36896
   10a84:	01241014 	movui	r4,36928
   10a88:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   10a8c:	d80d883a 	mov	r6,sp
   10a90:	1009883a 	mov	r4,r2
   10a94:	01400204 	movi	r5,8
   10a98:	00109e80 	call	109e8 <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10a9c:	01640814 	movui	r5,36896
   10aa0:	01241014 	movui	r4,36928
   10aa4:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   10aa8:	d80d883a 	mov	r6,sp
   10aac:	1009883a 	mov	r4,r2
   10ab0:	01400304 	movi	r5,12
   10ab4:	00109e80 	call	109e8 <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10ab8:	01640814 	movui	r5,36896
   10abc:	01241014 	movui	r4,36928
   10ac0:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   10ac4:	d80d883a 	mov	r6,sp
   10ac8:	1009883a 	mov	r4,r2
   10acc:	01400404 	movi	r5,16
   10ad0:	00109e80 	call	109e8 <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   10ad4:	01640814 	movui	r5,36896
   10ad8:	01241014 	movui	r4,36928
   10adc:	0011e380 	call	11e38 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   10ae0:	1009883a 	mov	r4,r2
   10ae4:	d80d883a 	mov	r6,sp
   10ae8:	01400504 	movi	r5,20
   10aec:	8020d23a 	srli	r16,r16,8
   10af0:	00109e80 	call	109e8 <read_payload>
   10af4:	00800074 	movhi	r2,1
   10af8:	1088e084 	addi	r2,r2,9090
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 3; i++) {
   10afc:	0009883a 	mov	r4,zero
        if (edges[i].proc_src == proc_src) {
   10b00:	8c7fffcc 	andi	r17,r17,65535
            if (edges[i].proc_dest == proc_dest) {
   10b04:	843fffcc 	andi	r16,r16,65535
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 3; i++) {
   10b08:	00c000c4 	movi	r3,3
        if (edges[i].proc_src == proc_src) {
   10b0c:	1140000b 	ldhu	r5,0(r2)
   10b10:	8940091e 	bne	r17,r5,10b38 <receive_packet+0x12c>
            if (edges[i].proc_dest == proc_dest) {
   10b14:	1140008b 	ldhu	r5,2(r2)
   10b18:	8140071e 	bne	r16,r5,10b38 <receive_packet+0x12c>
                return edges[i].buffer;
   10b1c:	01400504 	movi	r5,20
   10b20:	0010e1c0 	call	10e1c <__mulsi3>
   10b24:	00c00074 	movhi	r3,1
   10b28:	18c8e304 	addi	r3,r3,9100
   10b2c:	10c5883a 	add	r2,r2,r3
   10b30:	11000017 	ldw	r4,0(r2)
   10b34:	00000406 	br	10b48 <receive_packet+0x13c>
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 3; i++) {
   10b38:	21000044 	addi	r4,r4,1
   10b3c:	10800504 	addi	r2,r2,20
   10b40:	20fff21e 	bne	r4,r3,10b0c <_gp+0xffff69ec>
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
            }
        }
    }
    return 0;
   10b44:	0009883a 	mov	r4,zero
	read_payload(temp,20,payload);	

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);

	ring_buffer_queue_arr(buffer,payload,24);
   10b48:	01800604 	movi	r6,24
   10b4c:	d80b883a 	mov	r5,sp
   10b50:	0010c180 	call	10c18 <ring_buffer_queue_arr>
}
   10b54:	dfc00817 	ldw	ra,32(sp)
   10b58:	dc400717 	ldw	r17,28(sp)
   10b5c:	dc000617 	ldw	r16,24(sp)
   10b60:	dec00904 	addi	sp,sp,36
   10b64:	f800283a 	ret

00010b68 <receive_poll>:

void receive_poll(){
   10b68:	deffff04 	addi	sp,sp,-4
   10b6c:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   10b70:	01400fc4 	movi	r5,63
   10b74:	01240814 	movui	r4,36896
   10b78:	0011cb00 	call	11cb0 <altera_avalon_fifo_read_status>
}

void receive_poll(){
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
   10b7c:	1080008c 	andi	r2,r2,2
   10b80:	103ffb1e 	bne	r2,zero,10b70 <_gp+0xffff6a50>
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    }
}
   10b84:	dfc00017 	ldw	ra,0(sp)
   10b88:	dec00104 	addi	sp,sp,4
   10b8c:	f800283a 	ret

00010b90 <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   10b90:	20c02043 	ldbu	r3,129(r4)
   10b94:	20802003 	ldbu	r2,128(r4)
   10b98:	1885003a 	cmpeq	r2,r3,r2
}
   10b9c:	f800283a 	ret

00010ba0 <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   10ba0:	20802043 	ldbu	r2,129(r4)
   10ba4:	20c02003 	ldbu	r3,128(r4)
   10ba8:	10c5c83a 	sub	r2,r2,r3
   10bac:	10801fcc 	andi	r2,r2,127
   10bb0:	10801fe0 	cmpeqi	r2,r2,127
}
   10bb4:	f800283a 	ret

00010bb8 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   10bb8:	20802043 	ldbu	r2,129(r4)
   10bbc:	20c02003 	ldbu	r3,128(r4)
   10bc0:	10c5c83a 	sub	r2,r2,r3
}
   10bc4:	10801fcc 	andi	r2,r2,127
   10bc8:	f800283a 	ret

00010bcc <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   10bcc:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   10bd0:	20002045 	stb	zero,129(r4)
   10bd4:	f800283a 	ret

00010bd8 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   10bd8:	20802043 	ldbu	r2,129(r4)
   10bdc:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   10be0:	02001fc4 	movi	r8,127
   10be4:	11803fcc 	andi	r6,r2,255
   10be8:	30cfc83a 	sub	r7,r6,r3
   10bec:	39c01fcc 	andi	r7,r7,127
   10bf0:	3a00031e 	bne	r7,r8,10c00 <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   10bf4:	18c00044 	addi	r3,r3,1
   10bf8:	1a06703a 	and	r3,r3,r8
   10bfc:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   10c00:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   10c04:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   10c08:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   10c0c:	10801fcc 	andi	r2,r2,127
   10c10:	20802045 	stb	r2,129(r4)
   10c14:	f800283a 	ret

00010c18 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   10c18:	defffc04 	addi	sp,sp,-16
   10c1c:	31803fcc 	andi	r6,r6,255
   10c20:	dc800215 	stw	r18,8(sp)
   10c24:	dc400115 	stw	r17,4(sp)
   10c28:	dc000015 	stw	r16,0(sp)
   10c2c:	dfc00315 	stw	ra,12(sp)
   10c30:	2025883a 	mov	r18,r4
   10c34:	2821883a 	mov	r16,r5
   10c38:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   10c3c:	84400526 	beq	r16,r17,10c54 <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   10c40:	81400007 	ldb	r5,0(r16)
   10c44:	9009883a 	mov	r4,r18
   10c48:	84000044 	addi	r16,r16,1
   10c4c:	0010bd80 	call	10bd8 <ring_buffer_queue>
   10c50:	003ffa06 	br	10c3c <_gp+0xffff6b1c>
  }
}
   10c54:	dfc00317 	ldw	ra,12(sp)
   10c58:	dc800217 	ldw	r18,8(sp)
   10c5c:	dc400117 	ldw	r17,4(sp)
   10c60:	dc000017 	ldw	r16,0(sp)
   10c64:	dec00404 	addi	sp,sp,16
   10c68:	f800283a 	ret

00010c6c <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   10c6c:	20c02043 	ldbu	r3,129(r4)
   10c70:	20802003 	ldbu	r2,128(r4)
   10c74:	18800926 	beq	r3,r2,10c9c <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   10c78:	2085883a 	add	r2,r4,r2
   10c7c:	10800003 	ldbu	r2,0(r2)
   10c80:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   10c84:	20802003 	ldbu	r2,128(r4)
   10c88:	10800044 	addi	r2,r2,1
   10c8c:	10801fcc 	andi	r2,r2,127
   10c90:	20802005 	stb	r2,128(r4)
  return 1;
   10c94:	00800044 	movi	r2,1
   10c98:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   10c9c:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   10ca0:	f800283a 	ret

00010ca4 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   10ca4:	20c02043 	ldbu	r3,129(r4)
   10ca8:	20802003 	ldbu	r2,128(r4)
   10cac:	18801526 	beq	r3,r2,10d04 <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   10cb0:	defffa04 	addi	sp,sp,-24
   10cb4:	dcc00315 	stw	r19,12(sp)
   10cb8:	dc800215 	stw	r18,8(sp)
   10cbc:	dc400115 	stw	r17,4(sp)
   10cc0:	dc000015 	stw	r16,0(sp)
   10cc4:	dfc00515 	stw	ra,20(sp)
   10cc8:	dd000415 	stw	r20,16(sp)
   10ccc:	2827883a 	mov	r19,r5
   10cd0:	2023883a 	mov	r17,r4
   10cd4:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   10cd8:	0021883a 	mov	r16,zero
   10cdc:	9c0b883a 	add	r5,r19,r16
   10ce0:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   10ce4:	84800926 	beq	r16,r18,10d0c <ring_buffer_dequeue_arr+0x68>
   10ce8:	8809883a 	mov	r4,r17
   10cec:	0010c6c0 	call	10c6c <ring_buffer_dequeue>
   10cf0:	10803fcc 	andi	r2,r2,255
   10cf4:	84000044 	addi	r16,r16,1
   10cf8:	103ff81e 	bne	r2,zero,10cdc <_gp+0xffff6bbc>
   10cfc:	a005883a 	mov	r2,r20
   10d00:	00000306 	br	10d10 <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   10d04:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   10d08:	f800283a 	ret
   10d0c:	8005883a 	mov	r2,r16
   10d10:	dfc00517 	ldw	ra,20(sp)
   10d14:	dd000417 	ldw	r20,16(sp)
   10d18:	dcc00317 	ldw	r19,12(sp)
   10d1c:	dc800217 	ldw	r18,8(sp)
   10d20:	dc400117 	ldw	r17,4(sp)
   10d24:	dc000017 	ldw	r16,0(sp)
   10d28:	dec00604 	addi	sp,sp,24
   10d2c:	f800283a 	ret

00010d30 <ring_buffer_pop>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   10d30:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
   10d34:	21402043 	ldbu	r5,129(r4)
   10d38:	10c03fcc 	andi	r3,r2,255
   10d3c:	28c00526 	beq	r5,r3,10d54 <ring_buffer_pop+0x24>
    /* No items */
    return 0;
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   10d40:	10800044 	addi	r2,r2,1
   10d44:	10801fcc 	andi	r2,r2,127
   10d48:	20802005 	stb	r2,128(r4)
  return 1;
   10d4c:	00800044 	movi	r2,1
   10d50:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   10d54:	0005883a 	mov	r2,zero
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   10d58:	f800283a 	ret

00010d5c <ring_buffer_pop_arr>:

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   10d5c:	20c02043 	ldbu	r3,129(r4)
   10d60:	20802003 	ldbu	r2,128(r4)
   10d64:	18801426 	beq	r3,r2,10db8 <ring_buffer_pop_arr+0x5c>

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
   10d68:	defffb04 	addi	sp,sp,-20
   10d6c:	dcc00315 	stw	r19,12(sp)
   10d70:	dc800215 	stw	r18,8(sp)
   10d74:	dc400115 	stw	r17,4(sp)
   10d78:	dc000015 	stw	r16,0(sp)
   10d7c:	dfc00415 	stw	ra,16(sp)
   10d80:	2821883a 	mov	r16,r5
   10d84:	2023883a 	mov	r17,r4
   10d88:	0025883a 	mov	r18,zero
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
  }
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
   10d8c:	2cc03fcc 	andi	r19,r5,255
   10d90:	90803fcc 	andi	r2,r18,255
   10d94:	14c00a26 	beq	r2,r19,10dc0 <ring_buffer_pop_arr+0x64>
   10d98:	8809883a 	mov	r4,r17
   10d9c:	0010d300 	call	10d30 <ring_buffer_pop>
   10da0:	10803fcc 	andi	r2,r2,255
   10da4:	10000226 	beq	r2,zero,10db0 <ring_buffer_pop_arr+0x54>
    cnt++;
   10da8:	94800044 	addi	r18,r18,1
   10dac:	003ff806 	br	10d90 <_gp+0xffff6c70>
   10db0:	9005883a 	mov	r2,r18
   10db4:	00000306 	br	10dc4 <ring_buffer_pop_arr+0x68>
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   10db8:	0005883a 	mov	r2,zero
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
    cnt++;
  }
  return cnt;
}
   10dbc:	f800283a 	ret
   10dc0:	8005883a 	mov	r2,r16
   10dc4:	dfc00417 	ldw	ra,16(sp)
   10dc8:	dcc00317 	ldw	r19,12(sp)
   10dcc:	dc800217 	ldw	r18,8(sp)
   10dd0:	dc400117 	ldw	r17,4(sp)
   10dd4:	dc000017 	ldw	r16,0(sp)
   10dd8:	dec00504 	addi	sp,sp,20
   10ddc:	f800283a 	ret

00010de0 <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   10de0:	20802003 	ldbu	r2,128(r4)



ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   10de4:	20c02043 	ldbu	r3,129(r4)
   10de8:	31c03fcc 	andi	r7,r6,255
   10dec:	1887c83a 	sub	r3,r3,r2
   10df0:	18c01fcc 	andi	r3,r3,127
   10df4:	38c0072e 	bgeu	r7,r3,10e14 <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   10df8:	3085883a 	add	r2,r6,r2
   10dfc:	10801fcc 	andi	r2,r2,127
   10e00:	2089883a 	add	r4,r4,r2
   10e04:	20800003 	ldbu	r2,0(r4)
   10e08:	28800005 	stb	r2,0(r5)
  return 1;
   10e0c:	00800044 	movi	r2,1
   10e10:	f800283a 	ret


ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   10e14:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   10e18:	f800283a 	ret

00010e1c <__mulsi3>:
   10e1c:	0005883a 	mov	r2,zero
   10e20:	20000726 	beq	r4,zero,10e40 <__mulsi3+0x24>
   10e24:	20c0004c 	andi	r3,r4,1
   10e28:	2008d07a 	srli	r4,r4,1
   10e2c:	18000126 	beq	r3,zero,10e34 <__mulsi3+0x18>
   10e30:	1145883a 	add	r2,r2,r5
   10e34:	294b883a 	add	r5,r5,r5
   10e38:	203ffa1e 	bne	r4,zero,10e24 <_gp+0xffff6d04>
   10e3c:	f800283a 	ret
   10e40:	f800283a 	ret

00010e44 <malloc>:
   10e44:	00800074 	movhi	r2,1
   10e48:	10884904 	addi	r2,r2,8484
   10e4c:	200b883a 	mov	r5,r4
   10e50:	11000017 	ldw	r4,0(r2)
   10e54:	0010f781 	jmpi	10f78 <_malloc_r>

00010e58 <free>:
   10e58:	00800074 	movhi	r2,1
   10e5c:	10884904 	addi	r2,r2,8484
   10e60:	200b883a 	mov	r5,r4
   10e64:	11000017 	ldw	r4,0(r2)
   10e68:	0010e941 	jmpi	10e94 <_free_r>

00010e6c <memcpy>:
   10e6c:	2005883a 	mov	r2,r4
   10e70:	2007883a 	mov	r3,r4
   10e74:	218d883a 	add	r6,r4,r6
   10e78:	19800526 	beq	r3,r6,10e90 <memcpy+0x24>
   10e7c:	29000003 	ldbu	r4,0(r5)
   10e80:	18c00044 	addi	r3,r3,1
   10e84:	29400044 	addi	r5,r5,1
   10e88:	193fffc5 	stb	r4,-1(r3)
   10e8c:	003ffa06 	br	10e78 <_gp+0xffff6d58>
   10e90:	f800283a 	ret

00010e94 <_free_r>:
   10e94:	28003726 	beq	r5,zero,10f74 <_free_r+0xe0>
   10e98:	28ffff17 	ldw	r3,-4(r5)
   10e9c:	28bfff04 	addi	r2,r5,-4
   10ea0:	1800010e 	bge	r3,zero,10ea8 <_free_r+0x14>
   10ea4:	10c5883a 	add	r2,r2,r3
   10ea8:	01400074 	movhi	r5,1
   10eac:	29489504 	addi	r5,r5,8788
   10eb0:	28c00017 	ldw	r3,0(r5)
   10eb4:	280d883a 	mov	r6,r5
   10eb8:	1800031e 	bne	r3,zero,10ec8 <_free_r+0x34>
   10ebc:	10000115 	stw	zero,4(r2)
   10ec0:	28800015 	stw	r2,0(r5)
   10ec4:	f800283a 	ret
   10ec8:	10c00c2e 	bgeu	r2,r3,10efc <_free_r+0x68>
   10ecc:	11000017 	ldw	r4,0(r2)
   10ed0:	110b883a 	add	r5,r2,r4
   10ed4:	1940041e 	bne	r3,r5,10ee8 <_free_r+0x54>
   10ed8:	19400017 	ldw	r5,0(r3)
   10edc:	18c00117 	ldw	r3,4(r3)
   10ee0:	2909883a 	add	r4,r5,r4
   10ee4:	11000015 	stw	r4,0(r2)
   10ee8:	10c00115 	stw	r3,4(r2)
   10eec:	30800015 	stw	r2,0(r6)
   10ef0:	f800283a 	ret
   10ef4:	11400336 	bltu	r2,r5,10f04 <_free_r+0x70>
   10ef8:	2807883a 	mov	r3,r5
   10efc:	19400117 	ldw	r5,4(r3)
   10f00:	283ffc1e 	bne	r5,zero,10ef4 <_gp+0xffff6dd4>
   10f04:	19c00017 	ldw	r7,0(r3)
   10f08:	19cd883a 	add	r6,r3,r7
   10f0c:	30800a1e 	bne	r6,r2,10f38 <_free_r+0xa4>
   10f10:	10800017 	ldw	r2,0(r2)
   10f14:	3885883a 	add	r2,r7,r2
   10f18:	18800015 	stw	r2,0(r3)
   10f1c:	1889883a 	add	r4,r3,r2
   10f20:	2900141e 	bne	r5,r4,10f74 <_free_r+0xe0>
   10f24:	29000017 	ldw	r4,0(r5)
   10f28:	2085883a 	add	r2,r4,r2
   10f2c:	18800015 	stw	r2,0(r3)
   10f30:	28800117 	ldw	r2,4(r5)
   10f34:	00000e06 	br	10f70 <_free_r+0xdc>
   10f38:	1180032e 	bgeu	r2,r6,10f48 <_free_r+0xb4>
   10f3c:	00800304 	movi	r2,12
   10f40:	20800015 	stw	r2,0(r4)
   10f44:	f800283a 	ret
   10f48:	11000017 	ldw	r4,0(r2)
   10f4c:	110d883a 	add	r6,r2,r4
   10f50:	2980061e 	bne	r5,r6,10f6c <_free_r+0xd8>
   10f54:	29800017 	ldw	r6,0(r5)
   10f58:	3109883a 	add	r4,r6,r4
   10f5c:	11000015 	stw	r4,0(r2)
   10f60:	29000117 	ldw	r4,4(r5)
   10f64:	11000115 	stw	r4,4(r2)
   10f68:	00000106 	br	10f70 <_free_r+0xdc>
   10f6c:	11400115 	stw	r5,4(r2)
   10f70:	18800115 	stw	r2,4(r3)
   10f74:	f800283a 	ret

00010f78 <_malloc_r>:
   10f78:	defffb04 	addi	sp,sp,-20
   10f7c:	00bfff04 	movi	r2,-4
   10f80:	dc400115 	stw	r17,4(sp)
   10f84:	2c4000c4 	addi	r17,r5,3
   10f88:	88a2703a 	and	r17,r17,r2
   10f8c:	dc800215 	stw	r18,8(sp)
   10f90:	dfc00415 	stw	ra,16(sp)
   10f94:	dcc00315 	stw	r19,12(sp)
   10f98:	dc000015 	stw	r16,0(sp)
   10f9c:	8c400204 	addi	r17,r17,8
   10fa0:	00800304 	movi	r2,12
   10fa4:	2025883a 	mov	r18,r4
   10fa8:	8880022e 	bgeu	r17,r2,10fb4 <_malloc_r+0x3c>
   10fac:	1023883a 	mov	r17,r2
   10fb0:	00000506 	br	10fc8 <_malloc_r+0x50>
   10fb4:	8800040e 	bge	r17,zero,10fc8 <_malloc_r+0x50>
   10fb8:	00800304 	movi	r2,12
   10fbc:	90800015 	stw	r2,0(r18)
   10fc0:	0005883a 	mov	r2,zero
   10fc4:	00003b06 	br	110b4 <_malloc_r+0x13c>
   10fc8:	897ffb36 	bltu	r17,r5,10fb8 <_gp+0xffff6e98>
   10fcc:	00800074 	movhi	r2,1
   10fd0:	10889504 	addi	r2,r2,8788
   10fd4:	10c00017 	ldw	r3,0(r2)
   10fd8:	1009883a 	mov	r4,r2
   10fdc:	1821883a 	mov	r16,r3
   10fe0:	80000926 	beq	r16,zero,11008 <_malloc_r+0x90>
   10fe4:	80800017 	ldw	r2,0(r16)
   10fe8:	1445c83a 	sub	r2,r2,r17
   10fec:	10001516 	blt	r2,zero,11044 <_malloc_r+0xcc>
   10ff0:	014002c4 	movi	r5,11
   10ff4:	28800d2e 	bgeu	r5,r2,1102c <_malloc_r+0xb4>
   10ff8:	80800015 	stw	r2,0(r16)
   10ffc:	80a1883a 	add	r16,r16,r2
   11000:	84400015 	stw	r17,0(r16)
   11004:	8000221e 	bne	r16,zero,11090 <_malloc_r+0x118>
   11008:	04000074 	movhi	r16,1
   1100c:	84089404 	addi	r16,r16,8784
   11010:	80800017 	ldw	r2,0(r16)
   11014:	10000e1e 	bne	r2,zero,11050 <_malloc_r+0xd8>
   11018:	000b883a 	mov	r5,zero
   1101c:	9009883a 	mov	r4,r18
   11020:	00111ec0 	call	111ec <_sbrk_r>
   11024:	80800015 	stw	r2,0(r16)
   11028:	00000906 	br	11050 <_malloc_r+0xd8>
   1102c:	80800117 	ldw	r2,4(r16)
   11030:	1c00021e 	bne	r3,r16,1103c <_malloc_r+0xc4>
   11034:	20800015 	stw	r2,0(r4)
   11038:	00001506 	br	11090 <_malloc_r+0x118>
   1103c:	18800115 	stw	r2,4(r3)
   11040:	00001306 	br	11090 <_malloc_r+0x118>
   11044:	8007883a 	mov	r3,r16
   11048:	84000117 	ldw	r16,4(r16)
   1104c:	003fe406 	br	10fe0 <_gp+0xffff6ec0>
   11050:	880b883a 	mov	r5,r17
   11054:	9009883a 	mov	r4,r18
   11058:	00111ec0 	call	111ec <_sbrk_r>
   1105c:	04ffffc4 	movi	r19,-1
   11060:	14ffd526 	beq	r2,r19,10fb8 <_gp+0xffff6e98>
   11064:	140000c4 	addi	r16,r2,3
   11068:	00ffff04 	movi	r3,-4
   1106c:	80e0703a 	and	r16,r16,r3
   11070:	1400021e 	bne	r2,r16,1107c <_malloc_r+0x104>
   11074:	84400015 	stw	r17,0(r16)
   11078:	00000506 	br	11090 <_malloc_r+0x118>
   1107c:	808bc83a 	sub	r5,r16,r2
   11080:	9009883a 	mov	r4,r18
   11084:	00111ec0 	call	111ec <_sbrk_r>
   11088:	14fffa1e 	bne	r2,r19,11074 <_gp+0xffff6f54>
   1108c:	003fca06 	br	10fb8 <_gp+0xffff6e98>
   11090:	810002c4 	addi	r4,r16,11
   11094:	00bffe04 	movi	r2,-8
   11098:	80c00104 	addi	r3,r16,4
   1109c:	2084703a 	and	r2,r4,r2
   110a0:	10c7c83a 	sub	r3,r2,r3
   110a4:	18000326 	beq	r3,zero,110b4 <_malloc_r+0x13c>
   110a8:	80e1883a 	add	r16,r16,r3
   110ac:	00c7c83a 	sub	r3,zero,r3
   110b0:	80c00015 	stw	r3,0(r16)
   110b4:	dfc00417 	ldw	ra,16(sp)
   110b8:	dcc00317 	ldw	r19,12(sp)
   110bc:	dc800217 	ldw	r18,8(sp)
   110c0:	dc400117 	ldw	r17,4(sp)
   110c4:	dc000017 	ldw	r16,0(sp)
   110c8:	dec00504 	addi	sp,sp,20
   110cc:	f800283a 	ret

000110d0 <_printf_r>:
   110d0:	defffd04 	addi	sp,sp,-12
   110d4:	dfc00015 	stw	ra,0(sp)
   110d8:	d9800115 	stw	r6,4(sp)
   110dc:	d9c00215 	stw	r7,8(sp)
   110e0:	20c00217 	ldw	r3,8(r4)
   110e4:	01800074 	movhi	r6,1
   110e8:	31860304 	addi	r6,r6,6156
   110ec:	19800115 	stw	r6,4(r3)
   110f0:	280d883a 	mov	r6,r5
   110f4:	21400217 	ldw	r5,8(r4)
   110f8:	d9c00104 	addi	r7,sp,4
   110fc:	00112c40 	call	112c4 <___vfprintf_internal_r>
   11100:	dfc00017 	ldw	ra,0(sp)
   11104:	dec00304 	addi	sp,sp,12
   11108:	f800283a 	ret

0001110c <printf>:
   1110c:	defffc04 	addi	sp,sp,-16
   11110:	dfc00015 	stw	ra,0(sp)
   11114:	d9400115 	stw	r5,4(sp)
   11118:	d9800215 	stw	r6,8(sp)
   1111c:	d9c00315 	stw	r7,12(sp)
   11120:	00800074 	movhi	r2,1
   11124:	10884904 	addi	r2,r2,8484
   11128:	10800017 	ldw	r2,0(r2)
   1112c:	01400074 	movhi	r5,1
   11130:	29460304 	addi	r5,r5,6156
   11134:	10c00217 	ldw	r3,8(r2)
   11138:	d9800104 	addi	r6,sp,4
   1113c:	19400115 	stw	r5,4(r3)
   11140:	200b883a 	mov	r5,r4
   11144:	11000217 	ldw	r4,8(r2)
   11148:	00117f00 	call	117f0 <__vfprintf_internal>
   1114c:	dfc00017 	ldw	ra,0(sp)
   11150:	dec00404 	addi	sp,sp,16
   11154:	f800283a 	ret

00011158 <_puts_r>:
   11158:	defffd04 	addi	sp,sp,-12
   1115c:	dc000015 	stw	r16,0(sp)
   11160:	2021883a 	mov	r16,r4
   11164:	2809883a 	mov	r4,r5
   11168:	dfc00215 	stw	ra,8(sp)
   1116c:	dc400115 	stw	r17,4(sp)
   11170:	2823883a 	mov	r17,r5
   11174:	001123c0 	call	1123c <strlen>
   11178:	81400217 	ldw	r5,8(r16)
   1117c:	01000074 	movhi	r4,1
   11180:	21060304 	addi	r4,r4,6156
   11184:	29000115 	stw	r4,4(r5)
   11188:	100f883a 	mov	r7,r2
   1118c:	880d883a 	mov	r6,r17
   11190:	8009883a 	mov	r4,r16
   11194:	001180c0 	call	1180c <__sfvwrite_small_dev>
   11198:	00ffffc4 	movi	r3,-1
   1119c:	10c00926 	beq	r2,r3,111c4 <_puts_r+0x6c>
   111a0:	81400217 	ldw	r5,8(r16)
   111a4:	01800074 	movhi	r6,1
   111a8:	01c00044 	movi	r7,1
   111ac:	28800117 	ldw	r2,4(r5)
   111b0:	3187f404 	addi	r6,r6,8144
   111b4:	8009883a 	mov	r4,r16
   111b8:	103ee83a 	callr	r2
   111bc:	10bfffe0 	cmpeqi	r2,r2,-1
   111c0:	0085c83a 	sub	r2,zero,r2
   111c4:	dfc00217 	ldw	ra,8(sp)
   111c8:	dc400117 	ldw	r17,4(sp)
   111cc:	dc000017 	ldw	r16,0(sp)
   111d0:	dec00304 	addi	sp,sp,12
   111d4:	f800283a 	ret

000111d8 <puts>:
   111d8:	00800074 	movhi	r2,1
   111dc:	10884904 	addi	r2,r2,8484
   111e0:	200b883a 	mov	r5,r4
   111e4:	11000017 	ldw	r4,0(r2)
   111e8:	00111581 	jmpi	11158 <_puts_r>

000111ec <_sbrk_r>:
   111ec:	defffd04 	addi	sp,sp,-12
   111f0:	dc000015 	stw	r16,0(sp)
   111f4:	04000074 	movhi	r16,1
   111f8:	dc400115 	stw	r17,4(sp)
   111fc:	84089604 	addi	r16,r16,8792
   11200:	2023883a 	mov	r17,r4
   11204:	2809883a 	mov	r4,r5
   11208:	dfc00215 	stw	ra,8(sp)
   1120c:	80000015 	stw	zero,0(r16)
   11210:	0011bdc0 	call	11bdc <sbrk>
   11214:	00ffffc4 	movi	r3,-1
   11218:	10c0031e 	bne	r2,r3,11228 <_sbrk_r+0x3c>
   1121c:	80c00017 	ldw	r3,0(r16)
   11220:	18000126 	beq	r3,zero,11228 <_sbrk_r+0x3c>
   11224:	88c00015 	stw	r3,0(r17)
   11228:	dfc00217 	ldw	ra,8(sp)
   1122c:	dc400117 	ldw	r17,4(sp)
   11230:	dc000017 	ldw	r16,0(sp)
   11234:	dec00304 	addi	sp,sp,12
   11238:	f800283a 	ret

0001123c <strlen>:
   1123c:	2005883a 	mov	r2,r4
   11240:	10c00007 	ldb	r3,0(r2)
   11244:	18000226 	beq	r3,zero,11250 <strlen+0x14>
   11248:	10800044 	addi	r2,r2,1
   1124c:	003ffc06 	br	11240 <_gp+0xffff7120>
   11250:	1105c83a 	sub	r2,r2,r4
   11254:	f800283a 	ret

00011258 <print_repeat>:
   11258:	defffb04 	addi	sp,sp,-20
   1125c:	dc800315 	stw	r18,12(sp)
   11260:	dc400215 	stw	r17,8(sp)
   11264:	dc000115 	stw	r16,4(sp)
   11268:	dfc00415 	stw	ra,16(sp)
   1126c:	2025883a 	mov	r18,r4
   11270:	2823883a 	mov	r17,r5
   11274:	d9800005 	stb	r6,0(sp)
   11278:	3821883a 	mov	r16,r7
   1127c:	04000a0e 	bge	zero,r16,112a8 <print_repeat+0x50>
   11280:	88800117 	ldw	r2,4(r17)
   11284:	01c00044 	movi	r7,1
   11288:	d80d883a 	mov	r6,sp
   1128c:	880b883a 	mov	r5,r17
   11290:	9009883a 	mov	r4,r18
   11294:	103ee83a 	callr	r2
   11298:	843fffc4 	addi	r16,r16,-1
   1129c:	103ff726 	beq	r2,zero,1127c <_gp+0xffff715c>
   112a0:	00bfffc4 	movi	r2,-1
   112a4:	00000106 	br	112ac <print_repeat+0x54>
   112a8:	0005883a 	mov	r2,zero
   112ac:	dfc00417 	ldw	ra,16(sp)
   112b0:	dc800317 	ldw	r18,12(sp)
   112b4:	dc400217 	ldw	r17,8(sp)
   112b8:	dc000117 	ldw	r16,4(sp)
   112bc:	dec00504 	addi	sp,sp,20
   112c0:	f800283a 	ret

000112c4 <___vfprintf_internal_r>:
   112c4:	deffe504 	addi	sp,sp,-108
   112c8:	d8c00804 	addi	r3,sp,32
   112cc:	ddc01815 	stw	r23,96(sp)
   112d0:	dd801715 	stw	r22,92(sp)
   112d4:	dd401615 	stw	r21,88(sp)
   112d8:	dd001515 	stw	r20,84(sp)
   112dc:	dcc01415 	stw	r19,80(sp)
   112e0:	dc801315 	stw	r18,76(sp)
   112e4:	dc401215 	stw	r17,72(sp)
   112e8:	dc001115 	stw	r16,68(sp)
   112ec:	dfc01a15 	stw	ra,104(sp)
   112f0:	df001915 	stw	fp,100(sp)
   112f4:	2029883a 	mov	r20,r4
   112f8:	2823883a 	mov	r17,r5
   112fc:	382d883a 	mov	r22,r7
   11300:	d9800f15 	stw	r6,60(sp)
   11304:	0021883a 	mov	r16,zero
   11308:	d8000e15 	stw	zero,56(sp)
   1130c:	d8000a15 	stw	zero,40(sp)
   11310:	002b883a 	mov	r21,zero
   11314:	0027883a 	mov	r19,zero
   11318:	0025883a 	mov	r18,zero
   1131c:	d8000c15 	stw	zero,48(sp)
   11320:	d8000b15 	stw	zero,44(sp)
   11324:	002f883a 	mov	r23,zero
   11328:	d8c00915 	stw	r3,36(sp)
   1132c:	d8c00f17 	ldw	r3,60(sp)
   11330:	19000003 	ldbu	r4,0(r3)
   11334:	20803fcc 	andi	r2,r4,255
   11338:	1080201c 	xori	r2,r2,128
   1133c:	10bfe004 	addi	r2,r2,-128
   11340:	10011e26 	beq	r2,zero,117bc <___vfprintf_internal_r+0x4f8>
   11344:	00c00044 	movi	r3,1
   11348:	b8c01426 	beq	r23,r3,1139c <___vfprintf_internal_r+0xd8>
   1134c:	1dc00216 	blt	r3,r23,11358 <___vfprintf_internal_r+0x94>
   11350:	b8000626 	beq	r23,zero,1136c <___vfprintf_internal_r+0xa8>
   11354:	00011506 	br	117ac <___vfprintf_internal_r+0x4e8>
   11358:	01400084 	movi	r5,2
   1135c:	b9401d26 	beq	r23,r5,113d4 <___vfprintf_internal_r+0x110>
   11360:	014000c4 	movi	r5,3
   11364:	b9402b26 	beq	r23,r5,11414 <___vfprintf_internal_r+0x150>
   11368:	00011006 	br	117ac <___vfprintf_internal_r+0x4e8>
   1136c:	01400944 	movi	r5,37
   11370:	1140fc26 	beq	r2,r5,11764 <___vfprintf_internal_r+0x4a0>
   11374:	88800117 	ldw	r2,4(r17)
   11378:	d9000005 	stb	r4,0(sp)
   1137c:	01c00044 	movi	r7,1
   11380:	d80d883a 	mov	r6,sp
   11384:	880b883a 	mov	r5,r17
   11388:	a009883a 	mov	r4,r20
   1138c:	103ee83a 	callr	r2
   11390:	1000d81e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   11394:	84000044 	addi	r16,r16,1
   11398:	00010406 	br	117ac <___vfprintf_internal_r+0x4e8>
   1139c:	01400c04 	movi	r5,48
   113a0:	1140fa26 	beq	r2,r5,1178c <___vfprintf_internal_r+0x4c8>
   113a4:	01400944 	movi	r5,37
   113a8:	11400a1e 	bne	r2,r5,113d4 <___vfprintf_internal_r+0x110>
   113ac:	d8800005 	stb	r2,0(sp)
   113b0:	88800117 	ldw	r2,4(r17)
   113b4:	b80f883a 	mov	r7,r23
   113b8:	d80d883a 	mov	r6,sp
   113bc:	880b883a 	mov	r5,r17
   113c0:	a009883a 	mov	r4,r20
   113c4:	103ee83a 	callr	r2
   113c8:	1000ca1e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   113cc:	84000044 	addi	r16,r16,1
   113d0:	0000f506 	br	117a8 <___vfprintf_internal_r+0x4e4>
   113d4:	25fff404 	addi	r23,r4,-48
   113d8:	bdc03fcc 	andi	r23,r23,255
   113dc:	00c00244 	movi	r3,9
   113e0:	1dc00936 	bltu	r3,r23,11408 <___vfprintf_internal_r+0x144>
   113e4:	00bfffc4 	movi	r2,-1
   113e8:	90800426 	beq	r18,r2,113fc <___vfprintf_internal_r+0x138>
   113ec:	01400284 	movi	r5,10
   113f0:	9009883a 	mov	r4,r18
   113f4:	0010e1c0 	call	10e1c <__mulsi3>
   113f8:	00000106 	br	11400 <___vfprintf_internal_r+0x13c>
   113fc:	0005883a 	mov	r2,zero
   11400:	b8a5883a 	add	r18,r23,r2
   11404:	0000e206 	br	11790 <___vfprintf_internal_r+0x4cc>
   11408:	01400b84 	movi	r5,46
   1140c:	1140e426 	beq	r2,r5,117a0 <___vfprintf_internal_r+0x4dc>
   11410:	05c00084 	movi	r23,2
   11414:	213ff404 	addi	r4,r4,-48
   11418:	27003fcc 	andi	fp,r4,255
   1141c:	00c00244 	movi	r3,9
   11420:	1f000936 	bltu	r3,fp,11448 <___vfprintf_internal_r+0x184>
   11424:	00bfffc4 	movi	r2,-1
   11428:	98800426 	beq	r19,r2,1143c <___vfprintf_internal_r+0x178>
   1142c:	01400284 	movi	r5,10
   11430:	9809883a 	mov	r4,r19
   11434:	0010e1c0 	call	10e1c <__mulsi3>
   11438:	00000106 	br	11440 <___vfprintf_internal_r+0x17c>
   1143c:	0005883a 	mov	r2,zero
   11440:	e0a7883a 	add	r19,fp,r2
   11444:	0000d906 	br	117ac <___vfprintf_internal_r+0x4e8>
   11448:	00c01b04 	movi	r3,108
   1144c:	10c0d226 	beq	r2,r3,11798 <___vfprintf_internal_r+0x4d4>
   11450:	013fffc4 	movi	r4,-1
   11454:	99000226 	beq	r19,r4,11460 <___vfprintf_internal_r+0x19c>
   11458:	d8000b15 	stw	zero,44(sp)
   1145c:	00000106 	br	11464 <___vfprintf_internal_r+0x1a0>
   11460:	04c00044 	movi	r19,1
   11464:	01001a44 	movi	r4,105
   11468:	11001626 	beq	r2,r4,114c4 <___vfprintf_internal_r+0x200>
   1146c:	20800916 	blt	r4,r2,11494 <___vfprintf_internal_r+0x1d0>
   11470:	010018c4 	movi	r4,99
   11474:	11008826 	beq	r2,r4,11698 <___vfprintf_internal_r+0x3d4>
   11478:	01001904 	movi	r4,100
   1147c:	11001126 	beq	r2,r4,114c4 <___vfprintf_internal_r+0x200>
   11480:	01001604 	movi	r4,88
   11484:	1100c81e 	bne	r2,r4,117a8 <___vfprintf_internal_r+0x4e4>
   11488:	00c00044 	movi	r3,1
   1148c:	d8c00e15 	stw	r3,56(sp)
   11490:	00001506 	br	114e8 <___vfprintf_internal_r+0x224>
   11494:	01001cc4 	movi	r4,115
   11498:	11009826 	beq	r2,r4,116fc <___vfprintf_internal_r+0x438>
   1149c:	20800416 	blt	r4,r2,114b0 <___vfprintf_internal_r+0x1ec>
   114a0:	01001bc4 	movi	r4,111
   114a4:	1100c01e 	bne	r2,r4,117a8 <___vfprintf_internal_r+0x4e4>
   114a8:	05400204 	movi	r21,8
   114ac:	00000f06 	br	114ec <___vfprintf_internal_r+0x228>
   114b0:	01001d44 	movi	r4,117
   114b4:	11000d26 	beq	r2,r4,114ec <___vfprintf_internal_r+0x228>
   114b8:	01001e04 	movi	r4,120
   114bc:	11000a26 	beq	r2,r4,114e8 <___vfprintf_internal_r+0x224>
   114c0:	0000b906 	br	117a8 <___vfprintf_internal_r+0x4e4>
   114c4:	d8c00a17 	ldw	r3,40(sp)
   114c8:	b7000104 	addi	fp,r22,4
   114cc:	18000726 	beq	r3,zero,114ec <___vfprintf_internal_r+0x228>
   114d0:	df000d15 	stw	fp,52(sp)
   114d4:	b5c00017 	ldw	r23,0(r22)
   114d8:	b800080e 	bge	r23,zero,114fc <___vfprintf_internal_r+0x238>
   114dc:	05efc83a 	sub	r23,zero,r23
   114e0:	02400044 	movi	r9,1
   114e4:	00000606 	br	11500 <___vfprintf_internal_r+0x23c>
   114e8:	05400404 	movi	r21,16
   114ec:	b0c00104 	addi	r3,r22,4
   114f0:	d8c00d15 	stw	r3,52(sp)
   114f4:	b5c00017 	ldw	r23,0(r22)
   114f8:	d8000a15 	stw	zero,40(sp)
   114fc:	0013883a 	mov	r9,zero
   11500:	d839883a 	mov	fp,sp
   11504:	b8001726 	beq	r23,zero,11564 <___vfprintf_internal_r+0x2a0>
   11508:	a80b883a 	mov	r5,r21
   1150c:	b809883a 	mov	r4,r23
   11510:	da401015 	stw	r9,64(sp)
   11514:	0011a140 	call	11a14 <__udivsi3>
   11518:	a80b883a 	mov	r5,r21
   1151c:	1009883a 	mov	r4,r2
   11520:	102d883a 	mov	r22,r2
   11524:	0010e1c0 	call	10e1c <__mulsi3>
   11528:	b885c83a 	sub	r2,r23,r2
   1152c:	00c00244 	movi	r3,9
   11530:	da401017 	ldw	r9,64(sp)
   11534:	18800216 	blt	r3,r2,11540 <___vfprintf_internal_r+0x27c>
   11538:	10800c04 	addi	r2,r2,48
   1153c:	00000506 	br	11554 <___vfprintf_internal_r+0x290>
   11540:	d8c00e17 	ldw	r3,56(sp)
   11544:	18000226 	beq	r3,zero,11550 <___vfprintf_internal_r+0x28c>
   11548:	10800dc4 	addi	r2,r2,55
   1154c:	00000106 	br	11554 <___vfprintf_internal_r+0x290>
   11550:	108015c4 	addi	r2,r2,87
   11554:	e0800005 	stb	r2,0(fp)
   11558:	b02f883a 	mov	r23,r22
   1155c:	e7000044 	addi	fp,fp,1
   11560:	003fe806 	br	11504 <_gp+0xffff73e4>
   11564:	e6efc83a 	sub	r23,fp,sp
   11568:	9dc5c83a 	sub	r2,r19,r23
   1156c:	0080090e 	bge	zero,r2,11594 <___vfprintf_internal_r+0x2d0>
   11570:	e085883a 	add	r2,fp,r2
   11574:	01400c04 	movi	r5,48
   11578:	d8c00917 	ldw	r3,36(sp)
   1157c:	e009883a 	mov	r4,fp
   11580:	e0c0032e 	bgeu	fp,r3,11590 <___vfprintf_internal_r+0x2cc>
   11584:	e7000044 	addi	fp,fp,1
   11588:	21400005 	stb	r5,0(r4)
   1158c:	e0bffa1e 	bne	fp,r2,11578 <_gp+0xffff7458>
   11590:	e6efc83a 	sub	r23,fp,sp
   11594:	d8c00b17 	ldw	r3,44(sp)
   11598:	4dd1883a 	add	r8,r9,r23
   1159c:	922dc83a 	sub	r22,r18,r8
   115a0:	18001626 	beq	r3,zero,115fc <___vfprintf_internal_r+0x338>
   115a4:	48000a26 	beq	r9,zero,115d0 <___vfprintf_internal_r+0x30c>
   115a8:	00800b44 	movi	r2,45
   115ac:	d8800805 	stb	r2,32(sp)
   115b0:	88800117 	ldw	r2,4(r17)
   115b4:	01c00044 	movi	r7,1
   115b8:	d9800804 	addi	r6,sp,32
   115bc:	880b883a 	mov	r5,r17
   115c0:	a009883a 	mov	r4,r20
   115c4:	103ee83a 	callr	r2
   115c8:	10004a1e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   115cc:	84000044 	addi	r16,r16,1
   115d0:	0580070e 	bge	zero,r22,115f0 <___vfprintf_internal_r+0x32c>
   115d4:	b00f883a 	mov	r7,r22
   115d8:	01800c04 	movi	r6,48
   115dc:	880b883a 	mov	r5,r17
   115e0:	a009883a 	mov	r4,r20
   115e4:	00112580 	call	11258 <print_repeat>
   115e8:	1000421e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   115ec:	85a1883a 	add	r16,r16,r22
   115f0:	e02d883a 	mov	r22,fp
   115f4:	bf2fc83a 	sub	r23,r23,fp
   115f8:	00002006 	br	1167c <___vfprintf_internal_r+0x3b8>
   115fc:	0580090e 	bge	zero,r22,11624 <___vfprintf_internal_r+0x360>
   11600:	b00f883a 	mov	r7,r22
   11604:	01800804 	movi	r6,32
   11608:	880b883a 	mov	r5,r17
   1160c:	a009883a 	mov	r4,r20
   11610:	da401015 	stw	r9,64(sp)
   11614:	00112580 	call	11258 <print_repeat>
   11618:	da401017 	ldw	r9,64(sp)
   1161c:	1000351e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   11620:	85a1883a 	add	r16,r16,r22
   11624:	483ff226 	beq	r9,zero,115f0 <_gp+0xffff74d0>
   11628:	00800b44 	movi	r2,45
   1162c:	d8800805 	stb	r2,32(sp)
   11630:	88800117 	ldw	r2,4(r17)
   11634:	01c00044 	movi	r7,1
   11638:	d9800804 	addi	r6,sp,32
   1163c:	880b883a 	mov	r5,r17
   11640:	a009883a 	mov	r4,r20
   11644:	103ee83a 	callr	r2
   11648:	10002a1e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   1164c:	84000044 	addi	r16,r16,1
   11650:	003fe706 	br	115f0 <_gp+0xffff74d0>
   11654:	b5bfffc4 	addi	r22,r22,-1
   11658:	b0800003 	ldbu	r2,0(r22)
   1165c:	01c00044 	movi	r7,1
   11660:	d9800804 	addi	r6,sp,32
   11664:	d8800805 	stb	r2,32(sp)
   11668:	88800117 	ldw	r2,4(r17)
   1166c:	880b883a 	mov	r5,r17
   11670:	a009883a 	mov	r4,r20
   11674:	103ee83a 	callr	r2
   11678:	10001e1e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   1167c:	8585c83a 	sub	r2,r16,r22
   11680:	b5c9883a 	add	r4,r22,r23
   11684:	e085883a 	add	r2,fp,r2
   11688:	013ff216 	blt	zero,r4,11654 <_gp+0xffff7534>
   1168c:	1021883a 	mov	r16,r2
   11690:	dd800d17 	ldw	r22,52(sp)
   11694:	00004406 	br	117a8 <___vfprintf_internal_r+0x4e4>
   11698:	00800044 	movi	r2,1
   1169c:	1480080e 	bge	r2,r18,116c0 <___vfprintf_internal_r+0x3fc>
   116a0:	95ffffc4 	addi	r23,r18,-1
   116a4:	b80f883a 	mov	r7,r23
   116a8:	01800804 	movi	r6,32
   116ac:	880b883a 	mov	r5,r17
   116b0:	a009883a 	mov	r4,r20
   116b4:	00112580 	call	11258 <print_repeat>
   116b8:	10000e1e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   116bc:	85e1883a 	add	r16,r16,r23
   116c0:	b0800017 	ldw	r2,0(r22)
   116c4:	01c00044 	movi	r7,1
   116c8:	d80d883a 	mov	r6,sp
   116cc:	d8800005 	stb	r2,0(sp)
   116d0:	88800117 	ldw	r2,4(r17)
   116d4:	880b883a 	mov	r5,r17
   116d8:	a009883a 	mov	r4,r20
   116dc:	b5c00104 	addi	r23,r22,4
   116e0:	103ee83a 	callr	r2
   116e4:	1000031e 	bne	r2,zero,116f4 <___vfprintf_internal_r+0x430>
   116e8:	84000044 	addi	r16,r16,1
   116ec:	b82d883a 	mov	r22,r23
   116f0:	00002d06 	br	117a8 <___vfprintf_internal_r+0x4e4>
   116f4:	00bfffc4 	movi	r2,-1
   116f8:	00003106 	br	117c0 <___vfprintf_internal_r+0x4fc>
   116fc:	b5c00017 	ldw	r23,0(r22)
   11700:	b7000104 	addi	fp,r22,4
   11704:	b809883a 	mov	r4,r23
   11708:	001123c0 	call	1123c <strlen>
   1170c:	9091c83a 	sub	r8,r18,r2
   11710:	102d883a 	mov	r22,r2
   11714:	0200090e 	bge	zero,r8,1173c <___vfprintf_internal_r+0x478>
   11718:	400f883a 	mov	r7,r8
   1171c:	01800804 	movi	r6,32
   11720:	880b883a 	mov	r5,r17
   11724:	a009883a 	mov	r4,r20
   11728:	da001015 	stw	r8,64(sp)
   1172c:	00112580 	call	11258 <print_repeat>
   11730:	da001017 	ldw	r8,64(sp)
   11734:	103fef1e 	bne	r2,zero,116f4 <_gp+0xffff75d4>
   11738:	8221883a 	add	r16,r16,r8
   1173c:	88800117 	ldw	r2,4(r17)
   11740:	b00f883a 	mov	r7,r22
   11744:	b80d883a 	mov	r6,r23
   11748:	880b883a 	mov	r5,r17
   1174c:	a009883a 	mov	r4,r20
   11750:	103ee83a 	callr	r2
   11754:	103fe71e 	bne	r2,zero,116f4 <_gp+0xffff75d4>
   11758:	85a1883a 	add	r16,r16,r22
   1175c:	e02d883a 	mov	r22,fp
   11760:	00001106 	br	117a8 <___vfprintf_internal_r+0x4e4>
   11764:	00c00044 	movi	r3,1
   11768:	04ffffc4 	movi	r19,-1
   1176c:	d8000e15 	stw	zero,56(sp)
   11770:	d8c00a15 	stw	r3,40(sp)
   11774:	05400284 	movi	r21,10
   11778:	9825883a 	mov	r18,r19
   1177c:	d8000c15 	stw	zero,48(sp)
   11780:	d8000b15 	stw	zero,44(sp)
   11784:	182f883a 	mov	r23,r3
   11788:	00000806 	br	117ac <___vfprintf_internal_r+0x4e8>
   1178c:	ddc00b15 	stw	r23,44(sp)
   11790:	05c00084 	movi	r23,2
   11794:	00000506 	br	117ac <___vfprintf_internal_r+0x4e8>
   11798:	00c00044 	movi	r3,1
   1179c:	d8c00c15 	stw	r3,48(sp)
   117a0:	05c000c4 	movi	r23,3
   117a4:	00000106 	br	117ac <___vfprintf_internal_r+0x4e8>
   117a8:	002f883a 	mov	r23,zero
   117ac:	d8c00f17 	ldw	r3,60(sp)
   117b0:	18c00044 	addi	r3,r3,1
   117b4:	d8c00f15 	stw	r3,60(sp)
   117b8:	003edc06 	br	1132c <_gp+0xffff720c>
   117bc:	8005883a 	mov	r2,r16
   117c0:	dfc01a17 	ldw	ra,104(sp)
   117c4:	df001917 	ldw	fp,100(sp)
   117c8:	ddc01817 	ldw	r23,96(sp)
   117cc:	dd801717 	ldw	r22,92(sp)
   117d0:	dd401617 	ldw	r21,88(sp)
   117d4:	dd001517 	ldw	r20,84(sp)
   117d8:	dcc01417 	ldw	r19,80(sp)
   117dc:	dc801317 	ldw	r18,76(sp)
   117e0:	dc401217 	ldw	r17,72(sp)
   117e4:	dc001117 	ldw	r16,68(sp)
   117e8:	dec01b04 	addi	sp,sp,108
   117ec:	f800283a 	ret

000117f0 <__vfprintf_internal>:
   117f0:	00800074 	movhi	r2,1
   117f4:	10884904 	addi	r2,r2,8484
   117f8:	300f883a 	mov	r7,r6
   117fc:	280d883a 	mov	r6,r5
   11800:	200b883a 	mov	r5,r4
   11804:	11000017 	ldw	r4,0(r2)
   11808:	00112c41 	jmpi	112c4 <___vfprintf_internal_r>

0001180c <__sfvwrite_small_dev>:
   1180c:	2880000b 	ldhu	r2,0(r5)
   11810:	1080020c 	andi	r2,r2,8
   11814:	10002126 	beq	r2,zero,1189c <__sfvwrite_small_dev+0x90>
   11818:	2880008f 	ldh	r2,2(r5)
   1181c:	defffa04 	addi	sp,sp,-24
   11820:	dc000015 	stw	r16,0(sp)
   11824:	dfc00515 	stw	ra,20(sp)
   11828:	dd000415 	stw	r20,16(sp)
   1182c:	dcc00315 	stw	r19,12(sp)
   11830:	dc800215 	stw	r18,8(sp)
   11834:	dc400115 	stw	r17,4(sp)
   11838:	2821883a 	mov	r16,r5
   1183c:	10001216 	blt	r2,zero,11888 <__sfvwrite_small_dev+0x7c>
   11840:	2027883a 	mov	r19,r4
   11844:	3025883a 	mov	r18,r6
   11848:	3823883a 	mov	r17,r7
   1184c:	05010004 	movi	r20,1024
   11850:	04400b0e 	bge	zero,r17,11880 <__sfvwrite_small_dev+0x74>
   11854:	880f883a 	mov	r7,r17
   11858:	a440010e 	bge	r20,r17,11860 <__sfvwrite_small_dev+0x54>
   1185c:	01c10004 	movi	r7,1024
   11860:	8140008f 	ldh	r5,2(r16)
   11864:	900d883a 	mov	r6,r18
   11868:	9809883a 	mov	r4,r19
   1186c:	00118c40 	call	118c4 <_write_r>
   11870:	0080050e 	bge	zero,r2,11888 <__sfvwrite_small_dev+0x7c>
   11874:	88a3c83a 	sub	r17,r17,r2
   11878:	90a5883a 	add	r18,r18,r2
   1187c:	003ff406 	br	11850 <_gp+0xffff7730>
   11880:	0005883a 	mov	r2,zero
   11884:	00000706 	br	118a4 <__sfvwrite_small_dev+0x98>
   11888:	8080000b 	ldhu	r2,0(r16)
   1188c:	10801014 	ori	r2,r2,64
   11890:	8080000d 	sth	r2,0(r16)
   11894:	00bfffc4 	movi	r2,-1
   11898:	00000206 	br	118a4 <__sfvwrite_small_dev+0x98>
   1189c:	00bfffc4 	movi	r2,-1
   118a0:	f800283a 	ret
   118a4:	dfc00517 	ldw	ra,20(sp)
   118a8:	dd000417 	ldw	r20,16(sp)
   118ac:	dcc00317 	ldw	r19,12(sp)
   118b0:	dc800217 	ldw	r18,8(sp)
   118b4:	dc400117 	ldw	r17,4(sp)
   118b8:	dc000017 	ldw	r16,0(sp)
   118bc:	dec00604 	addi	sp,sp,24
   118c0:	f800283a 	ret

000118c4 <_write_r>:
   118c4:	defffd04 	addi	sp,sp,-12
   118c8:	dc000015 	stw	r16,0(sp)
   118cc:	04000074 	movhi	r16,1
   118d0:	dc400115 	stw	r17,4(sp)
   118d4:	84089604 	addi	r16,r16,8792
   118d8:	2023883a 	mov	r17,r4
   118dc:	2809883a 	mov	r4,r5
   118e0:	300b883a 	mov	r5,r6
   118e4:	380d883a 	mov	r6,r7
   118e8:	dfc00215 	stw	ra,8(sp)
   118ec:	80000015 	stw	zero,0(r16)
   118f0:	0011c2c0 	call	11c2c <write>
   118f4:	00ffffc4 	movi	r3,-1
   118f8:	10c0031e 	bne	r2,r3,11908 <_write_r+0x44>
   118fc:	80c00017 	ldw	r3,0(r16)
   11900:	18000126 	beq	r3,zero,11908 <_write_r+0x44>
   11904:	88c00015 	stw	r3,0(r17)
   11908:	dfc00217 	ldw	ra,8(sp)
   1190c:	dc400117 	ldw	r17,4(sp)
   11910:	dc000017 	ldw	r16,0(sp)
   11914:	dec00304 	addi	sp,sp,12
   11918:	f800283a 	ret

0001191c <__divsi3>:
   1191c:	20001b16 	blt	r4,zero,1198c <__divsi3+0x70>
   11920:	000f883a 	mov	r7,zero
   11924:	28001616 	blt	r5,zero,11980 <__divsi3+0x64>
   11928:	200d883a 	mov	r6,r4
   1192c:	29001a2e 	bgeu	r5,r4,11998 <__divsi3+0x7c>
   11930:	00800804 	movi	r2,32
   11934:	00c00044 	movi	r3,1
   11938:	00000106 	br	11940 <__divsi3+0x24>
   1193c:	10000d26 	beq	r2,zero,11974 <__divsi3+0x58>
   11940:	294b883a 	add	r5,r5,r5
   11944:	10bfffc4 	addi	r2,r2,-1
   11948:	18c7883a 	add	r3,r3,r3
   1194c:	293ffb36 	bltu	r5,r4,1193c <_gp+0xffff781c>
   11950:	0005883a 	mov	r2,zero
   11954:	18000726 	beq	r3,zero,11974 <__divsi3+0x58>
   11958:	0005883a 	mov	r2,zero
   1195c:	31400236 	bltu	r6,r5,11968 <__divsi3+0x4c>
   11960:	314dc83a 	sub	r6,r6,r5
   11964:	10c4b03a 	or	r2,r2,r3
   11968:	1806d07a 	srli	r3,r3,1
   1196c:	280ad07a 	srli	r5,r5,1
   11970:	183ffa1e 	bne	r3,zero,1195c <_gp+0xffff783c>
   11974:	38000126 	beq	r7,zero,1197c <__divsi3+0x60>
   11978:	0085c83a 	sub	r2,zero,r2
   1197c:	f800283a 	ret
   11980:	014bc83a 	sub	r5,zero,r5
   11984:	39c0005c 	xori	r7,r7,1
   11988:	003fe706 	br	11928 <_gp+0xffff7808>
   1198c:	0109c83a 	sub	r4,zero,r4
   11990:	01c00044 	movi	r7,1
   11994:	003fe306 	br	11924 <_gp+0xffff7804>
   11998:	00c00044 	movi	r3,1
   1199c:	003fee06 	br	11958 <_gp+0xffff7838>

000119a0 <__modsi3>:
   119a0:	20001716 	blt	r4,zero,11a00 <__modsi3+0x60>
   119a4:	000f883a 	mov	r7,zero
   119a8:	2005883a 	mov	r2,r4
   119ac:	28001216 	blt	r5,zero,119f8 <__modsi3+0x58>
   119b0:	2900162e 	bgeu	r5,r4,11a0c <__modsi3+0x6c>
   119b4:	01800804 	movi	r6,32
   119b8:	00c00044 	movi	r3,1
   119bc:	00000106 	br	119c4 <__modsi3+0x24>
   119c0:	30000a26 	beq	r6,zero,119ec <__modsi3+0x4c>
   119c4:	294b883a 	add	r5,r5,r5
   119c8:	31bfffc4 	addi	r6,r6,-1
   119cc:	18c7883a 	add	r3,r3,r3
   119d0:	293ffb36 	bltu	r5,r4,119c0 <_gp+0xffff78a0>
   119d4:	18000526 	beq	r3,zero,119ec <__modsi3+0x4c>
   119d8:	1806d07a 	srli	r3,r3,1
   119dc:	11400136 	bltu	r2,r5,119e4 <__modsi3+0x44>
   119e0:	1145c83a 	sub	r2,r2,r5
   119e4:	280ad07a 	srli	r5,r5,1
   119e8:	183ffb1e 	bne	r3,zero,119d8 <_gp+0xffff78b8>
   119ec:	38000126 	beq	r7,zero,119f4 <__modsi3+0x54>
   119f0:	0085c83a 	sub	r2,zero,r2
   119f4:	f800283a 	ret
   119f8:	014bc83a 	sub	r5,zero,r5
   119fc:	003fec06 	br	119b0 <_gp+0xffff7890>
   11a00:	0109c83a 	sub	r4,zero,r4
   11a04:	01c00044 	movi	r7,1
   11a08:	003fe706 	br	119a8 <_gp+0xffff7888>
   11a0c:	00c00044 	movi	r3,1
   11a10:	003ff106 	br	119d8 <_gp+0xffff78b8>

00011a14 <__udivsi3>:
   11a14:	200d883a 	mov	r6,r4
   11a18:	2900152e 	bgeu	r5,r4,11a70 <__udivsi3+0x5c>
   11a1c:	28001416 	blt	r5,zero,11a70 <__udivsi3+0x5c>
   11a20:	00800804 	movi	r2,32
   11a24:	00c00044 	movi	r3,1
   11a28:	00000206 	br	11a34 <__udivsi3+0x20>
   11a2c:	10000e26 	beq	r2,zero,11a68 <__udivsi3+0x54>
   11a30:	28000516 	blt	r5,zero,11a48 <__udivsi3+0x34>
   11a34:	294b883a 	add	r5,r5,r5
   11a38:	10bfffc4 	addi	r2,r2,-1
   11a3c:	18c7883a 	add	r3,r3,r3
   11a40:	293ffa36 	bltu	r5,r4,11a2c <_gp+0xffff790c>
   11a44:	18000826 	beq	r3,zero,11a68 <__udivsi3+0x54>
   11a48:	0005883a 	mov	r2,zero
   11a4c:	31400236 	bltu	r6,r5,11a58 <__udivsi3+0x44>
   11a50:	314dc83a 	sub	r6,r6,r5
   11a54:	10c4b03a 	or	r2,r2,r3
   11a58:	1806d07a 	srli	r3,r3,1
   11a5c:	280ad07a 	srli	r5,r5,1
   11a60:	183ffa1e 	bne	r3,zero,11a4c <_gp+0xffff792c>
   11a64:	f800283a 	ret
   11a68:	0005883a 	mov	r2,zero
   11a6c:	f800283a 	ret
   11a70:	00c00044 	movi	r3,1
   11a74:	003ff406 	br	11a48 <_gp+0xffff7928>

00011a78 <__umodsi3>:
   11a78:	2005883a 	mov	r2,r4
   11a7c:	2900122e 	bgeu	r5,r4,11ac8 <__umodsi3+0x50>
   11a80:	28001116 	blt	r5,zero,11ac8 <__umodsi3+0x50>
   11a84:	01800804 	movi	r6,32
   11a88:	00c00044 	movi	r3,1
   11a8c:	00000206 	br	11a98 <__umodsi3+0x20>
   11a90:	30000c26 	beq	r6,zero,11ac4 <__umodsi3+0x4c>
   11a94:	28000516 	blt	r5,zero,11aac <__umodsi3+0x34>
   11a98:	294b883a 	add	r5,r5,r5
   11a9c:	31bfffc4 	addi	r6,r6,-1
   11aa0:	18c7883a 	add	r3,r3,r3
   11aa4:	293ffa36 	bltu	r5,r4,11a90 <_gp+0xffff7970>
   11aa8:	18000626 	beq	r3,zero,11ac4 <__umodsi3+0x4c>
   11aac:	1806d07a 	srli	r3,r3,1
   11ab0:	11400136 	bltu	r2,r5,11ab8 <__umodsi3+0x40>
   11ab4:	1145c83a 	sub	r2,r2,r5
   11ab8:	280ad07a 	srli	r5,r5,1
   11abc:	183ffb1e 	bne	r3,zero,11aac <_gp+0xffff798c>
   11ac0:	f800283a 	ret
   11ac4:	f800283a 	ret
   11ac8:	00c00044 	movi	r3,1
   11acc:	003ff706 	br	11aac <_gp+0xffff798c>

00011ad0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11ad0:	deffff04 	addi	sp,sp,-4
   11ad4:	01000074 	movhi	r4,1
   11ad8:	01400074 	movhi	r5,1
   11adc:	dfc00015 	stw	ra,0(sp)
   11ae0:	21081004 	addi	r4,r4,8256
   11ae4:	29484d04 	addi	r5,r5,8500

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11ae8:	2140061e 	bne	r4,r5,11b04 <alt_load+0x34>
   11aec:	01000074 	movhi	r4,1
   11af0:	01400074 	movhi	r5,1
   11af4:	21000804 	addi	r4,r4,32
   11af8:	29400804 	addi	r5,r5,32
   11afc:	2140121e 	bne	r4,r5,11b48 <alt_load+0x78>
   11b00:	00000b06 	br	11b30 <alt_load+0x60>
   11b04:	00c00074 	movhi	r3,1
   11b08:	18c84d04 	addi	r3,r3,8500
   11b0c:	1907c83a 	sub	r3,r3,r4
   11b10:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11b14:	10fff526 	beq	r2,r3,11aec <_gp+0xffff79cc>
    {
      *to++ = *from++;
   11b18:	114f883a 	add	r7,r2,r5
   11b1c:	39c00017 	ldw	r7,0(r7)
   11b20:	110d883a 	add	r6,r2,r4
   11b24:	10800104 	addi	r2,r2,4
   11b28:	31c00015 	stw	r7,0(r6)
   11b2c:	003ff906 	br	11b14 <_gp+0xffff79f4>
   11b30:	01000074 	movhi	r4,1
   11b34:	01400074 	movhi	r5,1
   11b38:	2107d304 	addi	r4,r4,8012
   11b3c:	2947d304 	addi	r5,r5,8012

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11b40:	2140101e 	bne	r4,r5,11b84 <alt_load+0xb4>
   11b44:	00000b06 	br	11b74 <alt_load+0xa4>
   11b48:	00c00074 	movhi	r3,1
   11b4c:	18c00804 	addi	r3,r3,32
   11b50:	1907c83a 	sub	r3,r3,r4
   11b54:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11b58:	10fff526 	beq	r2,r3,11b30 <_gp+0xffff7a10>
    {
      *to++ = *from++;
   11b5c:	114f883a 	add	r7,r2,r5
   11b60:	39c00017 	ldw	r7,0(r7)
   11b64:	110d883a 	add	r6,r2,r4
   11b68:	10800104 	addi	r2,r2,4
   11b6c:	31c00015 	stw	r7,0(r6)
   11b70:	003ff906 	br	11b58 <_gp+0xffff7a38>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11b74:	0011f3c0 	call	11f3c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11b78:	dfc00017 	ldw	ra,0(sp)
   11b7c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11b80:	0011f401 	jmpi	11f40 <alt_icache_flush_all>
   11b84:	00c00074 	movhi	r3,1
   11b88:	18c81004 	addi	r3,r3,8256
   11b8c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11b90:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11b94:	18bff726 	beq	r3,r2,11b74 <_gp+0xffff7a54>
    {
      *to++ = *from++;
   11b98:	114f883a 	add	r7,r2,r5
   11b9c:	39c00017 	ldw	r7,0(r7)
   11ba0:	110d883a 	add	r6,r2,r4
   11ba4:	10800104 	addi	r2,r2,4
   11ba8:	31c00015 	stw	r7,0(r6)
   11bac:	003ff906 	br	11b94 <_gp+0xffff7a74>

00011bb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11bb0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11bb4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11bb8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11bbc:	0011c8c0 	call	11c8c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11bc0:	0011cac0 	call	11cac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11bc4:	d1a04f17 	ldw	r6,-32452(gp)
   11bc8:	d1605017 	ldw	r5,-32448(gp)
   11bcc:	d1205117 	ldw	r4,-32444(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11bd0:	dfc00017 	ldw	ra,0(sp)
   11bd4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11bd8:	001054c1 	jmpi	1054c <main>

00011bdc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bdc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11be0:	00bfff84 	movi	r2,-2
   11be4:	2884703a 	and	r2,r5,r2
   11be8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11bec:	d0a00217 	ldw	r2,-32760(gp)
   11bf0:	00ffff04 	movi	r3,-4
   11bf4:	108000c4 	addi	r2,r2,3
   11bf8:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11bfc:	00c00074 	movhi	r3,1
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11c00:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11c04:	1109883a 	add	r4,r2,r4
   11c08:	18d80004 	addi	r3,r3,24576
   11c0c:	1900032e 	bgeu	r3,r4,11c1c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c10:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11c14:	00bfffc4 	movi	r2,-1
   11c18:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   11c1c:	d1200215 	stw	r4,-32760(gp)
   11c20:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   11c24:	f800283a 	ret

00011c28 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11c28:	0011eb41 	jmpi	11eb4 <alt_busy_sleep>

00011c2c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   11c2c:	00800044 	movi	r2,1
   11c30:	20800226 	beq	r4,r2,11c3c <write+0x10>
   11c34:	00800084 	movi	r2,2
   11c38:	2080041e 	bne	r4,r2,11c4c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   11c3c:	01000074 	movhi	r4,1
   11c40:	000f883a 	mov	r7,zero
   11c44:	21084b04 	addi	r4,r4,8492
   11c48:	0011e801 	jmpi	11e80 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11c4c:	d0a00417 	ldw	r2,-32752(gp)
   11c50:	10000926 	beq	r2,zero,11c78 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11c54:	deffff04 	addi	sp,sp,-4
   11c58:	dfc00015 	stw	ra,0(sp)
   11c5c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11c60:	00c01444 	movi	r3,81
   11c64:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11c68:	00bfffc4 	movi	r2,-1
   11c6c:	dfc00017 	ldw	ra,0(sp)
   11c70:	dec00104 	addi	sp,sp,4
   11c74:	f800283a 	ret
   11c78:	d0a04e04 	addi	r2,gp,-32456
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11c7c:	00c01444 	movi	r3,81
   11c80:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11c84:	00bfffc4 	movi	r2,-1
   11c88:	f800283a 	ret

00011c8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11c8c:	deffff04 	addi	sp,sp,-4
   11c90:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_3, nios2_3);
   11c94:	0011f440 	call	11f44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11c98:	00800044 	movi	r2,1
   11c9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11ca0:	dfc00017 	ldw	ra,0(sp)
   11ca4:	dec00104 	addi	sp,sp,4
   11ca8:	f800283a 	ret

00011cac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11cac:	f800283a 	ret

00011cb0 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11cb0:	20800137 	ldwio	r2,4(r4)
}
   11cb4:	1144703a 	and	r2,r2,r5
   11cb8:	f800283a 	ret

00011cbc <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   11cbc:	20800337 	ldwio	r2,12(r4)
}
   11cc0:	1144703a 	and	r2,r2,r5
   11cc4:	f800283a 	ret

00011cc8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   11cc8:	20800437 	ldwio	r2,16(r4)
   11ccc:	f800283a 	ret

00011cd0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   11cd0:	20800537 	ldwio	r2,20(r4)
   11cd4:	f800283a 	ret

00011cd8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   11cd8:	20800237 	ldwio	r2,8(r4)
}
   11cdc:	1144703a 	and	r2,r2,r5
   11ce0:	f800283a 	ret

00011ce4 <altera_avalon_fifo_read_level>:
   11ce4:	20800037 	ldwio	r2,0(r4)
   11ce8:	f800283a 	ret

00011cec <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   11cec:	21000204 	addi	r4,r4,8
   11cf0:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   11cf4:	20800037 	ldwio	r2,0(r4)
   11cf8:	114a703a 	and	r5,r2,r5
   11cfc:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   11d00:	0085c83a 	sub	r2,zero,r2
   11d04:	f800283a 	ret

00011d08 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   11d08:	21000304 	addi	r4,r4,12
   11d0c:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   11d10:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   11d14:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   11d18:	28c00126 	beq	r5,r3,11d20 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   11d1c:	00bfff84 	movi	r2,-2
}
   11d20:	f800283a 	ret

00011d24 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   11d24:	21000404 	addi	r4,r4,16
   11d28:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   11d2c:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   11d30:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   11d34:	28c00126 	beq	r5,r3,11d3c <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11d38:	00bfff44 	movi	r2,-3
}
   11d3c:	f800283a 	ret

00011d40 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   11d40:	21000504 	addi	r4,r4,20
   11d44:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   11d48:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   11d4c:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   11d50:	28c00126 	beq	r5,r3,11d58 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11d54:	00bfff44 	movi	r2,-3
}
   11d58:	f800283a 	ret

00011d5c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   11d5c:	defffb04 	addi	sp,sp,-20
   11d60:	dcc00315 	stw	r19,12(sp)
   11d64:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   11d68:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   11d6c:	dc800215 	stw	r18,8(sp)
   11d70:	dc400115 	stw	r17,4(sp)
   11d74:	dc000015 	stw	r16,0(sp)
   11d78:	dfc00415 	stw	ra,16(sp)
   11d7c:	2021883a 	mov	r16,r4
   11d80:	3023883a 	mov	r17,r6
   11d84:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   11d88:	0011cec0 	call	11cec <altera_avalon_fifo_clear_event>
   11d8c:	10000f1e 	bne	r2,zero,11dcc <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   11d90:	980b883a 	mov	r5,r19
   11d94:	8009883a 	mov	r4,r16
   11d98:	0011d080 	call	11d08 <altera_avalon_fifo_write_ienable>
   11d9c:	10000d1e 	bne	r2,zero,11dd4 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   11da0:	900b883a 	mov	r5,r18
   11da4:	8009883a 	mov	r4,r16
   11da8:	0011d240 	call	11d24 <altera_avalon_fifo_write_almostfull>
   11dac:	10000226 	beq	r2,zero,11db8 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11db0:	00bfff44 	movi	r2,-3
   11db4:	00000806 	br	11dd8 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   11db8:	880b883a 	mov	r5,r17
   11dbc:	8009883a 	mov	r4,r16
   11dc0:	0011d400 	call	11d40 <altera_avalon_fifo_write_almostempty>
   11dc4:	10000426 	beq	r2,zero,11dd8 <altera_avalon_fifo_init+0x7c>
   11dc8:	003ff906 	br	11db0 <_gp+0xffff7c90>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   11dcc:	00bfffc4 	movi	r2,-1
   11dd0:	00000106 	br	11dd8 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   11dd4:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   11dd8:	dfc00417 	ldw	ra,16(sp)
   11ddc:	dcc00317 	ldw	r19,12(sp)
   11de0:	dc800217 	ldw	r18,8(sp)
   11de4:	dc400117 	ldw	r17,4(sp)
   11de8:	dc000017 	ldw	r16,0(sp)
   11dec:	dec00504 	addi	sp,sp,20
   11df0:	f800283a 	ret

00011df4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11df4:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11df8:	1080004c 	andi	r2,r2,1
   11dfc:	1000021e 	bne	r2,zero,11e08 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   11e00:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   11e04:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   11e08:	00bfff04 	movi	r2,-4
    }
}
   11e0c:	f800283a 	ret

00011e10 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   11e10:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11e14:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   11e18:	1080008c 	andi	r2,r2,2
   11e1c:	1000041e 	bne	r2,zero,11e30 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   11e20:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   11e24:	20c00037 	ldwio	r3,0(r4)
   11e28:	30c00015 	stw	r3,0(r6)
   11e2c:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   11e30:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   11e34:	f800283a 	ret

00011e38 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11e38:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   11e3c:	1080008c 	andi	r2,r2,2
   11e40:	1000021e 	bne	r2,zero,11e4c <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   11e44:	20800037 	ldwio	r2,0(r4)
   11e48:	f800283a 	ret
    }
    return 0;
   11e4c:	0005883a 	mov	r2,zero
}
   11e50:	f800283a 	ret

00011e54 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11e54:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11e58:	1080004c 	andi	r2,r2,1
   11e5c:	1000021e 	bne	r2,zero,11e68 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   11e60:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   11e64:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   11e68:	00bfff04 	movi	r2,-4
    }
}
   11e6c:	f800283a 	ret

00011e70 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   11e70:	20800137 	ldwio	r2,4(r4)
   11e74:	f800283a 	ret

00011e78 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   11e78:	20800037 	ldwio	r2,0(r4)
   11e7c:	f800283a 	ret

00011e80 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11e80:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11e84:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11e88:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11e8c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11e90:	2980072e 	bgeu	r5,r6,11eb0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11e94:	38c00037 	ldwio	r3,0(r7)
   11e98:	18ffffec 	andhi	r3,r3,65535
   11e9c:	183ffc26 	beq	r3,zero,11e90 <_gp+0xffff7d70>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11ea0:	28c00007 	ldb	r3,0(r5)
   11ea4:	20c00035 	stwio	r3,0(r4)
   11ea8:	29400044 	addi	r5,r5,1
   11eac:	003ff806 	br	11e90 <_gp+0xffff7d70>

  return count;
}
   11eb0:	f800283a 	ret

00011eb4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11eb4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11eb8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11ebc:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11ec0:	dc000015 	stw	r16,0(sp)
   11ec4:	dfc00115 	stw	ra,4(sp)
   11ec8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11ecc:	0011a140 	call	11a14 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11ed0:	10001026 	beq	r2,zero,11f14 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11ed4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11ed8:	013999b4 	movhi	r4,58982
   11edc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11ee0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11ee4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11ee8:	297fffc4 	addi	r5,r5,-1
   11eec:	283ffe1e 	bne	r5,zero,11ee8 <_gp+0xffff7dc8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11ef0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11ef4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11ef8:	18bffb16 	blt	r3,r2,11ee8 <_gp+0xffff7dc8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11efc:	01400144 	movi	r5,5
   11f00:	8009883a 	mov	r4,r16
   11f04:	0010e1c0 	call	10e1c <__mulsi3>
   11f08:	10bfffc4 	addi	r2,r2,-1
   11f0c:	103ffe1e 	bne	r2,zero,11f08 <_gp+0xffff7de8>
   11f10:	00000506 	br	11f28 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11f14:	01400144 	movi	r5,5
   11f18:	8009883a 	mov	r4,r16
   11f1c:	0010e1c0 	call	10e1c <__mulsi3>
   11f20:	10bfffc4 	addi	r2,r2,-1
   11f24:	00bffe16 	blt	zero,r2,11f20 <_gp+0xffff7e00>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   11f28:	0005883a 	mov	r2,zero
   11f2c:	dfc00117 	ldw	ra,4(sp)
   11f30:	dc000017 	ldw	r16,0(sp)
   11f34:	dec00204 	addi	sp,sp,8
   11f38:	f800283a 	ret

00011f3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11f3c:	f800283a 	ret

00011f40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11f40:	f800283a 	ret

00011f44 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11f44:	000170fa 	wrctl	ienable,zero
   11f48:	f800283a 	ret
