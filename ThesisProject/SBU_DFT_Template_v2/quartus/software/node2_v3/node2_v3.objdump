
node2_v3.elf:     file format elf32-littlenios2
node2_v3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00028020

Program Header:
    LOAD off    0x00001000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00028020 paddr 0x00028020 align 2**12
         filesz 0x00002050 memsz 0x00002050 flags r-x
    LOAD off    0x00003070 vaddr 0x0002a070 paddr 0x0002a164 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003258 vaddr 0x0002a258 paddr 0x0002a258 align 2**12
         filesz 0x00000000 memsz 0x000001fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00028000  00028000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00028020  00028020  00003164  2**0
                  CONTENTS
  2 .text         00001fc8  00028020  00028020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  00029fe8  00029fe8  00002fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  0002a070  0002a164  00003070  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001fc  0002a258  0002a258  00003258  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_2   00000000  0002a454  0002a454  00003164  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003e0  00000000  00000000  00003188  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000762d  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023df  00000000  00000000  0000ab95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002812  00000000  00000000  0000cf74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009bc  00000000  00000000  0000f788  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a2f  00000000  00000000  00010144  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000028a4  00000000  00000000  00011b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00014418  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000370  00000000  00000000  00014428  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001636e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  00016371  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016378  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016379  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001637a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00016385  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00016390  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0001639b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  000163a6  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  000163f8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  00023fba  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00028000 l    d  .entry	00000000 .entry
00028020 l    d  .exceptions	00000000 .exceptions
00028020 l    d  .text	00000000 .text
00029fe8 l    d  .rodata	00000000 .rodata
0002a070 l    d  .rwdata	00000000 .rwdata
0002a258 l    d  .bss	00000000 .bss
0002a454 l    d  .data_mem_2	00000000 .data_mem_2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node2_v3_bsp//obj/HAL/src/crt0.o
00028058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_2.c
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00029380 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0002a070 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002a158 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00029cd8 g     F .text	0000002c alt_main
00029280 g     F .text	00000080 _puts_r
00029e48 g     F .text	0000001c altera_avalon_fifo_write_almostfull
0002a164 g       *ABS*	00000000 __flash_rwdata_start
0002a454 g       *ABS*	00000000 __alt_heap_start
00029234 g     F .text	0000004c printf
0002a3b4 g     O .bss	00000050 edges
0002a258 g     O .bss	00000004 proc_5_inps
00029e80 g     F .text	00000098 altera_avalon_fifo_init
00029f18 g     F .text	0000001c altera_avalon_fifo_write_fifo
00028dcc g     F .text	0000008c ring_buffer_dequeue_arr
0002a25c g     O .bss	00000004 proc_4_outarg_1
0002a404 g     O .bss	00000014 edge_p3_p4
00029fe0 g     F .text	00000008 altera_nios2_gen2_irq_init
00028d94 g     F .text	00000038 ring_buffer_dequeue
00028000 g     F .entry	0000000c __reset
00029f9c g     F .text	00000008 altera_avalon_fifo_read_backpressure
00028020 g       *ABS*	00000000 __flash_exceptions_start
0002a2a0 g     O .bss	00000004 errno
00028cf4 g     F .text	0000000c ring_buffer_init
0002a260 g     O .bss	00000004 proc_5_inp_0
0002a2a8 g     O .bss	00000004 alt_argv
00032150 g       *ABS*	00000000 _gp
00029e10 g     F .text	0000001c altera_avalon_fifo_clear_event
00028e58 g     F .text	0000002c ring_buffer_pop
00028f94 g     F .text	00000028 memcpy
00029300 g     F .text	00000014 puts
0002a264 g     O .bss	00000004 proc_5_out_0
000286e0 g     F .text	00000098 get_edge
00028f6c g     F .text	00000014 malloc
000291f8 g     F .text	0000003c _printf_r
00028ce0 g     F .text	00000014 ring_buffer_num_items
00029b3c g     F .text	00000064 .hidden __udivsi3
0002a418 g     O .bss	00000014 edge_p5_p0
0002a42c g     O .bss	00000014 edge_p4_p1
00028e84 g     F .text	00000084 ring_buffer_pop_arr
00029314 g     F .text	00000050 _sbrk_r
00028cb8 g     F .text	00000010 ring_buffer_is_empty
000285ac g     F .text	00000050 start_FIFO
00028cc8 g     F .text	00000018 ring_buffer_is_full
00028574 g     F .text	00000038 cleanUp
0002a150 g     O .rwdata	00000004 _global_impure_ptr
0002a454 g       *ABS*	00000000 __bss_end
000287e4 g     F .text	00000024 init_buffer
00028c8c g     F .text	0000002c receive_poll
0002a268 g     O .bss	00000004 proc_4_outarg_0
00029fd8 g     F .text	00000004 alt_dcache_flush_all
0002a26c g     O .bss	00000004 proc_4_out_0
00029e2c g     F .text	0000001c altera_avalon_fifo_write_ienable
0002a2b0 g     O .bss	00000082 buff_p3_p4
0002a164 g       *ABS*	00000000 __ram_rwdata_end
00029df4 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00029d50 g     F .text	00000060 write
0002a070 g       *ABS*	00000000 __ram_rodata_end
0002a270 g     O .bss	00000004 proc_4_inp_0
0002a15c g     O .rwdata	00000004 jtag_uart_0
0002a274 g     O .bss	00000008 proc_4_outs
00029ba0 g     F .text	00000058 .hidden __umodsi3
00028778 g     F .text	0000006c get_buffer
0002a440 g     O .bss	00000014 edge_p4_p5
0002a454 g       *ABS*	00000000 end
00029dfc g     F .text	0000000c altera_avalon_fifo_read_event
0002e000 g       *ABS*	00000000 __alt_stack_pointer
00029fa4 g     F .text	00000034 altera_avalon_jtag_uart_write
0002a27c g     O .bss	00000004 proc_5_outs
0002a280 g     O .bss	00000004 input_fifo_wrclk_irq_event
00029f5c g     F .text	0000001c altera_avalon_fifo_read_fifo
000293ec g     F .text	0000052c ___vfprintf_internal_r
00028fbc g     F .text	000000e4 _free_r
0002a284 g     O .bss	00000004 proc_4_inps
00028954 g     F .text	000001e4 send_packet
00028020 g     F .text	0000003c _start
00029dd0 g     F .text	00000004 alt_sys_init
00028d00 g     F .text	00000040 ring_buffer_queue
00028354 g     F .text	0000007c serializing_send
00028f44 g     F .text	00000028 .hidden __mulsi3
0002a070 g       *ABS*	00000000 __ram_rwdata_start
00029fe8 g       *ABS*	00000000 __ram_rodata_start
000282d0 g     F .text	00000084 read_data
0002a454 g       *ABS*	00000000 __alt_stack_base
000280b0 g     F .text	000000d0 print_status
00029dd4 g     F .text	0000000c altera_avalon_fifo_read_status
00029f94 g     F .text	00000008 altera_avalon_fifo_read_other_info
00029d04 g     F .text	0000004c sbrk
0002a288 g     O .bss	00000004 proc_5_outarg_0
00029934 g     F .text	000000b8 __sfvwrite_small_dev
0002a258 g       *ABS*	00000000 __bss_start
000285fc g     F .text	000000e4 main
0002a2a4 g     O .bss	00000004 alt_envp
00029e08 g     F .text	00000008 altera_avalon_fifo_read_level
0002e000 g       *ABS*	00000000 __alt_heap_limit
000290a0 g     F .text	00000158 _malloc_r
0002a160 g     O .rwdata	00000004 alt_errno
0002a28c g     O .bss	00000004 proc_5_inparg_0
00028808 g     F .text	0000014c init_structures
00028090 g     F .text	00000020 proc_5
00028f08 g     F .text	0000003c ring_buffer_peek
00029a44 g     F .text	00000084 .hidden __divsi3
00029fe8 g       *ABS*	00000000 __flash_rodata_start
00029db0 g     F .text	00000020 alt_irq_init
00028180 g     F .text	00000150 read_buff
000299ec g     F .text	00000058 _write_r
0002a290 g     O .bss	00000004 proc_4_out_1
0002a154 g     O .rwdata	00000004 _impure_ptr
0002a2ac g     O .bss	00000004 alt_argc
0002a332 g     O .bss	00000082 buff_p4_p5
000283d0 g     F .text	000000ec send_data
00028020 g       *ABS*	00000000 __ram_exceptions_start
000284bc g     F .text	000000b8 proc_args_init
00028b5c g     F .text	00000130 receive_packet
00029f78 g     F .text	0000001c altera_avalon_fifo_write_other_info
00028b38 g     F .text	00000024 read_payload
0002a164 g       *ABS*	00000000 _edata
0002a454 g       *ABS*	00000000 _end
00028020 g       *ABS*	00000000 __ram_exceptions_end
00028000 g       *ABS*	00000000 __alt_mem_data_mem_2
00029ac8 g     F .text	00000074 .hidden __modsi3
00029de0 g     F .text	0000000c altera_avalon_fifo_read_ienable
0002e000 g       *ABS*	00000000 __alt_data_end
00028d40 g     F .text	00000054 ring_buffer_queue_arr
0002800c g       .entry	00000000 _exit
00029dec g     F .text	00000008 altera_avalon_fifo_read_almostfull
00029364 g     F .text	0000001c strlen
00029f34 g     F .text	00000028 altera_avalon_read_fifo
0002a298 g     O .bss	00000004 __malloc_sbrk_start
00029fdc g     F .text	00000004 alt_icache_flush_all
0002a29c g     O .bss	00000004 __malloc_free_list
00029918 g     F .text	0000001c __vfprintf_internal
00029e64 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00029bf8 g     F .text	000000e0 alt_load
0002805c g     F .text	00000034 proc_4
0002a294 g     O .bss	00000004 proc_4_inparg_0
00028f80 g     F .text	00000014 free



Disassembly of section .entry:

00028000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   28000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   28004:	08600814 	ori	at,at,32800
    jmp r1
   28008:	0800683a 	jmp	at

0002800c <_exit>:
	...

Disassembly of section .text:

00028020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   28020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   28024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
   28028:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2802c:	d6885414 	ori	gp,gp,8528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   28030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   28034:	10a89614 	ori	r2,r2,41560

    movhi r3, %hi(__bss_end)
   28038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2803c:	18e91514 	ori	r3,r3,42068

    beq r2, r3, 1f
   28040:	10c00326 	beq	r2,r3,28050 <_start+0x30>

0:
    stw zero, (r2)
   28044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   28048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2804c:	10fffd36 	bltu	r2,r3,28044 <_gp+0xffff5ef4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   28050:	0029bf80 	call	29bf8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   28054:	0029cd80 	call	29cd8 <alt_main>

00028058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   28058:	003fff06 	br	28058 <_gp+0xffff5f08>

0002805c <proc_4>:
void** proc_5_outs[P5_NUM_OF_OUTS];


void proc_4(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P4_INP0_TYPE*)inpargs[0][0];
   2805c:	20800017 	ldw	r2,0(r4)
   28060:	10c00017 	ldw	r3,0(r2)
	int* out1 = (P4_OUT0_TYPE*)outargs[0][0];
	int* out2 = (P4_OUT1_TYPE*)outargs[1][0];
   28064:	28800117 	ldw	r2,4(r5)
   28068:	11000017 	ldw	r4,0(r2)


void proc_4(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P4_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P4_OUT0_TYPE*)outargs[0][0];
   2806c:	28800017 	ldw	r2,0(r5)
	int* out2 = (P4_OUT1_TYPE*)outargs[1][0];

	*out1 = *num1 + 1;
   28070:	11400017 	ldw	r5,0(r2)
   28074:	18800017 	ldw	r2,0(r3)
   28078:	10800044 	addi	r2,r2,1
   2807c:	28800015 	stw	r2,0(r5)
	*out2 = *num1 + 1;
   28080:	18800017 	ldw	r2,0(r3)
   28084:	10800044 	addi	r2,r2,1
   28088:	20800015 	stw	r2,0(r4)
   2808c:	f800283a 	ret

00028090 <proc_5>:
}

void proc_5(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P5_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P5_OUT0_TYPE*)outargs[0][0];
   28090:	28800017 	ldw	r2,0(r5)

	*out1 = *num1 + 1;
   28094:	10c00017 	ldw	r3,0(r2)

}

void proc_5(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P5_INP0_TYPE*)inpargs[0][0];
   28098:	20800017 	ldw	r2,0(r4)
	int* out1 = (P5_OUT0_TYPE*)outargs[0][0];

	*out1 = *num1 + 1;
   2809c:	10800017 	ldw	r2,0(r2)
   280a0:	10800017 	ldw	r2,0(r2)
   280a4:	10800044 	addi	r2,r2,1
   280a8:	18800015 	stw	r2,0(r3)
   280ac:	f800283a 	ret

000280b0 <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   280b0:	defffd04 	addi	sp,sp,-12
   280b4:	dc000015 	stw	r16,0(sp)
   280b8:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   280bc:	010000f4 	movhi	r4,3
   280c0:	2127fa04 	addi	r4,r4,-24600
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   280c4:	dfc00215 	stw	ra,8(sp)
   280c8:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   280cc:	00293000 	call	29300 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   280d0:	8009883a 	mov	r4,r16
   280d4:	0029e080 	call	29e08 <altera_avalon_fifo_read_level>
   280d8:	010000f4 	movhi	r4,3
   280dc:	100b883a 	mov	r5,r2
   280e0:	21280404 	addi	r4,r4,-24560
   280e4:	00292340 	call	29234 <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   280e8:	04400fc4 	movi	r17,63
   280ec:	880b883a 	mov	r5,r17
   280f0:	8009883a 	mov	r4,r16
   280f4:	0029dd40 	call	29dd4 <altera_avalon_fifo_read_status>
   280f8:	010000f4 	movhi	r4,3
   280fc:	100b883a 	mov	r5,r2
   28100:	21280704 	addi	r4,r4,-24548
   28104:	00292340 	call	29234 <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   28108:	880b883a 	mov	r5,r17
   2810c:	8009883a 	mov	r4,r16
   28110:	0029dfc0 	call	29dfc <altera_avalon_fifo_read_event>
   28114:	010000f4 	movhi	r4,3
   28118:	100b883a 	mov	r5,r2
   2811c:	21280b04 	addi	r4,r4,-24532
   28120:	00292340 	call	29234 <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   28124:	880b883a 	mov	r5,r17
   28128:	8009883a 	mov	r4,r16
   2812c:	0029de00 	call	29de0 <altera_avalon_fifo_read_ienable>
   28130:	010000f4 	movhi	r4,3
   28134:	100b883a 	mov	r5,r2
   28138:	21280e04 	addi	r4,r4,-24520
   2813c:	00292340 	call	29234 <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   28140:	8009883a 	mov	r4,r16
   28144:	0029df40 	call	29df4 <altera_avalon_fifo_read_almostempty>
   28148:	010000f4 	movhi	r4,3
   2814c:	100b883a 	mov	r5,r2
   28150:	21281204 	addi	r4,r4,-24504
   28154:	00292340 	call	29234 <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   28158:	8009883a 	mov	r4,r16
   2815c:	0029dec0 	call	29dec <altera_avalon_fifo_read_almostfull>
   28160:	010000f4 	movhi	r4,3
   28164:	100b883a 	mov	r5,r2
   28168:	21281704 	addi	r4,r4,-24484
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   2816c:	dfc00217 	ldw	ra,8(sp)
   28170:	dc400117 	ldw	r17,4(sp)
   28174:	dc000017 	ldw	r16,0(sp)
   28178:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   2817c:	00292341 	jmpi	29234 <printf>

00028180 <read_buff>:
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   28180:	defff904 	addi	sp,sp,-28
   28184:	df000515 	stw	fp,20(sp)
   28188:	dc000015 	stw	r16,0(sp)
   2818c:	dfc00615 	stw	ra,24(sp)
   28190:	dd000415 	stw	r20,16(sp)
   28194:	dcc00315 	stw	r19,12(sp)
   28198:	dc800215 	stw	r18,8(sp)
   2819c:	dc400115 	stw	r17,4(sp)

	if(proc_num == 4){
   281a0:	297fffcc 	andi	r5,r5,65535
   281a4:	00800104 	movi	r2,4
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   281a8:	df000504 	addi	fp,sp,20
   281ac:	2021883a 	mov	r16,r4

	if(proc_num == 4){
   281b0:	28801d1e 	bne	r5,r2,28228 <read_buff+0xa8>
		if(input_num == 0){
   281b4:	31803fcc 	andi	r6,r6,255
   281b8:	30003b1e 	bne	r6,zero,282a8 <read_buff+0x128>
			uint8_t tmp[edge->size_of_token_type];
   281bc:	20800203 	ldbu	r2,8(r4)


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){

	if(proc_num == 4){
		if(input_num == 0){
   281c0:	d829883a 	mov	r20,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   281c4:	0023883a 	mov	r17,zero

void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){

	if(proc_num == 4){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   281c8:	108000c4 	addi	r2,r2,3
   281cc:	10807f0c 	andi	r2,r2,508
   281d0:	d8b7c83a 	sub	sp,sp,r2
   281d4:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   281d8:	04800604 	movi	r18,24

	if(proc_num == 4){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   281dc:	80800183 	ldbu	r2,6(r16)
   281e0:	8880300e 	bge	r17,r2,282a4 <read_buff+0x124>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   281e4:	81800203 	ldbu	r6,8(r16)
   281e8:	81000317 	ldw	r4,12(r16)
   281ec:	980b883a 	mov	r5,r19
   281f0:	0028dcc0 	call	28dcc <ring_buffer_dequeue_arr>
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   281f4:	81400203 	ldbu	r5,8(r16)
   281f8:	81000317 	ldw	r4,12(r16)
   281fc:	914bc83a 	sub	r5,r18,r5
   28200:	29403fcc 	andi	r5,r5,255
   28204:	0028e840 	call	28e84 <ring_buffer_pop_arr>
				proc_4_inp_0[i] = ( (P4_INP0_TYPE*)tmp )[0];
   28208:	d1204817 	ldw	r4,-32480(gp)
   2820c:	8c45883a 	add	r2,r17,r17
   28210:	98c00017 	ldw	r3,0(r19)
   28214:	1085883a 	add	r2,r2,r2
   28218:	2085883a 	add	r2,r4,r2
   2821c:	10c00015 	stw	r3,0(r2)

	if(proc_num == 4){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   28220:	8c400044 	addi	r17,r17,1
   28224:	003fed06 	br	281dc <_gp+0xffff608c>
				proc_4_inp_0[i] = ( (P4_INP0_TYPE*)tmp )[0];
			}
		}
	}

	if(proc_num == 5){
   28228:	00800144 	movi	r2,5
   2822c:	28801e1e 	bne	r5,r2,282a8 <read_buff+0x128>
		if(input_num == 0){
   28230:	31803fcc 	andi	r6,r6,255
   28234:	30001c1e 	bne	r6,zero,282a8 <read_buff+0x128>
			uint8_t tmp[edge->size_of_token_type];
   28238:	20800203 	ldbu	r2,8(r4)
			}
		}
	}

	if(proc_num == 5){
		if(input_num == 0){
   2823c:	d829883a 	mov	r20,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   28240:	0023883a 	mov	r17,zero
		}
	}

	if(proc_num == 5){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   28244:	108000c4 	addi	r2,r2,3
   28248:	10807f0c 	andi	r2,r2,508
   2824c:	d8b7c83a 	sub	sp,sp,r2
   28250:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   28254:	04800604 	movi	r18,24

	if(proc_num == 5){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   28258:	80800183 	ldbu	r2,6(r16)
   2825c:	8880110e 	bge	r17,r2,282a4 <read_buff+0x124>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   28260:	81800203 	ldbu	r6,8(r16)
   28264:	81000317 	ldw	r4,12(r16)
   28268:	980b883a 	mov	r5,r19
   2826c:	0028dcc0 	call	28dcc <ring_buffer_dequeue_arr>
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   28270:	81400203 	ldbu	r5,8(r16)
   28274:	81000317 	ldw	r4,12(r16)
   28278:	914bc83a 	sub	r5,r18,r5
   2827c:	29403fcc 	andi	r5,r5,255
   28280:	0028e840 	call	28e84 <ring_buffer_pop_arr>
				proc_5_inp_0[i] = ( (P5_INP0_TYPE*)tmp )[0];
   28284:	d1204417 	ldw	r4,-32496(gp)
   28288:	8c45883a 	add	r2,r17,r17
   2828c:	98c00017 	ldw	r3,0(r19)
   28290:	1085883a 	add	r2,r2,r2
   28294:	2085883a 	add	r2,r4,r2
   28298:	10c00015 	stw	r3,0(r2)

	if(proc_num == 5){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   2829c:	8c400044 	addi	r17,r17,1
   282a0:	003fed06 	br	28258 <_gp+0xffff6108>
   282a4:	a037883a 	mov	sp,r20
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
				proc_5_inp_0[i] = ( (P5_INP0_TYPE*)tmp )[0];
			}
		}
	}
}
   282a8:	e6fffb04 	addi	sp,fp,-20
   282ac:	dfc00617 	ldw	ra,24(sp)
   282b0:	df000517 	ldw	fp,20(sp)
   282b4:	dd000417 	ldw	r20,16(sp)
   282b8:	dcc00317 	ldw	r19,12(sp)
   282bc:	dc800217 	ldw	r18,8(sp)
   282c0:	dc400117 	ldw	r17,4(sp)
   282c4:	dc000017 	ldw	r16,0(sp)
   282c8:	dec00704 	addi	sp,sp,28
   282cc:	f800283a 	ret

000282d0 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   282d0:	defffb04 	addi	sp,sp,-20
   282d4:	dcc00315 	stw	r19,12(sp)
   282d8:	dc800215 	stw	r18,8(sp)
   282dc:	dc400115 	stw	r17,4(sp)
   282e0:	dfc00415 	stw	ra,16(sp)
   282e4:	dc000015 	stw	r16,0(sp)
   282e8:	2023883a 	mov	r17,r4
   282ec:	2825883a 	mov	r18,r5
   282f0:	3027883a 	mov	r19,r6

	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
   282f4:	88c00317 	ldw	r3,12(r17)
   282f8:	89000183 	ldbu	r4,6(r17)
   282fc:	01400604 	movi	r5,24
   28300:	18802043 	ldbu	r2,129(r3)
   28304:	1c002003 	ldbu	r16,128(r3)
   28308:	1421c83a 	sub	r16,r2,r16
   2830c:	84001fcc 	andi	r16,r16,127
   28310:	0028f440 	call	28f44 <__mulsi3>
   28314:	8080050e 	bge	r16,r2,2832c <read_data+0x5c>
		if(receive_poll())
   28318:	0028c8c0 	call	28c8c <receive_poll>
   2831c:	10803fcc 	andi	r2,r2,255
   28320:	103ff426 	beq	r2,zero,282f4 <_gp+0xffff61a4>
			receive_packet();
   28324:	0028b5c0 	call	28b5c <receive_packet>
   28328:	003ff206 	br	282f4 <_gp+0xffff61a4>
	}
	read_buff(edge, proc_num, input_num);
   2832c:	99803fcc 	andi	r6,r19,255
   28330:	917fffcc 	andi	r5,r18,65535
   28334:	8809883a 	mov	r4,r17
}
   28338:	dfc00417 	ldw	ra,16(sp)
   2833c:	dcc00317 	ldw	r19,12(sp)
   28340:	dc800217 	ldw	r18,8(sp)
   28344:	dc400117 	ldw	r17,4(sp)
   28348:	dc000017 	ldw	r16,0(sp)
   2834c:	dec00504 	addi	sp,sp,20

	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
		if(receive_poll())
			receive_packet();
	}
	read_buff(edge, proc_num, input_num);
   28350:	00281801 	jmpi	28180 <read_buff>

00028354 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array){
   28354:	defff704 	addi	sp,sp,-36
   28358:	dfc00815 	stw	ra,32(sp)
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   2835c:	20c00203 	ldbu	r3,8(r4)
   28360:	0005883a 	mov	r2,zero
   28364:	10c0070e 	bge	r2,r3,28384 <serializing_send+0x30>
		send_array[i] = array[i];
   28368:	d9c00204 	addi	r7,sp,8
   2836c:	388d883a 	add	r6,r7,r2
   28370:	288f883a 	add	r7,r5,r2
   28374:	39c00003 	ldbu	r7,0(r7)
}

void serializing_send(struct Edge *edge, unsigned char *array){
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   28378:	10800044 	addi	r2,r2,1
		send_array[i] = array[i];
   2837c:	31c00005 	stb	r7,0(r6)
   28380:	003ff806 	br	28364 <_gp+0xffff6214>
	}

	if(edge->external == 1){
   28384:	20800403 	ldbu	r2,16(r4)
   28388:	10000a26 	beq	r2,zero,283b4 <serializing_send+0x60>
		send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   2838c:	21c0010b 	ldhu	r7,4(r4)
   28390:	2180008b 	ldhu	r6,2(r4)
   28394:	21400043 	ldbu	r5,1(r4)
   28398:	d8800204 	addi	r2,sp,8
   2839c:	21000003 	ldbu	r4,0(r4)
   283a0:	d8800115 	stw	r2,4(sp)
   283a4:	00800804 	movi	r2,32
   283a8:	d8800015 	stw	r2,0(sp)
   283ac:	00289540 	call	28954 <send_packet>
   283b0:	00000406 	br	283c4 <serializing_send+0x70>
	}
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
   283b4:	21000317 	ldw	r4,12(r4)
   283b8:	01800604 	movi	r6,24
   283bc:	d9400204 	addi	r5,sp,8
   283c0:	0028d400 	call	28d40 <ring_buffer_queue_arr>
	}
}
   283c4:	dfc00817 	ldw	ra,32(sp)
   283c8:	dec00904 	addi	sp,sp,36
   283cc:	f800283a 	ret

000283d0 <send_data>:

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   283d0:	defffc04 	addi	sp,sp,-16
   283d4:	dc000015 	stw	r16,0(sp)
   283d8:	dfc00315 	stw	ra,12(sp)
   283dc:	dc800215 	stw	r18,8(sp)
   283e0:	dc400115 	stw	r17,4(sp)

	if(proc_num == 4){
   283e4:	297fffcc 	andi	r5,r5,65535
   283e8:	00800104 	movi	r2,4
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
	}
}

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   283ec:	2021883a 	mov	r16,r4

	if(proc_num == 4){
   283f0:	28801c1e 	bne	r5,r2,28464 <send_data+0x94>
		if(output_num == 0){
   283f4:	31803fcc 	andi	r6,r6,255
   283f8:	30000c1e 	bne	r6,zero,2842c <send_data+0x5c>
   283fc:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_4_outarg_0[i]));
   28400:	d4a04604 	addi	r18,gp,-32488

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 4){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   28404:	808001c3 	ldbu	r2,7(r16)
   28408:	8880260e 	bge	r17,r2,284a4 <send_data+0xd4>
				serializing_send(edge, ((unsigned char*)proc_4_outarg_0[i]));
   2840c:	8c45883a 	add	r2,r17,r17
   28410:	1085883a 	add	r2,r2,r2
   28414:	1485883a 	add	r2,r2,r18
   28418:	11400017 	ldw	r5,0(r2)
   2841c:	8009883a 	mov	r4,r16

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 4){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   28420:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_4_outarg_0[i]));
   28424:	00283540 	call	28354 <serializing_send>
   28428:	003ff606 	br	28404 <_gp+0xffff62b4>
			}
		}
		if(output_num == 1){
   2842c:	00800044 	movi	r2,1
   28430:	30801c1e 	bne	r6,r2,284a4 <send_data+0xd4>
   28434:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_4_outarg_1[i]));
   28438:	d4a04304 	addi	r18,gp,-32500
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_4_outarg_0[i]));
			}
		}
		if(output_num == 1){
			for(int i =0; i < edge->num_of_out_token; ++i){
   2843c:	808001c3 	ldbu	r2,7(r16)
   28440:	8880180e 	bge	r17,r2,284a4 <send_data+0xd4>
				serializing_send(edge, ((unsigned char*)proc_4_outarg_1[i]));
   28444:	8c45883a 	add	r2,r17,r17
   28448:	1085883a 	add	r2,r2,r2
   2844c:	1485883a 	add	r2,r2,r18
   28450:	11400017 	ldw	r5,0(r2)
   28454:	8009883a 	mov	r4,r16
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_4_outarg_0[i]));
			}
		}
		if(output_num == 1){
			for(int i =0; i < edge->num_of_out_token; ++i){
   28458:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_4_outarg_1[i]));
   2845c:	00283540 	call	28354 <serializing_send>
   28460:	003ff606 	br	2843c <_gp+0xffff62ec>
			}
		}
	}

	if(proc_num == 5){
   28464:	00800144 	movi	r2,5
   28468:	28800e1e 	bne	r5,r2,284a4 <send_data+0xd4>
		if(output_num == 0){
   2846c:	31803fcc 	andi	r6,r6,255
   28470:	30000c1e 	bne	r6,zero,284a4 <send_data+0xd4>
   28474:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_5_outarg_0[i]));
   28478:	d4a04e04 	addi	r18,gp,-32456
		}
	}

	if(proc_num == 5){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   2847c:	808001c3 	ldbu	r2,7(r16)
   28480:	8880080e 	bge	r17,r2,284a4 <send_data+0xd4>
				serializing_send(edge, ((unsigned char*)proc_5_outarg_0[i]));
   28484:	8c45883a 	add	r2,r17,r17
   28488:	1085883a 	add	r2,r2,r2
   2848c:	1485883a 	add	r2,r2,r18
   28490:	11400017 	ldw	r5,0(r2)
   28494:	8009883a 	mov	r4,r16
		}
	}

	if(proc_num == 5){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   28498:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_5_outarg_0[i]));
   2849c:	00283540 	call	28354 <serializing_send>
   284a0:	003ff606 	br	2847c <_gp+0xffff632c>
			}
		}
	}
}
   284a4:	dfc00317 	ldw	ra,12(sp)
   284a8:	dc800217 	ldw	r18,8(sp)
   284ac:	dc400117 	ldw	r17,4(sp)
   284b0:	dc000017 	ldw	r16,0(sp)
   284b4:	dec00404 	addi	sp,sp,16
   284b8:	f800283a 	ret

000284bc <proc_args_init>:

void proc_args_init(){
   284bc:	defffc04 	addi	sp,sp,-16
   284c0:	dc000015 	stw	r16,0(sp)
	// space allocation for input and output for proc 4
	proc_4_inp_0 = (P4_INP0_TYPE*)malloc(P4_INP0_NUM_OF_TOKEN*sizeof(P4_INP0_TYPE));
   284c4:	04000104 	movi	r16,4
   284c8:	8009883a 	mov	r4,r16
			}
		}
	}
}

void proc_args_init(){
   284cc:	dfc00315 	stw	ra,12(sp)
   284d0:	dc800215 	stw	r18,8(sp)
   284d4:	dc400115 	stw	r17,4(sp)
	// space allocation for input and output for proc 4
	proc_4_inp_0 = (P4_INP0_TYPE*)malloc(P4_INP0_NUM_OF_TOKEN*sizeof(P4_INP0_TYPE));
   284d8:	0028f6c0 	call	28f6c <malloc>
	proc_4_out_0 = (P4_OUT0_TYPE*)malloc(P4_OUT0_NUM_OF_TOKEN*sizeof(P4_OUT0_TYPE));
   284dc:	8009883a 	mov	r4,r16
	}
}

void proc_args_init(){
	// space allocation for input and output for proc 4
	proc_4_inp_0 = (P4_INP0_TYPE*)malloc(P4_INP0_NUM_OF_TOKEN*sizeof(P4_INP0_TYPE));
   284e0:	1025883a 	mov	r18,r2
   284e4:	d0a04815 	stw	r2,-32480(gp)
	proc_4_out_0 = (P4_OUT0_TYPE*)malloc(P4_OUT0_NUM_OF_TOKEN*sizeof(P4_OUT0_TYPE));
   284e8:	0028f6c0 	call	28f6c <malloc>
	proc_4_out_1 = (P4_OUT1_TYPE*)malloc(P4_OUT1_NUM_OF_TOKEN*sizeof(P4_OUT1_TYPE));
   284ec:	8009883a 	mov	r4,r16
}

void proc_args_init(){
	// space allocation for input and output for proc 4
	proc_4_inp_0 = (P4_INP0_TYPE*)malloc(P4_INP0_NUM_OF_TOKEN*sizeof(P4_INP0_TYPE));
	proc_4_out_0 = (P4_OUT0_TYPE*)malloc(P4_OUT0_NUM_OF_TOKEN*sizeof(P4_OUT0_TYPE));
   284f0:	1023883a 	mov	r17,r2
   284f4:	d0a04715 	stw	r2,-32484(gp)
	proc_4_out_1 = (P4_OUT1_TYPE*)malloc(P4_OUT1_NUM_OF_TOKEN*sizeof(P4_OUT1_TYPE));
   284f8:	0028f6c0 	call	28f6c <malloc>
   284fc:	d0a05015 	stw	r2,-32448(gp)

	// pointers to elements for proc 4
    proc_4_inparg_0[0] = &proc_4_inp_0[0];
    proc_4_outarg_0[0] = &proc_4_out_0[0];
    proc_4_outarg_1[0] = &proc_4_out_1[0];
   28500:	d0a04315 	stw	r2,-32500(gp)

    // top level pointers to be passed for proc 5
    proc_4_inps[0] = proc_4_inparg_0;
   28504:	d0a05104 	addi	r2,gp,-32444
   28508:	d0a04d15 	stw	r2,-32460(gp)
    proc_4_outs[0] = proc_4_outarg_0;
   2850c:	d0e04604 	addi	r3,gp,-32488
   28510:	d0a04904 	addi	r2,gp,-32476
    proc_4_outs[1] = proc_4_outarg_1;


	// space allocation for input and output for proc 5
	proc_5_inp_0 = (P5_INP0_TYPE*)malloc(P5_INP0_NUM_OF_TOKEN*sizeof(P5_INP0_TYPE));
   28514:	8009883a 	mov	r4,r16
    proc_4_outarg_0[0] = &proc_4_out_0[0];
    proc_4_outarg_1[0] = &proc_4_out_1[0];

    // top level pointers to be passed for proc 5
    proc_4_inps[0] = proc_4_inparg_0;
    proc_4_outs[0] = proc_4_outarg_0;
   28518:	10c00015 	stw	r3,0(r2)
    proc_4_outs[1] = proc_4_outarg_1;
   2851c:	d0e04304 	addi	r3,gp,-32500
   28520:	10c00115 	stw	r3,4(r2)
	proc_4_inp_0 = (P4_INP0_TYPE*)malloc(P4_INP0_NUM_OF_TOKEN*sizeof(P4_INP0_TYPE));
	proc_4_out_0 = (P4_OUT0_TYPE*)malloc(P4_OUT0_NUM_OF_TOKEN*sizeof(P4_OUT0_TYPE));
	proc_4_out_1 = (P4_OUT1_TYPE*)malloc(P4_OUT1_NUM_OF_TOKEN*sizeof(P4_OUT1_TYPE));

	// pointers to elements for proc 4
    proc_4_inparg_0[0] = &proc_4_inp_0[0];
   28524:	d4a05115 	stw	r18,-32444(gp)
    proc_4_outarg_0[0] = &proc_4_out_0[0];
   28528:	d4604615 	stw	r17,-32488(gp)
    proc_4_outs[0] = proc_4_outarg_0;
    proc_4_outs[1] = proc_4_outarg_1;


	// space allocation for input and output for proc 5
	proc_5_inp_0 = (P5_INP0_TYPE*)malloc(P5_INP0_NUM_OF_TOKEN*sizeof(P5_INP0_TYPE));
   2852c:	0028f6c0 	call	28f6c <malloc>
	proc_5_out_0 = (P5_OUT0_TYPE*)malloc(P5_OUT0_NUM_OF_TOKEN*sizeof(P5_OUT0_TYPE));
   28530:	8009883a 	mov	r4,r16
    proc_4_outs[0] = proc_4_outarg_0;
    proc_4_outs[1] = proc_4_outarg_1;


	// space allocation for input and output for proc 5
	proc_5_inp_0 = (P5_INP0_TYPE*)malloc(P5_INP0_NUM_OF_TOKEN*sizeof(P5_INP0_TYPE));
   28534:	1023883a 	mov	r17,r2
   28538:	d0a04415 	stw	r2,-32496(gp)
	proc_5_out_0 = (P5_OUT0_TYPE*)malloc(P5_OUT0_NUM_OF_TOKEN*sizeof(P5_OUT0_TYPE));
   2853c:	0028f6c0 	call	28f6c <malloc>
   28540:	d0a04515 	stw	r2,-32492(gp)

	// pointers to elements for proc 5
    proc_5_inparg_0[0] = &proc_5_inp_0[0];
    proc_5_outarg_0[0] = &proc_5_out_0[0];
   28544:	d0a04e15 	stw	r2,-32456(gp)

    // top level pointers to be passed for proc 5
    proc_5_inps[0] = proc_5_inparg_0;
   28548:	d0a04f04 	addi	r2,gp,-32452
   2854c:	d0a04215 	stw	r2,-32504(gp)
    proc_5_outs[0] = proc_5_outarg_0;
   28550:	d0a04e04 	addi	r2,gp,-32456
	// space allocation for input and output for proc 5
	proc_5_inp_0 = (P5_INP0_TYPE*)malloc(P5_INP0_NUM_OF_TOKEN*sizeof(P5_INP0_TYPE));
	proc_5_out_0 = (P5_OUT0_TYPE*)malloc(P5_OUT0_NUM_OF_TOKEN*sizeof(P5_OUT0_TYPE));

	// pointers to elements for proc 5
    proc_5_inparg_0[0] = &proc_5_inp_0[0];
   28554:	d4604f15 	stw	r17,-32452(gp)
    proc_5_outarg_0[0] = &proc_5_out_0[0];

    // top level pointers to be passed for proc 5
    proc_5_inps[0] = proc_5_inparg_0;
    proc_5_outs[0] = proc_5_outarg_0;
   28558:	d0a04b15 	stw	r2,-32468(gp)


}
   2855c:	dfc00317 	ldw	ra,12(sp)
   28560:	dc800217 	ldw	r18,8(sp)
   28564:	dc400117 	ldw	r17,4(sp)
   28568:	dc000017 	ldw	r16,0(sp)
   2856c:	dec00404 	addi	sp,sp,16
   28570:	f800283a 	ret

00028574 <cleanUp>:

void cleanUp(){
	// clean up proc 4
	free(proc_4_inp_0);
   28574:	d1204817 	ldw	r4,-32480(gp)
    proc_5_outs[0] = proc_5_outarg_0;


}

void cleanUp(){
   28578:	deffff04 	addi	sp,sp,-4
   2857c:	dfc00015 	stw	ra,0(sp)
	// clean up proc 4
	free(proc_4_inp_0);
   28580:	0028f800 	call	28f80 <free>
	free(proc_4_out_0);
   28584:	d1204717 	ldw	r4,-32484(gp)
   28588:	0028f800 	call	28f80 <free>
	free(proc_4_out_1);
   2858c:	d1205017 	ldw	r4,-32448(gp)
   28590:	0028f800 	call	28f80 <free>

	// clean up proc 5
	free(proc_5_inp_0);
   28594:	d1204417 	ldw	r4,-32496(gp)
   28598:	0028f800 	call	28f80 <free>
	free(proc_5_out_0);
   2859c:	d1204517 	ldw	r4,-32492(gp)
}
   285a0:	dfc00017 	ldw	ra,0(sp)
   285a4:	dec00104 	addi	sp,sp,4
	free(proc_4_out_0);
	free(proc_4_out_1);

	// clean up proc 5
	free(proc_5_inp_0);
	free(proc_5_out_0);
   285a8:	0028f801 	jmpi	28f80 <free>

000285ac <start_FIFO>:
}

void start_FIFO(){
   285ac:	defffd04 	addi	sp,sp,-12
   285b0:	dc400115 	stw	r17,4(sp)
   285b4:	dc000015 	stw	r16,0(sp)


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   285b8:	044002c4 	movi	r17,11
   285bc:	04000084 	movi	r16,2
   285c0:	880f883a 	mov	r7,r17
   285c4:	800d883a 	mov	r6,r16
   285c8:	000b883a 	mov	r5,zero
   285cc:	01240814 	movui	r4,36896
	// clean up proc 5
	free(proc_5_inp_0);
	free(proc_5_out_0);
}

void start_FIFO(){
   285d0:	dfc00215 	stw	ra,8(sp)


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   285d4:	0029e800 	call	29e80 <altera_avalon_fifo_init>
   285d8:	880f883a 	mov	r7,r17
   285dc:	800d883a 	mov	r6,r16
   285e0:	000b883a 	mov	r5,zero
   285e4:	01240014 	movui	r4,36864
void start_FIFO(){
	//initialization of FIFOs
	init_input_fifo_wrclk_control(FIFO_SINK_2_IN_CSR_BASE);
	init_input_fifo_wrclk_control(FIFO_SOURCE_2_IN_CSR_BASE);

}
   285e8:	dfc00217 	ldw	ra,8(sp)
   285ec:	dc400117 	ldw	r17,4(sp)
   285f0:	dc000017 	ldw	r16,0(sp)
   285f4:	dec00304 	addi	sp,sp,12


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   285f8:	0029e801 	jmpi	29e80 <altera_avalon_fifo_init>

000285fc <main>:
	init_input_fifo_wrclk_control(FIFO_SOURCE_2_IN_CSR_BASE);

}

int main()
{
   285fc:	defffe04 	addi	sp,sp,-8
   28600:	dfc00115 	stw	ra,4(sp)
   28604:	dc000015 	stw	r16,0(sp)
	start_FIFO();
   28608:	00285ac0 	call	285ac <start_FIFO>
	proc_args_init();
	init_structures();
   2860c:	04000144 	movi	r16,5
}

int main()
{
	start_FIFO();
	proc_args_init();
   28610:	00284bc0 	call	284bc <proc_args_init>
	init_structures();
   28614:	00288080 	call	28808 <init_structures>


	for(int k = 0; k < 5; ++k){
		//alt_putstr("NODE 2 ---------------------------------------------------------\n");
	  for(int i = 0; i <P4_NUM_OF_INPS; ++i){
		  struct Edge *edge = get_edge(4,i,0/*it means input edges*/);
   28618:	000d883a 	mov	r6,zero
   2861c:	000b883a 	mov	r5,zero
   28620:	01000104 	movi	r4,4
   28624:	00286e00 	call	286e0 <get_edge>
		  //printf("k = %d\t before read data from processor 4\n",k);
		  read_data(edge,4/*which process*/, i/*which input*/);
   28628:	1009883a 	mov	r4,r2
   2862c:	000d883a 	mov	r6,zero
   28630:	01400104 	movi	r5,4
   28634:	00282d00 	call	282d0 <read_data>
		  //printf("k = %d\t after read data from processor 4\n",k);
	  }

	  proc_4(proc_4_inps, proc_4_outs);
   28638:	d1604904 	addi	r5,gp,-32476
   2863c:	d1204d04 	addi	r4,gp,-32460
   28640:	002805c0 	call	2805c <proc_4>

	  for(int i = 0; i <P4_NUM_OF_OUTS; ++i){

		  struct Edge *edge = get_edge(4,i,1/*it means output edges*/);
   28644:	01800044 	movi	r6,1
   28648:	000b883a 	mov	r5,zero
   2864c:	01000104 	movi	r4,4
   28650:	00286e00 	call	286e0 <get_edge>
		  send_data(edge,4/*which process*/, i/*which output*/);
   28654:	1009883a 	mov	r4,r2
   28658:	000d883a 	mov	r6,zero
   2865c:	01400104 	movi	r5,4
   28660:	00283d00 	call	283d0 <send_data>

	  proc_4(proc_4_inps, proc_4_outs);

	  for(int i = 0; i <P4_NUM_OF_OUTS; ++i){

		  struct Edge *edge = get_edge(4,i,1/*it means output edges*/);
   28664:	01800044 	movi	r6,1
   28668:	300b883a 	mov	r5,r6
   2866c:	01000104 	movi	r4,4
   28670:	00286e00 	call	286e0 <get_edge>
		  send_data(edge,4/*which process*/, i/*which output*/);
   28674:	1009883a 	mov	r4,r2
   28678:	01800044 	movi	r6,1
   2867c:	01400104 	movi	r5,4
   28680:	00283d00 	call	283d0 <send_data>
	  }


	  for(int i = 0; i <P5_NUM_OF_INPS; ++i){
		  struct Edge *edge = get_edge(5,i,0/*it means input edges*/);
   28684:	000d883a 	mov	r6,zero
   28688:	000b883a 	mov	r5,zero
   2868c:	01000144 	movi	r4,5
   28690:	00286e00 	call	286e0 <get_edge>
		  //printf("k = %d\t before read data from processor 5\n",k);
		  read_data(edge,5/*which process*/, i/*which input*/);
   28694:	1009883a 	mov	r4,r2
   28698:	000d883a 	mov	r6,zero
   2869c:	01400144 	movi	r5,5
   286a0:	00282d00 	call	282d0 <read_data>
		  //printf("k = %d\t after read data from processor 5\n",k);
	  }

	  proc_5(proc_5_inps, proc_5_outs);
   286a4:	d1604b04 	addi	r5,gp,-32468
   286a8:	d1204204 	addi	r4,gp,-32504
   286ac:	00280900 	call	28090 <proc_5>

	  for(int i = 0; i <P5_NUM_OF_OUTS; ++i){
		  struct Edge *edge = get_edge(5,i,1/*it means output edges*/);
   286b0:	01800044 	movi	r6,1
   286b4:	000b883a 	mov	r5,zero
   286b8:	01000144 	movi	r4,5
   286bc:	00286e00 	call	286e0 <get_edge>
		  //printf("k = %d\t before send data from processor 5\n",k);
		  send_data(edge,5/*which process*/, i/*which output*/);
   286c0:	000d883a 	mov	r6,zero
   286c4:	01400144 	movi	r5,5
   286c8:	1009883a 	mov	r4,r2
   286cc:	843fffc4 	addi	r16,r16,-1
   286d0:	00283d00 	call	283d0 <send_data>
	start_FIFO();
	proc_args_init();
	init_structures();


	for(int k = 0; k < 5; ++k){
   286d4:	803fd01e 	bne	r16,zero,28618 <_gp+0xffff64c8>
		  //printf("k = %d\t before send data from processor 5\n",k);
		  send_data(edge,5/*which process*/, i/*which output*/);
		  //printf("k = %d\t after send data from processor 5\n",k);
	  }
	}
	  cleanUp();
   286d8:	00285740 	call	28574 <cleanUp>
   286dc:	003fff06 	br	286dc <_gp+0xffff658c>

000286e0 <get_edge>:
/****************** Structure ******************/

/* This is only for current node */
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   286e0:	31803fcc 	andi	r6,r6,255
   286e4:	30000d1e 	bne	r6,zero,2871c <get_edge+0x3c>
        if (proc_num == 4) {
   286e8:	21003fcc 	andi	r4,r4,255
   286ec:	00800104 	movi	r2,4
   286f0:	2080051e 	bne	r4,r2,28708 <get_edge+0x28>
            if (port_num == 0) {
   286f4:	29403fcc 	andi	r5,r5,255
   286f8:	28001d1e 	bne	r5,zero,28770 <get_edge+0x90>
                return &edge_p3_p4;
   286fc:	008000f4 	movhi	r2,3
   28700:	10a90104 	addi	r2,r2,-23548
   28704:	f800283a 	ret
            }
        }
        if (proc_num == 5) {
   28708:	00800144 	movi	r2,5
   2870c:	2080181e 	bne	r4,r2,28770 <get_edge+0x90>
            if (port_num == 0) {
   28710:	29403fcc 	andi	r5,r5,255
   28714:	2800161e 	bne	r5,zero,28770 <get_edge+0x90>
   28718:	00000806 	br	2873c <get_edge+0x5c>
                return &edge_p4_p5;
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   2871c:	00800044 	movi	r2,1
   28720:	3080131e 	bne	r6,r2,28770 <get_edge+0x90>
        if (proc_num == 4) {
   28724:	21003fcc 	andi	r4,r4,255
   28728:	00800104 	movi	r2,4
   2872c:	2080061e 	bne	r4,r2,28748 <get_edge+0x68>
            if (port_num == 0) {
   28730:	29403fcc 	andi	r5,r5,255
   28734:	28000b26 	beq	r5,zero,28764 <get_edge+0x84>
                return &edge_p4_p1;
            }
            if (port_num == 1) {
   28738:	29800d1e 	bne	r5,r6,28770 <get_edge+0x90>
                return &edge_p3_p4;
            }
        }
        if (proc_num == 5) {
            if (port_num == 0) {
                return &edge_p4_p5;
   2873c:	008000f4 	movhi	r2,3
   28740:	10a91004 	addi	r2,r2,-23488
   28744:	f800283a 	ret
            }
            if (port_num == 1) {
                return &edge_p4_p5;
            }
        }
        if (proc_num == 5) {
   28748:	00800144 	movi	r2,5
   2874c:	2080081e 	bne	r4,r2,28770 <get_edge+0x90>
            if (port_num == 0) {
   28750:	29403fcc 	andi	r5,r5,255
   28754:	2800061e 	bne	r5,zero,28770 <get_edge+0x90>
                return &edge_p5_p0;
   28758:	008000f4 	movhi	r2,3
   2875c:	10a90604 	addi	r2,r2,-23528
   28760:	f800283a 	ret
    }

    if (inout == 1  /*it is output edge*/) {
        if (proc_num == 4) {
            if (port_num == 0) {
                return &edge_p4_p1;
   28764:	008000f4 	movhi	r2,3
   28768:	10a90b04 	addi	r2,r2,-23508
   2876c:	f800283a 	ret
                return &edge_p5_p0;
            }
        }
    }

    return 0;
   28770:	0005883a 	mov	r2,zero
}
   28774:	f800283a 	ret

00028778 <get_buffer>:

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   28778:	00c000f4 	movhi	r3,3
   2877c:	18e8ed84 	addi	r3,r3,-23626
    for (int i = 0; i < 4; i++) {
   28780:	0005883a 	mov	r2,zero
        if (edges[i].proc_src == proc_src) {
   28784:	213fffcc 	andi	r4,r4,65535
            if (edges[i].proc_dest == proc_dest) {
   28788:	297fffcc 	andi	r5,r5,65535
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 4; i++) {
   2878c:	01800104 	movi	r6,4
        if (edges[i].proc_src == proc_src) {
   28790:	19c0000b 	ldhu	r7,0(r3)
   28794:	39000e1e 	bne	r7,r4,287d0 <get_buffer+0x58>
            if (edges[i].proc_dest == proc_dest) {
   28798:	19c0008b 	ldhu	r7,2(r3)
   2879c:	39400c1e 	bne	r7,r5,287d0 <get_buffer+0x58>
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   287a0:	deffff04 	addi	sp,sp,-4
    for (int i = 0; i < 4; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   287a4:	01400504 	movi	r5,20
   287a8:	1009883a 	mov	r4,r2
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   287ac:	dfc00015 	stw	ra,0(sp)
    for (int i = 0; i < 4; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   287b0:	0028f440 	call	28f44 <__mulsi3>
   287b4:	00c000f4 	movhi	r3,3
   287b8:	18e8f004 	addi	r3,r3,-23616
   287bc:	10c5883a 	add	r2,r2,r3
   287c0:	10800017 	ldw	r2,0(r2)
            }
        }
    }
    return 0;
}
   287c4:	dfc00017 	ldw	ra,0(sp)
   287c8:	dec00104 	addi	sp,sp,4
   287cc:	f800283a 	ret
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 4; i++) {
   287d0:	10800044 	addi	r2,r2,1
   287d4:	18c00504 	addi	r3,r3,20
   287d8:	11bfed1e 	bne	r2,r6,28790 <_gp+0xffff6640>
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
            }
        }
    }
    return 0;
   287dc:	0005883a 	mov	r2,zero
   287e0:	f800283a 	ret

000287e4 <init_buffer>:
}

void init_buffer(){
   287e4:	deffbe04 	addi	sp,sp,-264
	ring_buffer_t buff_p3_p4;
	ring_buffer_init(&buff_p3_p4);
   287e8:	d9002084 	addi	r4,sp,130
        }
    }
    return 0;
}

void init_buffer(){
   287ec:	dfc04115 	stw	ra,260(sp)
	ring_buffer_t buff_p3_p4;
	ring_buffer_init(&buff_p3_p4);
   287f0:	0028cf40 	call	28cf4 <ring_buffer_init>

	ring_buffer_t buff_p4_p5;
	ring_buffer_init(&buff_p4_p5);
   287f4:	d809883a 	mov	r4,sp
   287f8:	0028cf40 	call	28cf4 <ring_buffer_init>
}
   287fc:	dfc04117 	ldw	ra,260(sp)
   28800:	dec04204 	addi	sp,sp,264
   28804:	f800283a 	ret

00028808 <init_structures>:

/* This is only for current node */
void init_structures(){
   28808:	defff904 	addi	sp,sp,-28
   2880c:	dfc00615 	stw	ra,24(sp)
   28810:	dd400515 	stw	r21,20(sp)
   28814:	dd000415 	stw	r20,16(sp)
   28818:	dcc00315 	stw	r19,12(sp)
   2881c:	dc800215 	stw	r18,8(sp)
   28820:	dc400115 	stw	r17,4(sp)
   28824:	dc000015 	stw	r16,0(sp)
	init_buffer();
   28828:	00287e40 	call	287e4 <init_buffer>

	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
   2882c:	014000f4 	movhi	r5,3
   28830:	29690104 	addi	r5,r5,-23548
   28834:	008000c4 	movi	r2,3
   28838:	28800005 	stb	r2,0(r5)
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
	edge_p3_p4.size_of_token_type = sizeof(P4_INP0_TYPE);
	edge_p3_p4.external = 1;
	edge_p3_p4.buffer = &buff_p3_p4;

	edges[0] = edge_p3_p4;
   2883c:	04c000f4 	movhi	r19,3
	init_buffer();

	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
	edge_p3_p4.node_dest = 2;
	edge_p3_p4.proc_src = 3;
   28840:	008000c4 	movi	r2,3
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
	edge_p3_p4.size_of_token_type = sizeof(P4_INP0_TYPE);
	edge_p3_p4.external = 1;
	edge_p3_p4.buffer = &buff_p3_p4;

	edges[0] = edge_p3_p4;
   28844:	05000504 	movi	r20,20
   28848:	9ce8ed04 	addi	r19,r19,-23628
	init_buffer();

	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
	edge_p3_p4.node_dest = 2;
	edge_p3_p4.proc_src = 3;
   2884c:	2880008d 	sth	r2,2(r5)
	edge_p3_p4.proc_dest = 4;
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
	edge_p3_p4.size_of_token_type = sizeof(P4_INP0_TYPE);
	edge_p3_p4.external = 1;
	edge_p3_p4.buffer = &buff_p3_p4;
   28850:	008000f4 	movhi	r2,3

	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
	edge_p3_p4.node_dest = 2;
	edge_p3_p4.proc_src = 3;
	edge_p3_p4.proc_dest = 4;
   28854:	04400104 	movi	r17,4
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
   28858:	04000044 	movi	r16,1
void init_structures(){
	init_buffer();

	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
	edge_p3_p4.node_dest = 2;
   2885c:	04800084 	movi	r18,2
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
	edge_p3_p4.size_of_token_type = sizeof(P4_INP0_TYPE);
	edge_p3_p4.external = 1;
	edge_p3_p4.buffer = &buff_p3_p4;

	edges[0] = edge_p3_p4;
   28860:	a00d883a 	mov	r6,r20
   28864:	9809883a 	mov	r4,r19
	edge_p3_p4.proc_src = 3;
	edge_p3_p4.proc_dest = 4;
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
	edge_p3_p4.size_of_token_type = sizeof(P4_INP0_TYPE);
	edge_p3_p4.external = 1;
	edge_p3_p4.buffer = &buff_p3_p4;
   28868:	10a8ac04 	addi	r2,r2,-23888
void init_structures(){
	init_buffer();

	//Edge p3 to p4
	edge_p3_p4.node_src = 3;
	edge_p3_p4.node_dest = 2;
   2886c:	2c800045 	stb	r18,1(r5)
	edge_p3_p4.proc_src = 3;
	edge_p3_p4.proc_dest = 4;
   28870:	2c40010d 	sth	r17,4(r5)
	edge_p3_p4.num_of_inp_token = P4_INP0_NUM_OF_TOKEN;
   28874:	2c000185 	stb	r16,6(r5)
	edge_p3_p4.size_of_token_type = sizeof(P4_INP0_TYPE);
   28878:	2c400205 	stb	r17,8(r5)
	edge_p3_p4.external = 1;
   2887c:	2c000405 	stb	r16,16(r5)
	edge_p3_p4.buffer = &buff_p3_p4;
   28880:	28800315 	stw	r2,12(r5)

	edges[0] = edge_p3_p4;
   28884:	0028f940 	call	28f94 <memcpy>


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   28888:	014000f4 	movhi	r5,3
   2888c:	29690b04 	addi	r5,r5,-23508
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
   28890:	00800044 	movi	r2,1
	edge_p4_p1.num_of_out_token = P4_OUT0_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P4_OUT0_TYPE);
	edge_p4_p1.external = 1;

	edges[1] = edge_p4_p1;
   28894:	a00d883a 	mov	r6,r20
   28898:	9d09883a 	add	r4,r19,r20

	edges[0] = edge_p3_p4;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   2889c:	2c800005 	stb	r18,0(r5)
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
   288a0:	2c40008d 	sth	r17,2(r5)
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_out_token = P4_OUT0_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P4_OUT0_TYPE);
   288a4:	2c400205 	stb	r17,8(r5)
	edge_p4_p1.external = 1;
   288a8:	2c000405 	stb	r16,16(r5)
	edges[0] = edge_p3_p4;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
	edge_p4_p1.node_dest = 0;
   288ac:	28000045 	stb	zero,1(r5)
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
   288b0:	2880010d 	sth	r2,4(r5)
	edge_p4_p1.num_of_out_token = P4_OUT0_NUM_OF_TOKEN;
   288b4:	288001c5 	stb	r2,7(r5)
	edge_p4_p1.size_of_token_type = sizeof(P4_OUT0_TYPE);
	edge_p4_p1.external = 1;

	edges[1] = edge_p4_p1;
   288b8:	0028f940 	call	28f94 <memcpy>


	//Edge p4 to p5
	edge_p4_p5.node_src = 2;
   288bc:	014000f4 	movhi	r5,3
	edge_p4_p5.proc_dest = 5;
	edge_p4_p5.num_of_inp_token = P5_INP0_NUM_OF_TOKEN;
	edge_p4_p5.num_of_out_token = P4_OUT1_NUM_OF_TOKEN;
	edge_p4_p5.size_of_token_type = sizeof(P4_OUT1_TYPE);
	edge_p4_p5.external = 0;
	edge_p4_p5.buffer = &buff_p4_p5;
   288c0:	008000f4 	movhi	r2,3

	edges[1] = edge_p4_p1;


	//Edge p4 to p5
	edge_p4_p5.node_src = 2;
   288c4:	29691004 	addi	r5,r5,-23488
	edge_p4_p5.node_dest = 2;
	edge_p4_p5.proc_src = 4;
	edge_p4_p5.proc_dest = 5;
   288c8:	05400144 	movi	r21,5
	edge_p4_p5.num_of_out_token = P4_OUT1_NUM_OF_TOKEN;
	edge_p4_p5.size_of_token_type = sizeof(P4_OUT1_TYPE);
	edge_p4_p5.external = 0;
	edge_p4_p5.buffer = &buff_p4_p5;

	edges[2] = edge_p4_p5;
   288cc:	a00d883a 	mov	r6,r20
   288d0:	99000a04 	addi	r4,r19,40
	edge_p4_p5.proc_dest = 5;
	edge_p4_p5.num_of_inp_token = P5_INP0_NUM_OF_TOKEN;
	edge_p4_p5.num_of_out_token = P4_OUT1_NUM_OF_TOKEN;
	edge_p4_p5.size_of_token_type = sizeof(P4_OUT1_TYPE);
	edge_p4_p5.external = 0;
	edge_p4_p5.buffer = &buff_p4_p5;
   288d4:	10a8cc84 	addi	r2,r2,-23758

	edges[1] = edge_p4_p1;


	//Edge p4 to p5
	edge_p4_p5.node_src = 2;
   288d8:	2c800005 	stb	r18,0(r5)
	edge_p4_p5.node_dest = 2;
   288dc:	2c800045 	stb	r18,1(r5)
	edge_p4_p5.proc_src = 4;
   288e0:	2c40008d 	sth	r17,2(r5)
	edge_p4_p5.proc_dest = 5;
   288e4:	2d40010d 	sth	r21,4(r5)
	edge_p4_p5.num_of_inp_token = P5_INP0_NUM_OF_TOKEN;
   288e8:	2c000185 	stb	r16,6(r5)
	edge_p4_p5.num_of_out_token = P4_OUT1_NUM_OF_TOKEN;
   288ec:	2c0001c5 	stb	r16,7(r5)
	edge_p4_p5.size_of_token_type = sizeof(P4_OUT1_TYPE);
   288f0:	2c400205 	stb	r17,8(r5)
	edge_p4_p5.external = 0;
   288f4:	28000405 	stb	zero,16(r5)
	edge_p4_p5.buffer = &buff_p4_p5;
   288f8:	28800315 	stw	r2,12(r5)

	edges[2] = edge_p4_p5;
   288fc:	0028f940 	call	28f94 <memcpy>


	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   28900:	014000f4 	movhi	r5,3
   28904:	29690604 	addi	r5,r5,-23528
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.size_of_token_type = sizeof(P5_OUT0_TYPE);
	edge_p5_p0.num_of_out_token = P5_OUT0_NUM_OF_TOKEN;
	edge_p5_p0.external = 1;

	edges[3] = edge_p5_p0;
   28908:	a00d883a 	mov	r6,r20
   2890c:	99000f04 	addi	r4,r19,60

	edges[2] = edge_p4_p5;


	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   28910:	2c800005 	stb	r18,0(r5)
	edge_p5_p0.node_dest = 0;
   28914:	28000045 	stb	zero,1(r5)
	edge_p5_p0.proc_src = 5;
   28918:	2d40008d 	sth	r21,2(r5)
	edge_p5_p0.proc_dest = 0;
   2891c:	2800010d 	sth	zero,4(r5)
	edge_p5_p0.size_of_token_type = sizeof(P5_OUT0_TYPE);
   28920:	2c400205 	stb	r17,8(r5)
	edge_p5_p0.num_of_out_token = P5_OUT0_NUM_OF_TOKEN;
   28924:	2c0001c5 	stb	r16,7(r5)
	edge_p5_p0.external = 1;
   28928:	2c000405 	stb	r16,16(r5)

	edges[3] = edge_p5_p0;
   2892c:	0028f940 	call	28f94 <memcpy>
}
   28930:	dfc00617 	ldw	ra,24(sp)
   28934:	dd400517 	ldw	r21,20(sp)
   28938:	dd000417 	ldw	r20,16(sp)
   2893c:	dcc00317 	ldw	r19,12(sp)
   28940:	dc800217 	ldw	r18,8(sp)
   28944:	dc400117 	ldw	r17,4(sp)
   28948:	dc000017 	ldw	r16,0(sp)
   2894c:	dec00704 	addi	sp,sp,28
   28950:	f800283a 	ret

00028954 <send_packet>:

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   28954:	defff904 	addi	sp,sp,-28
   28958:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   2895c:	25403fcc 	andi	r21,r4,255

	edges[3] = edge_p5_p0;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   28960:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28964:	d8800703 	ldbu	r2,28(sp)

	edges[3] = edge_p5_p0;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   28968:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2896c:	a80c923a 	slli	r6,r21,8
   28970:	29403fcc 	andi	r5,r5,255
   28974:	1004943a 	slli	r2,r2,16
   28978:	314ab03a 	or	r5,r6,r5
   2897c:	a00c943a 	slli	r6,r20,16

	edges[3] = edge_p5_p0;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   28980:	dcc00315 	stw	r19,12(sp)
   28984:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28988:	9cffffcc 	andi	r19,r19,65535

	edges[3] = edge_p5_p0;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   2898c:	dc800215 	stw	r18,8(sp)
   28990:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28994:	04a40014 	movui	r18,36864
   28998:	04641214 	movui	r17,36936
   2899c:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289a0:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289a4:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289a8:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289ac:	298cb03a 	or	r6,r5,r6
   289b0:	8809883a 	mov	r4,r17
   289b4:	900b883a 	mov	r5,r18

	edges[3] = edge_p5_p0;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   289b8:	dfc00615 	stw	ra,24(sp)
   289bc:	dc000015 	stw	r16,0(sp)
   289c0:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289c4:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289c8:	ace6b03a 	or	r19,r21,r19
   289cc:	a1803fcc 	andi	r6,r20,255
   289d0:	998cb03a 	or	r6,r19,r6
   289d4:	900b883a 	mov	r5,r18
   289d8:	8809883a 	mov	r4,r17
   289dc:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>
   289e0:	80800043 	ldbu	r2,1(r16)
   289e4:	81000003 	ldbu	r4,0(r16)
   289e8:	818000c3 	ldbu	r6,3(r16)
   289ec:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   289f0:	900b883a 	mov	r5,r18
   289f4:	300c963a 	slli	r6,r6,24
   289f8:	1106b03a 	or	r3,r2,r4
   289fc:	80800083 	ldbu	r2,2(r16)
   28a00:	8809883a 	mov	r4,r17
   28a04:	1004943a 	slli	r2,r2,16
   28a08:	10c4b03a 	or	r2,r2,r3
   28a0c:	308cb03a 	or	r6,r6,r2
   28a10:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>
   28a14:	80800143 	ldbu	r2,5(r16)
   28a18:	81000103 	ldbu	r4,4(r16)
   28a1c:	818001c3 	ldbu	r6,7(r16)
   28a20:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28a24:	900b883a 	mov	r5,r18
   28a28:	300c963a 	slli	r6,r6,24
   28a2c:	1106b03a 	or	r3,r2,r4
   28a30:	80800183 	ldbu	r2,6(r16)
   28a34:	8809883a 	mov	r4,r17
   28a38:	1004943a 	slli	r2,r2,16
   28a3c:	10c4b03a 	or	r2,r2,r3
   28a40:	308cb03a 	or	r6,r6,r2
   28a44:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>
   28a48:	80800243 	ldbu	r2,9(r16)
   28a4c:	81000203 	ldbu	r4,8(r16)
   28a50:	818002c3 	ldbu	r6,11(r16)
   28a54:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28a58:	900b883a 	mov	r5,r18
   28a5c:	300c963a 	slli	r6,r6,24
   28a60:	1106b03a 	or	r3,r2,r4
   28a64:	80800283 	ldbu	r2,10(r16)
   28a68:	8809883a 	mov	r4,r17
   28a6c:	1004943a 	slli	r2,r2,16
   28a70:	10c4b03a 	or	r2,r2,r3
   28a74:	308cb03a 	or	r6,r6,r2
   28a78:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>
   28a7c:	80800343 	ldbu	r2,13(r16)
   28a80:	81000303 	ldbu	r4,12(r16)
   28a84:	818003c3 	ldbu	r6,15(r16)
   28a88:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28a8c:	900b883a 	mov	r5,r18
   28a90:	300c963a 	slli	r6,r6,24
   28a94:	1106b03a 	or	r3,r2,r4
   28a98:	80800383 	ldbu	r2,14(r16)
   28a9c:	8809883a 	mov	r4,r17
   28aa0:	1004943a 	slli	r2,r2,16
   28aa4:	10c4b03a 	or	r2,r2,r3
   28aa8:	308cb03a 	or	r6,r6,r2
   28aac:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>
   28ab0:	80800443 	ldbu	r2,17(r16)
   28ab4:	81000403 	ldbu	r4,16(r16)
   28ab8:	818004c3 	ldbu	r6,19(r16)
   28abc:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28ac0:	900b883a 	mov	r5,r18
   28ac4:	300c963a 	slli	r6,r6,24
   28ac8:	1106b03a 	or	r3,r2,r4
   28acc:	80800483 	ldbu	r2,18(r16)
   28ad0:	8809883a 	mov	r4,r17
   28ad4:	1004943a 	slli	r2,r2,16
   28ad8:	10c4b03a 	or	r2,r2,r3
   28adc:	308cb03a 	or	r6,r6,r2
   28ae0:	0029f180 	call	29f18 <altera_avalon_fifo_write_fifo>
   28ae4:	80800543 	ldbu	r2,21(r16)
   28ae8:	81000503 	ldbu	r4,20(r16)
   28aec:	818005c3 	ldbu	r6,23(r16)
   28af0:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28af4:	900b883a 	mov	r5,r18
   28af8:	300c963a 	slli	r6,r6,24
   28afc:	1106b03a 	or	r3,r2,r4
   28b00:	80800583 	ldbu	r2,22(r16)
   28b04:	8809883a 	mov	r4,r17
   28b08:	1004943a 	slli	r2,r2,16
   28b0c:	10c4b03a 	or	r2,r2,r3
   28b10:	308cb03a 	or	r6,r6,r2

}
   28b14:	dfc00617 	ldw	ra,24(sp)
   28b18:	dd400517 	ldw	r21,20(sp)
   28b1c:	dd000417 	ldw	r20,16(sp)
   28b20:	dcc00317 	ldw	r19,12(sp)
   28b24:	dc800217 	ldw	r18,8(sp)
   28b28:	dc400117 	ldw	r17,4(sp)
   28b2c:	dc000017 	ldw	r16,0(sp)
   28b30:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   28b34:	0029f181 	jmpi	29f18 <altera_avalon_fifo_write_fifo>

00028b38 <read_payload>:
}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
   28b38:	2004d23a 	srli	r2,r4,8
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
   28b3c:	314b883a 	add	r5,r6,r5
   28b40:	29000005 	stb	r4,0(r5)
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   28b44:	28800045 	stb	r2,1(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
   28b48:	2004d43a 	srli	r2,r4,16
	
	*(payload + 2 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   28b4c:	2008d63a 	srli	r4,r4,24
	
	*(payload + 1 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   28b50:	28800085 	stb	r2,2(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   28b54:	290000c5 	stb	r4,3(r5)
   28b58:	f800283a 	ret

00028b5c <receive_packet>:
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   28b5c:	defff504 	addi	sp,sp,-44
   28b60:	dc400715 	stw	r17,28(sp)
   28b64:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28b68:	04640814 	movui	r17,36896
   28b6c:	04241014 	movui	r16,36928
   28b70:	880b883a 	mov	r5,r17
   28b74:	8009883a 	mov	r4,r16
	
	*(payload + 3 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   28b78:	dfc00a15 	stw	ra,40(sp)
   28b7c:	dcc00915 	stw	r19,36(sp)
   28b80:	dc800815 	stw	r18,32(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28b84:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	packet_size = temp;
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   28b88:	1004d63a 	srli	r2,r2,24
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28b8c:	880b883a 	mov	r5,r17
   28b90:	8009883a 	mov	r4,r16
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   28b94:	1026923a 	slli	r19,r2,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28b98:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
   28b9c:	1025883a 	mov	r18,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28ba0:	880b883a 	mov	r5,r17
   28ba4:	8009883a 	mov	r4,r16


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   28ba8:	10803fcc 	andi	r2,r2,255
   28bac:	98a6b03a 	or	r19,r19,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28bb0:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   28bb4:	d80d883a 	mov	r6,sp
   28bb8:	1009883a 	mov	r4,r2
   28bbc:	000b883a 	mov	r5,zero
   28bc0:	0028b380 	call	28b38 <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28bc4:	880b883a 	mov	r5,r17
   28bc8:	8009883a 	mov	r4,r16
   28bcc:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   28bd0:	d80d883a 	mov	r6,sp
   28bd4:	1009883a 	mov	r4,r2
   28bd8:	01400104 	movi	r5,4
   28bdc:	0028b380 	call	28b38 <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28be0:	880b883a 	mov	r5,r17
   28be4:	8009883a 	mov	r4,r16
   28be8:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   28bec:	d80d883a 	mov	r6,sp
   28bf0:	1009883a 	mov	r4,r2
   28bf4:	01400204 	movi	r5,8
   28bf8:	0028b380 	call	28b38 <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28bfc:	880b883a 	mov	r5,r17
   28c00:	8009883a 	mov	r4,r16
   28c04:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   28c08:	d80d883a 	mov	r6,sp
   28c0c:	1009883a 	mov	r4,r2
   28c10:	01400304 	movi	r5,12
   28c14:	0028b380 	call	28b38 <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28c18:	880b883a 	mov	r5,r17
   28c1c:	8009883a 	mov	r4,r16
   28c20:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   28c24:	d80d883a 	mov	r6,sp
   28c28:	1009883a 	mov	r4,r2
   28c2c:	01400404 	movi	r5,16
   28c30:	0028b380 	call	28b38 <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   28c34:	880b883a 	mov	r5,r17
   28c38:	8009883a 	mov	r4,r16
   28c3c:	0029f5c0 	call	29f5c <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   28c40:	d80d883a 	mov	r6,sp
   28c44:	1009883a 	mov	r4,r2
   28c48:	01400504 	movi	r5,20
   28c4c:	0028b380 	call	28b38 <read_payload>

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);
   28c50:	900ad23a 	srli	r5,r18,8
   28c54:	993fffcc 	andi	r4,r19,65535
   28c58:	297fffcc 	andi	r5,r5,65535
   28c5c:	00287780 	call	28778 <get_buffer>

	ring_buffer_queue_arr(buffer,payload,24);
   28c60:	01800604 	movi	r6,24
   28c64:	d80b883a 	mov	r5,sp
   28c68:	1009883a 	mov	r4,r2
   28c6c:	0028d400 	call	28d40 <ring_buffer_queue_arr>
}
   28c70:	dfc00a17 	ldw	ra,40(sp)
   28c74:	dcc00917 	ldw	r19,36(sp)
   28c78:	dc800817 	ldw	r18,32(sp)
   28c7c:	dc400717 	ldw	r17,28(sp)
   28c80:	dc000617 	ldw	r16,24(sp)
   28c84:	dec00b04 	addi	sp,sp,44
   28c88:	f800283a 	ret

00028c8c <receive_poll>:

bool receive_poll(){
   28c8c:	deffff04 	addi	sp,sp,-4
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   28c90:	01400fc4 	movi	r5,63
   28c94:	01240814 	movui	r4,36896
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);

	ring_buffer_queue_arr(buffer,payload,24);
}

bool receive_poll(){
   28c98:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   28c9c:	0029dd40 	call	29dd4 <altera_avalon_fifo_read_status>
   28ca0:	1004d07a 	srli	r2,r2,1
   28ca4:	1080005c 	xori	r2,r2,1
    }*/
	if(status & 0x02)
		return false;
	else
		return true;
}
   28ca8:	1080004c 	andi	r2,r2,1
   28cac:	dfc00017 	ldw	ra,0(sp)
   28cb0:	dec00104 	addi	sp,sp,4
   28cb4:	f800283a 	ret

00028cb8 <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   28cb8:	20c02043 	ldbu	r3,129(r4)
   28cbc:	20802003 	ldbu	r2,128(r4)
   28cc0:	1885003a 	cmpeq	r2,r3,r2
}
   28cc4:	f800283a 	ret

00028cc8 <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   28cc8:	20802043 	ldbu	r2,129(r4)
   28ccc:	20c02003 	ldbu	r3,128(r4)
   28cd0:	10c5c83a 	sub	r2,r2,r3
   28cd4:	10801fcc 	andi	r2,r2,127
   28cd8:	10801fe0 	cmpeqi	r2,r2,127
}
   28cdc:	f800283a 	ret

00028ce0 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   28ce0:	20802043 	ldbu	r2,129(r4)
   28ce4:	20c02003 	ldbu	r3,128(r4)
   28ce8:	10c5c83a 	sub	r2,r2,r3
}
   28cec:	10801fcc 	andi	r2,r2,127
   28cf0:	f800283a 	ret

00028cf4 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   28cf4:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   28cf8:	20002045 	stb	zero,129(r4)
   28cfc:	f800283a 	ret

00028d00 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   28d00:	20802043 	ldbu	r2,129(r4)
   28d04:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   28d08:	02001fc4 	movi	r8,127
   28d0c:	11803fcc 	andi	r6,r2,255
   28d10:	30cfc83a 	sub	r7,r6,r3
   28d14:	39c01fcc 	andi	r7,r7,127
   28d18:	3a00031e 	bne	r7,r8,28d28 <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   28d1c:	18c00044 	addi	r3,r3,1
   28d20:	1a06703a 	and	r3,r3,r8
   28d24:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   28d28:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   28d2c:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   28d30:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   28d34:	10801fcc 	andi	r2,r2,127
   28d38:	20802045 	stb	r2,129(r4)
   28d3c:	f800283a 	ret

00028d40 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   28d40:	defffc04 	addi	sp,sp,-16
   28d44:	31803fcc 	andi	r6,r6,255
   28d48:	dc800215 	stw	r18,8(sp)
   28d4c:	dc400115 	stw	r17,4(sp)
   28d50:	dc000015 	stw	r16,0(sp)
   28d54:	dfc00315 	stw	ra,12(sp)
   28d58:	2025883a 	mov	r18,r4
   28d5c:	2821883a 	mov	r16,r5
   28d60:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   28d64:	84400526 	beq	r16,r17,28d7c <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   28d68:	81400007 	ldb	r5,0(r16)
   28d6c:	9009883a 	mov	r4,r18
   28d70:	84000044 	addi	r16,r16,1
   28d74:	0028d000 	call	28d00 <ring_buffer_queue>
   28d78:	003ffa06 	br	28d64 <_gp+0xffff6c14>
  }
}
   28d7c:	dfc00317 	ldw	ra,12(sp)
   28d80:	dc800217 	ldw	r18,8(sp)
   28d84:	dc400117 	ldw	r17,4(sp)
   28d88:	dc000017 	ldw	r16,0(sp)
   28d8c:	dec00404 	addi	sp,sp,16
   28d90:	f800283a 	ret

00028d94 <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   28d94:	20c02043 	ldbu	r3,129(r4)
   28d98:	20802003 	ldbu	r2,128(r4)
   28d9c:	18800926 	beq	r3,r2,28dc4 <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   28da0:	2085883a 	add	r2,r4,r2
   28da4:	10800003 	ldbu	r2,0(r2)
   28da8:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   28dac:	20802003 	ldbu	r2,128(r4)
   28db0:	10800044 	addi	r2,r2,1
   28db4:	10801fcc 	andi	r2,r2,127
   28db8:	20802005 	stb	r2,128(r4)
  return 1;
   28dbc:	00800044 	movi	r2,1
   28dc0:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   28dc4:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   28dc8:	f800283a 	ret

00028dcc <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   28dcc:	20c02043 	ldbu	r3,129(r4)
   28dd0:	20802003 	ldbu	r2,128(r4)
   28dd4:	18801526 	beq	r3,r2,28e2c <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   28dd8:	defffa04 	addi	sp,sp,-24
   28ddc:	dcc00315 	stw	r19,12(sp)
   28de0:	dc800215 	stw	r18,8(sp)
   28de4:	dc400115 	stw	r17,4(sp)
   28de8:	dc000015 	stw	r16,0(sp)
   28dec:	dfc00515 	stw	ra,20(sp)
   28df0:	dd000415 	stw	r20,16(sp)
   28df4:	2827883a 	mov	r19,r5
   28df8:	2023883a 	mov	r17,r4
   28dfc:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   28e00:	0021883a 	mov	r16,zero
   28e04:	9c0b883a 	add	r5,r19,r16
   28e08:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   28e0c:	84800926 	beq	r16,r18,28e34 <ring_buffer_dequeue_arr+0x68>
   28e10:	8809883a 	mov	r4,r17
   28e14:	0028d940 	call	28d94 <ring_buffer_dequeue>
   28e18:	10803fcc 	andi	r2,r2,255
   28e1c:	84000044 	addi	r16,r16,1
   28e20:	103ff81e 	bne	r2,zero,28e04 <_gp+0xffff6cb4>
   28e24:	a005883a 	mov	r2,r20
   28e28:	00000306 	br	28e38 <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   28e2c:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   28e30:	f800283a 	ret
   28e34:	8005883a 	mov	r2,r16
   28e38:	dfc00517 	ldw	ra,20(sp)
   28e3c:	dd000417 	ldw	r20,16(sp)
   28e40:	dcc00317 	ldw	r19,12(sp)
   28e44:	dc800217 	ldw	r18,8(sp)
   28e48:	dc400117 	ldw	r17,4(sp)
   28e4c:	dc000017 	ldw	r16,0(sp)
   28e50:	dec00604 	addi	sp,sp,24
   28e54:	f800283a 	ret

00028e58 <ring_buffer_pop>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   28e58:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
   28e5c:	21402043 	ldbu	r5,129(r4)
   28e60:	10c03fcc 	andi	r3,r2,255
   28e64:	28c00526 	beq	r5,r3,28e7c <ring_buffer_pop+0x24>
    /* No items */
    return 0;
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   28e68:	10800044 	addi	r2,r2,1
   28e6c:	10801fcc 	andi	r2,r2,127
   28e70:	20802005 	stb	r2,128(r4)
  return 1;
   28e74:	00800044 	movi	r2,1
   28e78:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   28e7c:	0005883a 	mov	r2,zero
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   28e80:	f800283a 	ret

00028e84 <ring_buffer_pop_arr>:

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   28e84:	20c02043 	ldbu	r3,129(r4)
   28e88:	20802003 	ldbu	r2,128(r4)
   28e8c:	18801426 	beq	r3,r2,28ee0 <ring_buffer_pop_arr+0x5c>

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
   28e90:	defffb04 	addi	sp,sp,-20
   28e94:	dcc00315 	stw	r19,12(sp)
   28e98:	dc800215 	stw	r18,8(sp)
   28e9c:	dc400115 	stw	r17,4(sp)
   28ea0:	dc000015 	stw	r16,0(sp)
   28ea4:	dfc00415 	stw	ra,16(sp)
   28ea8:	2821883a 	mov	r16,r5
   28eac:	2023883a 	mov	r17,r4
   28eb0:	0025883a 	mov	r18,zero
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
  }
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
   28eb4:	2cc03fcc 	andi	r19,r5,255
   28eb8:	90803fcc 	andi	r2,r18,255
   28ebc:	14c00a26 	beq	r2,r19,28ee8 <ring_buffer_pop_arr+0x64>
   28ec0:	8809883a 	mov	r4,r17
   28ec4:	0028e580 	call	28e58 <ring_buffer_pop>
   28ec8:	10803fcc 	andi	r2,r2,255
   28ecc:	10000226 	beq	r2,zero,28ed8 <ring_buffer_pop_arr+0x54>
    cnt++;
   28ed0:	94800044 	addi	r18,r18,1
   28ed4:	003ff806 	br	28eb8 <_gp+0xffff6d68>
   28ed8:	9005883a 	mov	r2,r18
   28edc:	00000306 	br	28eec <ring_buffer_pop_arr+0x68>
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   28ee0:	0005883a 	mov	r2,zero
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
    cnt++;
  }
  return cnt;
}
   28ee4:	f800283a 	ret
   28ee8:	8005883a 	mov	r2,r16
   28eec:	dfc00417 	ldw	ra,16(sp)
   28ef0:	dcc00317 	ldw	r19,12(sp)
   28ef4:	dc800217 	ldw	r18,8(sp)
   28ef8:	dc400117 	ldw	r17,4(sp)
   28efc:	dc000017 	ldw	r16,0(sp)
   28f00:	dec00504 	addi	sp,sp,20
   28f04:	f800283a 	ret

00028f08 <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   28f08:	20802003 	ldbu	r2,128(r4)



ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   28f0c:	20c02043 	ldbu	r3,129(r4)
   28f10:	31c03fcc 	andi	r7,r6,255
   28f14:	1887c83a 	sub	r3,r3,r2
   28f18:	18c01fcc 	andi	r3,r3,127
   28f1c:	38c0072e 	bgeu	r7,r3,28f3c <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   28f20:	3085883a 	add	r2,r6,r2
   28f24:	10801fcc 	andi	r2,r2,127
   28f28:	2089883a 	add	r4,r4,r2
   28f2c:	20800003 	ldbu	r2,0(r4)
   28f30:	28800005 	stb	r2,0(r5)
  return 1;
   28f34:	00800044 	movi	r2,1
   28f38:	f800283a 	ret


ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   28f3c:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   28f40:	f800283a 	ret

00028f44 <__mulsi3>:
   28f44:	0005883a 	mov	r2,zero
   28f48:	20000726 	beq	r4,zero,28f68 <__mulsi3+0x24>
   28f4c:	20c0004c 	andi	r3,r4,1
   28f50:	2008d07a 	srli	r4,r4,1
   28f54:	18000126 	beq	r3,zero,28f5c <__mulsi3+0x18>
   28f58:	1145883a 	add	r2,r2,r5
   28f5c:	294b883a 	add	r5,r5,r5
   28f60:	203ffa1e 	bne	r4,zero,28f4c <_gp+0xffff6dfc>
   28f64:	f800283a 	ret
   28f68:	f800283a 	ret

00028f6c <malloc>:
   28f6c:	008000f4 	movhi	r2,3
   28f70:	10a85504 	addi	r2,r2,-24236
   28f74:	200b883a 	mov	r5,r4
   28f78:	11000017 	ldw	r4,0(r2)
   28f7c:	00290a01 	jmpi	290a0 <_malloc_r>

00028f80 <free>:
   28f80:	008000f4 	movhi	r2,3
   28f84:	10a85504 	addi	r2,r2,-24236
   28f88:	200b883a 	mov	r5,r4
   28f8c:	11000017 	ldw	r4,0(r2)
   28f90:	0028fbc1 	jmpi	28fbc <_free_r>

00028f94 <memcpy>:
   28f94:	2005883a 	mov	r2,r4
   28f98:	2007883a 	mov	r3,r4
   28f9c:	218d883a 	add	r6,r4,r6
   28fa0:	19800526 	beq	r3,r6,28fb8 <memcpy+0x24>
   28fa4:	29000003 	ldbu	r4,0(r5)
   28fa8:	18c00044 	addi	r3,r3,1
   28fac:	29400044 	addi	r5,r5,1
   28fb0:	193fffc5 	stb	r4,-1(r3)
   28fb4:	003ffa06 	br	28fa0 <_gp+0xffff6e50>
   28fb8:	f800283a 	ret

00028fbc <_free_r>:
   28fbc:	28003726 	beq	r5,zero,2909c <_free_r+0xe0>
   28fc0:	28ffff17 	ldw	r3,-4(r5)
   28fc4:	28bfff04 	addi	r2,r5,-4
   28fc8:	1800010e 	bge	r3,zero,28fd0 <_free_r+0x14>
   28fcc:	10c5883a 	add	r2,r2,r3
   28fd0:	014000f4 	movhi	r5,3
   28fd4:	2968a704 	addi	r5,r5,-23908
   28fd8:	28c00017 	ldw	r3,0(r5)
   28fdc:	280d883a 	mov	r6,r5
   28fe0:	1800031e 	bne	r3,zero,28ff0 <_free_r+0x34>
   28fe4:	10000115 	stw	zero,4(r2)
   28fe8:	28800015 	stw	r2,0(r5)
   28fec:	f800283a 	ret
   28ff0:	10c00c2e 	bgeu	r2,r3,29024 <_free_r+0x68>
   28ff4:	11000017 	ldw	r4,0(r2)
   28ff8:	110b883a 	add	r5,r2,r4
   28ffc:	1940041e 	bne	r3,r5,29010 <_free_r+0x54>
   29000:	19400017 	ldw	r5,0(r3)
   29004:	18c00117 	ldw	r3,4(r3)
   29008:	2909883a 	add	r4,r5,r4
   2900c:	11000015 	stw	r4,0(r2)
   29010:	10c00115 	stw	r3,4(r2)
   29014:	30800015 	stw	r2,0(r6)
   29018:	f800283a 	ret
   2901c:	11400336 	bltu	r2,r5,2902c <_free_r+0x70>
   29020:	2807883a 	mov	r3,r5
   29024:	19400117 	ldw	r5,4(r3)
   29028:	283ffc1e 	bne	r5,zero,2901c <_gp+0xffff6ecc>
   2902c:	19c00017 	ldw	r7,0(r3)
   29030:	19cd883a 	add	r6,r3,r7
   29034:	30800a1e 	bne	r6,r2,29060 <_free_r+0xa4>
   29038:	10800017 	ldw	r2,0(r2)
   2903c:	3885883a 	add	r2,r7,r2
   29040:	18800015 	stw	r2,0(r3)
   29044:	1889883a 	add	r4,r3,r2
   29048:	2900141e 	bne	r5,r4,2909c <_free_r+0xe0>
   2904c:	29000017 	ldw	r4,0(r5)
   29050:	2085883a 	add	r2,r4,r2
   29054:	18800015 	stw	r2,0(r3)
   29058:	28800117 	ldw	r2,4(r5)
   2905c:	00000e06 	br	29098 <_free_r+0xdc>
   29060:	1180032e 	bgeu	r2,r6,29070 <_free_r+0xb4>
   29064:	00800304 	movi	r2,12
   29068:	20800015 	stw	r2,0(r4)
   2906c:	f800283a 	ret
   29070:	11000017 	ldw	r4,0(r2)
   29074:	110d883a 	add	r6,r2,r4
   29078:	2980061e 	bne	r5,r6,29094 <_free_r+0xd8>
   2907c:	29800017 	ldw	r6,0(r5)
   29080:	3109883a 	add	r4,r6,r4
   29084:	11000015 	stw	r4,0(r2)
   29088:	29000117 	ldw	r4,4(r5)
   2908c:	11000115 	stw	r4,4(r2)
   29090:	00000106 	br	29098 <_free_r+0xdc>
   29094:	11400115 	stw	r5,4(r2)
   29098:	18800115 	stw	r2,4(r3)
   2909c:	f800283a 	ret

000290a0 <_malloc_r>:
   290a0:	defffb04 	addi	sp,sp,-20
   290a4:	00bfff04 	movi	r2,-4
   290a8:	dc400115 	stw	r17,4(sp)
   290ac:	2c4000c4 	addi	r17,r5,3
   290b0:	88a2703a 	and	r17,r17,r2
   290b4:	dc800215 	stw	r18,8(sp)
   290b8:	dfc00415 	stw	ra,16(sp)
   290bc:	dcc00315 	stw	r19,12(sp)
   290c0:	dc000015 	stw	r16,0(sp)
   290c4:	8c400204 	addi	r17,r17,8
   290c8:	00800304 	movi	r2,12
   290cc:	2025883a 	mov	r18,r4
   290d0:	8880022e 	bgeu	r17,r2,290dc <_malloc_r+0x3c>
   290d4:	1023883a 	mov	r17,r2
   290d8:	00000506 	br	290f0 <_malloc_r+0x50>
   290dc:	8800040e 	bge	r17,zero,290f0 <_malloc_r+0x50>
   290e0:	00800304 	movi	r2,12
   290e4:	90800015 	stw	r2,0(r18)
   290e8:	0005883a 	mov	r2,zero
   290ec:	00003b06 	br	291dc <_malloc_r+0x13c>
   290f0:	897ffb36 	bltu	r17,r5,290e0 <_gp+0xffff6f90>
   290f4:	008000f4 	movhi	r2,3
   290f8:	10a8a704 	addi	r2,r2,-23908
   290fc:	10c00017 	ldw	r3,0(r2)
   29100:	1009883a 	mov	r4,r2
   29104:	1821883a 	mov	r16,r3
   29108:	80000926 	beq	r16,zero,29130 <_malloc_r+0x90>
   2910c:	80800017 	ldw	r2,0(r16)
   29110:	1445c83a 	sub	r2,r2,r17
   29114:	10001516 	blt	r2,zero,2916c <_malloc_r+0xcc>
   29118:	014002c4 	movi	r5,11
   2911c:	28800d2e 	bgeu	r5,r2,29154 <_malloc_r+0xb4>
   29120:	80800015 	stw	r2,0(r16)
   29124:	80a1883a 	add	r16,r16,r2
   29128:	84400015 	stw	r17,0(r16)
   2912c:	8000221e 	bne	r16,zero,291b8 <_malloc_r+0x118>
   29130:	040000f4 	movhi	r16,3
   29134:	8428a604 	addi	r16,r16,-23912
   29138:	80800017 	ldw	r2,0(r16)
   2913c:	10000e1e 	bne	r2,zero,29178 <_malloc_r+0xd8>
   29140:	000b883a 	mov	r5,zero
   29144:	9009883a 	mov	r4,r18
   29148:	00293140 	call	29314 <_sbrk_r>
   2914c:	80800015 	stw	r2,0(r16)
   29150:	00000906 	br	29178 <_malloc_r+0xd8>
   29154:	80800117 	ldw	r2,4(r16)
   29158:	1c00021e 	bne	r3,r16,29164 <_malloc_r+0xc4>
   2915c:	20800015 	stw	r2,0(r4)
   29160:	00001506 	br	291b8 <_malloc_r+0x118>
   29164:	18800115 	stw	r2,4(r3)
   29168:	00001306 	br	291b8 <_malloc_r+0x118>
   2916c:	8007883a 	mov	r3,r16
   29170:	84000117 	ldw	r16,4(r16)
   29174:	003fe406 	br	29108 <_gp+0xffff6fb8>
   29178:	880b883a 	mov	r5,r17
   2917c:	9009883a 	mov	r4,r18
   29180:	00293140 	call	29314 <_sbrk_r>
   29184:	04ffffc4 	movi	r19,-1
   29188:	14ffd526 	beq	r2,r19,290e0 <_gp+0xffff6f90>
   2918c:	140000c4 	addi	r16,r2,3
   29190:	00ffff04 	movi	r3,-4
   29194:	80e0703a 	and	r16,r16,r3
   29198:	1400021e 	bne	r2,r16,291a4 <_malloc_r+0x104>
   2919c:	84400015 	stw	r17,0(r16)
   291a0:	00000506 	br	291b8 <_malloc_r+0x118>
   291a4:	808bc83a 	sub	r5,r16,r2
   291a8:	9009883a 	mov	r4,r18
   291ac:	00293140 	call	29314 <_sbrk_r>
   291b0:	14fffa1e 	bne	r2,r19,2919c <_gp+0xffff704c>
   291b4:	003fca06 	br	290e0 <_gp+0xffff6f90>
   291b8:	810002c4 	addi	r4,r16,11
   291bc:	00bffe04 	movi	r2,-8
   291c0:	80c00104 	addi	r3,r16,4
   291c4:	2084703a 	and	r2,r4,r2
   291c8:	10c7c83a 	sub	r3,r2,r3
   291cc:	18000326 	beq	r3,zero,291dc <_malloc_r+0x13c>
   291d0:	80e1883a 	add	r16,r16,r3
   291d4:	00c7c83a 	sub	r3,zero,r3
   291d8:	80c00015 	stw	r3,0(r16)
   291dc:	dfc00417 	ldw	ra,16(sp)
   291e0:	dcc00317 	ldw	r19,12(sp)
   291e4:	dc800217 	ldw	r18,8(sp)
   291e8:	dc400117 	ldw	r17,4(sp)
   291ec:	dc000017 	ldw	r16,0(sp)
   291f0:	dec00504 	addi	sp,sp,20
   291f4:	f800283a 	ret

000291f8 <_printf_r>:
   291f8:	defffd04 	addi	sp,sp,-12
   291fc:	dfc00015 	stw	ra,0(sp)
   29200:	d9800115 	stw	r6,4(sp)
   29204:	d9c00215 	stw	r7,8(sp)
   29208:	20c00217 	ldw	r3,8(r4)
   2920c:	018000f4 	movhi	r6,3
   29210:	31a64d04 	addi	r6,r6,-26316
   29214:	19800115 	stw	r6,4(r3)
   29218:	280d883a 	mov	r6,r5
   2921c:	21400217 	ldw	r5,8(r4)
   29220:	d9c00104 	addi	r7,sp,4
   29224:	00293ec0 	call	293ec <___vfprintf_internal_r>
   29228:	dfc00017 	ldw	ra,0(sp)
   2922c:	dec00304 	addi	sp,sp,12
   29230:	f800283a 	ret

00029234 <printf>:
   29234:	defffc04 	addi	sp,sp,-16
   29238:	dfc00015 	stw	ra,0(sp)
   2923c:	d9400115 	stw	r5,4(sp)
   29240:	d9800215 	stw	r6,8(sp)
   29244:	d9c00315 	stw	r7,12(sp)
   29248:	008000f4 	movhi	r2,3
   2924c:	10a85504 	addi	r2,r2,-24236
   29250:	10800017 	ldw	r2,0(r2)
   29254:	014000f4 	movhi	r5,3
   29258:	29664d04 	addi	r5,r5,-26316
   2925c:	10c00217 	ldw	r3,8(r2)
   29260:	d9800104 	addi	r6,sp,4
   29264:	19400115 	stw	r5,4(r3)
   29268:	200b883a 	mov	r5,r4
   2926c:	11000217 	ldw	r4,8(r2)
   29270:	00299180 	call	29918 <__vfprintf_internal>
   29274:	dfc00017 	ldw	ra,0(sp)
   29278:	dec00404 	addi	sp,sp,16
   2927c:	f800283a 	ret

00029280 <_puts_r>:
   29280:	defffd04 	addi	sp,sp,-12
   29284:	dc000015 	stw	r16,0(sp)
   29288:	2021883a 	mov	r16,r4
   2928c:	2809883a 	mov	r4,r5
   29290:	dfc00215 	stw	ra,8(sp)
   29294:	dc400115 	stw	r17,4(sp)
   29298:	2823883a 	mov	r17,r5
   2929c:	00293640 	call	29364 <strlen>
   292a0:	81400217 	ldw	r5,8(r16)
   292a4:	010000f4 	movhi	r4,3
   292a8:	21264d04 	addi	r4,r4,-26316
   292ac:	29000115 	stw	r4,4(r5)
   292b0:	100f883a 	mov	r7,r2
   292b4:	880d883a 	mov	r6,r17
   292b8:	8009883a 	mov	r4,r16
   292bc:	00299340 	call	29934 <__sfvwrite_small_dev>
   292c0:	00ffffc4 	movi	r3,-1
   292c4:	10c00926 	beq	r2,r3,292ec <_puts_r+0x6c>
   292c8:	81400217 	ldw	r5,8(r16)
   292cc:	018000f4 	movhi	r6,3
   292d0:	01c00044 	movi	r7,1
   292d4:	28800117 	ldw	r2,4(r5)
   292d8:	31a81b04 	addi	r6,r6,-24468
   292dc:	8009883a 	mov	r4,r16
   292e0:	103ee83a 	callr	r2
   292e4:	10bfffe0 	cmpeqi	r2,r2,-1
   292e8:	0085c83a 	sub	r2,zero,r2
   292ec:	dfc00217 	ldw	ra,8(sp)
   292f0:	dc400117 	ldw	r17,4(sp)
   292f4:	dc000017 	ldw	r16,0(sp)
   292f8:	dec00304 	addi	sp,sp,12
   292fc:	f800283a 	ret

00029300 <puts>:
   29300:	008000f4 	movhi	r2,3
   29304:	10a85504 	addi	r2,r2,-24236
   29308:	200b883a 	mov	r5,r4
   2930c:	11000017 	ldw	r4,0(r2)
   29310:	00292801 	jmpi	29280 <_puts_r>

00029314 <_sbrk_r>:
   29314:	defffd04 	addi	sp,sp,-12
   29318:	dc000015 	stw	r16,0(sp)
   2931c:	040000f4 	movhi	r16,3
   29320:	dc400115 	stw	r17,4(sp)
   29324:	8428a804 	addi	r16,r16,-23904
   29328:	2023883a 	mov	r17,r4
   2932c:	2809883a 	mov	r4,r5
   29330:	dfc00215 	stw	ra,8(sp)
   29334:	80000015 	stw	zero,0(r16)
   29338:	0029d040 	call	29d04 <sbrk>
   2933c:	00ffffc4 	movi	r3,-1
   29340:	10c0031e 	bne	r2,r3,29350 <_sbrk_r+0x3c>
   29344:	80c00017 	ldw	r3,0(r16)
   29348:	18000126 	beq	r3,zero,29350 <_sbrk_r+0x3c>
   2934c:	88c00015 	stw	r3,0(r17)
   29350:	dfc00217 	ldw	ra,8(sp)
   29354:	dc400117 	ldw	r17,4(sp)
   29358:	dc000017 	ldw	r16,0(sp)
   2935c:	dec00304 	addi	sp,sp,12
   29360:	f800283a 	ret

00029364 <strlen>:
   29364:	2005883a 	mov	r2,r4
   29368:	10c00007 	ldb	r3,0(r2)
   2936c:	18000226 	beq	r3,zero,29378 <strlen+0x14>
   29370:	10800044 	addi	r2,r2,1
   29374:	003ffc06 	br	29368 <_gp+0xffff7218>
   29378:	1105c83a 	sub	r2,r2,r4
   2937c:	f800283a 	ret

00029380 <print_repeat>:
   29380:	defffb04 	addi	sp,sp,-20
   29384:	dc800315 	stw	r18,12(sp)
   29388:	dc400215 	stw	r17,8(sp)
   2938c:	dc000115 	stw	r16,4(sp)
   29390:	dfc00415 	stw	ra,16(sp)
   29394:	2025883a 	mov	r18,r4
   29398:	2823883a 	mov	r17,r5
   2939c:	d9800005 	stb	r6,0(sp)
   293a0:	3821883a 	mov	r16,r7
   293a4:	04000a0e 	bge	zero,r16,293d0 <print_repeat+0x50>
   293a8:	88800117 	ldw	r2,4(r17)
   293ac:	01c00044 	movi	r7,1
   293b0:	d80d883a 	mov	r6,sp
   293b4:	880b883a 	mov	r5,r17
   293b8:	9009883a 	mov	r4,r18
   293bc:	103ee83a 	callr	r2
   293c0:	843fffc4 	addi	r16,r16,-1
   293c4:	103ff726 	beq	r2,zero,293a4 <_gp+0xffff7254>
   293c8:	00bfffc4 	movi	r2,-1
   293cc:	00000106 	br	293d4 <print_repeat+0x54>
   293d0:	0005883a 	mov	r2,zero
   293d4:	dfc00417 	ldw	ra,16(sp)
   293d8:	dc800317 	ldw	r18,12(sp)
   293dc:	dc400217 	ldw	r17,8(sp)
   293e0:	dc000117 	ldw	r16,4(sp)
   293e4:	dec00504 	addi	sp,sp,20
   293e8:	f800283a 	ret

000293ec <___vfprintf_internal_r>:
   293ec:	deffe504 	addi	sp,sp,-108
   293f0:	d8c00804 	addi	r3,sp,32
   293f4:	ddc01815 	stw	r23,96(sp)
   293f8:	dd801715 	stw	r22,92(sp)
   293fc:	dd401615 	stw	r21,88(sp)
   29400:	dd001515 	stw	r20,84(sp)
   29404:	dcc01415 	stw	r19,80(sp)
   29408:	dc801315 	stw	r18,76(sp)
   2940c:	dc401215 	stw	r17,72(sp)
   29410:	dc001115 	stw	r16,68(sp)
   29414:	dfc01a15 	stw	ra,104(sp)
   29418:	df001915 	stw	fp,100(sp)
   2941c:	2029883a 	mov	r20,r4
   29420:	2823883a 	mov	r17,r5
   29424:	382d883a 	mov	r22,r7
   29428:	d9800f15 	stw	r6,60(sp)
   2942c:	0021883a 	mov	r16,zero
   29430:	d8000e15 	stw	zero,56(sp)
   29434:	d8000a15 	stw	zero,40(sp)
   29438:	002b883a 	mov	r21,zero
   2943c:	0027883a 	mov	r19,zero
   29440:	0025883a 	mov	r18,zero
   29444:	d8000c15 	stw	zero,48(sp)
   29448:	d8000b15 	stw	zero,44(sp)
   2944c:	002f883a 	mov	r23,zero
   29450:	d8c00915 	stw	r3,36(sp)
   29454:	d8c00f17 	ldw	r3,60(sp)
   29458:	19000003 	ldbu	r4,0(r3)
   2945c:	20803fcc 	andi	r2,r4,255
   29460:	1080201c 	xori	r2,r2,128
   29464:	10bfe004 	addi	r2,r2,-128
   29468:	10011e26 	beq	r2,zero,298e4 <___vfprintf_internal_r+0x4f8>
   2946c:	00c00044 	movi	r3,1
   29470:	b8c01426 	beq	r23,r3,294c4 <___vfprintf_internal_r+0xd8>
   29474:	1dc00216 	blt	r3,r23,29480 <___vfprintf_internal_r+0x94>
   29478:	b8000626 	beq	r23,zero,29494 <___vfprintf_internal_r+0xa8>
   2947c:	00011506 	br	298d4 <___vfprintf_internal_r+0x4e8>
   29480:	01400084 	movi	r5,2
   29484:	b9401d26 	beq	r23,r5,294fc <___vfprintf_internal_r+0x110>
   29488:	014000c4 	movi	r5,3
   2948c:	b9402b26 	beq	r23,r5,2953c <___vfprintf_internal_r+0x150>
   29490:	00011006 	br	298d4 <___vfprintf_internal_r+0x4e8>
   29494:	01400944 	movi	r5,37
   29498:	1140fc26 	beq	r2,r5,2988c <___vfprintf_internal_r+0x4a0>
   2949c:	88800117 	ldw	r2,4(r17)
   294a0:	d9000005 	stb	r4,0(sp)
   294a4:	01c00044 	movi	r7,1
   294a8:	d80d883a 	mov	r6,sp
   294ac:	880b883a 	mov	r5,r17
   294b0:	a009883a 	mov	r4,r20
   294b4:	103ee83a 	callr	r2
   294b8:	1000d81e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   294bc:	84000044 	addi	r16,r16,1
   294c0:	00010406 	br	298d4 <___vfprintf_internal_r+0x4e8>
   294c4:	01400c04 	movi	r5,48
   294c8:	1140fa26 	beq	r2,r5,298b4 <___vfprintf_internal_r+0x4c8>
   294cc:	01400944 	movi	r5,37
   294d0:	11400a1e 	bne	r2,r5,294fc <___vfprintf_internal_r+0x110>
   294d4:	d8800005 	stb	r2,0(sp)
   294d8:	88800117 	ldw	r2,4(r17)
   294dc:	b80f883a 	mov	r7,r23
   294e0:	d80d883a 	mov	r6,sp
   294e4:	880b883a 	mov	r5,r17
   294e8:	a009883a 	mov	r4,r20
   294ec:	103ee83a 	callr	r2
   294f0:	1000ca1e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   294f4:	84000044 	addi	r16,r16,1
   294f8:	0000f506 	br	298d0 <___vfprintf_internal_r+0x4e4>
   294fc:	25fff404 	addi	r23,r4,-48
   29500:	bdc03fcc 	andi	r23,r23,255
   29504:	00c00244 	movi	r3,9
   29508:	1dc00936 	bltu	r3,r23,29530 <___vfprintf_internal_r+0x144>
   2950c:	00bfffc4 	movi	r2,-1
   29510:	90800426 	beq	r18,r2,29524 <___vfprintf_internal_r+0x138>
   29514:	01400284 	movi	r5,10
   29518:	9009883a 	mov	r4,r18
   2951c:	0028f440 	call	28f44 <__mulsi3>
   29520:	00000106 	br	29528 <___vfprintf_internal_r+0x13c>
   29524:	0005883a 	mov	r2,zero
   29528:	b8a5883a 	add	r18,r23,r2
   2952c:	0000e206 	br	298b8 <___vfprintf_internal_r+0x4cc>
   29530:	01400b84 	movi	r5,46
   29534:	1140e426 	beq	r2,r5,298c8 <___vfprintf_internal_r+0x4dc>
   29538:	05c00084 	movi	r23,2
   2953c:	213ff404 	addi	r4,r4,-48
   29540:	27003fcc 	andi	fp,r4,255
   29544:	00c00244 	movi	r3,9
   29548:	1f000936 	bltu	r3,fp,29570 <___vfprintf_internal_r+0x184>
   2954c:	00bfffc4 	movi	r2,-1
   29550:	98800426 	beq	r19,r2,29564 <___vfprintf_internal_r+0x178>
   29554:	01400284 	movi	r5,10
   29558:	9809883a 	mov	r4,r19
   2955c:	0028f440 	call	28f44 <__mulsi3>
   29560:	00000106 	br	29568 <___vfprintf_internal_r+0x17c>
   29564:	0005883a 	mov	r2,zero
   29568:	e0a7883a 	add	r19,fp,r2
   2956c:	0000d906 	br	298d4 <___vfprintf_internal_r+0x4e8>
   29570:	00c01b04 	movi	r3,108
   29574:	10c0d226 	beq	r2,r3,298c0 <___vfprintf_internal_r+0x4d4>
   29578:	013fffc4 	movi	r4,-1
   2957c:	99000226 	beq	r19,r4,29588 <___vfprintf_internal_r+0x19c>
   29580:	d8000b15 	stw	zero,44(sp)
   29584:	00000106 	br	2958c <___vfprintf_internal_r+0x1a0>
   29588:	04c00044 	movi	r19,1
   2958c:	01001a44 	movi	r4,105
   29590:	11001626 	beq	r2,r4,295ec <___vfprintf_internal_r+0x200>
   29594:	20800916 	blt	r4,r2,295bc <___vfprintf_internal_r+0x1d0>
   29598:	010018c4 	movi	r4,99
   2959c:	11008826 	beq	r2,r4,297c0 <___vfprintf_internal_r+0x3d4>
   295a0:	01001904 	movi	r4,100
   295a4:	11001126 	beq	r2,r4,295ec <___vfprintf_internal_r+0x200>
   295a8:	01001604 	movi	r4,88
   295ac:	1100c81e 	bne	r2,r4,298d0 <___vfprintf_internal_r+0x4e4>
   295b0:	00c00044 	movi	r3,1
   295b4:	d8c00e15 	stw	r3,56(sp)
   295b8:	00001506 	br	29610 <___vfprintf_internal_r+0x224>
   295bc:	01001cc4 	movi	r4,115
   295c0:	11009826 	beq	r2,r4,29824 <___vfprintf_internal_r+0x438>
   295c4:	20800416 	blt	r4,r2,295d8 <___vfprintf_internal_r+0x1ec>
   295c8:	01001bc4 	movi	r4,111
   295cc:	1100c01e 	bne	r2,r4,298d0 <___vfprintf_internal_r+0x4e4>
   295d0:	05400204 	movi	r21,8
   295d4:	00000f06 	br	29614 <___vfprintf_internal_r+0x228>
   295d8:	01001d44 	movi	r4,117
   295dc:	11000d26 	beq	r2,r4,29614 <___vfprintf_internal_r+0x228>
   295e0:	01001e04 	movi	r4,120
   295e4:	11000a26 	beq	r2,r4,29610 <___vfprintf_internal_r+0x224>
   295e8:	0000b906 	br	298d0 <___vfprintf_internal_r+0x4e4>
   295ec:	d8c00a17 	ldw	r3,40(sp)
   295f0:	b7000104 	addi	fp,r22,4
   295f4:	18000726 	beq	r3,zero,29614 <___vfprintf_internal_r+0x228>
   295f8:	df000d15 	stw	fp,52(sp)
   295fc:	b5c00017 	ldw	r23,0(r22)
   29600:	b800080e 	bge	r23,zero,29624 <___vfprintf_internal_r+0x238>
   29604:	05efc83a 	sub	r23,zero,r23
   29608:	02400044 	movi	r9,1
   2960c:	00000606 	br	29628 <___vfprintf_internal_r+0x23c>
   29610:	05400404 	movi	r21,16
   29614:	b0c00104 	addi	r3,r22,4
   29618:	d8c00d15 	stw	r3,52(sp)
   2961c:	b5c00017 	ldw	r23,0(r22)
   29620:	d8000a15 	stw	zero,40(sp)
   29624:	0013883a 	mov	r9,zero
   29628:	d839883a 	mov	fp,sp
   2962c:	b8001726 	beq	r23,zero,2968c <___vfprintf_internal_r+0x2a0>
   29630:	a80b883a 	mov	r5,r21
   29634:	b809883a 	mov	r4,r23
   29638:	da401015 	stw	r9,64(sp)
   2963c:	0029b3c0 	call	29b3c <__udivsi3>
   29640:	a80b883a 	mov	r5,r21
   29644:	1009883a 	mov	r4,r2
   29648:	102d883a 	mov	r22,r2
   2964c:	0028f440 	call	28f44 <__mulsi3>
   29650:	b885c83a 	sub	r2,r23,r2
   29654:	00c00244 	movi	r3,9
   29658:	da401017 	ldw	r9,64(sp)
   2965c:	18800216 	blt	r3,r2,29668 <___vfprintf_internal_r+0x27c>
   29660:	10800c04 	addi	r2,r2,48
   29664:	00000506 	br	2967c <___vfprintf_internal_r+0x290>
   29668:	d8c00e17 	ldw	r3,56(sp)
   2966c:	18000226 	beq	r3,zero,29678 <___vfprintf_internal_r+0x28c>
   29670:	10800dc4 	addi	r2,r2,55
   29674:	00000106 	br	2967c <___vfprintf_internal_r+0x290>
   29678:	108015c4 	addi	r2,r2,87
   2967c:	e0800005 	stb	r2,0(fp)
   29680:	b02f883a 	mov	r23,r22
   29684:	e7000044 	addi	fp,fp,1
   29688:	003fe806 	br	2962c <_gp+0xffff74dc>
   2968c:	e6efc83a 	sub	r23,fp,sp
   29690:	9dc5c83a 	sub	r2,r19,r23
   29694:	0080090e 	bge	zero,r2,296bc <___vfprintf_internal_r+0x2d0>
   29698:	e085883a 	add	r2,fp,r2
   2969c:	01400c04 	movi	r5,48
   296a0:	d8c00917 	ldw	r3,36(sp)
   296a4:	e009883a 	mov	r4,fp
   296a8:	e0c0032e 	bgeu	fp,r3,296b8 <___vfprintf_internal_r+0x2cc>
   296ac:	e7000044 	addi	fp,fp,1
   296b0:	21400005 	stb	r5,0(r4)
   296b4:	e0bffa1e 	bne	fp,r2,296a0 <_gp+0xffff7550>
   296b8:	e6efc83a 	sub	r23,fp,sp
   296bc:	d8c00b17 	ldw	r3,44(sp)
   296c0:	4dd1883a 	add	r8,r9,r23
   296c4:	922dc83a 	sub	r22,r18,r8
   296c8:	18001626 	beq	r3,zero,29724 <___vfprintf_internal_r+0x338>
   296cc:	48000a26 	beq	r9,zero,296f8 <___vfprintf_internal_r+0x30c>
   296d0:	00800b44 	movi	r2,45
   296d4:	d8800805 	stb	r2,32(sp)
   296d8:	88800117 	ldw	r2,4(r17)
   296dc:	01c00044 	movi	r7,1
   296e0:	d9800804 	addi	r6,sp,32
   296e4:	880b883a 	mov	r5,r17
   296e8:	a009883a 	mov	r4,r20
   296ec:	103ee83a 	callr	r2
   296f0:	10004a1e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   296f4:	84000044 	addi	r16,r16,1
   296f8:	0580070e 	bge	zero,r22,29718 <___vfprintf_internal_r+0x32c>
   296fc:	b00f883a 	mov	r7,r22
   29700:	01800c04 	movi	r6,48
   29704:	880b883a 	mov	r5,r17
   29708:	a009883a 	mov	r4,r20
   2970c:	00293800 	call	29380 <print_repeat>
   29710:	1000421e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   29714:	85a1883a 	add	r16,r16,r22
   29718:	e02d883a 	mov	r22,fp
   2971c:	bf2fc83a 	sub	r23,r23,fp
   29720:	00002006 	br	297a4 <___vfprintf_internal_r+0x3b8>
   29724:	0580090e 	bge	zero,r22,2974c <___vfprintf_internal_r+0x360>
   29728:	b00f883a 	mov	r7,r22
   2972c:	01800804 	movi	r6,32
   29730:	880b883a 	mov	r5,r17
   29734:	a009883a 	mov	r4,r20
   29738:	da401015 	stw	r9,64(sp)
   2973c:	00293800 	call	29380 <print_repeat>
   29740:	da401017 	ldw	r9,64(sp)
   29744:	1000351e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   29748:	85a1883a 	add	r16,r16,r22
   2974c:	483ff226 	beq	r9,zero,29718 <_gp+0xffff75c8>
   29750:	00800b44 	movi	r2,45
   29754:	d8800805 	stb	r2,32(sp)
   29758:	88800117 	ldw	r2,4(r17)
   2975c:	01c00044 	movi	r7,1
   29760:	d9800804 	addi	r6,sp,32
   29764:	880b883a 	mov	r5,r17
   29768:	a009883a 	mov	r4,r20
   2976c:	103ee83a 	callr	r2
   29770:	10002a1e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   29774:	84000044 	addi	r16,r16,1
   29778:	003fe706 	br	29718 <_gp+0xffff75c8>
   2977c:	b5bfffc4 	addi	r22,r22,-1
   29780:	b0800003 	ldbu	r2,0(r22)
   29784:	01c00044 	movi	r7,1
   29788:	d9800804 	addi	r6,sp,32
   2978c:	d8800805 	stb	r2,32(sp)
   29790:	88800117 	ldw	r2,4(r17)
   29794:	880b883a 	mov	r5,r17
   29798:	a009883a 	mov	r4,r20
   2979c:	103ee83a 	callr	r2
   297a0:	10001e1e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   297a4:	8585c83a 	sub	r2,r16,r22
   297a8:	b5c9883a 	add	r4,r22,r23
   297ac:	e085883a 	add	r2,fp,r2
   297b0:	013ff216 	blt	zero,r4,2977c <_gp+0xffff762c>
   297b4:	1021883a 	mov	r16,r2
   297b8:	dd800d17 	ldw	r22,52(sp)
   297bc:	00004406 	br	298d0 <___vfprintf_internal_r+0x4e4>
   297c0:	00800044 	movi	r2,1
   297c4:	1480080e 	bge	r2,r18,297e8 <___vfprintf_internal_r+0x3fc>
   297c8:	95ffffc4 	addi	r23,r18,-1
   297cc:	b80f883a 	mov	r7,r23
   297d0:	01800804 	movi	r6,32
   297d4:	880b883a 	mov	r5,r17
   297d8:	a009883a 	mov	r4,r20
   297dc:	00293800 	call	29380 <print_repeat>
   297e0:	10000e1e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   297e4:	85e1883a 	add	r16,r16,r23
   297e8:	b0800017 	ldw	r2,0(r22)
   297ec:	01c00044 	movi	r7,1
   297f0:	d80d883a 	mov	r6,sp
   297f4:	d8800005 	stb	r2,0(sp)
   297f8:	88800117 	ldw	r2,4(r17)
   297fc:	880b883a 	mov	r5,r17
   29800:	a009883a 	mov	r4,r20
   29804:	b5c00104 	addi	r23,r22,4
   29808:	103ee83a 	callr	r2
   2980c:	1000031e 	bne	r2,zero,2981c <___vfprintf_internal_r+0x430>
   29810:	84000044 	addi	r16,r16,1
   29814:	b82d883a 	mov	r22,r23
   29818:	00002d06 	br	298d0 <___vfprintf_internal_r+0x4e4>
   2981c:	00bfffc4 	movi	r2,-1
   29820:	00003106 	br	298e8 <___vfprintf_internal_r+0x4fc>
   29824:	b5c00017 	ldw	r23,0(r22)
   29828:	b7000104 	addi	fp,r22,4
   2982c:	b809883a 	mov	r4,r23
   29830:	00293640 	call	29364 <strlen>
   29834:	9091c83a 	sub	r8,r18,r2
   29838:	102d883a 	mov	r22,r2
   2983c:	0200090e 	bge	zero,r8,29864 <___vfprintf_internal_r+0x478>
   29840:	400f883a 	mov	r7,r8
   29844:	01800804 	movi	r6,32
   29848:	880b883a 	mov	r5,r17
   2984c:	a009883a 	mov	r4,r20
   29850:	da001015 	stw	r8,64(sp)
   29854:	00293800 	call	29380 <print_repeat>
   29858:	da001017 	ldw	r8,64(sp)
   2985c:	103fef1e 	bne	r2,zero,2981c <_gp+0xffff76cc>
   29860:	8221883a 	add	r16,r16,r8
   29864:	88800117 	ldw	r2,4(r17)
   29868:	b00f883a 	mov	r7,r22
   2986c:	b80d883a 	mov	r6,r23
   29870:	880b883a 	mov	r5,r17
   29874:	a009883a 	mov	r4,r20
   29878:	103ee83a 	callr	r2
   2987c:	103fe71e 	bne	r2,zero,2981c <_gp+0xffff76cc>
   29880:	85a1883a 	add	r16,r16,r22
   29884:	e02d883a 	mov	r22,fp
   29888:	00001106 	br	298d0 <___vfprintf_internal_r+0x4e4>
   2988c:	00c00044 	movi	r3,1
   29890:	04ffffc4 	movi	r19,-1
   29894:	d8000e15 	stw	zero,56(sp)
   29898:	d8c00a15 	stw	r3,40(sp)
   2989c:	05400284 	movi	r21,10
   298a0:	9825883a 	mov	r18,r19
   298a4:	d8000c15 	stw	zero,48(sp)
   298a8:	d8000b15 	stw	zero,44(sp)
   298ac:	182f883a 	mov	r23,r3
   298b0:	00000806 	br	298d4 <___vfprintf_internal_r+0x4e8>
   298b4:	ddc00b15 	stw	r23,44(sp)
   298b8:	05c00084 	movi	r23,2
   298bc:	00000506 	br	298d4 <___vfprintf_internal_r+0x4e8>
   298c0:	00c00044 	movi	r3,1
   298c4:	d8c00c15 	stw	r3,48(sp)
   298c8:	05c000c4 	movi	r23,3
   298cc:	00000106 	br	298d4 <___vfprintf_internal_r+0x4e8>
   298d0:	002f883a 	mov	r23,zero
   298d4:	d8c00f17 	ldw	r3,60(sp)
   298d8:	18c00044 	addi	r3,r3,1
   298dc:	d8c00f15 	stw	r3,60(sp)
   298e0:	003edc06 	br	29454 <_gp+0xffff7304>
   298e4:	8005883a 	mov	r2,r16
   298e8:	dfc01a17 	ldw	ra,104(sp)
   298ec:	df001917 	ldw	fp,100(sp)
   298f0:	ddc01817 	ldw	r23,96(sp)
   298f4:	dd801717 	ldw	r22,92(sp)
   298f8:	dd401617 	ldw	r21,88(sp)
   298fc:	dd001517 	ldw	r20,84(sp)
   29900:	dcc01417 	ldw	r19,80(sp)
   29904:	dc801317 	ldw	r18,76(sp)
   29908:	dc401217 	ldw	r17,72(sp)
   2990c:	dc001117 	ldw	r16,68(sp)
   29910:	dec01b04 	addi	sp,sp,108
   29914:	f800283a 	ret

00029918 <__vfprintf_internal>:
   29918:	008000f4 	movhi	r2,3
   2991c:	10a85504 	addi	r2,r2,-24236
   29920:	300f883a 	mov	r7,r6
   29924:	280d883a 	mov	r6,r5
   29928:	200b883a 	mov	r5,r4
   2992c:	11000017 	ldw	r4,0(r2)
   29930:	00293ec1 	jmpi	293ec <___vfprintf_internal_r>

00029934 <__sfvwrite_small_dev>:
   29934:	2880000b 	ldhu	r2,0(r5)
   29938:	1080020c 	andi	r2,r2,8
   2993c:	10002126 	beq	r2,zero,299c4 <__sfvwrite_small_dev+0x90>
   29940:	2880008f 	ldh	r2,2(r5)
   29944:	defffa04 	addi	sp,sp,-24
   29948:	dc000015 	stw	r16,0(sp)
   2994c:	dfc00515 	stw	ra,20(sp)
   29950:	dd000415 	stw	r20,16(sp)
   29954:	dcc00315 	stw	r19,12(sp)
   29958:	dc800215 	stw	r18,8(sp)
   2995c:	dc400115 	stw	r17,4(sp)
   29960:	2821883a 	mov	r16,r5
   29964:	10001216 	blt	r2,zero,299b0 <__sfvwrite_small_dev+0x7c>
   29968:	2027883a 	mov	r19,r4
   2996c:	3025883a 	mov	r18,r6
   29970:	3823883a 	mov	r17,r7
   29974:	05010004 	movi	r20,1024
   29978:	04400b0e 	bge	zero,r17,299a8 <__sfvwrite_small_dev+0x74>
   2997c:	880f883a 	mov	r7,r17
   29980:	a440010e 	bge	r20,r17,29988 <__sfvwrite_small_dev+0x54>
   29984:	01c10004 	movi	r7,1024
   29988:	8140008f 	ldh	r5,2(r16)
   2998c:	900d883a 	mov	r6,r18
   29990:	9809883a 	mov	r4,r19
   29994:	00299ec0 	call	299ec <_write_r>
   29998:	0080050e 	bge	zero,r2,299b0 <__sfvwrite_small_dev+0x7c>
   2999c:	88a3c83a 	sub	r17,r17,r2
   299a0:	90a5883a 	add	r18,r18,r2
   299a4:	003ff406 	br	29978 <_gp+0xffff7828>
   299a8:	0005883a 	mov	r2,zero
   299ac:	00000706 	br	299cc <__sfvwrite_small_dev+0x98>
   299b0:	8080000b 	ldhu	r2,0(r16)
   299b4:	10801014 	ori	r2,r2,64
   299b8:	8080000d 	sth	r2,0(r16)
   299bc:	00bfffc4 	movi	r2,-1
   299c0:	00000206 	br	299cc <__sfvwrite_small_dev+0x98>
   299c4:	00bfffc4 	movi	r2,-1
   299c8:	f800283a 	ret
   299cc:	dfc00517 	ldw	ra,20(sp)
   299d0:	dd000417 	ldw	r20,16(sp)
   299d4:	dcc00317 	ldw	r19,12(sp)
   299d8:	dc800217 	ldw	r18,8(sp)
   299dc:	dc400117 	ldw	r17,4(sp)
   299e0:	dc000017 	ldw	r16,0(sp)
   299e4:	dec00604 	addi	sp,sp,24
   299e8:	f800283a 	ret

000299ec <_write_r>:
   299ec:	defffd04 	addi	sp,sp,-12
   299f0:	dc000015 	stw	r16,0(sp)
   299f4:	040000f4 	movhi	r16,3
   299f8:	dc400115 	stw	r17,4(sp)
   299fc:	8428a804 	addi	r16,r16,-23904
   29a00:	2023883a 	mov	r17,r4
   29a04:	2809883a 	mov	r4,r5
   29a08:	300b883a 	mov	r5,r6
   29a0c:	380d883a 	mov	r6,r7
   29a10:	dfc00215 	stw	ra,8(sp)
   29a14:	80000015 	stw	zero,0(r16)
   29a18:	0029d500 	call	29d50 <write>
   29a1c:	00ffffc4 	movi	r3,-1
   29a20:	10c0031e 	bne	r2,r3,29a30 <_write_r+0x44>
   29a24:	80c00017 	ldw	r3,0(r16)
   29a28:	18000126 	beq	r3,zero,29a30 <_write_r+0x44>
   29a2c:	88c00015 	stw	r3,0(r17)
   29a30:	dfc00217 	ldw	ra,8(sp)
   29a34:	dc400117 	ldw	r17,4(sp)
   29a38:	dc000017 	ldw	r16,0(sp)
   29a3c:	dec00304 	addi	sp,sp,12
   29a40:	f800283a 	ret

00029a44 <__divsi3>:
   29a44:	20001b16 	blt	r4,zero,29ab4 <__divsi3+0x70>
   29a48:	000f883a 	mov	r7,zero
   29a4c:	28001616 	blt	r5,zero,29aa8 <__divsi3+0x64>
   29a50:	200d883a 	mov	r6,r4
   29a54:	29001a2e 	bgeu	r5,r4,29ac0 <__divsi3+0x7c>
   29a58:	00800804 	movi	r2,32
   29a5c:	00c00044 	movi	r3,1
   29a60:	00000106 	br	29a68 <__divsi3+0x24>
   29a64:	10000d26 	beq	r2,zero,29a9c <__divsi3+0x58>
   29a68:	294b883a 	add	r5,r5,r5
   29a6c:	10bfffc4 	addi	r2,r2,-1
   29a70:	18c7883a 	add	r3,r3,r3
   29a74:	293ffb36 	bltu	r5,r4,29a64 <_gp+0xffff7914>
   29a78:	0005883a 	mov	r2,zero
   29a7c:	18000726 	beq	r3,zero,29a9c <__divsi3+0x58>
   29a80:	0005883a 	mov	r2,zero
   29a84:	31400236 	bltu	r6,r5,29a90 <__divsi3+0x4c>
   29a88:	314dc83a 	sub	r6,r6,r5
   29a8c:	10c4b03a 	or	r2,r2,r3
   29a90:	1806d07a 	srli	r3,r3,1
   29a94:	280ad07a 	srli	r5,r5,1
   29a98:	183ffa1e 	bne	r3,zero,29a84 <_gp+0xffff7934>
   29a9c:	38000126 	beq	r7,zero,29aa4 <__divsi3+0x60>
   29aa0:	0085c83a 	sub	r2,zero,r2
   29aa4:	f800283a 	ret
   29aa8:	014bc83a 	sub	r5,zero,r5
   29aac:	39c0005c 	xori	r7,r7,1
   29ab0:	003fe706 	br	29a50 <_gp+0xffff7900>
   29ab4:	0109c83a 	sub	r4,zero,r4
   29ab8:	01c00044 	movi	r7,1
   29abc:	003fe306 	br	29a4c <_gp+0xffff78fc>
   29ac0:	00c00044 	movi	r3,1
   29ac4:	003fee06 	br	29a80 <_gp+0xffff7930>

00029ac8 <__modsi3>:
   29ac8:	20001716 	blt	r4,zero,29b28 <__modsi3+0x60>
   29acc:	000f883a 	mov	r7,zero
   29ad0:	2005883a 	mov	r2,r4
   29ad4:	28001216 	blt	r5,zero,29b20 <__modsi3+0x58>
   29ad8:	2900162e 	bgeu	r5,r4,29b34 <__modsi3+0x6c>
   29adc:	01800804 	movi	r6,32
   29ae0:	00c00044 	movi	r3,1
   29ae4:	00000106 	br	29aec <__modsi3+0x24>
   29ae8:	30000a26 	beq	r6,zero,29b14 <__modsi3+0x4c>
   29aec:	294b883a 	add	r5,r5,r5
   29af0:	31bfffc4 	addi	r6,r6,-1
   29af4:	18c7883a 	add	r3,r3,r3
   29af8:	293ffb36 	bltu	r5,r4,29ae8 <_gp+0xffff7998>
   29afc:	18000526 	beq	r3,zero,29b14 <__modsi3+0x4c>
   29b00:	1806d07a 	srli	r3,r3,1
   29b04:	11400136 	bltu	r2,r5,29b0c <__modsi3+0x44>
   29b08:	1145c83a 	sub	r2,r2,r5
   29b0c:	280ad07a 	srli	r5,r5,1
   29b10:	183ffb1e 	bne	r3,zero,29b00 <_gp+0xffff79b0>
   29b14:	38000126 	beq	r7,zero,29b1c <__modsi3+0x54>
   29b18:	0085c83a 	sub	r2,zero,r2
   29b1c:	f800283a 	ret
   29b20:	014bc83a 	sub	r5,zero,r5
   29b24:	003fec06 	br	29ad8 <_gp+0xffff7988>
   29b28:	0109c83a 	sub	r4,zero,r4
   29b2c:	01c00044 	movi	r7,1
   29b30:	003fe706 	br	29ad0 <_gp+0xffff7980>
   29b34:	00c00044 	movi	r3,1
   29b38:	003ff106 	br	29b00 <_gp+0xffff79b0>

00029b3c <__udivsi3>:
   29b3c:	200d883a 	mov	r6,r4
   29b40:	2900152e 	bgeu	r5,r4,29b98 <__udivsi3+0x5c>
   29b44:	28001416 	blt	r5,zero,29b98 <__udivsi3+0x5c>
   29b48:	00800804 	movi	r2,32
   29b4c:	00c00044 	movi	r3,1
   29b50:	00000206 	br	29b5c <__udivsi3+0x20>
   29b54:	10000e26 	beq	r2,zero,29b90 <__udivsi3+0x54>
   29b58:	28000516 	blt	r5,zero,29b70 <__udivsi3+0x34>
   29b5c:	294b883a 	add	r5,r5,r5
   29b60:	10bfffc4 	addi	r2,r2,-1
   29b64:	18c7883a 	add	r3,r3,r3
   29b68:	293ffa36 	bltu	r5,r4,29b54 <_gp+0xffff7a04>
   29b6c:	18000826 	beq	r3,zero,29b90 <__udivsi3+0x54>
   29b70:	0005883a 	mov	r2,zero
   29b74:	31400236 	bltu	r6,r5,29b80 <__udivsi3+0x44>
   29b78:	314dc83a 	sub	r6,r6,r5
   29b7c:	10c4b03a 	or	r2,r2,r3
   29b80:	1806d07a 	srli	r3,r3,1
   29b84:	280ad07a 	srli	r5,r5,1
   29b88:	183ffa1e 	bne	r3,zero,29b74 <_gp+0xffff7a24>
   29b8c:	f800283a 	ret
   29b90:	0005883a 	mov	r2,zero
   29b94:	f800283a 	ret
   29b98:	00c00044 	movi	r3,1
   29b9c:	003ff406 	br	29b70 <_gp+0xffff7a20>

00029ba0 <__umodsi3>:
   29ba0:	2005883a 	mov	r2,r4
   29ba4:	2900122e 	bgeu	r5,r4,29bf0 <__umodsi3+0x50>
   29ba8:	28001116 	blt	r5,zero,29bf0 <__umodsi3+0x50>
   29bac:	01800804 	movi	r6,32
   29bb0:	00c00044 	movi	r3,1
   29bb4:	00000206 	br	29bc0 <__umodsi3+0x20>
   29bb8:	30000c26 	beq	r6,zero,29bec <__umodsi3+0x4c>
   29bbc:	28000516 	blt	r5,zero,29bd4 <__umodsi3+0x34>
   29bc0:	294b883a 	add	r5,r5,r5
   29bc4:	31bfffc4 	addi	r6,r6,-1
   29bc8:	18c7883a 	add	r3,r3,r3
   29bcc:	293ffa36 	bltu	r5,r4,29bb8 <_gp+0xffff7a68>
   29bd0:	18000626 	beq	r3,zero,29bec <__umodsi3+0x4c>
   29bd4:	1806d07a 	srli	r3,r3,1
   29bd8:	11400136 	bltu	r2,r5,29be0 <__umodsi3+0x40>
   29bdc:	1145c83a 	sub	r2,r2,r5
   29be0:	280ad07a 	srli	r5,r5,1
   29be4:	183ffb1e 	bne	r3,zero,29bd4 <_gp+0xffff7a84>
   29be8:	f800283a 	ret
   29bec:	f800283a 	ret
   29bf0:	00c00044 	movi	r3,1
   29bf4:	003ff706 	br	29bd4 <_gp+0xffff7a84>

00029bf8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   29bf8:	deffff04 	addi	sp,sp,-4
   29bfc:	010000f4 	movhi	r4,3
   29c00:	014000f4 	movhi	r5,3
   29c04:	dfc00015 	stw	ra,0(sp)
   29c08:	21281c04 	addi	r4,r4,-24464
   29c0c:	29685904 	addi	r5,r5,-24220

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   29c10:	2140061e 	bne	r4,r5,29c2c <alt_load+0x34>
   29c14:	010000f4 	movhi	r4,3
   29c18:	014000f4 	movhi	r5,3
   29c1c:	21200804 	addi	r4,r4,-32736
   29c20:	29600804 	addi	r5,r5,-32736
   29c24:	2140121e 	bne	r4,r5,29c70 <alt_load+0x78>
   29c28:	00000b06 	br	29c58 <alt_load+0x60>
   29c2c:	00c000f4 	movhi	r3,3
   29c30:	18e85904 	addi	r3,r3,-24220
   29c34:	1907c83a 	sub	r3,r3,r4
   29c38:	0005883a 	mov	r2,zero
  {
    while( to != end )
   29c3c:	10fff526 	beq	r2,r3,29c14 <_gp+0xffff7ac4>
    {
      *to++ = *from++;
   29c40:	114f883a 	add	r7,r2,r5
   29c44:	39c00017 	ldw	r7,0(r7)
   29c48:	110d883a 	add	r6,r2,r4
   29c4c:	10800104 	addi	r2,r2,4
   29c50:	31c00015 	stw	r7,0(r6)
   29c54:	003ff906 	br	29c3c <_gp+0xffff7aec>
   29c58:	010000f4 	movhi	r4,3
   29c5c:	014000f4 	movhi	r5,3
   29c60:	2127fa04 	addi	r4,r4,-24600
   29c64:	2967fa04 	addi	r5,r5,-24600

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   29c68:	2140101e 	bne	r4,r5,29cac <alt_load+0xb4>
   29c6c:	00000b06 	br	29c9c <alt_load+0xa4>
   29c70:	00c000f4 	movhi	r3,3
   29c74:	18e00804 	addi	r3,r3,-32736
   29c78:	1907c83a 	sub	r3,r3,r4
   29c7c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   29c80:	10fff526 	beq	r2,r3,29c58 <_gp+0xffff7b08>
    {
      *to++ = *from++;
   29c84:	114f883a 	add	r7,r2,r5
   29c88:	39c00017 	ldw	r7,0(r7)
   29c8c:	110d883a 	add	r6,r2,r4
   29c90:	10800104 	addi	r2,r2,4
   29c94:	31c00015 	stw	r7,0(r6)
   29c98:	003ff906 	br	29c80 <_gp+0xffff7b30>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   29c9c:	0029fd80 	call	29fd8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   29ca0:	dfc00017 	ldw	ra,0(sp)
   29ca4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   29ca8:	0029fdc1 	jmpi	29fdc <alt_icache_flush_all>
   29cac:	00c000f4 	movhi	r3,3
   29cb0:	18e81c04 	addi	r3,r3,-24464
   29cb4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   29cb8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   29cbc:	18bff726 	beq	r3,r2,29c9c <_gp+0xffff7b4c>
    {
      *to++ = *from++;
   29cc0:	114f883a 	add	r7,r2,r5
   29cc4:	39c00017 	ldw	r7,0(r7)
   29cc8:	110d883a 	add	r6,r2,r4
   29ccc:	10800104 	addi	r2,r2,4
   29cd0:	31c00015 	stw	r7,0(r6)
   29cd4:	003ff906 	br	29cbc <_gp+0xffff7b6c>

00029cd8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   29cd8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   29cdc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   29ce0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   29ce4:	0029db00 	call	29db0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   29ce8:	0029dd00 	call	29dd0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   29cec:	d1a05517 	ldw	r6,-32428(gp)
   29cf0:	d1605617 	ldw	r5,-32424(gp)
   29cf4:	d1205717 	ldw	r4,-32420(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   29cf8:	dfc00017 	ldw	ra,0(sp)
   29cfc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   29d00:	00285fc1 	jmpi	285fc <main>

00029d04 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   29d04:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   29d08:	00bfff84 	movi	r2,-2
   29d0c:	2884703a 	and	r2,r5,r2
   29d10:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   29d14:	d0a00217 	ldw	r2,-32760(gp)
   29d18:	00ffff04 	movi	r3,-4
   29d1c:	108000c4 	addi	r2,r2,3
   29d20:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   29d24:	00c000f4 	movhi	r3,3
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   29d28:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   29d2c:	1109883a 	add	r4,r2,r4
   29d30:	18f80004 	addi	r3,r3,-8192
   29d34:	1900032e 	bgeu	r3,r4,29d44 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   29d38:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   29d3c:	00bfffc4 	movi	r2,-1
   29d40:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   29d44:	d1200215 	stw	r4,-32760(gp)
   29d48:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   29d4c:	f800283a 	ret

00029d50 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   29d50:	00800044 	movi	r2,1
   29d54:	20800226 	beq	r4,r2,29d60 <write+0x10>
   29d58:	00800084 	movi	r2,2
   29d5c:	2080041e 	bne	r4,r2,29d70 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   29d60:	010000f4 	movhi	r4,3
   29d64:	000f883a 	mov	r7,zero
   29d68:	21285704 	addi	r4,r4,-24228
   29d6c:	0029fa41 	jmpi	29fa4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   29d70:	d0a00417 	ldw	r2,-32752(gp)
   29d74:	10000926 	beq	r2,zero,29d9c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   29d78:	deffff04 	addi	sp,sp,-4
   29d7c:	dfc00015 	stw	ra,0(sp)
   29d80:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   29d84:	00c01444 	movi	r3,81
   29d88:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   29d8c:	00bfffc4 	movi	r2,-1
   29d90:	dfc00017 	ldw	ra,0(sp)
   29d94:	dec00104 	addi	sp,sp,4
   29d98:	f800283a 	ret
   29d9c:	d0a05404 	addi	r2,gp,-32432
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   29da0:	00c01444 	movi	r3,81
   29da4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   29da8:	00bfffc4 	movi	r2,-1
   29dac:	f800283a 	ret

00029db0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   29db0:	deffff04 	addi	sp,sp,-4
   29db4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_2, nios2_2);
   29db8:	0029fe00 	call	29fe0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   29dbc:	00800044 	movi	r2,1
   29dc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   29dc4:	dfc00017 	ldw	ra,0(sp)
   29dc8:	dec00104 	addi	sp,sp,4
   29dcc:	f800283a 	ret

00029dd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   29dd0:	f800283a 	ret

00029dd4 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   29dd4:	20800137 	ldwio	r2,4(r4)
}
   29dd8:	1144703a 	and	r2,r2,r5
   29ddc:	f800283a 	ret

00029de0 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   29de0:	20800337 	ldwio	r2,12(r4)
}
   29de4:	1144703a 	and	r2,r2,r5
   29de8:	f800283a 	ret

00029dec <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   29dec:	20800437 	ldwio	r2,16(r4)
   29df0:	f800283a 	ret

00029df4 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   29df4:	20800537 	ldwio	r2,20(r4)
   29df8:	f800283a 	ret

00029dfc <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   29dfc:	20800237 	ldwio	r2,8(r4)
}
   29e00:	1144703a 	and	r2,r2,r5
   29e04:	f800283a 	ret

00029e08 <altera_avalon_fifo_read_level>:
   29e08:	20800037 	ldwio	r2,0(r4)
   29e0c:	f800283a 	ret

00029e10 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   29e10:	21000204 	addi	r4,r4,8
   29e14:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   29e18:	20800037 	ldwio	r2,0(r4)
   29e1c:	114a703a 	and	r5,r2,r5
   29e20:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   29e24:	0085c83a 	sub	r2,zero,r2
   29e28:	f800283a 	ret

00029e2c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   29e2c:	21000304 	addi	r4,r4,12
   29e30:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   29e34:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   29e38:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   29e3c:	28c00126 	beq	r5,r3,29e44 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   29e40:	00bfff84 	movi	r2,-2
}
   29e44:	f800283a 	ret

00029e48 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   29e48:	21000404 	addi	r4,r4,16
   29e4c:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   29e50:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   29e54:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   29e58:	28c00126 	beq	r5,r3,29e60 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   29e5c:	00bfff44 	movi	r2,-3
}
   29e60:	f800283a 	ret

00029e64 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   29e64:	21000504 	addi	r4,r4,20
   29e68:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   29e6c:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   29e70:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   29e74:	28c00126 	beq	r5,r3,29e7c <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   29e78:	00bfff44 	movi	r2,-3
}
   29e7c:	f800283a 	ret

00029e80 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   29e80:	defffb04 	addi	sp,sp,-20
   29e84:	dcc00315 	stw	r19,12(sp)
   29e88:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   29e8c:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   29e90:	dc800215 	stw	r18,8(sp)
   29e94:	dc400115 	stw	r17,4(sp)
   29e98:	dc000015 	stw	r16,0(sp)
   29e9c:	dfc00415 	stw	ra,16(sp)
   29ea0:	2021883a 	mov	r16,r4
   29ea4:	3023883a 	mov	r17,r6
   29ea8:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   29eac:	0029e100 	call	29e10 <altera_avalon_fifo_clear_event>
   29eb0:	10000f1e 	bne	r2,zero,29ef0 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   29eb4:	980b883a 	mov	r5,r19
   29eb8:	8009883a 	mov	r4,r16
   29ebc:	0029e2c0 	call	29e2c <altera_avalon_fifo_write_ienable>
   29ec0:	10000d1e 	bne	r2,zero,29ef8 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   29ec4:	900b883a 	mov	r5,r18
   29ec8:	8009883a 	mov	r4,r16
   29ecc:	0029e480 	call	29e48 <altera_avalon_fifo_write_almostfull>
   29ed0:	10000226 	beq	r2,zero,29edc <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   29ed4:	00bfff44 	movi	r2,-3
   29ed8:	00000806 	br	29efc <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   29edc:	880b883a 	mov	r5,r17
   29ee0:	8009883a 	mov	r4,r16
   29ee4:	0029e640 	call	29e64 <altera_avalon_fifo_write_almostempty>
   29ee8:	10000426 	beq	r2,zero,29efc <altera_avalon_fifo_init+0x7c>
   29eec:	003ff906 	br	29ed4 <_gp+0xffff7d84>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   29ef0:	00bfffc4 	movi	r2,-1
   29ef4:	00000106 	br	29efc <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   29ef8:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   29efc:	dfc00417 	ldw	ra,16(sp)
   29f00:	dcc00317 	ldw	r19,12(sp)
   29f04:	dc800217 	ldw	r18,8(sp)
   29f08:	dc400117 	ldw	r17,4(sp)
   29f0c:	dc000017 	ldw	r16,0(sp)
   29f10:	dec00504 	addi	sp,sp,20
   29f14:	f800283a 	ret

00029f18 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   29f18:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   29f1c:	1080004c 	andi	r2,r2,1
   29f20:	1000021e 	bne	r2,zero,29f2c <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   29f24:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   29f28:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   29f2c:	00bfff04 	movi	r2,-4
    }
}
   29f30:	f800283a 	ret

00029f34 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   29f34:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   29f38:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   29f3c:	1080008c 	andi	r2,r2,2
   29f40:	1000041e 	bne	r2,zero,29f54 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   29f44:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   29f48:	20c00037 	ldwio	r3,0(r4)
   29f4c:	30c00015 	stw	r3,0(r6)
   29f50:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   29f54:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   29f58:	f800283a 	ret

00029f5c <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   29f5c:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   29f60:	1080008c 	andi	r2,r2,2
   29f64:	1000021e 	bne	r2,zero,29f70 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   29f68:	20800037 	ldwio	r2,0(r4)
   29f6c:	f800283a 	ret
    }
    return 0;
   29f70:	0005883a 	mov	r2,zero
}
   29f74:	f800283a 	ret

00029f78 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   29f78:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   29f7c:	1080004c 	andi	r2,r2,1
   29f80:	1000021e 	bne	r2,zero,29f8c <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   29f84:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   29f88:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   29f8c:	00bfff04 	movi	r2,-4
    }
}
   29f90:	f800283a 	ret

00029f94 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   29f94:	20800137 	ldwio	r2,4(r4)
   29f98:	f800283a 	ret

00029f9c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   29f9c:	20800037 	ldwio	r2,0(r4)
   29fa0:	f800283a 	ret

00029fa4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   29fa4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   29fa8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   29fac:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   29fb0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   29fb4:	2980072e 	bgeu	r5,r6,29fd4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   29fb8:	38c00037 	ldwio	r3,0(r7)
   29fbc:	18ffffec 	andhi	r3,r3,65535
   29fc0:	183ffc26 	beq	r3,zero,29fb4 <_gp+0xffff7e64>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   29fc4:	28c00007 	ldb	r3,0(r5)
   29fc8:	20c00035 	stwio	r3,0(r4)
   29fcc:	29400044 	addi	r5,r5,1
   29fd0:	003ff806 	br	29fb4 <_gp+0xffff7e64>

  return count;
}
   29fd4:	f800283a 	ret

00029fd8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   29fd8:	f800283a 	ret

00029fdc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   29fdc:	f800283a 	ret

00029fe0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   29fe0:	000170fa 	wrctl	ienable,zero
   29fe4:	f800283a 	ret
