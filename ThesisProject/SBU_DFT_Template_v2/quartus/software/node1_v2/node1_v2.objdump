
node1_v2.elf:     file format elf32-littlenios2
node1_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001d94 memsz 0x00001d94 flags r-x
    LOAD off    0x00002db4 vaddr 0x00021db4 paddr 0x00021ea8 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00002f9c vaddr 0x00021f9c paddr 0x00021f9c align 2**12
         filesz 0x00000000 memsz 0x00000108 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002ea8  2**0
                  CONTENTS
  2 .text         00001d0c  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  00021d2c  00021d2c  00002d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00021db4  00021ea8  00002db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000108  00021f9c  00021f9c  00002f9c  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_1   00000000  000220a4  000220a4  00002ea8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003e0  00000000  00000000  00002ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007296  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023fe  00000000  00000000  0000a546  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002753  00000000  00000000  0000c944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009ac  00000000  00000000  0000f098  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001993  00000000  00000000  0000fa44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002705  00000000  00000000  000113d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000350  00000000  00000000  00013af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000158e2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  000158e5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000158ec  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000158ed  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000158ee  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000158f9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00015904  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0001590f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  0001591a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  0001596c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  0002352e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00021d2c l    d  .rodata	00000000 .rodata
00021db4 l    d  .rwdata	00000000 .rwdata
00021f9c l    d  .bss	00000000 .bss
000220a4 l    d  .data_mem_1	00000000 .data_mem_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node1_v2_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_1.c
00020320 l     F .text	00000060 send_data.part.1
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000210c4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00021db4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021e9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00021a1c g     F .text	0000002c alt_main
00020fc4 g     F .text	00000080 _puts_r
00021b8c g     F .text	0000001c altera_avalon_fifo_write_almostfull
00021ea8 g       *ABS*	00000000 __flash_rwdata_start
000220a4 g       *ABS*	00000000 __alt_heap_start
00020f78 g     F .text	0000004c printf
00022054 g     O .bss	00000028 edges
00021bc4 g     F .text	00000098 altera_avalon_fifo_init
00021c5c g     F .text	0000001c altera_avalon_fifo_write_fifo
00020b10 g     F .text	0000008c ring_buffer_dequeue_arr
00021d24 g     F .text	00000008 altera_nios2_gen2_irq_init
00020ad8 g     F .text	00000038 ring_buffer_dequeue
00020000 g     F .entry	0000000c __reset
00021ce0 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021fc0 g     O .bss	00000004 errno
0002005c g     F .text	00000020 proc_2
00020a38 g     F .text	0000000c ring_buffer_init
00021fc8 g     O .bss	00000004 alt_argv
00029e94 g       *ABS*	00000000 _gp
00021b54 g     F .text	0000001c altera_avalon_fifo_clear_event
00021fd0 g     O .bss	00000082 buff_p1_p2
00020b9c g     F .text	0000002c ring_buffer_pop
00020cd8 g     F .text	00000028 memcpy
00021044 g     F .text	00000014 puts
00020000 g       *ABS*	00000000 __alt_mem_data_mem_1
000204d8 g     F .text	00000058 get_edge
00020cb0 g     F .text	00000014 malloc
00020f3c g     F .text	0000003c _printf_r
00020a24 g     F .text	00000014 ring_buffer_num_items
00021880 g     F .text	00000064 .hidden __udivsi3
00020bc8 g     F .text	00000084 ring_buffer_pop_arr
0002207c g     O .bss	00000014 edge_p2_p3
00021058 g     F .text	00000050 _sbrk_r
000209fc g     F .text	00000010 ring_buffer_is_empty
00020418 g     F .text	00000050 start_FIFO
00020a0c g     F .text	00000018 ring_buffer_is_full
000203f8 g     F .text	00000020 cleanUp
00021e94 g     O .rwdata	00000004 _global_impure_ptr
000220a4 g       *ABS*	00000000 __bss_end
000205b0 g     F .text	0000001c init_buffer
000209d0 g     F .text	0000002c receive_poll
00021f9c g     O .bss	00000004 proc_2_out_0
00021d1c g     F .text	00000004 alt_dcache_flush_all
00021b70 g     F .text	0000001c altera_avalon_fifo_write_ienable
00021ea8 g       *ABS*	00000000 __ram_rwdata_end
00021b38 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00021a94 g     F .text	00000060 write
00021db4 g       *ABS*	00000000 __ram_rodata_end
00021ea0 g     O .rwdata	00000004 jtag_uart_0
00021fa0 g     O .bss	00000004 proc_2_inparg_0
000218e4 g     F .text	00000058 .hidden __umodsi3
00020530 g     F .text	00000080 get_buffer
000220a4 g       *ABS*	00000000 end
00021b40 g     F .text	0000000c altera_avalon_fifo_read_event
00026000 g       *ABS*	00000000 __alt_stack_pointer
00021ce8 g     F .text	00000034 altera_avalon_jtag_uart_write
00021fa4 g     O .bss	00000004 input_fifo_wrclk_irq_event
00021ca0 g     F .text	0000001c altera_avalon_fifo_read_fifo
00021130 g     F .text	0000052c ___vfprintf_internal_r
00020d00 g     F .text	000000e4 _free_r
00020698 g     F .text	000001e4 send_packet
00020020 g     F .text	0000003c _start
00021b14 g     F .text	00000004 alt_sys_init
00021fa8 g     O .bss	00000004 proc_2_outarg_0
00020a44 g     F .text	00000040 ring_buffer_queue
000202a4 g     F .text	0000007c serializing_send
00020c88 g     F .text	00000028 .hidden __mulsi3
00021db4 g       *ABS*	00000000 __ram_rwdata_start
00021d2c g       *ABS*	00000000 __ram_rodata_start
00020220 g     F .text	00000084 read_data
000220a4 g       *ABS*	00000000 __alt_stack_base
0002007c g     F .text	000000d0 print_status
00021fac g     O .bss	00000004 proc_2_inps
00021b18 g     F .text	0000000c altera_avalon_fifo_read_status
00021cd8 g     F .text	00000008 altera_avalon_fifo_read_other_info
00021a48 g     F .text	0000004c sbrk
00021678 g     F .text	000000b8 __sfvwrite_small_dev
00021f9c g       *ABS*	00000000 __bss_start
00020468 g     F .text	00000070 main
00022090 g     O .bss	00000014 edge_p1_p2
00021fc4 g     O .bss	00000004 alt_envp
00021b4c g     F .text	00000008 altera_avalon_fifo_read_level
00026000 g       *ABS*	00000000 __alt_heap_limit
00020de4 g     F .text	00000158 _malloc_r
00021ea4 g     O .rwdata	00000004 alt_errno
000205cc g     F .text	000000cc init_structures
00020c4c g     F .text	0000003c ring_buffer_peek
00021788 g     F .text	00000084 .hidden __divsi3
00021d2c g       *ABS*	00000000 __flash_rodata_start
00021af4 g     F .text	00000020 alt_irq_init
0002014c g     F .text	000000d4 read_buff
00021730 g     F .text	00000058 _write_r
00021e98 g     O .rwdata	00000004 _impure_ptr
00021fcc g     O .bss	00000004 alt_argc
00020380 g     F .text	0000001c send_data
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002039c g     F .text	0000005c proc_args_init
000208a0 g     F .text	00000130 receive_packet
00021fb0 g     O .bss	00000004 proc_2_outs
00021cbc g     F .text	0000001c altera_avalon_fifo_write_other_info
0002087c g     F .text	00000024 read_payload
00021ea8 g       *ABS*	00000000 _edata
000220a4 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
0002180c g     F .text	00000074 .hidden __modsi3
00021b24 g     F .text	0000000c altera_avalon_fifo_read_ienable
00026000 g       *ABS*	00000000 __alt_data_end
00020a84 g     F .text	00000054 ring_buffer_queue_arr
0002000c g       .entry	00000000 _exit
00021b30 g     F .text	00000008 altera_avalon_fifo_read_almostfull
000210a8 g     F .text	0000001c strlen
00021c78 g     F .text	00000028 altera_avalon_read_fifo
00021fb8 g     O .bss	00000004 __malloc_sbrk_start
00021fb4 g     O .bss	00000004 proc_2_inp_0
00021d20 g     F .text	00000004 alt_icache_flush_all
00021fbc g     O .bss	00000004 __malloc_free_list
0002165c g     F .text	0000001c __vfprintf_internal
00021ba8 g     F .text	0000001c altera_avalon_fifo_write_almostempty
0002193c g     F .text	000000e0 alt_load
00020cc4 g     F .text	00000014 free



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a7a514 	ori	gp,gp,40596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	1087e714 	ori	r2,r2,8092

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c82914 	ori	r3,r3,8356

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_gp+0xffff61b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	002193c0 	call	2193c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	0021a1c0 	call	21a1c <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <_gp+0xffff61c4>

0002005c <proc_2>:


void proc_2(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P2_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P2_OUT0_TYPE*)outargs[0][0];
   2005c:	28800017 	ldw	r2,0(r5)
	*out1 = *num1 + 1;
   20060:	10c00017 	ldw	r3,0(r2)
void** proc_2_outs[P2_NUM_OF_OUTS];


void proc_2(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P2_INP0_TYPE*)inpargs[0][0];
   20064:	20800017 	ldw	r2,0(r4)
	int* out1 = (P2_OUT0_TYPE*)outargs[0][0];
	*out1 = *num1 + 1;
   20068:	10800017 	ldw	r2,0(r2)
   2006c:	10800017 	ldw	r2,0(r2)
   20070:	10800044 	addi	r2,r2,1
   20074:	18800015 	stw	r2,0(r3)
   20078:	f800283a 	ret

0002007c <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   2007c:	defffd04 	addi	sp,sp,-12
   20080:	dc000015 	stw	r16,0(sp)
   20084:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   20088:	010000b4 	movhi	r4,2
   2008c:	21074b04 	addi	r4,r4,7468
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   20090:	dfc00215 	stw	ra,8(sp)
   20094:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   20098:	00210440 	call	21044 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   2009c:	8009883a 	mov	r4,r16
   200a0:	0021b4c0 	call	21b4c <altera_avalon_fifo_read_level>
   200a4:	010000b4 	movhi	r4,2
   200a8:	100b883a 	mov	r5,r2
   200ac:	21075504 	addi	r4,r4,7508
   200b0:	0020f780 	call	20f78 <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   200b4:	04400fc4 	movi	r17,63
   200b8:	880b883a 	mov	r5,r17
   200bc:	8009883a 	mov	r4,r16
   200c0:	0021b180 	call	21b18 <altera_avalon_fifo_read_status>
   200c4:	010000b4 	movhi	r4,2
   200c8:	100b883a 	mov	r5,r2
   200cc:	21075804 	addi	r4,r4,7520
   200d0:	0020f780 	call	20f78 <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   200d4:	880b883a 	mov	r5,r17
   200d8:	8009883a 	mov	r4,r16
   200dc:	0021b400 	call	21b40 <altera_avalon_fifo_read_event>
   200e0:	010000b4 	movhi	r4,2
   200e4:	100b883a 	mov	r5,r2
   200e8:	21075c04 	addi	r4,r4,7536
   200ec:	0020f780 	call	20f78 <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   200f0:	880b883a 	mov	r5,r17
   200f4:	8009883a 	mov	r4,r16
   200f8:	0021b240 	call	21b24 <altera_avalon_fifo_read_ienable>
   200fc:	010000b4 	movhi	r4,2
   20100:	100b883a 	mov	r5,r2
   20104:	21075f04 	addi	r4,r4,7548
   20108:	0020f780 	call	20f78 <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   2010c:	8009883a 	mov	r4,r16
   20110:	0021b380 	call	21b38 <altera_avalon_fifo_read_almostempty>
   20114:	010000b4 	movhi	r4,2
   20118:	100b883a 	mov	r5,r2
   2011c:	21076304 	addi	r4,r4,7564
   20120:	0020f780 	call	20f78 <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   20124:	8009883a 	mov	r4,r16
   20128:	0021b300 	call	21b30 <altera_avalon_fifo_read_almostfull>
   2012c:	010000b4 	movhi	r4,2
   20130:	100b883a 	mov	r5,r2
   20134:	21076804 	addi	r4,r4,7584
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   20138:	dfc00217 	ldw	ra,8(sp)
   2013c:	dc400117 	ldw	r17,4(sp)
   20140:	dc000017 	ldw	r16,0(sp)
   20144:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   20148:	0020f781 	jmpi	20f78 <printf>

0002014c <read_buff>:
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 2){
   2014c:	297fffcc 	andi	r5,r5,65535
   20150:	00800084 	movi	r2,2
   20154:	2880311e 	bne	r5,r2,2021c <read_buff+0xd0>
		if(input_num == 0){
   20158:	31803fcc 	andi	r6,r6,255
   2015c:	30002f1e 	bne	r6,zero,2021c <read_buff+0xd0>
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   20160:	defff904 	addi	sp,sp,-28
   20164:	df000515 	stw	fp,20(sp)
   20168:	dd000415 	stw	r20,16(sp)
   2016c:	dcc00315 	stw	r19,12(sp)
   20170:	dc800215 	stw	r18,8(sp)
   20174:	dc400115 	stw	r17,4(sp)
   20178:	dc000015 	stw	r16,0(sp)
   2017c:	dfc00615 	stw	ra,24(sp)
	if(proc_num == 2){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   20180:	20800203 	ldbu	r2,8(r4)
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   20184:	df000504 	addi	fp,sp,20
	if(proc_num == 2){
		if(input_num == 0){
   20188:	d829883a 	mov	r20,sp
			uint8_t tmp[edge->size_of_token_type];
   2018c:	108000c4 	addi	r2,r2,3
   20190:	10807f0c 	andi	r2,r2,508
   20194:	d8b7c83a 	sub	sp,sp,r2
   20198:	2021883a 	mov	r16,r4
   2019c:	d827883a 	mov	r19,sp
			for(int i =0; i < edge->num_of_inp_token; ++i){
   201a0:	0023883a 	mov	r17,zero
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   201a4:	04800604 	movi	r18,24
/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 2){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   201a8:	80800183 	ldbu	r2,6(r16)
   201ac:	8880110e 	bge	r17,r2,201f4 <read_buff+0xa8>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   201b0:	81800203 	ldbu	r6,8(r16)
   201b4:	81000317 	ldw	r4,12(r16)
   201b8:	980b883a 	mov	r5,r19
   201bc:	0020b100 	call	20b10 <ring_buffer_dequeue_arr>
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   201c0:	81400203 	ldbu	r5,8(r16)
   201c4:	81000317 	ldw	r4,12(r16)
   201c8:	914bc83a 	sub	r5,r18,r5
   201cc:	29403fcc 	andi	r5,r5,255
   201d0:	0020bc80 	call	20bc8 <ring_buffer_pop_arr>
				proc_2_inp_0[i] = ( (P2_INP0_TYPE*)tmp )[0];
   201d4:	d1204817 	ldw	r4,-32480(gp)
   201d8:	8c45883a 	add	r2,r17,r17
   201dc:	98c00017 	ldw	r3,0(r19)
   201e0:	1085883a 	add	r2,r2,r2
   201e4:	2085883a 	add	r2,r4,r2
   201e8:	10c00015 	stw	r3,0(r2)
/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 2){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   201ec:	8c400044 	addi	r17,r17,1
   201f0:	003fed06 	br	201a8 <_gp+0xffff6314>
   201f4:	a037883a 	mov	sp,r20
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
				proc_2_inp_0[i] = ( (P2_INP0_TYPE*)tmp )[0];
			}
		}
	}
}
   201f8:	e6fffb04 	addi	sp,fp,-20
   201fc:	dfc00617 	ldw	ra,24(sp)
   20200:	df000517 	ldw	fp,20(sp)
   20204:	dd000417 	ldw	r20,16(sp)
   20208:	dcc00317 	ldw	r19,12(sp)
   2020c:	dc800217 	ldw	r18,8(sp)
   20210:	dc400117 	ldw	r17,4(sp)
   20214:	dc000017 	ldw	r16,0(sp)
   20218:	dec00704 	addi	sp,sp,28
   2021c:	f800283a 	ret

00020220 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   20220:	defffb04 	addi	sp,sp,-20
   20224:	dcc00315 	stw	r19,12(sp)
   20228:	dc800215 	stw	r18,8(sp)
   2022c:	dc400115 	stw	r17,4(sp)
   20230:	dfc00415 	stw	ra,16(sp)
   20234:	dc000015 	stw	r16,0(sp)
   20238:	2023883a 	mov	r17,r4
   2023c:	2825883a 	mov	r18,r5
   20240:	3027883a 	mov	r19,r6

	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
   20244:	88c00317 	ldw	r3,12(r17)
   20248:	89000183 	ldbu	r4,6(r17)
   2024c:	01400604 	movi	r5,24
   20250:	18802043 	ldbu	r2,129(r3)
   20254:	1c002003 	ldbu	r16,128(r3)
   20258:	1421c83a 	sub	r16,r2,r16
   2025c:	84001fcc 	andi	r16,r16,127
   20260:	0020c880 	call	20c88 <__mulsi3>
   20264:	8080050e 	bge	r16,r2,2027c <read_data+0x5c>
		if(receive_poll())
   20268:	00209d00 	call	209d0 <receive_poll>
   2026c:	10803fcc 	andi	r2,r2,255
   20270:	103ff426 	beq	r2,zero,20244 <_gp+0xffff63b0>
			receive_packet();
   20274:	00208a00 	call	208a0 <receive_packet>
   20278:	003ff206 	br	20244 <_gp+0xffff63b0>
	}
	read_buff(edge, proc_num, input_num);
   2027c:	99803fcc 	andi	r6,r19,255
   20280:	917fffcc 	andi	r5,r18,65535
   20284:	8809883a 	mov	r4,r17
}
   20288:	dfc00417 	ldw	ra,16(sp)
   2028c:	dcc00317 	ldw	r19,12(sp)
   20290:	dc800217 	ldw	r18,8(sp)
   20294:	dc400117 	ldw	r17,4(sp)
   20298:	dc000017 	ldw	r16,0(sp)
   2029c:	dec00504 	addi	sp,sp,20

	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
		if(receive_poll())
			receive_packet();
	}
	read_buff(edge, proc_num, input_num);
   202a0:	002014c1 	jmpi	2014c <read_buff>

000202a4 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array){
   202a4:	defff704 	addi	sp,sp,-36
   202a8:	dfc00815 	stw	ra,32(sp)
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   202ac:	20c00203 	ldbu	r3,8(r4)
   202b0:	0005883a 	mov	r2,zero
   202b4:	10c0070e 	bge	r2,r3,202d4 <serializing_send+0x30>
		send_array[i] = array[i];
   202b8:	d9c00204 	addi	r7,sp,8
   202bc:	388d883a 	add	r6,r7,r2
   202c0:	288f883a 	add	r7,r5,r2
   202c4:	39c00003 	ldbu	r7,0(r7)
}

void serializing_send(struct Edge *edge, unsigned char *array){
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   202c8:	10800044 	addi	r2,r2,1
		send_array[i] = array[i];
   202cc:	31c00005 	stb	r7,0(r6)
   202d0:	003ff806 	br	202b4 <_gp+0xffff6420>
	}

	if(edge->external == 1){
   202d4:	20800403 	ldbu	r2,16(r4)
   202d8:	10000a26 	beq	r2,zero,20304 <serializing_send+0x60>
		send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   202dc:	21c0010b 	ldhu	r7,4(r4)
   202e0:	2180008b 	ldhu	r6,2(r4)
   202e4:	21400043 	ldbu	r5,1(r4)
   202e8:	d8800204 	addi	r2,sp,8
   202ec:	21000003 	ldbu	r4,0(r4)
   202f0:	d8800115 	stw	r2,4(sp)
   202f4:	00800804 	movi	r2,32
   202f8:	d8800015 	stw	r2,0(sp)
   202fc:	00206980 	call	20698 <send_packet>
   20300:	00000406 	br	20314 <serializing_send+0x70>
	}
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
   20304:	21000317 	ldw	r4,12(r4)
   20308:	01800604 	movi	r6,24
   2030c:	d9400204 	addi	r5,sp,8
   20310:	0020a840 	call	20a84 <ring_buffer_queue_arr>
	}
}
   20314:	dfc00817 	ldw	ra,32(sp)
   20318:	dec00904 	addi	sp,sp,36
   2031c:	f800283a 	ret

00020320 <send_data.part.1>:

/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   20320:	defffc04 	addi	sp,sp,-16
   20324:	dc800215 	stw	r18,8(sp)
   20328:	dc400115 	stw	r17,4(sp)
   2032c:	dc000015 	stw	r16,0(sp)
   20330:	dfc00315 	stw	ra,12(sp)
   20334:	2023883a 	mov	r17,r4
   20338:	0021883a 	mov	r16,zero

	if(proc_num == 2){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
   2033c:	d4a04504 	addi	r18,gp,-32492
/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 2){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   20340:	888001c3 	ldbu	r2,7(r17)
   20344:	8080080e 	bge	r16,r2,20368 <send_data.part.1+0x48>
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
   20348:	8405883a 	add	r2,r16,r16
   2034c:	1085883a 	add	r2,r2,r2
   20350:	1485883a 	add	r2,r2,r18
   20354:	11400017 	ldw	r5,0(r2)
   20358:	8809883a 	mov	r4,r17
/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 2){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   2035c:	84000044 	addi	r16,r16,1
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
   20360:	00202a40 	call	202a4 <serializing_send>
   20364:	003ff606 	br	20340 <_gp+0xffff64ac>
			}
		}
	}
}
   20368:	dfc00317 	ldw	ra,12(sp)
   2036c:	dc800217 	ldw	r18,8(sp)
   20370:	dc400117 	ldw	r17,4(sp)
   20374:	dc000017 	ldw	r16,0(sp)
   20378:	dec00404 	addi	sp,sp,16
   2037c:	f800283a 	ret

00020380 <send_data>:
}

/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 2){
   20380:	297fffcc 	andi	r5,r5,65535
   20384:	00800084 	movi	r2,2
   20388:	2880031e 	bne	r5,r2,20398 <send_data+0x18>
		if(output_num == 0){
   2038c:	31803fcc 	andi	r6,r6,255
   20390:	3000011e 	bne	r6,zero,20398 <send_data+0x18>
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
			}
		}
	}
}
   20394:	00203201 	jmpi	20320 <send_data.part.1>
   20398:	f800283a 	ret

0002039c <proc_args_init>:

void proc_args_init(){
   2039c:	defffd04 	addi	sp,sp,-12
   203a0:	dc400115 	stw	r17,4(sp)
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
   203a4:	04400104 	movi	r17,4
   203a8:	8809883a 	mov	r4,r17
			}
		}
	}
}

void proc_args_init(){
   203ac:	dfc00215 	stw	ra,8(sp)
   203b0:	dc000015 	stw	r16,0(sp)
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
   203b4:	0020cb00 	call	20cb0 <malloc>
	proc_2_out_0 = (P2_OUT0_TYPE*)malloc(P2_OUT0_NUM_OF_TOKEN*sizeof(P2_OUT0_TYPE));
   203b8:	8809883a 	mov	r4,r17
	}
}

void proc_args_init(){
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
   203bc:	1021883a 	mov	r16,r2
   203c0:	d0a04815 	stw	r2,-32480(gp)
	proc_2_out_0 = (P2_OUT0_TYPE*)malloc(P2_OUT0_NUM_OF_TOKEN*sizeof(P2_OUT0_TYPE));
   203c4:	0020cb00 	call	20cb0 <malloc>
   203c8:	d0a04215 	stw	r2,-32504(gp)

	// pointers to elements for proc 2
    proc_2_inparg_0[0] = &proc_2_inp_0[0];
    proc_2_outarg_0[0] = &proc_2_out_0[0];
   203cc:	d0a04515 	stw	r2,-32492(gp)

    // top level pointers to be passed for proc 2
    proc_2_inps[0] = proc_2_inparg_0;
   203d0:	d0a04304 	addi	r2,gp,-32500
   203d4:	d0a04615 	stw	r2,-32488(gp)
    proc_2_outs[0] = proc_2_outarg_0;
   203d8:	d0a04504 	addi	r2,gp,-32492
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
	proc_2_out_0 = (P2_OUT0_TYPE*)malloc(P2_OUT0_NUM_OF_TOKEN*sizeof(P2_OUT0_TYPE));

	// pointers to elements for proc 2
    proc_2_inparg_0[0] = &proc_2_inp_0[0];
   203dc:	d4204315 	stw	r16,-32500(gp)
    proc_2_outarg_0[0] = &proc_2_out_0[0];

    // top level pointers to be passed for proc 2
    proc_2_inps[0] = proc_2_inparg_0;
    proc_2_outs[0] = proc_2_outarg_0;
   203e0:	d0a04715 	stw	r2,-32484(gp)
}
   203e4:	dfc00217 	ldw	ra,8(sp)
   203e8:	dc400117 	ldw	r17,4(sp)
   203ec:	dc000017 	ldw	r16,0(sp)
   203f0:	dec00304 	addi	sp,sp,12
   203f4:	f800283a 	ret

000203f8 <cleanUp>:

void cleanUp(){
	// clean up proc 2
	free(proc_2_inp_0);
   203f8:	d1204817 	ldw	r4,-32480(gp)
    // top level pointers to be passed for proc 2
    proc_2_inps[0] = proc_2_inparg_0;
    proc_2_outs[0] = proc_2_outarg_0;
}

void cleanUp(){
   203fc:	deffff04 	addi	sp,sp,-4
   20400:	dfc00015 	stw	ra,0(sp)
	// clean up proc 2
	free(proc_2_inp_0);
   20404:	0020cc40 	call	20cc4 <free>
	free(proc_2_out_0);
   20408:	d1204217 	ldw	r4,-32504(gp)
}
   2040c:	dfc00017 	ldw	ra,0(sp)
   20410:	dec00104 	addi	sp,sp,4
}

void cleanUp(){
	// clean up proc 2
	free(proc_2_inp_0);
	free(proc_2_out_0);
   20414:	0020cc41 	jmpi	20cc4 <free>

00020418 <start_FIFO>:
}

void start_FIFO(){
   20418:	defffd04 	addi	sp,sp,-12
   2041c:	dc400115 	stw	r17,4(sp)
   20420:	dc000015 	stw	r16,0(sp)
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   20424:	044002c4 	movi	r17,11
   20428:	04000084 	movi	r16,2
   2042c:	880f883a 	mov	r7,r17
   20430:	800d883a 	mov	r6,r16
   20434:	000b883a 	mov	r5,zero
   20438:	01240814 	movui	r4,36896
	// clean up proc 2
	free(proc_2_inp_0);
	free(proc_2_out_0);
}

void start_FIFO(){
   2043c:	dfc00215 	stw	ra,8(sp)
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   20440:	0021bc40 	call	21bc4 <altera_avalon_fifo_init>
   20444:	880f883a 	mov	r7,r17
   20448:	800d883a 	mov	r6,r16
   2044c:	000b883a 	mov	r5,zero
   20450:	01240014 	movui	r4,36864
	//alt_putstr("source status:\n");
	//print_status(FIFO_SOURCE_1_IN_CSR_BASE);

	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_1_IN_CSR_BASE);
}
   20454:	dfc00217 	ldw	ra,8(sp)
   20458:	dc400117 	ldw	r17,4(sp)
   2045c:	dc000017 	ldw	r16,0(sp)
   20460:	dec00304 	addi	sp,sp,12
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   20464:	0021bc41 	jmpi	21bc4 <altera_avalon_fifo_init>

00020468 <main>:
	//print_status(FIFO_SINK_1_IN_CSR_BASE);
}

/* This is only for current node */
int main()
{
   20468:	defffe04 	addi	sp,sp,-8
   2046c:	dfc00115 	stw	ra,4(sp)
   20470:	dc000015 	stw	r16,0(sp)
	start_FIFO();
   20474:	00204180 	call	20418 <start_FIFO>
	proc_args_init();
	init_structures();
   20478:	04000144 	movi	r16,5

/* This is only for current node */
int main()
{
	start_FIFO();
	proc_args_init();
   2047c:	002039c0 	call	2039c <proc_args_init>
	init_structures();
   20480:	00205cc0 	call	205cc <init_structures>


	for(int k = 0; k < 5; ++k){
		//alt_putstr("NODE 1 ---------------------------------------------------------\n");
	  for(int i = 0; i <P2_NUM_OF_INPS; ++i){
		  struct Edge *edge = get_edge(2,i,0/*it means input edges*/);
   20484:	000d883a 	mov	r6,zero
   20488:	000b883a 	mov	r5,zero
   2048c:	01000084 	movi	r4,2
   20490:	00204d80 	call	204d8 <get_edge>
		  //printf("k = %d\t before read data from processor 2\n",k);
		  read_data(edge,2/*which process*/, i/*which input*/);
   20494:	1009883a 	mov	r4,r2
   20498:	000d883a 	mov	r6,zero
   2049c:	01400084 	movi	r5,2
   204a0:	00202200 	call	20220 <read_data>
		  //printf("k = %d\t after read data from processor 2\n",k);
	  }

	  proc_2(proc_2_inps, proc_2_outs);
   204a4:	d1604704 	addi	r5,gp,-32484
   204a8:	d1204604 	addi	r4,gp,-32488
   204ac:	002005c0 	call	2005c <proc_2>

	  for(int i = 0; i <P2_NUM_OF_OUTS; ++i){
		  struct Edge *edge = get_edge(2,i,1/*it means output edges*/);
   204b0:	01800044 	movi	r6,1
   204b4:	000b883a 	mov	r5,zero
   204b8:	01000084 	movi	r4,2
   204bc:	00204d80 	call	204d8 <get_edge>
   204c0:	1009883a 	mov	r4,r2
   204c4:	843fffc4 	addi	r16,r16,-1
   204c8:	00203200 	call	20320 <send_data.part.1>
	start_FIFO();
	proc_args_init();
	init_structures();


	for(int k = 0; k < 5; ++k){
   204cc:	803fed1e 	bne	r16,zero,20484 <_gp+0xffff65f0>
	  for(int i = 0; i <P2_NUM_OF_OUTS; ++i){
		  struct Edge *edge = get_edge(2,i,1/*it means output edges*/);
		  send_data(edge,2/*which process*/, i/*which output*/);
	  }
	}
	cleanUp();
   204d0:	00203f80 	call	203f8 <cleanUp>
   204d4:	003fff06 	br	204d4 <_gp+0xffff6640>

000204d8 <get_edge>:
/****************** Structure ******************/

/* This is only for current node */
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   204d8:	31803fcc 	andi	r6,r6,255
   204dc:	3000081e 	bne	r6,zero,20500 <get_edge+0x28>
        if (proc_num == 2) {
   204e0:	21003fcc 	andi	r4,r4,255
   204e4:	00800084 	movi	r2,2
   204e8:	20800f1e 	bne	r4,r2,20528 <get_edge+0x50>
            if (port_num == 0) {
   204ec:	29403fcc 	andi	r5,r5,255
   204f0:	28000d1e 	bne	r5,zero,20528 <get_edge+0x50>
                return &edge_p1_p2;
   204f4:	008000b4 	movhi	r2,2
   204f8:	10882404 	addi	r2,r2,8336
   204fc:	f800283a 	ret
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   20500:	00800044 	movi	r2,1
   20504:	3080081e 	bne	r6,r2,20528 <get_edge+0x50>
    	if (proc_num == 2) {
   20508:	21003fcc 	andi	r4,r4,255
   2050c:	00800084 	movi	r2,2
   20510:	2080051e 	bne	r4,r2,20528 <get_edge+0x50>
			if (port_num == 0) {
   20514:	29403fcc 	andi	r5,r5,255
   20518:	2800031e 	bne	r5,zero,20528 <get_edge+0x50>
				return &edge_p2_p3;
   2051c:	008000b4 	movhi	r2,2
   20520:	10881f04 	addi	r2,r2,8316
   20524:	f800283a 	ret
			}
		}
    }

    return 0;
   20528:	0005883a 	mov	r2,zero
}
   2052c:	f800283a 	ret

00020530 <get_buffer>:

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   20530:	defffe04 	addi	sp,sp,-8
   20534:	dc000015 	stw	r16,0(sp)
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
   20538:	040000b4 	movhi	r16,2
   2053c:	84081504 	addi	r16,r16,8276
   20540:	8080008b 	ldhu	r2,2(r16)
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   20544:	dfc00115 	stw	ra,4(sp)
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
   20548:	213fffcc 	andi	r4,r4,65535
   2054c:	2080031e 	bne	r4,r2,2055c <get_buffer+0x2c>
            if (edges[i].proc_dest == proc_dest) {
   20550:	80c0010b 	ldhu	r3,4(r16)
   20554:	28bfffcc 	andi	r2,r5,65535
   20558:	10c00a26 	beq	r2,r3,20584 <get_buffer+0x54>

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
   2055c:	8080058b 	ldhu	r2,22(r16)
   20560:	20800e1e 	bne	r4,r2,2059c <get_buffer+0x6c>
            if (edges[i].proc_dest == proc_dest) {
   20564:	008000b4 	movhi	r2,2
   20568:	10881504 	addi	r2,r2,8276
   2056c:	10c0060b 	ldhu	r3,24(r2)
   20570:	297fffcc 	andi	r5,r5,65535
                return edges[i].buffer;
            }
        }
    }
    return 0;
   20574:	0005883a 	mov	r2,zero
/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
   20578:	28c0091e 	bne	r5,r3,205a0 <get_buffer+0x70>
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 2; i++) {
   2057c:	01000044 	movi	r4,1
   20580:	00000106 	br	20588 <get_buffer+0x58>
   20584:	0009883a 	mov	r4,zero
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   20588:	01400504 	movi	r5,20
   2058c:	0020c880 	call	20c88 <__mulsi3>
   20590:	8085883a 	add	r2,r16,r2
   20594:	10800317 	ldw	r2,12(r2)
   20598:	00000106 	br	205a0 <get_buffer+0x70>
            }
        }
    }
    return 0;
   2059c:	0005883a 	mov	r2,zero
}
   205a0:	dfc00117 	ldw	ra,4(sp)
   205a4:	dc000017 	ldw	r16,0(sp)
   205a8:	dec00204 	addi	sp,sp,8
   205ac:	f800283a 	ret

000205b0 <init_buffer>:

/* This is only for current node */
void init_buffer(){
   205b0:	deffde04 	addi	sp,sp,-136
	ring_buffer_t buff_p1_p2;
	ring_buffer_init(&buff_p1_p2);
   205b4:	d809883a 	mov	r4,sp
    }
    return 0;
}

/* This is only for current node */
void init_buffer(){
   205b8:	dfc02115 	stw	ra,132(sp)
	ring_buffer_t buff_p1_p2;
	ring_buffer_init(&buff_p1_p2);
   205bc:	0020a380 	call	20a38 <ring_buffer_init>
}
   205c0:	dfc02117 	ldw	ra,132(sp)
   205c4:	dec02204 	addi	sp,sp,136
   205c8:	f800283a 	ret

000205cc <init_structures>:

/* This is only for current node */
void init_structures(){
   205cc:	defffb04 	addi	sp,sp,-20
   205d0:	dfc00415 	stw	ra,16(sp)
   205d4:	dcc00315 	stw	r19,12(sp)
   205d8:	dc800215 	stw	r18,8(sp)
   205dc:	dc400115 	stw	r17,4(sp)
   205e0:	dc000015 	stw	r16,0(sp)
	init_buffer();
   205e4:	00205b00 	call	205b0 <init_buffer>

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   205e8:	014000b4 	movhi	r5,2
   205ec:	29482404 	addi	r5,r5,8336
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
   205f0:	00800044 	movi	r2,1
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   205f4:	00c000b4 	movhi	r3,2
   205f8:	04400504 	movi	r17,20
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
   205fc:	2880008d 	sth	r2,2(r5)
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
   20600:	28800185 	stb	r2,6(r5)
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20604:	18c81504 	addi	r3,r3,8276
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;
   20608:	008000b4 	movhi	r2,2
void init_structures(){
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
   2060c:	04000044 	movi	r16,1
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   20610:	04c00084 	movi	r19,2
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
   20614:	04800104 	movi	r18,4
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20618:	880d883a 	mov	r6,r17
   2061c:	1809883a 	mov	r4,r3
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;
   20620:	1087f404 	addi	r2,r2,8144
void init_structures(){
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
   20624:	2c000045 	stb	r16,1(r5)
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   20628:	2cc0010d 	sth	r19,4(r5)
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
   2062c:	2c800205 	stb	r18,8(r5)
	edge_p1_p2.external = 1;
   20630:	2c000405 	stb	r16,16(r5)
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   20634:	28000005 	stb	zero,0(r5)
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;
   20638:	28800315 	stw	r2,12(r5)

	edges[0] = edge_p1_p2;
   2063c:	0020cd80 	call	20cd8 <memcpy>


	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   20640:	014000b4 	movhi	r5,2
   20644:	29481f04 	addi	r5,r5,8316
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20648:	1007883a 	mov	r3,r2


	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
	edge_p2_p3.node_dest = 3;
   2064c:	008000c4 	movi	r2,3
   20650:	28800045 	stb	r2,1(r5)
	edge_p2_p3.proc_dest = 3;
	edge_p2_p3.num_of_out_token = P2_OUT0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P2_OUT0_TYPE);
	edge_p2_p3.external = 1;

	edges[1] = edge_p2_p3;
   20654:	880d883a 	mov	r6,r17

	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
	edge_p2_p3.node_dest = 3;
	edge_p2_p3.proc_src = 2;
	edge_p2_p3.proc_dest = 3;
   20658:	008000c4 	movi	r2,3
	edge_p2_p3.num_of_out_token = P2_OUT0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P2_OUT0_TYPE);
	edge_p2_p3.external = 1;

	edges[1] = edge_p2_p3;
   2065c:	1c49883a 	add	r4,r3,r17

	edges[0] = edge_p1_p2;


	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   20660:	2c000005 	stb	r16,0(r5)
	edge_p2_p3.node_dest = 3;
	edge_p2_p3.proc_src = 2;
   20664:	2cc0008d 	sth	r19,2(r5)
	edge_p2_p3.proc_dest = 3;
   20668:	2880010d 	sth	r2,4(r5)
	edge_p2_p3.num_of_out_token = P2_OUT0_NUM_OF_TOKEN;
   2066c:	2c0001c5 	stb	r16,7(r5)
	edge_p2_p3.size_of_token_type = sizeof(P2_OUT0_TYPE);
   20670:	2c800205 	stb	r18,8(r5)
	edge_p2_p3.external = 1;
   20674:	2c000405 	stb	r16,16(r5)

	edges[1] = edge_p2_p3;
   20678:	0020cd80 	call	20cd8 <memcpy>

}
   2067c:	dfc00417 	ldw	ra,16(sp)
   20680:	dcc00317 	ldw	r19,12(sp)
   20684:	dc800217 	ldw	r18,8(sp)
   20688:	dc400117 	ldw	r17,4(sp)
   2068c:	dc000017 	ldw	r16,0(sp)
   20690:	dec00504 	addi	sp,sp,20
   20694:	f800283a 	ret

00020698 <send_packet>:


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20698:	defff904 	addi	sp,sp,-28
   2069c:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   206a0:	25403fcc 	andi	r21,r4,255

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206a4:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206a8:	d8800703 	ldbu	r2,28(sp)

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206ac:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206b0:	a80c923a 	slli	r6,r21,8
   206b4:	29403fcc 	andi	r5,r5,255
   206b8:	1004943a 	slli	r2,r2,16
   206bc:	314ab03a 	or	r5,r6,r5
   206c0:	a00c943a 	slli	r6,r20,16

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206c4:	dcc00315 	stw	r19,12(sp)
   206c8:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206cc:	9cffffcc 	andi	r19,r19,65535

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206d0:	dc800215 	stw	r18,8(sp)
   206d4:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206d8:	04a40014 	movui	r18,36864
   206dc:	04641214 	movui	r17,36936
   206e0:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206e4:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206e8:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206ec:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206f0:	298cb03a 	or	r6,r5,r6
   206f4:	8809883a 	mov	r4,r17
   206f8:	900b883a 	mov	r5,r18

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206fc:	dfc00615 	stw	ra,24(sp)
   20700:	dc000015 	stw	r16,0(sp)
   20704:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20708:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2070c:	ace6b03a 	or	r19,r21,r19
   20710:	a1803fcc 	andi	r6,r20,255
   20714:	998cb03a 	or	r6,r19,r6
   20718:	900b883a 	mov	r5,r18
   2071c:	8809883a 	mov	r4,r17
   20720:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>
   20724:	80800043 	ldbu	r2,1(r16)
   20728:	81000003 	ldbu	r4,0(r16)
   2072c:	818000c3 	ldbu	r6,3(r16)
   20730:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20734:	900b883a 	mov	r5,r18
   20738:	300c963a 	slli	r6,r6,24
   2073c:	1106b03a 	or	r3,r2,r4
   20740:	80800083 	ldbu	r2,2(r16)
   20744:	8809883a 	mov	r4,r17
   20748:	1004943a 	slli	r2,r2,16
   2074c:	10c4b03a 	or	r2,r2,r3
   20750:	308cb03a 	or	r6,r6,r2
   20754:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>
   20758:	80800143 	ldbu	r2,5(r16)
   2075c:	81000103 	ldbu	r4,4(r16)
   20760:	818001c3 	ldbu	r6,7(r16)
   20764:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20768:	900b883a 	mov	r5,r18
   2076c:	300c963a 	slli	r6,r6,24
   20770:	1106b03a 	or	r3,r2,r4
   20774:	80800183 	ldbu	r2,6(r16)
   20778:	8809883a 	mov	r4,r17
   2077c:	1004943a 	slli	r2,r2,16
   20780:	10c4b03a 	or	r2,r2,r3
   20784:	308cb03a 	or	r6,r6,r2
   20788:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>
   2078c:	80800243 	ldbu	r2,9(r16)
   20790:	81000203 	ldbu	r4,8(r16)
   20794:	818002c3 	ldbu	r6,11(r16)
   20798:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2079c:	900b883a 	mov	r5,r18
   207a0:	300c963a 	slli	r6,r6,24
   207a4:	1106b03a 	or	r3,r2,r4
   207a8:	80800283 	ldbu	r2,10(r16)
   207ac:	8809883a 	mov	r4,r17
   207b0:	1004943a 	slli	r2,r2,16
   207b4:	10c4b03a 	or	r2,r2,r3
   207b8:	308cb03a 	or	r6,r6,r2
   207bc:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>
   207c0:	80800343 	ldbu	r2,13(r16)
   207c4:	81000303 	ldbu	r4,12(r16)
   207c8:	818003c3 	ldbu	r6,15(r16)
   207cc:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   207d0:	900b883a 	mov	r5,r18
   207d4:	300c963a 	slli	r6,r6,24
   207d8:	1106b03a 	or	r3,r2,r4
   207dc:	80800383 	ldbu	r2,14(r16)
   207e0:	8809883a 	mov	r4,r17
   207e4:	1004943a 	slli	r2,r2,16
   207e8:	10c4b03a 	or	r2,r2,r3
   207ec:	308cb03a 	or	r6,r6,r2
   207f0:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>
   207f4:	80800443 	ldbu	r2,17(r16)
   207f8:	81000403 	ldbu	r4,16(r16)
   207fc:	818004c3 	ldbu	r6,19(r16)
   20800:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20804:	900b883a 	mov	r5,r18
   20808:	300c963a 	slli	r6,r6,24
   2080c:	1106b03a 	or	r3,r2,r4
   20810:	80800483 	ldbu	r2,18(r16)
   20814:	8809883a 	mov	r4,r17
   20818:	1004943a 	slli	r2,r2,16
   2081c:	10c4b03a 	or	r2,r2,r3
   20820:	308cb03a 	or	r6,r6,r2
   20824:	0021c5c0 	call	21c5c <altera_avalon_fifo_write_fifo>
   20828:	80800543 	ldbu	r2,21(r16)
   2082c:	81000503 	ldbu	r4,20(r16)
   20830:	818005c3 	ldbu	r6,23(r16)
   20834:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20838:	900b883a 	mov	r5,r18
   2083c:	300c963a 	slli	r6,r6,24
   20840:	1106b03a 	or	r3,r2,r4
   20844:	80800583 	ldbu	r2,22(r16)
   20848:	8809883a 	mov	r4,r17
   2084c:	1004943a 	slli	r2,r2,16
   20850:	10c4b03a 	or	r2,r2,r3
   20854:	308cb03a 	or	r6,r6,r2

}
   20858:	dfc00617 	ldw	ra,24(sp)
   2085c:	dd400517 	ldw	r21,20(sp)
   20860:	dd000417 	ldw	r20,16(sp)
   20864:	dcc00317 	ldw	r19,12(sp)
   20868:	dc800217 	ldw	r18,8(sp)
   2086c:	dc400117 	ldw	r17,4(sp)
   20870:	dc000017 	ldw	r16,0(sp)
   20874:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20878:	0021c5c1 	jmpi	21c5c <altera_avalon_fifo_write_fifo>

0002087c <read_payload>:
}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
   2087c:	2004d23a 	srli	r2,r4,8
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
   20880:	314b883a 	add	r5,r6,r5
   20884:	29000005 	stb	r4,0(r5)
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   20888:	28800045 	stb	r2,1(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
   2088c:	2004d43a 	srli	r2,r4,16
	
	*(payload + 2 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   20890:	2008d63a 	srli	r4,r4,24
	
	*(payload + 1 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   20894:	28800085 	stb	r2,2(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   20898:	290000c5 	stb	r4,3(r5)
   2089c:	f800283a 	ret

000208a0 <receive_packet>:
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   208a0:	defff504 	addi	sp,sp,-44
   208a4:	dc400715 	stw	r17,28(sp)
   208a8:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208ac:	04640814 	movui	r17,36896
   208b0:	04241014 	movui	r16,36928
   208b4:	880b883a 	mov	r5,r17
   208b8:	8009883a 	mov	r4,r16
	
	*(payload + 3 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   208bc:	dfc00a15 	stw	ra,40(sp)
   208c0:	dcc00915 	stw	r19,36(sp)
   208c4:	dc800815 	stw	r18,32(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208c8:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	packet_size = temp;
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   208cc:	1004d63a 	srli	r2,r2,24
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208d0:	880b883a 	mov	r5,r17
   208d4:	8009883a 	mov	r4,r16
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   208d8:	1026923a 	slli	r19,r2,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208dc:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
   208e0:	1025883a 	mov	r18,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208e4:	880b883a 	mov	r5,r17
   208e8:	8009883a 	mov	r4,r16


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   208ec:	10803fcc 	andi	r2,r2,255
   208f0:	98a6b03a 	or	r19,r19,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208f4:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   208f8:	d80d883a 	mov	r6,sp
   208fc:	1009883a 	mov	r4,r2
   20900:	000b883a 	mov	r5,zero
   20904:	002087c0 	call	2087c <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20908:	880b883a 	mov	r5,r17
   2090c:	8009883a 	mov	r4,r16
   20910:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   20914:	d80d883a 	mov	r6,sp
   20918:	1009883a 	mov	r4,r2
   2091c:	01400104 	movi	r5,4
   20920:	002087c0 	call	2087c <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20924:	880b883a 	mov	r5,r17
   20928:	8009883a 	mov	r4,r16
   2092c:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   20930:	d80d883a 	mov	r6,sp
   20934:	1009883a 	mov	r4,r2
   20938:	01400204 	movi	r5,8
   2093c:	002087c0 	call	2087c <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20940:	880b883a 	mov	r5,r17
   20944:	8009883a 	mov	r4,r16
   20948:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   2094c:	d80d883a 	mov	r6,sp
   20950:	1009883a 	mov	r4,r2
   20954:	01400304 	movi	r5,12
   20958:	002087c0 	call	2087c <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   2095c:	880b883a 	mov	r5,r17
   20960:	8009883a 	mov	r4,r16
   20964:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   20968:	d80d883a 	mov	r6,sp
   2096c:	1009883a 	mov	r4,r2
   20970:	01400404 	movi	r5,16
   20974:	002087c0 	call	2087c <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20978:	880b883a 	mov	r5,r17
   2097c:	8009883a 	mov	r4,r16
   20980:	0021ca00 	call	21ca0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   20984:	d80d883a 	mov	r6,sp
   20988:	1009883a 	mov	r4,r2
   2098c:	01400504 	movi	r5,20
   20990:	002087c0 	call	2087c <read_payload>

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);
   20994:	900ad23a 	srli	r5,r18,8
   20998:	993fffcc 	andi	r4,r19,65535
   2099c:	297fffcc 	andi	r5,r5,65535
   209a0:	00205300 	call	20530 <get_buffer>

	ring_buffer_queue_arr(buffer,payload,24);
   209a4:	01800604 	movi	r6,24
   209a8:	d80b883a 	mov	r5,sp
   209ac:	1009883a 	mov	r4,r2
   209b0:	0020a840 	call	20a84 <ring_buffer_queue_arr>
}
   209b4:	dfc00a17 	ldw	ra,40(sp)
   209b8:	dcc00917 	ldw	r19,36(sp)
   209bc:	dc800817 	ldw	r18,32(sp)
   209c0:	dc400717 	ldw	r17,28(sp)
   209c4:	dc000617 	ldw	r16,24(sp)
   209c8:	dec00b04 	addi	sp,sp,44
   209cc:	f800283a 	ret

000209d0 <receive_poll>:

bool receive_poll(){
   209d0:	deffff04 	addi	sp,sp,-4
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   209d4:	01400fc4 	movi	r5,63
   209d8:	01240814 	movui	r4,36896
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);

	ring_buffer_queue_arr(buffer,payload,24);
}

bool receive_poll(){
   209dc:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   209e0:	0021b180 	call	21b18 <altera_avalon_fifo_read_status>
   209e4:	1004d07a 	srli	r2,r2,1
   209e8:	1080005c 	xori	r2,r2,1
    }*/
	if(status & 0x02)
		return false;
	else
		return true;
}
   209ec:	1080004c 	andi	r2,r2,1
   209f0:	dfc00017 	ldw	ra,0(sp)
   209f4:	dec00104 	addi	sp,sp,4
   209f8:	f800283a 	ret

000209fc <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   209fc:	20c02043 	ldbu	r3,129(r4)
   20a00:	20802003 	ldbu	r2,128(r4)
   20a04:	1885003a 	cmpeq	r2,r3,r2
}
   20a08:	f800283a 	ret

00020a0c <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   20a0c:	20802043 	ldbu	r2,129(r4)
   20a10:	20c02003 	ldbu	r3,128(r4)
   20a14:	10c5c83a 	sub	r2,r2,r3
   20a18:	10801fcc 	andi	r2,r2,127
   20a1c:	10801fe0 	cmpeqi	r2,r2,127
}
   20a20:	f800283a 	ret

00020a24 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   20a24:	20802043 	ldbu	r2,129(r4)
   20a28:	20c02003 	ldbu	r3,128(r4)
   20a2c:	10c5c83a 	sub	r2,r2,r3
}
   20a30:	10801fcc 	andi	r2,r2,127
   20a34:	f800283a 	ret

00020a38 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   20a38:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   20a3c:	20002045 	stb	zero,129(r4)
   20a40:	f800283a 	ret

00020a44 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   20a44:	20802043 	ldbu	r2,129(r4)
   20a48:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   20a4c:	02001fc4 	movi	r8,127
   20a50:	11803fcc 	andi	r6,r2,255
   20a54:	30cfc83a 	sub	r7,r6,r3
   20a58:	39c01fcc 	andi	r7,r7,127
   20a5c:	3a00031e 	bne	r7,r8,20a6c <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   20a60:	18c00044 	addi	r3,r3,1
   20a64:	1a06703a 	and	r3,r3,r8
   20a68:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   20a6c:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   20a70:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   20a74:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   20a78:	10801fcc 	andi	r2,r2,127
   20a7c:	20802045 	stb	r2,129(r4)
   20a80:	f800283a 	ret

00020a84 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   20a84:	defffc04 	addi	sp,sp,-16
   20a88:	31803fcc 	andi	r6,r6,255
   20a8c:	dc800215 	stw	r18,8(sp)
   20a90:	dc400115 	stw	r17,4(sp)
   20a94:	dc000015 	stw	r16,0(sp)
   20a98:	dfc00315 	stw	ra,12(sp)
   20a9c:	2025883a 	mov	r18,r4
   20aa0:	2821883a 	mov	r16,r5
   20aa4:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   20aa8:	84400526 	beq	r16,r17,20ac0 <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   20aac:	81400007 	ldb	r5,0(r16)
   20ab0:	9009883a 	mov	r4,r18
   20ab4:	84000044 	addi	r16,r16,1
   20ab8:	0020a440 	call	20a44 <ring_buffer_queue>
   20abc:	003ffa06 	br	20aa8 <_gp+0xffff6c14>
  }
}
   20ac0:	dfc00317 	ldw	ra,12(sp)
   20ac4:	dc800217 	ldw	r18,8(sp)
   20ac8:	dc400117 	ldw	r17,4(sp)
   20acc:	dc000017 	ldw	r16,0(sp)
   20ad0:	dec00404 	addi	sp,sp,16
   20ad4:	f800283a 	ret

00020ad8 <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   20ad8:	20c02043 	ldbu	r3,129(r4)
   20adc:	20802003 	ldbu	r2,128(r4)
   20ae0:	18800926 	beq	r3,r2,20b08 <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   20ae4:	2085883a 	add	r2,r4,r2
   20ae8:	10800003 	ldbu	r2,0(r2)
   20aec:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   20af0:	20802003 	ldbu	r2,128(r4)
   20af4:	10800044 	addi	r2,r2,1
   20af8:	10801fcc 	andi	r2,r2,127
   20afc:	20802005 	stb	r2,128(r4)
  return 1;
   20b00:	00800044 	movi	r2,1
   20b04:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20b08:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   20b0c:	f800283a 	ret

00020b10 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   20b10:	20c02043 	ldbu	r3,129(r4)
   20b14:	20802003 	ldbu	r2,128(r4)
   20b18:	18801526 	beq	r3,r2,20b70 <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   20b1c:	defffa04 	addi	sp,sp,-24
   20b20:	dcc00315 	stw	r19,12(sp)
   20b24:	dc800215 	stw	r18,8(sp)
   20b28:	dc400115 	stw	r17,4(sp)
   20b2c:	dc000015 	stw	r16,0(sp)
   20b30:	dfc00515 	stw	ra,20(sp)
   20b34:	dd000415 	stw	r20,16(sp)
   20b38:	2827883a 	mov	r19,r5
   20b3c:	2023883a 	mov	r17,r4
   20b40:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   20b44:	0021883a 	mov	r16,zero
   20b48:	9c0b883a 	add	r5,r19,r16
   20b4c:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   20b50:	84800926 	beq	r16,r18,20b78 <ring_buffer_dequeue_arr+0x68>
   20b54:	8809883a 	mov	r4,r17
   20b58:	0020ad80 	call	20ad8 <ring_buffer_dequeue>
   20b5c:	10803fcc 	andi	r2,r2,255
   20b60:	84000044 	addi	r16,r16,1
   20b64:	103ff81e 	bne	r2,zero,20b48 <_gp+0xffff6cb4>
   20b68:	a005883a 	mov	r2,r20
   20b6c:	00000306 	br	20b7c <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20b70:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   20b74:	f800283a 	ret
   20b78:	8005883a 	mov	r2,r16
   20b7c:	dfc00517 	ldw	ra,20(sp)
   20b80:	dd000417 	ldw	r20,16(sp)
   20b84:	dcc00317 	ldw	r19,12(sp)
   20b88:	dc800217 	ldw	r18,8(sp)
   20b8c:	dc400117 	ldw	r17,4(sp)
   20b90:	dc000017 	ldw	r16,0(sp)
   20b94:	dec00604 	addi	sp,sp,24
   20b98:	f800283a 	ret

00020b9c <ring_buffer_pop>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   20b9c:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
   20ba0:	21402043 	ldbu	r5,129(r4)
   20ba4:	10c03fcc 	andi	r3,r2,255
   20ba8:	28c00526 	beq	r5,r3,20bc0 <ring_buffer_pop+0x24>
    /* No items */
    return 0;
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   20bac:	10800044 	addi	r2,r2,1
   20bb0:	10801fcc 	andi	r2,r2,127
   20bb4:	20802005 	stb	r2,128(r4)
  return 1;
   20bb8:	00800044 	movi	r2,1
   20bbc:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20bc0:	0005883a 	mov	r2,zero
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   20bc4:	f800283a 	ret

00020bc8 <ring_buffer_pop_arr>:

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   20bc8:	20c02043 	ldbu	r3,129(r4)
   20bcc:	20802003 	ldbu	r2,128(r4)
   20bd0:	18801426 	beq	r3,r2,20c24 <ring_buffer_pop_arr+0x5c>

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
   20bd4:	defffb04 	addi	sp,sp,-20
   20bd8:	dcc00315 	stw	r19,12(sp)
   20bdc:	dc800215 	stw	r18,8(sp)
   20be0:	dc400115 	stw	r17,4(sp)
   20be4:	dc000015 	stw	r16,0(sp)
   20be8:	dfc00415 	stw	ra,16(sp)
   20bec:	2821883a 	mov	r16,r5
   20bf0:	2023883a 	mov	r17,r4
   20bf4:	0025883a 	mov	r18,zero
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
  }
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
   20bf8:	2cc03fcc 	andi	r19,r5,255
   20bfc:	90803fcc 	andi	r2,r18,255
   20c00:	14c00a26 	beq	r2,r19,20c2c <ring_buffer_pop_arr+0x64>
   20c04:	8809883a 	mov	r4,r17
   20c08:	0020b9c0 	call	20b9c <ring_buffer_pop>
   20c0c:	10803fcc 	andi	r2,r2,255
   20c10:	10000226 	beq	r2,zero,20c1c <ring_buffer_pop_arr+0x54>
    cnt++;
   20c14:	94800044 	addi	r18,r18,1
   20c18:	003ff806 	br	20bfc <_gp+0xffff6d68>
   20c1c:	9005883a 	mov	r2,r18
   20c20:	00000306 	br	20c30 <ring_buffer_pop_arr+0x68>
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20c24:	0005883a 	mov	r2,zero
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
    cnt++;
  }
  return cnt;
}
   20c28:	f800283a 	ret
   20c2c:	8005883a 	mov	r2,r16
   20c30:	dfc00417 	ldw	ra,16(sp)
   20c34:	dcc00317 	ldw	r19,12(sp)
   20c38:	dc800217 	ldw	r18,8(sp)
   20c3c:	dc400117 	ldw	r17,4(sp)
   20c40:	dc000017 	ldw	r16,0(sp)
   20c44:	dec00504 	addi	sp,sp,20
   20c48:	f800283a 	ret

00020c4c <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   20c4c:	20802003 	ldbu	r2,128(r4)



ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   20c50:	20c02043 	ldbu	r3,129(r4)
   20c54:	31c03fcc 	andi	r7,r6,255
   20c58:	1887c83a 	sub	r3,r3,r2
   20c5c:	18c01fcc 	andi	r3,r3,127
   20c60:	38c0072e 	bgeu	r7,r3,20c80 <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   20c64:	3085883a 	add	r2,r6,r2
   20c68:	10801fcc 	andi	r2,r2,127
   20c6c:	2089883a 	add	r4,r4,r2
   20c70:	20800003 	ldbu	r2,0(r4)
   20c74:	28800005 	stb	r2,0(r5)
  return 1;
   20c78:	00800044 	movi	r2,1
   20c7c:	f800283a 	ret


ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   20c80:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   20c84:	f800283a 	ret

00020c88 <__mulsi3>:
   20c88:	0005883a 	mov	r2,zero
   20c8c:	20000726 	beq	r4,zero,20cac <__mulsi3+0x24>
   20c90:	20c0004c 	andi	r3,r4,1
   20c94:	2008d07a 	srli	r4,r4,1
   20c98:	18000126 	beq	r3,zero,20ca0 <__mulsi3+0x18>
   20c9c:	1145883a 	add	r2,r2,r5
   20ca0:	294b883a 	add	r5,r5,r5
   20ca4:	203ffa1e 	bne	r4,zero,20c90 <_gp+0xffff6dfc>
   20ca8:	f800283a 	ret
   20cac:	f800283a 	ret

00020cb0 <malloc>:
   20cb0:	008000b4 	movhi	r2,2
   20cb4:	1087a604 	addi	r2,r2,7832
   20cb8:	200b883a 	mov	r5,r4
   20cbc:	11000017 	ldw	r4,0(r2)
   20cc0:	0020de41 	jmpi	20de4 <_malloc_r>

00020cc4 <free>:
   20cc4:	008000b4 	movhi	r2,2
   20cc8:	1087a604 	addi	r2,r2,7832
   20ccc:	200b883a 	mov	r5,r4
   20cd0:	11000017 	ldw	r4,0(r2)
   20cd4:	0020d001 	jmpi	20d00 <_free_r>

00020cd8 <memcpy>:
   20cd8:	2005883a 	mov	r2,r4
   20cdc:	2007883a 	mov	r3,r4
   20ce0:	218d883a 	add	r6,r4,r6
   20ce4:	19800526 	beq	r3,r6,20cfc <memcpy+0x24>
   20ce8:	29000003 	ldbu	r4,0(r5)
   20cec:	18c00044 	addi	r3,r3,1
   20cf0:	29400044 	addi	r5,r5,1
   20cf4:	193fffc5 	stb	r4,-1(r3)
   20cf8:	003ffa06 	br	20ce4 <_gp+0xffff6e50>
   20cfc:	f800283a 	ret

00020d00 <_free_r>:
   20d00:	28003726 	beq	r5,zero,20de0 <_free_r+0xe0>
   20d04:	28ffff17 	ldw	r3,-4(r5)
   20d08:	28bfff04 	addi	r2,r5,-4
   20d0c:	1800010e 	bge	r3,zero,20d14 <_free_r+0x14>
   20d10:	10c5883a 	add	r2,r2,r3
   20d14:	014000b4 	movhi	r5,2
   20d18:	2947ef04 	addi	r5,r5,8124
   20d1c:	28c00017 	ldw	r3,0(r5)
   20d20:	280d883a 	mov	r6,r5
   20d24:	1800031e 	bne	r3,zero,20d34 <_free_r+0x34>
   20d28:	10000115 	stw	zero,4(r2)
   20d2c:	28800015 	stw	r2,0(r5)
   20d30:	f800283a 	ret
   20d34:	10c00c2e 	bgeu	r2,r3,20d68 <_free_r+0x68>
   20d38:	11000017 	ldw	r4,0(r2)
   20d3c:	110b883a 	add	r5,r2,r4
   20d40:	1940041e 	bne	r3,r5,20d54 <_free_r+0x54>
   20d44:	19400017 	ldw	r5,0(r3)
   20d48:	18c00117 	ldw	r3,4(r3)
   20d4c:	2909883a 	add	r4,r5,r4
   20d50:	11000015 	stw	r4,0(r2)
   20d54:	10c00115 	stw	r3,4(r2)
   20d58:	30800015 	stw	r2,0(r6)
   20d5c:	f800283a 	ret
   20d60:	11400336 	bltu	r2,r5,20d70 <_free_r+0x70>
   20d64:	2807883a 	mov	r3,r5
   20d68:	19400117 	ldw	r5,4(r3)
   20d6c:	283ffc1e 	bne	r5,zero,20d60 <_gp+0xffff6ecc>
   20d70:	19c00017 	ldw	r7,0(r3)
   20d74:	19cd883a 	add	r6,r3,r7
   20d78:	30800a1e 	bne	r6,r2,20da4 <_free_r+0xa4>
   20d7c:	10800017 	ldw	r2,0(r2)
   20d80:	3885883a 	add	r2,r7,r2
   20d84:	18800015 	stw	r2,0(r3)
   20d88:	1889883a 	add	r4,r3,r2
   20d8c:	2900141e 	bne	r5,r4,20de0 <_free_r+0xe0>
   20d90:	29000017 	ldw	r4,0(r5)
   20d94:	2085883a 	add	r2,r4,r2
   20d98:	18800015 	stw	r2,0(r3)
   20d9c:	28800117 	ldw	r2,4(r5)
   20da0:	00000e06 	br	20ddc <_free_r+0xdc>
   20da4:	1180032e 	bgeu	r2,r6,20db4 <_free_r+0xb4>
   20da8:	00800304 	movi	r2,12
   20dac:	20800015 	stw	r2,0(r4)
   20db0:	f800283a 	ret
   20db4:	11000017 	ldw	r4,0(r2)
   20db8:	110d883a 	add	r6,r2,r4
   20dbc:	2980061e 	bne	r5,r6,20dd8 <_free_r+0xd8>
   20dc0:	29800017 	ldw	r6,0(r5)
   20dc4:	3109883a 	add	r4,r6,r4
   20dc8:	11000015 	stw	r4,0(r2)
   20dcc:	29000117 	ldw	r4,4(r5)
   20dd0:	11000115 	stw	r4,4(r2)
   20dd4:	00000106 	br	20ddc <_free_r+0xdc>
   20dd8:	11400115 	stw	r5,4(r2)
   20ddc:	18800115 	stw	r2,4(r3)
   20de0:	f800283a 	ret

00020de4 <_malloc_r>:
   20de4:	defffb04 	addi	sp,sp,-20
   20de8:	00bfff04 	movi	r2,-4
   20dec:	dc400115 	stw	r17,4(sp)
   20df0:	2c4000c4 	addi	r17,r5,3
   20df4:	88a2703a 	and	r17,r17,r2
   20df8:	dc800215 	stw	r18,8(sp)
   20dfc:	dfc00415 	stw	ra,16(sp)
   20e00:	dcc00315 	stw	r19,12(sp)
   20e04:	dc000015 	stw	r16,0(sp)
   20e08:	8c400204 	addi	r17,r17,8
   20e0c:	00800304 	movi	r2,12
   20e10:	2025883a 	mov	r18,r4
   20e14:	8880022e 	bgeu	r17,r2,20e20 <_malloc_r+0x3c>
   20e18:	1023883a 	mov	r17,r2
   20e1c:	00000506 	br	20e34 <_malloc_r+0x50>
   20e20:	8800040e 	bge	r17,zero,20e34 <_malloc_r+0x50>
   20e24:	00800304 	movi	r2,12
   20e28:	90800015 	stw	r2,0(r18)
   20e2c:	0005883a 	mov	r2,zero
   20e30:	00003b06 	br	20f20 <_malloc_r+0x13c>
   20e34:	897ffb36 	bltu	r17,r5,20e24 <_gp+0xffff6f90>
   20e38:	008000b4 	movhi	r2,2
   20e3c:	1087ef04 	addi	r2,r2,8124
   20e40:	10c00017 	ldw	r3,0(r2)
   20e44:	1009883a 	mov	r4,r2
   20e48:	1821883a 	mov	r16,r3
   20e4c:	80000926 	beq	r16,zero,20e74 <_malloc_r+0x90>
   20e50:	80800017 	ldw	r2,0(r16)
   20e54:	1445c83a 	sub	r2,r2,r17
   20e58:	10001516 	blt	r2,zero,20eb0 <_malloc_r+0xcc>
   20e5c:	014002c4 	movi	r5,11
   20e60:	28800d2e 	bgeu	r5,r2,20e98 <_malloc_r+0xb4>
   20e64:	80800015 	stw	r2,0(r16)
   20e68:	80a1883a 	add	r16,r16,r2
   20e6c:	84400015 	stw	r17,0(r16)
   20e70:	8000221e 	bne	r16,zero,20efc <_malloc_r+0x118>
   20e74:	040000b4 	movhi	r16,2
   20e78:	8407ee04 	addi	r16,r16,8120
   20e7c:	80800017 	ldw	r2,0(r16)
   20e80:	10000e1e 	bne	r2,zero,20ebc <_malloc_r+0xd8>
   20e84:	000b883a 	mov	r5,zero
   20e88:	9009883a 	mov	r4,r18
   20e8c:	00210580 	call	21058 <_sbrk_r>
   20e90:	80800015 	stw	r2,0(r16)
   20e94:	00000906 	br	20ebc <_malloc_r+0xd8>
   20e98:	80800117 	ldw	r2,4(r16)
   20e9c:	1c00021e 	bne	r3,r16,20ea8 <_malloc_r+0xc4>
   20ea0:	20800015 	stw	r2,0(r4)
   20ea4:	00001506 	br	20efc <_malloc_r+0x118>
   20ea8:	18800115 	stw	r2,4(r3)
   20eac:	00001306 	br	20efc <_malloc_r+0x118>
   20eb0:	8007883a 	mov	r3,r16
   20eb4:	84000117 	ldw	r16,4(r16)
   20eb8:	003fe406 	br	20e4c <_gp+0xffff6fb8>
   20ebc:	880b883a 	mov	r5,r17
   20ec0:	9009883a 	mov	r4,r18
   20ec4:	00210580 	call	21058 <_sbrk_r>
   20ec8:	04ffffc4 	movi	r19,-1
   20ecc:	14ffd526 	beq	r2,r19,20e24 <_gp+0xffff6f90>
   20ed0:	140000c4 	addi	r16,r2,3
   20ed4:	00ffff04 	movi	r3,-4
   20ed8:	80e0703a 	and	r16,r16,r3
   20edc:	1400021e 	bne	r2,r16,20ee8 <_malloc_r+0x104>
   20ee0:	84400015 	stw	r17,0(r16)
   20ee4:	00000506 	br	20efc <_malloc_r+0x118>
   20ee8:	808bc83a 	sub	r5,r16,r2
   20eec:	9009883a 	mov	r4,r18
   20ef0:	00210580 	call	21058 <_sbrk_r>
   20ef4:	14fffa1e 	bne	r2,r19,20ee0 <_gp+0xffff704c>
   20ef8:	003fca06 	br	20e24 <_gp+0xffff6f90>
   20efc:	810002c4 	addi	r4,r16,11
   20f00:	00bffe04 	movi	r2,-8
   20f04:	80c00104 	addi	r3,r16,4
   20f08:	2084703a 	and	r2,r4,r2
   20f0c:	10c7c83a 	sub	r3,r2,r3
   20f10:	18000326 	beq	r3,zero,20f20 <_malloc_r+0x13c>
   20f14:	80e1883a 	add	r16,r16,r3
   20f18:	00c7c83a 	sub	r3,zero,r3
   20f1c:	80c00015 	stw	r3,0(r16)
   20f20:	dfc00417 	ldw	ra,16(sp)
   20f24:	dcc00317 	ldw	r19,12(sp)
   20f28:	dc800217 	ldw	r18,8(sp)
   20f2c:	dc400117 	ldw	r17,4(sp)
   20f30:	dc000017 	ldw	r16,0(sp)
   20f34:	dec00504 	addi	sp,sp,20
   20f38:	f800283a 	ret

00020f3c <_printf_r>:
   20f3c:	defffd04 	addi	sp,sp,-12
   20f40:	dfc00015 	stw	ra,0(sp)
   20f44:	d9800115 	stw	r6,4(sp)
   20f48:	d9c00215 	stw	r7,8(sp)
   20f4c:	20c00217 	ldw	r3,8(r4)
   20f50:	018000b4 	movhi	r6,2
   20f54:	31859e04 	addi	r6,r6,5752
   20f58:	19800115 	stw	r6,4(r3)
   20f5c:	280d883a 	mov	r6,r5
   20f60:	21400217 	ldw	r5,8(r4)
   20f64:	d9c00104 	addi	r7,sp,4
   20f68:	00211300 	call	21130 <___vfprintf_internal_r>
   20f6c:	dfc00017 	ldw	ra,0(sp)
   20f70:	dec00304 	addi	sp,sp,12
   20f74:	f800283a 	ret

00020f78 <printf>:
   20f78:	defffc04 	addi	sp,sp,-16
   20f7c:	dfc00015 	stw	ra,0(sp)
   20f80:	d9400115 	stw	r5,4(sp)
   20f84:	d9800215 	stw	r6,8(sp)
   20f88:	d9c00315 	stw	r7,12(sp)
   20f8c:	008000b4 	movhi	r2,2
   20f90:	1087a604 	addi	r2,r2,7832
   20f94:	10800017 	ldw	r2,0(r2)
   20f98:	014000b4 	movhi	r5,2
   20f9c:	29459e04 	addi	r5,r5,5752
   20fa0:	10c00217 	ldw	r3,8(r2)
   20fa4:	d9800104 	addi	r6,sp,4
   20fa8:	19400115 	stw	r5,4(r3)
   20fac:	200b883a 	mov	r5,r4
   20fb0:	11000217 	ldw	r4,8(r2)
   20fb4:	002165c0 	call	2165c <__vfprintf_internal>
   20fb8:	dfc00017 	ldw	ra,0(sp)
   20fbc:	dec00404 	addi	sp,sp,16
   20fc0:	f800283a 	ret

00020fc4 <_puts_r>:
   20fc4:	defffd04 	addi	sp,sp,-12
   20fc8:	dc000015 	stw	r16,0(sp)
   20fcc:	2021883a 	mov	r16,r4
   20fd0:	2809883a 	mov	r4,r5
   20fd4:	dfc00215 	stw	ra,8(sp)
   20fd8:	dc400115 	stw	r17,4(sp)
   20fdc:	2823883a 	mov	r17,r5
   20fe0:	00210a80 	call	210a8 <strlen>
   20fe4:	81400217 	ldw	r5,8(r16)
   20fe8:	010000b4 	movhi	r4,2
   20fec:	21059e04 	addi	r4,r4,5752
   20ff0:	29000115 	stw	r4,4(r5)
   20ff4:	100f883a 	mov	r7,r2
   20ff8:	880d883a 	mov	r6,r17
   20ffc:	8009883a 	mov	r4,r16
   21000:	00216780 	call	21678 <__sfvwrite_small_dev>
   21004:	00ffffc4 	movi	r3,-1
   21008:	10c00926 	beq	r2,r3,21030 <_puts_r+0x6c>
   2100c:	81400217 	ldw	r5,8(r16)
   21010:	018000b4 	movhi	r6,2
   21014:	01c00044 	movi	r7,1
   21018:	28800117 	ldw	r2,4(r5)
   2101c:	31876c04 	addi	r6,r6,7600
   21020:	8009883a 	mov	r4,r16
   21024:	103ee83a 	callr	r2
   21028:	10bfffe0 	cmpeqi	r2,r2,-1
   2102c:	0085c83a 	sub	r2,zero,r2
   21030:	dfc00217 	ldw	ra,8(sp)
   21034:	dc400117 	ldw	r17,4(sp)
   21038:	dc000017 	ldw	r16,0(sp)
   2103c:	dec00304 	addi	sp,sp,12
   21040:	f800283a 	ret

00021044 <puts>:
   21044:	008000b4 	movhi	r2,2
   21048:	1087a604 	addi	r2,r2,7832
   2104c:	200b883a 	mov	r5,r4
   21050:	11000017 	ldw	r4,0(r2)
   21054:	0020fc41 	jmpi	20fc4 <_puts_r>

00021058 <_sbrk_r>:
   21058:	defffd04 	addi	sp,sp,-12
   2105c:	dc000015 	stw	r16,0(sp)
   21060:	040000b4 	movhi	r16,2
   21064:	dc400115 	stw	r17,4(sp)
   21068:	8407f004 	addi	r16,r16,8128
   2106c:	2023883a 	mov	r17,r4
   21070:	2809883a 	mov	r4,r5
   21074:	dfc00215 	stw	ra,8(sp)
   21078:	80000015 	stw	zero,0(r16)
   2107c:	0021a480 	call	21a48 <sbrk>
   21080:	00ffffc4 	movi	r3,-1
   21084:	10c0031e 	bne	r2,r3,21094 <_sbrk_r+0x3c>
   21088:	80c00017 	ldw	r3,0(r16)
   2108c:	18000126 	beq	r3,zero,21094 <_sbrk_r+0x3c>
   21090:	88c00015 	stw	r3,0(r17)
   21094:	dfc00217 	ldw	ra,8(sp)
   21098:	dc400117 	ldw	r17,4(sp)
   2109c:	dc000017 	ldw	r16,0(sp)
   210a0:	dec00304 	addi	sp,sp,12
   210a4:	f800283a 	ret

000210a8 <strlen>:
   210a8:	2005883a 	mov	r2,r4
   210ac:	10c00007 	ldb	r3,0(r2)
   210b0:	18000226 	beq	r3,zero,210bc <strlen+0x14>
   210b4:	10800044 	addi	r2,r2,1
   210b8:	003ffc06 	br	210ac <_gp+0xffff7218>
   210bc:	1105c83a 	sub	r2,r2,r4
   210c0:	f800283a 	ret

000210c4 <print_repeat>:
   210c4:	defffb04 	addi	sp,sp,-20
   210c8:	dc800315 	stw	r18,12(sp)
   210cc:	dc400215 	stw	r17,8(sp)
   210d0:	dc000115 	stw	r16,4(sp)
   210d4:	dfc00415 	stw	ra,16(sp)
   210d8:	2025883a 	mov	r18,r4
   210dc:	2823883a 	mov	r17,r5
   210e0:	d9800005 	stb	r6,0(sp)
   210e4:	3821883a 	mov	r16,r7
   210e8:	04000a0e 	bge	zero,r16,21114 <print_repeat+0x50>
   210ec:	88800117 	ldw	r2,4(r17)
   210f0:	01c00044 	movi	r7,1
   210f4:	d80d883a 	mov	r6,sp
   210f8:	880b883a 	mov	r5,r17
   210fc:	9009883a 	mov	r4,r18
   21100:	103ee83a 	callr	r2
   21104:	843fffc4 	addi	r16,r16,-1
   21108:	103ff726 	beq	r2,zero,210e8 <_gp+0xffff7254>
   2110c:	00bfffc4 	movi	r2,-1
   21110:	00000106 	br	21118 <print_repeat+0x54>
   21114:	0005883a 	mov	r2,zero
   21118:	dfc00417 	ldw	ra,16(sp)
   2111c:	dc800317 	ldw	r18,12(sp)
   21120:	dc400217 	ldw	r17,8(sp)
   21124:	dc000117 	ldw	r16,4(sp)
   21128:	dec00504 	addi	sp,sp,20
   2112c:	f800283a 	ret

00021130 <___vfprintf_internal_r>:
   21130:	deffe504 	addi	sp,sp,-108
   21134:	d8c00804 	addi	r3,sp,32
   21138:	ddc01815 	stw	r23,96(sp)
   2113c:	dd801715 	stw	r22,92(sp)
   21140:	dd401615 	stw	r21,88(sp)
   21144:	dd001515 	stw	r20,84(sp)
   21148:	dcc01415 	stw	r19,80(sp)
   2114c:	dc801315 	stw	r18,76(sp)
   21150:	dc401215 	stw	r17,72(sp)
   21154:	dc001115 	stw	r16,68(sp)
   21158:	dfc01a15 	stw	ra,104(sp)
   2115c:	df001915 	stw	fp,100(sp)
   21160:	2029883a 	mov	r20,r4
   21164:	2823883a 	mov	r17,r5
   21168:	382d883a 	mov	r22,r7
   2116c:	d9800f15 	stw	r6,60(sp)
   21170:	0021883a 	mov	r16,zero
   21174:	d8000e15 	stw	zero,56(sp)
   21178:	d8000a15 	stw	zero,40(sp)
   2117c:	002b883a 	mov	r21,zero
   21180:	0027883a 	mov	r19,zero
   21184:	0025883a 	mov	r18,zero
   21188:	d8000c15 	stw	zero,48(sp)
   2118c:	d8000b15 	stw	zero,44(sp)
   21190:	002f883a 	mov	r23,zero
   21194:	d8c00915 	stw	r3,36(sp)
   21198:	d8c00f17 	ldw	r3,60(sp)
   2119c:	19000003 	ldbu	r4,0(r3)
   211a0:	20803fcc 	andi	r2,r4,255
   211a4:	1080201c 	xori	r2,r2,128
   211a8:	10bfe004 	addi	r2,r2,-128
   211ac:	10011e26 	beq	r2,zero,21628 <___vfprintf_internal_r+0x4f8>
   211b0:	00c00044 	movi	r3,1
   211b4:	b8c01426 	beq	r23,r3,21208 <___vfprintf_internal_r+0xd8>
   211b8:	1dc00216 	blt	r3,r23,211c4 <___vfprintf_internal_r+0x94>
   211bc:	b8000626 	beq	r23,zero,211d8 <___vfprintf_internal_r+0xa8>
   211c0:	00011506 	br	21618 <___vfprintf_internal_r+0x4e8>
   211c4:	01400084 	movi	r5,2
   211c8:	b9401d26 	beq	r23,r5,21240 <___vfprintf_internal_r+0x110>
   211cc:	014000c4 	movi	r5,3
   211d0:	b9402b26 	beq	r23,r5,21280 <___vfprintf_internal_r+0x150>
   211d4:	00011006 	br	21618 <___vfprintf_internal_r+0x4e8>
   211d8:	01400944 	movi	r5,37
   211dc:	1140fc26 	beq	r2,r5,215d0 <___vfprintf_internal_r+0x4a0>
   211e0:	88800117 	ldw	r2,4(r17)
   211e4:	d9000005 	stb	r4,0(sp)
   211e8:	01c00044 	movi	r7,1
   211ec:	d80d883a 	mov	r6,sp
   211f0:	880b883a 	mov	r5,r17
   211f4:	a009883a 	mov	r4,r20
   211f8:	103ee83a 	callr	r2
   211fc:	1000d81e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   21200:	84000044 	addi	r16,r16,1
   21204:	00010406 	br	21618 <___vfprintf_internal_r+0x4e8>
   21208:	01400c04 	movi	r5,48
   2120c:	1140fa26 	beq	r2,r5,215f8 <___vfprintf_internal_r+0x4c8>
   21210:	01400944 	movi	r5,37
   21214:	11400a1e 	bne	r2,r5,21240 <___vfprintf_internal_r+0x110>
   21218:	d8800005 	stb	r2,0(sp)
   2121c:	88800117 	ldw	r2,4(r17)
   21220:	b80f883a 	mov	r7,r23
   21224:	d80d883a 	mov	r6,sp
   21228:	880b883a 	mov	r5,r17
   2122c:	a009883a 	mov	r4,r20
   21230:	103ee83a 	callr	r2
   21234:	1000ca1e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   21238:	84000044 	addi	r16,r16,1
   2123c:	0000f506 	br	21614 <___vfprintf_internal_r+0x4e4>
   21240:	25fff404 	addi	r23,r4,-48
   21244:	bdc03fcc 	andi	r23,r23,255
   21248:	00c00244 	movi	r3,9
   2124c:	1dc00936 	bltu	r3,r23,21274 <___vfprintf_internal_r+0x144>
   21250:	00bfffc4 	movi	r2,-1
   21254:	90800426 	beq	r18,r2,21268 <___vfprintf_internal_r+0x138>
   21258:	01400284 	movi	r5,10
   2125c:	9009883a 	mov	r4,r18
   21260:	0020c880 	call	20c88 <__mulsi3>
   21264:	00000106 	br	2126c <___vfprintf_internal_r+0x13c>
   21268:	0005883a 	mov	r2,zero
   2126c:	b8a5883a 	add	r18,r23,r2
   21270:	0000e206 	br	215fc <___vfprintf_internal_r+0x4cc>
   21274:	01400b84 	movi	r5,46
   21278:	1140e426 	beq	r2,r5,2160c <___vfprintf_internal_r+0x4dc>
   2127c:	05c00084 	movi	r23,2
   21280:	213ff404 	addi	r4,r4,-48
   21284:	27003fcc 	andi	fp,r4,255
   21288:	00c00244 	movi	r3,9
   2128c:	1f000936 	bltu	r3,fp,212b4 <___vfprintf_internal_r+0x184>
   21290:	00bfffc4 	movi	r2,-1
   21294:	98800426 	beq	r19,r2,212a8 <___vfprintf_internal_r+0x178>
   21298:	01400284 	movi	r5,10
   2129c:	9809883a 	mov	r4,r19
   212a0:	0020c880 	call	20c88 <__mulsi3>
   212a4:	00000106 	br	212ac <___vfprintf_internal_r+0x17c>
   212a8:	0005883a 	mov	r2,zero
   212ac:	e0a7883a 	add	r19,fp,r2
   212b0:	0000d906 	br	21618 <___vfprintf_internal_r+0x4e8>
   212b4:	00c01b04 	movi	r3,108
   212b8:	10c0d226 	beq	r2,r3,21604 <___vfprintf_internal_r+0x4d4>
   212bc:	013fffc4 	movi	r4,-1
   212c0:	99000226 	beq	r19,r4,212cc <___vfprintf_internal_r+0x19c>
   212c4:	d8000b15 	stw	zero,44(sp)
   212c8:	00000106 	br	212d0 <___vfprintf_internal_r+0x1a0>
   212cc:	04c00044 	movi	r19,1
   212d0:	01001a44 	movi	r4,105
   212d4:	11001626 	beq	r2,r4,21330 <___vfprintf_internal_r+0x200>
   212d8:	20800916 	blt	r4,r2,21300 <___vfprintf_internal_r+0x1d0>
   212dc:	010018c4 	movi	r4,99
   212e0:	11008826 	beq	r2,r4,21504 <___vfprintf_internal_r+0x3d4>
   212e4:	01001904 	movi	r4,100
   212e8:	11001126 	beq	r2,r4,21330 <___vfprintf_internal_r+0x200>
   212ec:	01001604 	movi	r4,88
   212f0:	1100c81e 	bne	r2,r4,21614 <___vfprintf_internal_r+0x4e4>
   212f4:	00c00044 	movi	r3,1
   212f8:	d8c00e15 	stw	r3,56(sp)
   212fc:	00001506 	br	21354 <___vfprintf_internal_r+0x224>
   21300:	01001cc4 	movi	r4,115
   21304:	11009826 	beq	r2,r4,21568 <___vfprintf_internal_r+0x438>
   21308:	20800416 	blt	r4,r2,2131c <___vfprintf_internal_r+0x1ec>
   2130c:	01001bc4 	movi	r4,111
   21310:	1100c01e 	bne	r2,r4,21614 <___vfprintf_internal_r+0x4e4>
   21314:	05400204 	movi	r21,8
   21318:	00000f06 	br	21358 <___vfprintf_internal_r+0x228>
   2131c:	01001d44 	movi	r4,117
   21320:	11000d26 	beq	r2,r4,21358 <___vfprintf_internal_r+0x228>
   21324:	01001e04 	movi	r4,120
   21328:	11000a26 	beq	r2,r4,21354 <___vfprintf_internal_r+0x224>
   2132c:	0000b906 	br	21614 <___vfprintf_internal_r+0x4e4>
   21330:	d8c00a17 	ldw	r3,40(sp)
   21334:	b7000104 	addi	fp,r22,4
   21338:	18000726 	beq	r3,zero,21358 <___vfprintf_internal_r+0x228>
   2133c:	df000d15 	stw	fp,52(sp)
   21340:	b5c00017 	ldw	r23,0(r22)
   21344:	b800080e 	bge	r23,zero,21368 <___vfprintf_internal_r+0x238>
   21348:	05efc83a 	sub	r23,zero,r23
   2134c:	02400044 	movi	r9,1
   21350:	00000606 	br	2136c <___vfprintf_internal_r+0x23c>
   21354:	05400404 	movi	r21,16
   21358:	b0c00104 	addi	r3,r22,4
   2135c:	d8c00d15 	stw	r3,52(sp)
   21360:	b5c00017 	ldw	r23,0(r22)
   21364:	d8000a15 	stw	zero,40(sp)
   21368:	0013883a 	mov	r9,zero
   2136c:	d839883a 	mov	fp,sp
   21370:	b8001726 	beq	r23,zero,213d0 <___vfprintf_internal_r+0x2a0>
   21374:	a80b883a 	mov	r5,r21
   21378:	b809883a 	mov	r4,r23
   2137c:	da401015 	stw	r9,64(sp)
   21380:	00218800 	call	21880 <__udivsi3>
   21384:	a80b883a 	mov	r5,r21
   21388:	1009883a 	mov	r4,r2
   2138c:	102d883a 	mov	r22,r2
   21390:	0020c880 	call	20c88 <__mulsi3>
   21394:	b885c83a 	sub	r2,r23,r2
   21398:	00c00244 	movi	r3,9
   2139c:	da401017 	ldw	r9,64(sp)
   213a0:	18800216 	blt	r3,r2,213ac <___vfprintf_internal_r+0x27c>
   213a4:	10800c04 	addi	r2,r2,48
   213a8:	00000506 	br	213c0 <___vfprintf_internal_r+0x290>
   213ac:	d8c00e17 	ldw	r3,56(sp)
   213b0:	18000226 	beq	r3,zero,213bc <___vfprintf_internal_r+0x28c>
   213b4:	10800dc4 	addi	r2,r2,55
   213b8:	00000106 	br	213c0 <___vfprintf_internal_r+0x290>
   213bc:	108015c4 	addi	r2,r2,87
   213c0:	e0800005 	stb	r2,0(fp)
   213c4:	b02f883a 	mov	r23,r22
   213c8:	e7000044 	addi	fp,fp,1
   213cc:	003fe806 	br	21370 <_gp+0xffff74dc>
   213d0:	e6efc83a 	sub	r23,fp,sp
   213d4:	9dc5c83a 	sub	r2,r19,r23
   213d8:	0080090e 	bge	zero,r2,21400 <___vfprintf_internal_r+0x2d0>
   213dc:	e085883a 	add	r2,fp,r2
   213e0:	01400c04 	movi	r5,48
   213e4:	d8c00917 	ldw	r3,36(sp)
   213e8:	e009883a 	mov	r4,fp
   213ec:	e0c0032e 	bgeu	fp,r3,213fc <___vfprintf_internal_r+0x2cc>
   213f0:	e7000044 	addi	fp,fp,1
   213f4:	21400005 	stb	r5,0(r4)
   213f8:	e0bffa1e 	bne	fp,r2,213e4 <_gp+0xffff7550>
   213fc:	e6efc83a 	sub	r23,fp,sp
   21400:	d8c00b17 	ldw	r3,44(sp)
   21404:	4dd1883a 	add	r8,r9,r23
   21408:	922dc83a 	sub	r22,r18,r8
   2140c:	18001626 	beq	r3,zero,21468 <___vfprintf_internal_r+0x338>
   21410:	48000a26 	beq	r9,zero,2143c <___vfprintf_internal_r+0x30c>
   21414:	00800b44 	movi	r2,45
   21418:	d8800805 	stb	r2,32(sp)
   2141c:	88800117 	ldw	r2,4(r17)
   21420:	01c00044 	movi	r7,1
   21424:	d9800804 	addi	r6,sp,32
   21428:	880b883a 	mov	r5,r17
   2142c:	a009883a 	mov	r4,r20
   21430:	103ee83a 	callr	r2
   21434:	10004a1e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   21438:	84000044 	addi	r16,r16,1
   2143c:	0580070e 	bge	zero,r22,2145c <___vfprintf_internal_r+0x32c>
   21440:	b00f883a 	mov	r7,r22
   21444:	01800c04 	movi	r6,48
   21448:	880b883a 	mov	r5,r17
   2144c:	a009883a 	mov	r4,r20
   21450:	00210c40 	call	210c4 <print_repeat>
   21454:	1000421e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   21458:	85a1883a 	add	r16,r16,r22
   2145c:	e02d883a 	mov	r22,fp
   21460:	bf2fc83a 	sub	r23,r23,fp
   21464:	00002006 	br	214e8 <___vfprintf_internal_r+0x3b8>
   21468:	0580090e 	bge	zero,r22,21490 <___vfprintf_internal_r+0x360>
   2146c:	b00f883a 	mov	r7,r22
   21470:	01800804 	movi	r6,32
   21474:	880b883a 	mov	r5,r17
   21478:	a009883a 	mov	r4,r20
   2147c:	da401015 	stw	r9,64(sp)
   21480:	00210c40 	call	210c4 <print_repeat>
   21484:	da401017 	ldw	r9,64(sp)
   21488:	1000351e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   2148c:	85a1883a 	add	r16,r16,r22
   21490:	483ff226 	beq	r9,zero,2145c <_gp+0xffff75c8>
   21494:	00800b44 	movi	r2,45
   21498:	d8800805 	stb	r2,32(sp)
   2149c:	88800117 	ldw	r2,4(r17)
   214a0:	01c00044 	movi	r7,1
   214a4:	d9800804 	addi	r6,sp,32
   214a8:	880b883a 	mov	r5,r17
   214ac:	a009883a 	mov	r4,r20
   214b0:	103ee83a 	callr	r2
   214b4:	10002a1e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   214b8:	84000044 	addi	r16,r16,1
   214bc:	003fe706 	br	2145c <_gp+0xffff75c8>
   214c0:	b5bfffc4 	addi	r22,r22,-1
   214c4:	b0800003 	ldbu	r2,0(r22)
   214c8:	01c00044 	movi	r7,1
   214cc:	d9800804 	addi	r6,sp,32
   214d0:	d8800805 	stb	r2,32(sp)
   214d4:	88800117 	ldw	r2,4(r17)
   214d8:	880b883a 	mov	r5,r17
   214dc:	a009883a 	mov	r4,r20
   214e0:	103ee83a 	callr	r2
   214e4:	10001e1e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   214e8:	8585c83a 	sub	r2,r16,r22
   214ec:	b5c9883a 	add	r4,r22,r23
   214f0:	e085883a 	add	r2,fp,r2
   214f4:	013ff216 	blt	zero,r4,214c0 <_gp+0xffff762c>
   214f8:	1021883a 	mov	r16,r2
   214fc:	dd800d17 	ldw	r22,52(sp)
   21500:	00004406 	br	21614 <___vfprintf_internal_r+0x4e4>
   21504:	00800044 	movi	r2,1
   21508:	1480080e 	bge	r2,r18,2152c <___vfprintf_internal_r+0x3fc>
   2150c:	95ffffc4 	addi	r23,r18,-1
   21510:	b80f883a 	mov	r7,r23
   21514:	01800804 	movi	r6,32
   21518:	880b883a 	mov	r5,r17
   2151c:	a009883a 	mov	r4,r20
   21520:	00210c40 	call	210c4 <print_repeat>
   21524:	10000e1e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   21528:	85e1883a 	add	r16,r16,r23
   2152c:	b0800017 	ldw	r2,0(r22)
   21530:	01c00044 	movi	r7,1
   21534:	d80d883a 	mov	r6,sp
   21538:	d8800005 	stb	r2,0(sp)
   2153c:	88800117 	ldw	r2,4(r17)
   21540:	880b883a 	mov	r5,r17
   21544:	a009883a 	mov	r4,r20
   21548:	b5c00104 	addi	r23,r22,4
   2154c:	103ee83a 	callr	r2
   21550:	1000031e 	bne	r2,zero,21560 <___vfprintf_internal_r+0x430>
   21554:	84000044 	addi	r16,r16,1
   21558:	b82d883a 	mov	r22,r23
   2155c:	00002d06 	br	21614 <___vfprintf_internal_r+0x4e4>
   21560:	00bfffc4 	movi	r2,-1
   21564:	00003106 	br	2162c <___vfprintf_internal_r+0x4fc>
   21568:	b5c00017 	ldw	r23,0(r22)
   2156c:	b7000104 	addi	fp,r22,4
   21570:	b809883a 	mov	r4,r23
   21574:	00210a80 	call	210a8 <strlen>
   21578:	9091c83a 	sub	r8,r18,r2
   2157c:	102d883a 	mov	r22,r2
   21580:	0200090e 	bge	zero,r8,215a8 <___vfprintf_internal_r+0x478>
   21584:	400f883a 	mov	r7,r8
   21588:	01800804 	movi	r6,32
   2158c:	880b883a 	mov	r5,r17
   21590:	a009883a 	mov	r4,r20
   21594:	da001015 	stw	r8,64(sp)
   21598:	00210c40 	call	210c4 <print_repeat>
   2159c:	da001017 	ldw	r8,64(sp)
   215a0:	103fef1e 	bne	r2,zero,21560 <_gp+0xffff76cc>
   215a4:	8221883a 	add	r16,r16,r8
   215a8:	88800117 	ldw	r2,4(r17)
   215ac:	b00f883a 	mov	r7,r22
   215b0:	b80d883a 	mov	r6,r23
   215b4:	880b883a 	mov	r5,r17
   215b8:	a009883a 	mov	r4,r20
   215bc:	103ee83a 	callr	r2
   215c0:	103fe71e 	bne	r2,zero,21560 <_gp+0xffff76cc>
   215c4:	85a1883a 	add	r16,r16,r22
   215c8:	e02d883a 	mov	r22,fp
   215cc:	00001106 	br	21614 <___vfprintf_internal_r+0x4e4>
   215d0:	00c00044 	movi	r3,1
   215d4:	04ffffc4 	movi	r19,-1
   215d8:	d8000e15 	stw	zero,56(sp)
   215dc:	d8c00a15 	stw	r3,40(sp)
   215e0:	05400284 	movi	r21,10
   215e4:	9825883a 	mov	r18,r19
   215e8:	d8000c15 	stw	zero,48(sp)
   215ec:	d8000b15 	stw	zero,44(sp)
   215f0:	182f883a 	mov	r23,r3
   215f4:	00000806 	br	21618 <___vfprintf_internal_r+0x4e8>
   215f8:	ddc00b15 	stw	r23,44(sp)
   215fc:	05c00084 	movi	r23,2
   21600:	00000506 	br	21618 <___vfprintf_internal_r+0x4e8>
   21604:	00c00044 	movi	r3,1
   21608:	d8c00c15 	stw	r3,48(sp)
   2160c:	05c000c4 	movi	r23,3
   21610:	00000106 	br	21618 <___vfprintf_internal_r+0x4e8>
   21614:	002f883a 	mov	r23,zero
   21618:	d8c00f17 	ldw	r3,60(sp)
   2161c:	18c00044 	addi	r3,r3,1
   21620:	d8c00f15 	stw	r3,60(sp)
   21624:	003edc06 	br	21198 <_gp+0xffff7304>
   21628:	8005883a 	mov	r2,r16
   2162c:	dfc01a17 	ldw	ra,104(sp)
   21630:	df001917 	ldw	fp,100(sp)
   21634:	ddc01817 	ldw	r23,96(sp)
   21638:	dd801717 	ldw	r22,92(sp)
   2163c:	dd401617 	ldw	r21,88(sp)
   21640:	dd001517 	ldw	r20,84(sp)
   21644:	dcc01417 	ldw	r19,80(sp)
   21648:	dc801317 	ldw	r18,76(sp)
   2164c:	dc401217 	ldw	r17,72(sp)
   21650:	dc001117 	ldw	r16,68(sp)
   21654:	dec01b04 	addi	sp,sp,108
   21658:	f800283a 	ret

0002165c <__vfprintf_internal>:
   2165c:	008000b4 	movhi	r2,2
   21660:	1087a604 	addi	r2,r2,7832
   21664:	300f883a 	mov	r7,r6
   21668:	280d883a 	mov	r6,r5
   2166c:	200b883a 	mov	r5,r4
   21670:	11000017 	ldw	r4,0(r2)
   21674:	00211301 	jmpi	21130 <___vfprintf_internal_r>

00021678 <__sfvwrite_small_dev>:
   21678:	2880000b 	ldhu	r2,0(r5)
   2167c:	1080020c 	andi	r2,r2,8
   21680:	10002126 	beq	r2,zero,21708 <__sfvwrite_small_dev+0x90>
   21684:	2880008f 	ldh	r2,2(r5)
   21688:	defffa04 	addi	sp,sp,-24
   2168c:	dc000015 	stw	r16,0(sp)
   21690:	dfc00515 	stw	ra,20(sp)
   21694:	dd000415 	stw	r20,16(sp)
   21698:	dcc00315 	stw	r19,12(sp)
   2169c:	dc800215 	stw	r18,8(sp)
   216a0:	dc400115 	stw	r17,4(sp)
   216a4:	2821883a 	mov	r16,r5
   216a8:	10001216 	blt	r2,zero,216f4 <__sfvwrite_small_dev+0x7c>
   216ac:	2027883a 	mov	r19,r4
   216b0:	3025883a 	mov	r18,r6
   216b4:	3823883a 	mov	r17,r7
   216b8:	05010004 	movi	r20,1024
   216bc:	04400b0e 	bge	zero,r17,216ec <__sfvwrite_small_dev+0x74>
   216c0:	880f883a 	mov	r7,r17
   216c4:	a440010e 	bge	r20,r17,216cc <__sfvwrite_small_dev+0x54>
   216c8:	01c10004 	movi	r7,1024
   216cc:	8140008f 	ldh	r5,2(r16)
   216d0:	900d883a 	mov	r6,r18
   216d4:	9809883a 	mov	r4,r19
   216d8:	00217300 	call	21730 <_write_r>
   216dc:	0080050e 	bge	zero,r2,216f4 <__sfvwrite_small_dev+0x7c>
   216e0:	88a3c83a 	sub	r17,r17,r2
   216e4:	90a5883a 	add	r18,r18,r2
   216e8:	003ff406 	br	216bc <_gp+0xffff7828>
   216ec:	0005883a 	mov	r2,zero
   216f0:	00000706 	br	21710 <__sfvwrite_small_dev+0x98>
   216f4:	8080000b 	ldhu	r2,0(r16)
   216f8:	10801014 	ori	r2,r2,64
   216fc:	8080000d 	sth	r2,0(r16)
   21700:	00bfffc4 	movi	r2,-1
   21704:	00000206 	br	21710 <__sfvwrite_small_dev+0x98>
   21708:	00bfffc4 	movi	r2,-1
   2170c:	f800283a 	ret
   21710:	dfc00517 	ldw	ra,20(sp)
   21714:	dd000417 	ldw	r20,16(sp)
   21718:	dcc00317 	ldw	r19,12(sp)
   2171c:	dc800217 	ldw	r18,8(sp)
   21720:	dc400117 	ldw	r17,4(sp)
   21724:	dc000017 	ldw	r16,0(sp)
   21728:	dec00604 	addi	sp,sp,24
   2172c:	f800283a 	ret

00021730 <_write_r>:
   21730:	defffd04 	addi	sp,sp,-12
   21734:	dc000015 	stw	r16,0(sp)
   21738:	040000b4 	movhi	r16,2
   2173c:	dc400115 	stw	r17,4(sp)
   21740:	8407f004 	addi	r16,r16,8128
   21744:	2023883a 	mov	r17,r4
   21748:	2809883a 	mov	r4,r5
   2174c:	300b883a 	mov	r5,r6
   21750:	380d883a 	mov	r6,r7
   21754:	dfc00215 	stw	ra,8(sp)
   21758:	80000015 	stw	zero,0(r16)
   2175c:	0021a940 	call	21a94 <write>
   21760:	00ffffc4 	movi	r3,-1
   21764:	10c0031e 	bne	r2,r3,21774 <_write_r+0x44>
   21768:	80c00017 	ldw	r3,0(r16)
   2176c:	18000126 	beq	r3,zero,21774 <_write_r+0x44>
   21770:	88c00015 	stw	r3,0(r17)
   21774:	dfc00217 	ldw	ra,8(sp)
   21778:	dc400117 	ldw	r17,4(sp)
   2177c:	dc000017 	ldw	r16,0(sp)
   21780:	dec00304 	addi	sp,sp,12
   21784:	f800283a 	ret

00021788 <__divsi3>:
   21788:	20001b16 	blt	r4,zero,217f8 <__divsi3+0x70>
   2178c:	000f883a 	mov	r7,zero
   21790:	28001616 	blt	r5,zero,217ec <__divsi3+0x64>
   21794:	200d883a 	mov	r6,r4
   21798:	29001a2e 	bgeu	r5,r4,21804 <__divsi3+0x7c>
   2179c:	00800804 	movi	r2,32
   217a0:	00c00044 	movi	r3,1
   217a4:	00000106 	br	217ac <__divsi3+0x24>
   217a8:	10000d26 	beq	r2,zero,217e0 <__divsi3+0x58>
   217ac:	294b883a 	add	r5,r5,r5
   217b0:	10bfffc4 	addi	r2,r2,-1
   217b4:	18c7883a 	add	r3,r3,r3
   217b8:	293ffb36 	bltu	r5,r4,217a8 <_gp+0xffff7914>
   217bc:	0005883a 	mov	r2,zero
   217c0:	18000726 	beq	r3,zero,217e0 <__divsi3+0x58>
   217c4:	0005883a 	mov	r2,zero
   217c8:	31400236 	bltu	r6,r5,217d4 <__divsi3+0x4c>
   217cc:	314dc83a 	sub	r6,r6,r5
   217d0:	10c4b03a 	or	r2,r2,r3
   217d4:	1806d07a 	srli	r3,r3,1
   217d8:	280ad07a 	srli	r5,r5,1
   217dc:	183ffa1e 	bne	r3,zero,217c8 <_gp+0xffff7934>
   217e0:	38000126 	beq	r7,zero,217e8 <__divsi3+0x60>
   217e4:	0085c83a 	sub	r2,zero,r2
   217e8:	f800283a 	ret
   217ec:	014bc83a 	sub	r5,zero,r5
   217f0:	39c0005c 	xori	r7,r7,1
   217f4:	003fe706 	br	21794 <_gp+0xffff7900>
   217f8:	0109c83a 	sub	r4,zero,r4
   217fc:	01c00044 	movi	r7,1
   21800:	003fe306 	br	21790 <_gp+0xffff78fc>
   21804:	00c00044 	movi	r3,1
   21808:	003fee06 	br	217c4 <_gp+0xffff7930>

0002180c <__modsi3>:
   2180c:	20001716 	blt	r4,zero,2186c <__modsi3+0x60>
   21810:	000f883a 	mov	r7,zero
   21814:	2005883a 	mov	r2,r4
   21818:	28001216 	blt	r5,zero,21864 <__modsi3+0x58>
   2181c:	2900162e 	bgeu	r5,r4,21878 <__modsi3+0x6c>
   21820:	01800804 	movi	r6,32
   21824:	00c00044 	movi	r3,1
   21828:	00000106 	br	21830 <__modsi3+0x24>
   2182c:	30000a26 	beq	r6,zero,21858 <__modsi3+0x4c>
   21830:	294b883a 	add	r5,r5,r5
   21834:	31bfffc4 	addi	r6,r6,-1
   21838:	18c7883a 	add	r3,r3,r3
   2183c:	293ffb36 	bltu	r5,r4,2182c <_gp+0xffff7998>
   21840:	18000526 	beq	r3,zero,21858 <__modsi3+0x4c>
   21844:	1806d07a 	srli	r3,r3,1
   21848:	11400136 	bltu	r2,r5,21850 <__modsi3+0x44>
   2184c:	1145c83a 	sub	r2,r2,r5
   21850:	280ad07a 	srli	r5,r5,1
   21854:	183ffb1e 	bne	r3,zero,21844 <_gp+0xffff79b0>
   21858:	38000126 	beq	r7,zero,21860 <__modsi3+0x54>
   2185c:	0085c83a 	sub	r2,zero,r2
   21860:	f800283a 	ret
   21864:	014bc83a 	sub	r5,zero,r5
   21868:	003fec06 	br	2181c <_gp+0xffff7988>
   2186c:	0109c83a 	sub	r4,zero,r4
   21870:	01c00044 	movi	r7,1
   21874:	003fe706 	br	21814 <_gp+0xffff7980>
   21878:	00c00044 	movi	r3,1
   2187c:	003ff106 	br	21844 <_gp+0xffff79b0>

00021880 <__udivsi3>:
   21880:	200d883a 	mov	r6,r4
   21884:	2900152e 	bgeu	r5,r4,218dc <__udivsi3+0x5c>
   21888:	28001416 	blt	r5,zero,218dc <__udivsi3+0x5c>
   2188c:	00800804 	movi	r2,32
   21890:	00c00044 	movi	r3,1
   21894:	00000206 	br	218a0 <__udivsi3+0x20>
   21898:	10000e26 	beq	r2,zero,218d4 <__udivsi3+0x54>
   2189c:	28000516 	blt	r5,zero,218b4 <__udivsi3+0x34>
   218a0:	294b883a 	add	r5,r5,r5
   218a4:	10bfffc4 	addi	r2,r2,-1
   218a8:	18c7883a 	add	r3,r3,r3
   218ac:	293ffa36 	bltu	r5,r4,21898 <_gp+0xffff7a04>
   218b0:	18000826 	beq	r3,zero,218d4 <__udivsi3+0x54>
   218b4:	0005883a 	mov	r2,zero
   218b8:	31400236 	bltu	r6,r5,218c4 <__udivsi3+0x44>
   218bc:	314dc83a 	sub	r6,r6,r5
   218c0:	10c4b03a 	or	r2,r2,r3
   218c4:	1806d07a 	srli	r3,r3,1
   218c8:	280ad07a 	srli	r5,r5,1
   218cc:	183ffa1e 	bne	r3,zero,218b8 <_gp+0xffff7a24>
   218d0:	f800283a 	ret
   218d4:	0005883a 	mov	r2,zero
   218d8:	f800283a 	ret
   218dc:	00c00044 	movi	r3,1
   218e0:	003ff406 	br	218b4 <_gp+0xffff7a20>

000218e4 <__umodsi3>:
   218e4:	2005883a 	mov	r2,r4
   218e8:	2900122e 	bgeu	r5,r4,21934 <__umodsi3+0x50>
   218ec:	28001116 	blt	r5,zero,21934 <__umodsi3+0x50>
   218f0:	01800804 	movi	r6,32
   218f4:	00c00044 	movi	r3,1
   218f8:	00000206 	br	21904 <__umodsi3+0x20>
   218fc:	30000c26 	beq	r6,zero,21930 <__umodsi3+0x4c>
   21900:	28000516 	blt	r5,zero,21918 <__umodsi3+0x34>
   21904:	294b883a 	add	r5,r5,r5
   21908:	31bfffc4 	addi	r6,r6,-1
   2190c:	18c7883a 	add	r3,r3,r3
   21910:	293ffa36 	bltu	r5,r4,218fc <_gp+0xffff7a68>
   21914:	18000626 	beq	r3,zero,21930 <__umodsi3+0x4c>
   21918:	1806d07a 	srli	r3,r3,1
   2191c:	11400136 	bltu	r2,r5,21924 <__umodsi3+0x40>
   21920:	1145c83a 	sub	r2,r2,r5
   21924:	280ad07a 	srli	r5,r5,1
   21928:	183ffb1e 	bne	r3,zero,21918 <_gp+0xffff7a84>
   2192c:	f800283a 	ret
   21930:	f800283a 	ret
   21934:	00c00044 	movi	r3,1
   21938:	003ff706 	br	21918 <_gp+0xffff7a84>

0002193c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2193c:	deffff04 	addi	sp,sp,-4
   21940:	010000b4 	movhi	r4,2
   21944:	014000b4 	movhi	r5,2
   21948:	dfc00015 	stw	ra,0(sp)
   2194c:	21076d04 	addi	r4,r4,7604
   21950:	2947aa04 	addi	r5,r5,7848

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21954:	2140061e 	bne	r4,r5,21970 <alt_load+0x34>
   21958:	010000b4 	movhi	r4,2
   2195c:	014000b4 	movhi	r5,2
   21960:	21000804 	addi	r4,r4,32
   21964:	29400804 	addi	r5,r5,32
   21968:	2140121e 	bne	r4,r5,219b4 <alt_load+0x78>
   2196c:	00000b06 	br	2199c <alt_load+0x60>
   21970:	00c000b4 	movhi	r3,2
   21974:	18c7aa04 	addi	r3,r3,7848
   21978:	1907c83a 	sub	r3,r3,r4
   2197c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   21980:	10fff526 	beq	r2,r3,21958 <_gp+0xffff7ac4>
    {
      *to++ = *from++;
   21984:	114f883a 	add	r7,r2,r5
   21988:	39c00017 	ldw	r7,0(r7)
   2198c:	110d883a 	add	r6,r2,r4
   21990:	10800104 	addi	r2,r2,4
   21994:	31c00015 	stw	r7,0(r6)
   21998:	003ff906 	br	21980 <_gp+0xffff7aec>
   2199c:	010000b4 	movhi	r4,2
   219a0:	014000b4 	movhi	r5,2
   219a4:	21074b04 	addi	r4,r4,7468
   219a8:	29474b04 	addi	r5,r5,7468

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   219ac:	2140101e 	bne	r4,r5,219f0 <alt_load+0xb4>
   219b0:	00000b06 	br	219e0 <alt_load+0xa4>
   219b4:	00c000b4 	movhi	r3,2
   219b8:	18c00804 	addi	r3,r3,32
   219bc:	1907c83a 	sub	r3,r3,r4
   219c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   219c4:	10fff526 	beq	r2,r3,2199c <_gp+0xffff7b08>
    {
      *to++ = *from++;
   219c8:	114f883a 	add	r7,r2,r5
   219cc:	39c00017 	ldw	r7,0(r7)
   219d0:	110d883a 	add	r6,r2,r4
   219d4:	10800104 	addi	r2,r2,4
   219d8:	31c00015 	stw	r7,0(r6)
   219dc:	003ff906 	br	219c4 <_gp+0xffff7b30>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   219e0:	0021d1c0 	call	21d1c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   219e4:	dfc00017 	ldw	ra,0(sp)
   219e8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   219ec:	0021d201 	jmpi	21d20 <alt_icache_flush_all>
   219f0:	00c000b4 	movhi	r3,2
   219f4:	18c76d04 	addi	r3,r3,7604
   219f8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   219fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   21a00:	18bff726 	beq	r3,r2,219e0 <_gp+0xffff7b4c>
    {
      *to++ = *from++;
   21a04:	114f883a 	add	r7,r2,r5
   21a08:	39c00017 	ldw	r7,0(r7)
   21a0c:	110d883a 	add	r6,r2,r4
   21a10:	10800104 	addi	r2,r2,4
   21a14:	31c00015 	stw	r7,0(r6)
   21a18:	003ff906 	br	21a00 <_gp+0xffff7b6c>

00021a1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21a1c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21a20:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21a24:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21a28:	0021af40 	call	21af4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   21a2c:	0021b140 	call	21b14 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   21a30:	d1a04c17 	ldw	r6,-32464(gp)
   21a34:	d1604d17 	ldw	r5,-32460(gp)
   21a38:	d1204e17 	ldw	r4,-32456(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   21a3c:	dfc00017 	ldw	ra,0(sp)
   21a40:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   21a44:	00204681 	jmpi	20468 <main>

00021a48 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a48:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a4c:	00bfff84 	movi	r2,-2
   21a50:	2884703a 	and	r2,r5,r2
   21a54:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21a58:	d0a00217 	ldw	r2,-32760(gp)
   21a5c:	00ffff04 	movi	r3,-4
   21a60:	108000c4 	addi	r2,r2,3
   21a64:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   21a68:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21a6c:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   21a70:	1109883a 	add	r4,r2,r4
   21a74:	18d80004 	addi	r3,r3,24576
   21a78:	1900032e 	bgeu	r3,r4,21a88 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a7c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   21a80:	00bfffc4 	movi	r2,-1
   21a84:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   21a88:	d1200215 	stw	r4,-32760(gp)
   21a8c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   21a90:	f800283a 	ret

00021a94 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   21a94:	00800044 	movi	r2,1
   21a98:	20800226 	beq	r4,r2,21aa4 <write+0x10>
   21a9c:	00800084 	movi	r2,2
   21aa0:	2080041e 	bne	r4,r2,21ab4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   21aa4:	010000b4 	movhi	r4,2
   21aa8:	000f883a 	mov	r7,zero
   21aac:	2107a804 	addi	r4,r4,7840
   21ab0:	0021ce81 	jmpi	21ce8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   21ab4:	d0a00417 	ldw	r2,-32752(gp)
   21ab8:	10000926 	beq	r2,zero,21ae0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   21abc:	deffff04 	addi	sp,sp,-4
   21ac0:	dfc00015 	stw	ra,0(sp)
   21ac4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   21ac8:	00c01444 	movi	r3,81
   21acc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   21ad0:	00bfffc4 	movi	r2,-1
   21ad4:	dfc00017 	ldw	ra,0(sp)
   21ad8:	dec00104 	addi	sp,sp,4
   21adc:	f800283a 	ret
   21ae0:	d0a04b04 	addi	r2,gp,-32468
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   21ae4:	00c01444 	movi	r3,81
   21ae8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   21aec:	00bfffc4 	movi	r2,-1
   21af0:	f800283a 	ret

00021af4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21af4:	deffff04 	addi	sp,sp,-4
   21af8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_1, nios2_1);
   21afc:	0021d240 	call	21d24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21b00:	00800044 	movi	r2,1
   21b04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21b08:	dfc00017 	ldw	ra,0(sp)
   21b0c:	dec00104 	addi	sp,sp,4
   21b10:	f800283a 	ret

00021b14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21b14:	f800283a 	ret

00021b18 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21b18:	20800137 	ldwio	r2,4(r4)
}
   21b1c:	1144703a 	and	r2,r2,r5
   21b20:	f800283a 	ret

00021b24 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   21b24:	20800337 	ldwio	r2,12(r4)
}
   21b28:	1144703a 	and	r2,r2,r5
   21b2c:	f800283a 	ret

00021b30 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   21b30:	20800437 	ldwio	r2,16(r4)
   21b34:	f800283a 	ret

00021b38 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   21b38:	20800537 	ldwio	r2,20(r4)
   21b3c:	f800283a 	ret

00021b40 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   21b40:	20800237 	ldwio	r2,8(r4)
}
   21b44:	1144703a 	and	r2,r2,r5
   21b48:	f800283a 	ret

00021b4c <altera_avalon_fifo_read_level>:
   21b4c:	20800037 	ldwio	r2,0(r4)
   21b50:	f800283a 	ret

00021b54 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   21b54:	21000204 	addi	r4,r4,8
   21b58:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   21b5c:	20800037 	ldwio	r2,0(r4)
   21b60:	114a703a 	and	r5,r2,r5
   21b64:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   21b68:	0085c83a 	sub	r2,zero,r2
   21b6c:	f800283a 	ret

00021b70 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   21b70:	21000304 	addi	r4,r4,12
   21b74:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   21b78:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21b7c:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   21b80:	28c00126 	beq	r5,r3,21b88 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   21b84:	00bfff84 	movi	r2,-2
}
   21b88:	f800283a 	ret

00021b8c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   21b8c:	21000404 	addi	r4,r4,16
   21b90:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   21b94:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21b98:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   21b9c:	28c00126 	beq	r5,r3,21ba4 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21ba0:	00bfff44 	movi	r2,-3
}
   21ba4:	f800283a 	ret

00021ba8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   21ba8:	21000504 	addi	r4,r4,20
   21bac:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   21bb0:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21bb4:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   21bb8:	28c00126 	beq	r5,r3,21bc0 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21bbc:	00bfff44 	movi	r2,-3
}
   21bc0:	f800283a 	ret

00021bc4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   21bc4:	defffb04 	addi	sp,sp,-20
   21bc8:	dcc00315 	stw	r19,12(sp)
   21bcc:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   21bd0:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   21bd4:	dc800215 	stw	r18,8(sp)
   21bd8:	dc400115 	stw	r17,4(sp)
   21bdc:	dc000015 	stw	r16,0(sp)
   21be0:	dfc00415 	stw	ra,16(sp)
   21be4:	2021883a 	mov	r16,r4
   21be8:	3023883a 	mov	r17,r6
   21bec:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   21bf0:	0021b540 	call	21b54 <altera_avalon_fifo_clear_event>
   21bf4:	10000f1e 	bne	r2,zero,21c34 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   21bf8:	980b883a 	mov	r5,r19
   21bfc:	8009883a 	mov	r4,r16
   21c00:	0021b700 	call	21b70 <altera_avalon_fifo_write_ienable>
   21c04:	10000d1e 	bne	r2,zero,21c3c <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   21c08:	900b883a 	mov	r5,r18
   21c0c:	8009883a 	mov	r4,r16
   21c10:	0021b8c0 	call	21b8c <altera_avalon_fifo_write_almostfull>
   21c14:	10000226 	beq	r2,zero,21c20 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21c18:	00bfff44 	movi	r2,-3
   21c1c:	00000806 	br	21c40 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   21c20:	880b883a 	mov	r5,r17
   21c24:	8009883a 	mov	r4,r16
   21c28:	0021ba80 	call	21ba8 <altera_avalon_fifo_write_almostempty>
   21c2c:	10000426 	beq	r2,zero,21c40 <altera_avalon_fifo_init+0x7c>
   21c30:	003ff906 	br	21c18 <_gp+0xffff7d84>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   21c34:	00bfffc4 	movi	r2,-1
   21c38:	00000106 	br	21c40 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   21c3c:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   21c40:	dfc00417 	ldw	ra,16(sp)
   21c44:	dcc00317 	ldw	r19,12(sp)
   21c48:	dc800217 	ldw	r18,8(sp)
   21c4c:	dc400117 	ldw	r17,4(sp)
   21c50:	dc000017 	ldw	r16,0(sp)
   21c54:	dec00504 	addi	sp,sp,20
   21c58:	f800283a 	ret

00021c5c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21c5c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   21c60:	1080004c 	andi	r2,r2,1
   21c64:	1000021e 	bne	r2,zero,21c70 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   21c68:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21c6c:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   21c70:	00bfff04 	movi	r2,-4
    }
}
   21c74:	f800283a 	ret

00021c78 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   21c78:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21c7c:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   21c80:	1080008c 	andi	r2,r2,2
   21c84:	1000041e 	bne	r2,zero,21c98 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   21c88:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   21c8c:	20c00037 	ldwio	r3,0(r4)
   21c90:	30c00015 	stw	r3,0(r6)
   21c94:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   21c98:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   21c9c:	f800283a 	ret

00021ca0 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21ca0:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   21ca4:	1080008c 	andi	r2,r2,2
   21ca8:	1000021e 	bne	r2,zero,21cb4 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   21cac:	20800037 	ldwio	r2,0(r4)
   21cb0:	f800283a 	ret
    }
    return 0;
   21cb4:	0005883a 	mov	r2,zero
}
   21cb8:	f800283a 	ret

00021cbc <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21cbc:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   21cc0:	1080004c 	andi	r2,r2,1
   21cc4:	1000021e 	bne	r2,zero,21cd0 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   21cc8:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   21ccc:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   21cd0:	00bfff04 	movi	r2,-4
    }
}
   21cd4:	f800283a 	ret

00021cd8 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   21cd8:	20800137 	ldwio	r2,4(r4)
   21cdc:	f800283a 	ret

00021ce0 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   21ce0:	20800037 	ldwio	r2,0(r4)
   21ce4:	f800283a 	ret

00021ce8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   21ce8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21cec:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   21cf0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21cf4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   21cf8:	2980072e 	bgeu	r5,r6,21d18 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21cfc:	38c00037 	ldwio	r3,0(r7)
   21d00:	18ffffec 	andhi	r3,r3,65535
   21d04:	183ffc26 	beq	r3,zero,21cf8 <_gp+0xffff7e64>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21d08:	28c00007 	ldb	r3,0(r5)
   21d0c:	20c00035 	stwio	r3,0(r4)
   21d10:	29400044 	addi	r5,r5,1
   21d14:	003ff806 	br	21cf8 <_gp+0xffff7e64>

  return count;
}
   21d18:	f800283a 	ret

00021d1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21d1c:	f800283a 	ret

00021d20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21d20:	f800283a 	ret

00021d24 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   21d24:	000170fa 	wrctl	ienable,zero
   21d28:	f800283a 	ret
