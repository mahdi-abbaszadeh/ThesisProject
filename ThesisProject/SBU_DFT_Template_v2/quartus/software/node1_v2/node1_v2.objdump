
node1_v2.elf:     file format elf32-littlenios2
node1_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000015b8 memsz 0x000015b8 flags r-x
    LOAD off    0x000025d8 vaddr 0x000215d8 paddr 0x000216c8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000027b8 vaddr 0x000217b8 paddr 0x000217b8 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  000026c8  2**0
                  CONTENTS
  2 .text         00001414  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001a4  00021434  00021434  00002434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  000215d8  000216c8  000025d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  000217b8  000217b8  000027b8  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_1   00000000  000217cc  000217cc  000026c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000338  00000000  00000000  000026f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004d3e  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000187f  00000000  00000000  00007766  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001bfd  00000000  00000000  00008fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000640  00000000  00000000  0000abe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001453  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d3d  00000000  00000000  0000c677  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000e3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  0000e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000fb32  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0000fb35  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000fb3c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000fb3d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000fb3e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000fb49  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000fb54  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0000fb5f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  0000fb6a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  0000fbbc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  0001d77e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00021434 l    d  .rodata	00000000 .rodata
000215d8 l    d  .rwdata	00000000 .rwdata
000217b8 l    d  .bss	00000000 .bss
000217cc l    d  .data_mem_1	00000000 .data_mem_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node1_v2_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_1.c
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000207b8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000215d8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00021138 g     F .text	0000002c alt_main
00020708 g     F .text	00000080 _puts_r
00021294 g     F .text	0000001c altera_avalon_fifo_write_almostfull
000216c8 g       *ABS*	00000000 __flash_rwdata_start
000206bc g     F .text	0000004c printf
000212cc g     F .text	00000098 altera_avalon_fifo_init
00021364 g     F .text	0000001c altera_avalon_fifo_write_fifo
00021164 g     F .text	00000038 alt_putstr
0002142c g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
000213e8 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
000217bc g     O .bss	00000004 errno
0002005c g     F .text	00000030 proc_2
000217c4 g     O .bss	00000004 alt_argv
000296b8 g       *ABS*	00000000 _gp
0002125c g     F .text	0000001c altera_avalon_fifo_clear_event
00020658 g     F .text	00000028 memcpy
00020788 g     F .text	00000014 puts
00020000 g       *ABS*	00000000 __alt_mem_data_mem_1
00020680 g     F .text	0000003c _printf_r
00020f74 g     F .text	00000064 .hidden __udivsi3
000216b8 g     O .rwdata	00000004 _global_impure_ptr
000217cc g       *ABS*	00000000 __bss_end
00020630 g     F .text	00000028 receive_poll
00021424 g     F .text	00000004 alt_dcache_flush_all
00021278 g     F .text	0000001c altera_avalon_fifo_write_ienable
000216c8 g       *ABS*	00000000 __ram_rwdata_end
00021240 g     F .text	00000008 altera_avalon_fifo_read_almostempty
0002119c g     F .text	00000060 write
000215d8 g       *ABS*	00000000 __ram_rodata_end
000216c0 g     O .rwdata	00000004 jtag_uart_0
00020fd8 g     F .text	00000058 .hidden __umodsi3
000217cc g       *ABS*	00000000 end
00021248 g     F .text	0000000c altera_avalon_fifo_read_event
00026000 g       *ABS*	00000000 __alt_stack_pointer
000213f0 g     F .text	00000034 altera_avalon_jtag_uart_write
000217b8 g     O .bss	00000004 input_fifo_wrclk_irq_event
000213a8 g     F .text	0000001c altera_avalon_fifo_read_fifo
00020824 g     F .text	0000052c ___vfprintf_internal_r
00020230 g     F .text	000001e4 send_packet
00020020 g     F .text	0000003c _start
0002121c g     F .text	00000004 alt_sys_init
00021030 g     F .text	00000028 .hidden __mulsi3
000215d8 g       *ABS*	00000000 __ram_rwdata_start
00021434 g       *ABS*	00000000 __ram_rodata_start
000217cc g       *ABS*	00000000 __alt_stack_base
0002008c g     F .text	000000d0 print_status
00021220 g     F .text	0000000c altera_avalon_fifo_read_status
000213e0 g     F .text	00000008 altera_avalon_fifo_read_other_info
00020d6c g     F .text	000000b8 __sfvwrite_small_dev
000217b8 g       *ABS*	00000000 __bss_start
0002015c g     F .text	000000d4 main
000217c0 g     O .bss	00000004 alt_envp
00021254 g     F .text	00000008 altera_avalon_fifo_read_level
000216c4 g     O .rwdata	00000004 alt_errno
00020e7c g     F .text	00000084 .hidden __divsi3
00021434 g       *ABS*	00000000 __flash_rodata_start
000211fc g     F .text	00000020 alt_irq_init
00020e24 g     F .text	00000058 _write_r
000216bc g     O .rwdata	00000004 _impure_ptr
000217c8 g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
000204bc g     F .text	00000174 receive_packet
000213c4 g     F .text	0000001c altera_avalon_fifo_write_other_info
00020414 g     F .text	000000a8 read_payload
000216c8 g       *ABS*	00000000 _edata
000217cc g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00020f00 g     F .text	00000074 .hidden __modsi3
0002122c g     F .text	0000000c altera_avalon_fifo_read_ienable
00026000 g       *ABS*	00000000 __alt_data_end
0002000c g       .entry	00000000 _exit
00021238 g     F .text	00000008 altera_avalon_fifo_read_almostfull
0002079c g     F .text	0000001c strlen
00021380 g     F .text	00000028 altera_avalon_read_fifo
00021428 g     F .text	00000004 alt_icache_flush_all
00020d50 g     F .text	0000001c __vfprintf_internal
000212b0 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00021058 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a5ae14 	ori	gp,gp,38584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	1085ee14 	ori	r2,r2,6072

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c5f314 	ori	r3,r3,6092

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_gp+0xffff698c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00210580 	call	21058 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00211380 	call	21138 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <_gp+0xffff69a0>

0002005c <proc_2>:
#define ALMOST_FULL 11
volatile int input_fifo_wrclk_irq_event;



void proc_2(unsigned char *in_0, unsigned char *out_0, unsigned char *out_1){
   2005c:	20c00604 	addi	r3,r4,24
	for (int i = 0; i < 24; ++i){
		*(out_0 + i) = *(in_0 + i) * 2;
   20060:	20800003 	ldbu	r2,0(r4)
   20064:	21000044 	addi	r4,r4,1
   20068:	29400044 	addi	r5,r5,1
   2006c:	1085883a 	add	r2,r2,r2
   20070:	28bfffc5 	stb	r2,-1(r5)
		*(out_1 + i) = *(in_0 + i) * 2;
   20074:	20bfffc3 	ldbu	r2,-1(r4)
   20078:	31800044 	addi	r6,r6,1
   2007c:	1085883a 	add	r2,r2,r2
   20080:	30bfffc5 	stb	r2,-1(r6)
volatile int input_fifo_wrclk_irq_event;



void proc_2(unsigned char *in_0, unsigned char *out_0, unsigned char *out_1){
	for (int i = 0; i < 24; ++i){
   20084:	20fff61e 	bne	r4,r3,20060 <_gp+0xffff69a8>
		*(out_0 + i) = *(in_0 + i) * 2;
		*(out_1 + i) = *(in_0 + i) * 2;
	}
}
   20088:	f800283a 	ret

0002008c <print_status>:
                                          ALMOST_FULL);
  return return_code;
}

void print_status(alt_u32 control_base_address)
{
   2008c:	defffd04 	addi	sp,sp,-12
   20090:	dc000015 	stw	r16,0(sp)
   20094:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   20098:	010000b4 	movhi	r4,2
   2009c:	21050d04 	addi	r4,r4,5172
                                          ALMOST_FULL);
  return return_code;
}

void print_status(alt_u32 control_base_address)
{
   200a0:	dfc00215 	stw	ra,8(sp)
   200a4:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   200a8:	00207880 	call	20788 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   200ac:	8009883a 	mov	r4,r16
   200b0:	00212540 	call	21254 <altera_avalon_fifo_read_level>
   200b4:	010000b4 	movhi	r4,2
   200b8:	100b883a 	mov	r5,r2
   200bc:	21051704 	addi	r4,r4,5212
   200c0:	00206bc0 	call	206bc <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   200c4:	04400fc4 	movi	r17,63
   200c8:	880b883a 	mov	r5,r17
   200cc:	8009883a 	mov	r4,r16
   200d0:	00212200 	call	21220 <altera_avalon_fifo_read_status>
   200d4:	010000b4 	movhi	r4,2
   200d8:	100b883a 	mov	r5,r2
   200dc:	21051a04 	addi	r4,r4,5224
   200e0:	00206bc0 	call	206bc <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   200e4:	880b883a 	mov	r5,r17
   200e8:	8009883a 	mov	r4,r16
   200ec:	00212480 	call	21248 <altera_avalon_fifo_read_event>
   200f0:	010000b4 	movhi	r4,2
   200f4:	100b883a 	mov	r5,r2
   200f8:	21051e04 	addi	r4,r4,5240
   200fc:	00206bc0 	call	206bc <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   20100:	880b883a 	mov	r5,r17
   20104:	8009883a 	mov	r4,r16
   20108:	002122c0 	call	2122c <altera_avalon_fifo_read_ienable>
   2010c:	010000b4 	movhi	r4,2
   20110:	100b883a 	mov	r5,r2
   20114:	21052104 	addi	r4,r4,5252
   20118:	00206bc0 	call	206bc <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   2011c:	8009883a 	mov	r4,r16
   20120:	00212400 	call	21240 <altera_avalon_fifo_read_almostempty>
   20124:	010000b4 	movhi	r4,2
   20128:	100b883a 	mov	r5,r2
   2012c:	21052504 	addi	r4,r4,5268
   20130:	00206bc0 	call	206bc <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   20134:	8009883a 	mov	r4,r16
   20138:	00212380 	call	21238 <altera_avalon_fifo_read_almostfull>
   2013c:	010000b4 	movhi	r4,2
   20140:	100b883a 	mov	r5,r2
   20144:	21052a04 	addi	r4,r4,5288
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   20148:	dfc00217 	ldw	ra,8(sp)
   2014c:	dc400117 	ldw	r17,4(sp)
   20150:	dc000017 	ldw	r16,0(sp)
   20154:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   20158:	00206bc1 	jmpi	206bc <printf>

0002015c <main>:
    altera_avalon_fifo_read_almostfull(control_base_address));
}

int main()
{
   2015c:	defff004 	addi	sp,sp,-64
   20160:	dc000e15 	stw	r16,56(sp)
  unsigned char send_array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   20164:	014000b4 	movhi	r5,2
   20168:	dc000804 	addi	r16,sp,32
   2016c:	01800604 	movi	r6,24
   20170:	29454dc4 	addi	r5,r5,5431
   20174:	8009883a 	mov	r4,r16
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

int main()
{
   20178:	dfc00f15 	stw	ra,60(sp)
  unsigned char send_array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   2017c:	00206580 	call	20658 <memcpy>
  unsigned char proc_2_in_0[24] = {};
  unsigned char proc_2_out_0[24] = {};
  unsigned char proc_2_out_1[24] = {};


  alt_putstr("Hello from Nios II!\n");
   20180:	010000b4 	movhi	r4,2
   20184:	21052f04 	addi	r4,r4,5308
   20188:	00211640 	call	21164 <alt_putstr>
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   2018c:	01c002c4 	movi	r7,11
   20190:	01800084 	movi	r6,2
   20194:	000b883a 	mov	r5,zero
   20198:	01240814 	movui	r4,36896
   2019c:	00212cc0 	call	212cc <altera_avalon_fifo_init>
   201a0:	01c002c4 	movi	r7,11
   201a4:	01800084 	movi	r6,2
   201a8:	000b883a 	mov	r5,zero
   201ac:	01240014 	movui	r4,36864
   201b0:	00212cc0 	call	212cc <altera_avalon_fifo_init>

    //initialization of FIFOs
  init_input_fifo_wrclk_control(FIFO_SINK_1_IN_CSR_BASE);
  init_input_fifo_wrclk_control(FIFO_SOURCE_1_IN_CSR_BASE);

  alt_putstr("source status:\n");
   201b4:	010000b4 	movhi	r4,2
   201b8:	21053504 	addi	r4,r4,5332
   201bc:	00211640 	call	21164 <alt_putstr>
  print_status(FIFO_SOURCE_1_IN_CSR_BASE);
   201c0:	01240014 	movui	r4,36864
   201c4:	002008c0 	call	2008c <print_status>

  alt_putstr("sink status:\n");
   201c8:	010000b4 	movhi	r4,2
   201cc:	21053904 	addi	r4,r4,5348
   201d0:	00211640 	call	21164 <alt_putstr>
  print_status(FIFO_SINK_1_IN_CSR_BASE);
   201d4:	01240814 	movui	r4,36896
   201d8:	002008c0 	call	2008c <print_status>

  alt_putstr("waiting for receiving data:\n");
   201dc:	010000b4 	movhi	r4,2
   201e0:	21053d04 	addi	r4,r4,5364
   201e4:	00211640 	call	21164 <alt_putstr>
  receive_poll();
   201e8:	00206300 	call	20630 <receive_poll>

  alt_putstr("read from FIFO:\n");
   201ec:	010000b4 	movhi	r4,2
   201f0:	21054504 	addi	r4,r4,5396
   201f4:	00211640 	call	21164 <alt_putstr>
  receive_packet(receive_array);
   201f8:	d9000204 	addi	r4,sp,8
   201fc:	00204bc0 	call	204bc <receive_packet>

  alt_putstr("write to FIFO\n");
   20200:	010000b4 	movhi	r4,2
   20204:	21054a04 	addi	r4,r4,5416
   20208:	00211640 	call	21164 <alt_putstr>
  send_packet(0x1,0x2,0x1111,0x2222,0x20,send_array);
   2020c:	00800804 	movi	r2,32
   20210:	dc000115 	stw	r16,4(sp)
   20214:	d8800015 	stw	r2,0(sp)
   20218:	01c88884 	movi	r7,8738
   2021c:	01844444 	movi	r6,4369
   20220:	01400084 	movi	r5,2
   20224:	01000044 	movi	r4,1
   20228:	00202300 	call	20230 <send_packet>
   2022c:	003fff06 	br	2022c <_gp+0xffff6b74>

00020230 <send_packet>:
#include "packet_transaction_util.h"
#include "packet_transaction.h"

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20230:	defff904 	addi	sp,sp,-28
   20234:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   20238:	25403fcc 	andi	r21,r4,255
#include "packet_transaction_util.h"
#include "packet_transaction.h"

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   2023c:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20240:	d8800703 	ldbu	r2,28(sp)
#include "packet_transaction_util.h"
#include "packet_transaction.h"

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20244:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20248:	a80c923a 	slli	r6,r21,8
   2024c:	29403fcc 	andi	r5,r5,255
   20250:	1004943a 	slli	r2,r2,16
   20254:	314ab03a 	or	r5,r6,r5
   20258:	a00c943a 	slli	r6,r20,16
#include "packet_transaction_util.h"
#include "packet_transaction.h"

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   2025c:	dcc00315 	stw	r19,12(sp)
   20260:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20264:	9cffffcc 	andi	r19,r19,65535
#include "packet_transaction_util.h"
#include "packet_transaction.h"

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20268:	dc800215 	stw	r18,8(sp)
   2026c:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20270:	04a40014 	movui	r18,36864
   20274:	04641214 	movui	r17,36936
   20278:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2027c:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20280:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20284:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20288:	298cb03a 	or	r6,r5,r6
   2028c:	8809883a 	mov	r4,r17
   20290:	900b883a 	mov	r5,r18
#include "packet_transaction_util.h"
#include "packet_transaction.h"

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20294:	dfc00615 	stw	ra,24(sp)
   20298:	dc000015 	stw	r16,0(sp)
   2029c:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   202a0:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   202a4:	ace6b03a 	or	r19,r21,r19
   202a8:	a1803fcc 	andi	r6,r20,255
   202ac:	998cb03a 	or	r6,r19,r6
   202b0:	900b883a 	mov	r5,r18
   202b4:	8809883a 	mov	r4,r17
   202b8:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>
   202bc:	80800043 	ldbu	r2,1(r16)
   202c0:	81000003 	ldbu	r4,0(r16)
   202c4:	818000c3 	ldbu	r6,3(r16)
   202c8:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   202cc:	900b883a 	mov	r5,r18
   202d0:	300c963a 	slli	r6,r6,24
   202d4:	1106b03a 	or	r3,r2,r4
   202d8:	80800083 	ldbu	r2,2(r16)
   202dc:	8809883a 	mov	r4,r17
   202e0:	1004943a 	slli	r2,r2,16
   202e4:	10c4b03a 	or	r2,r2,r3
   202e8:	308cb03a 	or	r6,r6,r2
   202ec:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>
   202f0:	80800143 	ldbu	r2,5(r16)
   202f4:	81000103 	ldbu	r4,4(r16)
   202f8:	818001c3 	ldbu	r6,7(r16)
   202fc:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20300:	900b883a 	mov	r5,r18
   20304:	300c963a 	slli	r6,r6,24
   20308:	1106b03a 	or	r3,r2,r4
   2030c:	80800183 	ldbu	r2,6(r16)
   20310:	8809883a 	mov	r4,r17
   20314:	1004943a 	slli	r2,r2,16
   20318:	10c4b03a 	or	r2,r2,r3
   2031c:	308cb03a 	or	r6,r6,r2
   20320:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>
   20324:	80800243 	ldbu	r2,9(r16)
   20328:	81000203 	ldbu	r4,8(r16)
   2032c:	818002c3 	ldbu	r6,11(r16)
   20330:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20334:	900b883a 	mov	r5,r18
   20338:	300c963a 	slli	r6,r6,24
   2033c:	1106b03a 	or	r3,r2,r4
   20340:	80800283 	ldbu	r2,10(r16)
   20344:	8809883a 	mov	r4,r17
   20348:	1004943a 	slli	r2,r2,16
   2034c:	10c4b03a 	or	r2,r2,r3
   20350:	308cb03a 	or	r6,r6,r2
   20354:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>
   20358:	80800343 	ldbu	r2,13(r16)
   2035c:	81000303 	ldbu	r4,12(r16)
   20360:	818003c3 	ldbu	r6,15(r16)
   20364:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20368:	900b883a 	mov	r5,r18
   2036c:	300c963a 	slli	r6,r6,24
   20370:	1106b03a 	or	r3,r2,r4
   20374:	80800383 	ldbu	r2,14(r16)
   20378:	8809883a 	mov	r4,r17
   2037c:	1004943a 	slli	r2,r2,16
   20380:	10c4b03a 	or	r2,r2,r3
   20384:	308cb03a 	or	r6,r6,r2
   20388:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>
   2038c:	80800443 	ldbu	r2,17(r16)
   20390:	81000403 	ldbu	r4,16(r16)
   20394:	818004c3 	ldbu	r6,19(r16)
   20398:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2039c:	900b883a 	mov	r5,r18
   203a0:	300c963a 	slli	r6,r6,24
   203a4:	1106b03a 	or	r3,r2,r4
   203a8:	80800483 	ldbu	r2,18(r16)
   203ac:	8809883a 	mov	r4,r17
   203b0:	1004943a 	slli	r2,r2,16
   203b4:	10c4b03a 	or	r2,r2,r3
   203b8:	308cb03a 	or	r6,r6,r2
   203bc:	00213640 	call	21364 <altera_avalon_fifo_write_fifo>
   203c0:	80800543 	ldbu	r2,21(r16)
   203c4:	81000503 	ldbu	r4,20(r16)
   203c8:	818005c3 	ldbu	r6,23(r16)
   203cc:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   203d0:	900b883a 	mov	r5,r18
   203d4:	300c963a 	slli	r6,r6,24
   203d8:	1106b03a 	or	r3,r2,r4
   203dc:	80800583 	ldbu	r2,22(r16)
   203e0:	8809883a 	mov	r4,r17
   203e4:	1004943a 	slli	r2,r2,16
   203e8:	10c4b03a 	or	r2,r2,r3
   203ec:	308cb03a 	or	r6,r6,r2

}
   203f0:	dfc00617 	ldw	ra,24(sp)
   203f4:	dd400517 	ldw	r21,20(sp)
   203f8:	dd000417 	ldw	r20,16(sp)
   203fc:	dcc00317 	ldw	r19,12(sp)
   20400:	dc800217 	ldw	r18,8(sp)
   20404:	dc400117 	ldw	r17,4(sp)
   20408:	dc000017 	ldw	r16,0(sp)
   2040c:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20410:	00213641 	jmpi	21364 <altera_avalon_fifo_write_fifo>

00020414 <read_payload>:

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   20414:	defffb04 	addi	sp,sp,-20
   20418:	dcc00315 	stw	r19,12(sp)
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   2041c:	04c000b4 	movhi	r19,2
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   20420:	dfc00415 	stw	ra,16(sp)
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   20424:	9cc55404 	addi	r19,r19,5456
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   20428:	dc800215 	stw	r18,8(sp)
   2042c:	dc400115 	stw	r17,4(sp)
   20430:	dc000015 	stw	r16,0(sp)
	*(payload + 0 + byte_coef) = temp;
   20434:	3145883a 	add	r2,r6,r5
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   20438:	2021883a 	mov	r16,r4
   2043c:	3025883a 	mov	r18,r6
	*(payload + 0 + byte_coef) = temp;
   20440:	11000005 	stb	r4,0(r2)
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   20444:	21803fcc 	andi	r6,r4,255
   20448:	9809883a 	mov	r4,r19
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   2044c:	2823883a 	mov	r17,r5
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   20450:	00206bc0 	call	206bc <printf>
	temp >>= 8;
   20454:	800cd23a 	srli	r6,r16,8
	
	*(payload + 1 + byte_coef) = temp;
   20458:	89400044 	addi	r5,r17,1
   2045c:	9145883a 	add	r2,r18,r5
	printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
   20460:	9809883a 	mov	r4,r19
void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   20464:	11800005 	stb	r6,0(r2)
	printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
   20468:	31803fcc 	andi	r6,r6,255
   2046c:	00206bc0 	call	206bc <printf>
	temp >>= 8;
   20470:	800cd43a 	srli	r6,r16,16
	
	*(payload + 2 + byte_coef) = temp;
   20474:	89400084 	addi	r5,r17,2
   20478:	9145883a 	add	r2,r18,r5
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
   2047c:	9809883a 	mov	r4,r19
	
	*(payload + 1 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   20480:	11800005 	stb	r6,0(r2)
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
   20484:	31803fcc 	andi	r6,r6,255
   20488:	00206bc0 	call	206bc <printf>
	temp >>= 8;
   2048c:	800cd63a 	srli	r6,r16,24
	
	*(payload + 3 + byte_coef) = temp;
   20490:	894000c4 	addi	r5,r17,3
   20494:	9165883a 	add	r18,r18,r5
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
   20498:	9809883a 	mov	r4,r19
	
	*(payload + 2 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   2049c:	91800005 	stb	r6,0(r18)
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}
   204a0:	dfc00417 	ldw	ra,16(sp)
   204a4:	dcc00317 	ldw	r19,12(sp)
   204a8:	dc800217 	ldw	r18,8(sp)
   204ac:	dc400117 	ldw	r17,4(sp)
   204b0:	dc000017 	ldw	r16,0(sp)
   204b4:	dec00504 	addi	sp,sp,20
	*(payload + 2 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
   204b8:	00206bc1 	jmpi	206bc <printf>

000204bc <receive_packet>:
}

void receive_packet(unsigned char *payload){
   204bc:	defffa04 	addi	sp,sp,-24
   204c0:	dc400115 	stw	r17,4(sp)
   204c4:	dc000015 	stw	r16,0(sp)
	
	//test
	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   204c8:	04640814 	movui	r17,36896
   204cc:	04241014 	movui	r16,36928
	
	*(payload + 3 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(unsigned char *payload){
   204d0:	dcc00315 	stw	r19,12(sp)
	
	//test
	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   204d4:	880b883a 	mov	r5,r17
	
	*(payload + 3 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(unsigned char *payload){
   204d8:	2027883a 	mov	r19,r4
	
	//test
	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   204dc:	8009883a 	mov	r4,r16
	
	*(payload + 3 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(unsigned char *payload){
   204e0:	dfc00515 	stw	ra,20(sp)
   204e4:	dd000415 	stw	r20,16(sp)
   204e8:	dc800215 	stw	r18,8(sp)
	
	//test
	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   204ec:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	node_dest = temp;
	printf("node destination = %d\n",node_dest);
   204f0:	010000b4 	movhi	r4,2
   204f4:	11403fcc 	andi	r5,r2,255
   204f8:	21055904 	addi	r4,r4,5476
	
	//test
	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   204fc:	1025883a 	mov	r18,r2
	node_dest = temp;
	printf("node destination = %d\n",node_dest);
   20500:	00206bc0 	call	206bc <printf>
	temp >>= 8;
   20504:	900ad23a 	srli	r5,r18,8

	node_src = temp;
	printf("node source = %d\n",node_src);
   20508:	010000b4 	movhi	r4,2
   2050c:	21055f04 	addi	r4,r4,5500
   20510:	29403fcc 	andi	r5,r5,255
   20514:	00206bc0 	call	206bc <printf>
	temp >>= 8;
   20518:	900ad43a 	srli	r5,r18,16

	packet_size = temp;
	printf("packet_size = %d\n",packet_size);
   2051c:	010000b4 	movhi	r4,2
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   20520:	9024d63a 	srli	r18,r18,24
	node_src = temp;
	printf("node source = %d\n",node_src);
	temp >>= 8;

	packet_size = temp;
	printf("packet_size = %d\n",packet_size);
   20524:	29403fcc 	andi	r5,r5,255
   20528:	21056404 	addi	r4,r4,5520
   2052c:	00206bc0 	call	206bc <printf>
	src_proc = src_high;
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20530:	880b883a 	mov	r5,r17
   20534:	8009883a 	mov	r4,r16
	printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   20538:	9024923a 	slli	r18,r18,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   2053c:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	src_low = temp;
	src_proc |= src_low;
	temp >>= 8;
	dst_proc = temp;
	printf("source process = %d\n",src_proc);
   20540:	11403fcc 	andi	r5,r2,255
   20544:	010000b4 	movhi	r4,2
   20548:	2c8ab03a 	or	r5,r5,r18
   2054c:	21056904 	addi	r4,r4,5540
	src_proc = src_high;
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20550:	1029883a 	mov	r20,r2
	src_low = temp;
	src_proc |= src_low;
	temp >>= 8;
	dst_proc = temp;
	printf("source process = %d\n",src_proc);
   20554:	00206bc0 	call	206bc <printf>
	printf("destination process = %d\n",dst_proc);
   20558:	a00ad23a 	srli	r5,r20,8
   2055c:	010000b4 	movhi	r4,2
   20560:	21056f04 	addi	r4,r4,5564
   20564:	297fffcc 	andi	r5,r5,65535
   20568:	00206bc0 	call	206bc <printf>

	//from now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   2056c:	880b883a 	mov	r5,r17
   20570:	8009883a 	mov	r4,r16
   20574:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   20578:	980d883a 	mov	r6,r19
   2057c:	1009883a 	mov	r4,r2
   20580:	000b883a 	mov	r5,zero
   20584:	00204140 	call	20414 <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20588:	880b883a 	mov	r5,r17
   2058c:	8009883a 	mov	r4,r16
   20590:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   20594:	980d883a 	mov	r6,r19
   20598:	1009883a 	mov	r4,r2
   2059c:	01400104 	movi	r5,4
   205a0:	00204140 	call	20414 <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   205a4:	880b883a 	mov	r5,r17
   205a8:	8009883a 	mov	r4,r16
   205ac:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   205b0:	980d883a 	mov	r6,r19
   205b4:	1009883a 	mov	r4,r2
   205b8:	01400204 	movi	r5,8
   205bc:	00204140 	call	20414 <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   205c0:	880b883a 	mov	r5,r17
   205c4:	8009883a 	mov	r4,r16
   205c8:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   205cc:	980d883a 	mov	r6,r19
   205d0:	1009883a 	mov	r4,r2
   205d4:	01400304 	movi	r5,12
   205d8:	00204140 	call	20414 <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   205dc:	880b883a 	mov	r5,r17
   205e0:	8009883a 	mov	r4,r16
   205e4:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   205e8:	980d883a 	mov	r6,r19
   205ec:	1009883a 	mov	r4,r2
   205f0:	01400404 	movi	r5,16
   205f4:	00204140 	call	20414 <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   205f8:	880b883a 	mov	r5,r17
   205fc:	8009883a 	mov	r4,r16
   20600:	00213a80 	call	213a8 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   20604:	980d883a 	mov	r6,r19
   20608:	01400504 	movi	r5,20
   2060c:	1009883a 	mov	r4,r2
}
   20610:	dfc00517 	ldw	ra,20(sp)
   20614:	dd000417 	ldw	r20,16(sp)
   20618:	dcc00317 	ldw	r19,12(sp)
   2061c:	dc800217 	ldw	r18,8(sp)
   20620:	dc400117 	ldw	r17,4(sp)
   20624:	dc000017 	ldw	r16,0(sp)
   20628:	dec00604 	addi	sp,sp,24
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	read_payload(temp,16,payload);

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	read_payload(temp,20,payload);	
   2062c:	00204141 	jmpi	20414 <read_payload>

00020630 <receive_poll>:
}

void receive_poll(){
   20630:	deffff04 	addi	sp,sp,-4
   20634:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   20638:	01400fc4 	movi	r5,63
   2063c:	01240814 	movui	r4,36896
   20640:	00212200 	call	21220 <altera_avalon_fifo_read_status>
}

void receive_poll(){
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
   20644:	1080008c 	andi	r2,r2,2
   20648:	103ffb1e 	bne	r2,zero,20638 <_gp+0xffff6f80>
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    }
}
   2064c:	dfc00017 	ldw	ra,0(sp)
   20650:	dec00104 	addi	sp,sp,4
   20654:	f800283a 	ret

00020658 <memcpy>:
   20658:	2005883a 	mov	r2,r4
   2065c:	2007883a 	mov	r3,r4
   20660:	218d883a 	add	r6,r4,r6
   20664:	19800526 	beq	r3,r6,2067c <memcpy+0x24>
   20668:	29000003 	ldbu	r4,0(r5)
   2066c:	18c00044 	addi	r3,r3,1
   20670:	29400044 	addi	r5,r5,1
   20674:	193fffc5 	stb	r4,-1(r3)
   20678:	003ffa06 	br	20664 <_gp+0xffff6fac>
   2067c:	f800283a 	ret

00020680 <_printf_r>:
   20680:	defffd04 	addi	sp,sp,-12
   20684:	dfc00015 	stw	ra,0(sp)
   20688:	d9800115 	stw	r6,4(sp)
   2068c:	d9c00215 	stw	r7,8(sp)
   20690:	20c00217 	ldw	r3,8(r4)
   20694:	018000b4 	movhi	r6,2
   20698:	31835b04 	addi	r6,r6,3436
   2069c:	19800115 	stw	r6,4(r3)
   206a0:	280d883a 	mov	r6,r5
   206a4:	21400217 	ldw	r5,8(r4)
   206a8:	d9c00104 	addi	r7,sp,4
   206ac:	00208240 	call	20824 <___vfprintf_internal_r>
   206b0:	dfc00017 	ldw	ra,0(sp)
   206b4:	dec00304 	addi	sp,sp,12
   206b8:	f800283a 	ret

000206bc <printf>:
   206bc:	defffc04 	addi	sp,sp,-16
   206c0:	dfc00015 	stw	ra,0(sp)
   206c4:	d9400115 	stw	r5,4(sp)
   206c8:	d9800215 	stw	r6,8(sp)
   206cc:	d9c00315 	stw	r7,12(sp)
   206d0:	008000b4 	movhi	r2,2
   206d4:	1085af04 	addi	r2,r2,5820
   206d8:	10800017 	ldw	r2,0(r2)
   206dc:	014000b4 	movhi	r5,2
   206e0:	29435b04 	addi	r5,r5,3436
   206e4:	10c00217 	ldw	r3,8(r2)
   206e8:	d9800104 	addi	r6,sp,4
   206ec:	19400115 	stw	r5,4(r3)
   206f0:	200b883a 	mov	r5,r4
   206f4:	11000217 	ldw	r4,8(r2)
   206f8:	0020d500 	call	20d50 <__vfprintf_internal>
   206fc:	dfc00017 	ldw	ra,0(sp)
   20700:	dec00404 	addi	sp,sp,16
   20704:	f800283a 	ret

00020708 <_puts_r>:
   20708:	defffd04 	addi	sp,sp,-12
   2070c:	dc000015 	stw	r16,0(sp)
   20710:	2021883a 	mov	r16,r4
   20714:	2809883a 	mov	r4,r5
   20718:	dfc00215 	stw	ra,8(sp)
   2071c:	dc400115 	stw	r17,4(sp)
   20720:	2823883a 	mov	r17,r5
   20724:	002079c0 	call	2079c <strlen>
   20728:	81400217 	ldw	r5,8(r16)
   2072c:	010000b4 	movhi	r4,2
   20730:	21035b04 	addi	r4,r4,3436
   20734:	29000115 	stw	r4,4(r5)
   20738:	100f883a 	mov	r7,r2
   2073c:	880d883a 	mov	r6,r17
   20740:	8009883a 	mov	r4,r16
   20744:	0020d6c0 	call	20d6c <__sfvwrite_small_dev>
   20748:	00ffffc4 	movi	r3,-1
   2074c:	10c00926 	beq	r2,r3,20774 <_puts_r+0x6c>
   20750:	81400217 	ldw	r5,8(r16)
   20754:	018000b4 	movhi	r6,2
   20758:	01c00044 	movi	r7,1
   2075c:	28800117 	ldw	r2,4(r5)
   20760:	31852e04 	addi	r6,r6,5304
   20764:	8009883a 	mov	r4,r16
   20768:	103ee83a 	callr	r2
   2076c:	10bfffe0 	cmpeqi	r2,r2,-1
   20770:	0085c83a 	sub	r2,zero,r2
   20774:	dfc00217 	ldw	ra,8(sp)
   20778:	dc400117 	ldw	r17,4(sp)
   2077c:	dc000017 	ldw	r16,0(sp)
   20780:	dec00304 	addi	sp,sp,12
   20784:	f800283a 	ret

00020788 <puts>:
   20788:	008000b4 	movhi	r2,2
   2078c:	1085af04 	addi	r2,r2,5820
   20790:	200b883a 	mov	r5,r4
   20794:	11000017 	ldw	r4,0(r2)
   20798:	00207081 	jmpi	20708 <_puts_r>

0002079c <strlen>:
   2079c:	2005883a 	mov	r2,r4
   207a0:	10c00007 	ldb	r3,0(r2)
   207a4:	18000226 	beq	r3,zero,207b0 <strlen+0x14>
   207a8:	10800044 	addi	r2,r2,1
   207ac:	003ffc06 	br	207a0 <_gp+0xffff70e8>
   207b0:	1105c83a 	sub	r2,r2,r4
   207b4:	f800283a 	ret

000207b8 <print_repeat>:
   207b8:	defffb04 	addi	sp,sp,-20
   207bc:	dc800315 	stw	r18,12(sp)
   207c0:	dc400215 	stw	r17,8(sp)
   207c4:	dc000115 	stw	r16,4(sp)
   207c8:	dfc00415 	stw	ra,16(sp)
   207cc:	2025883a 	mov	r18,r4
   207d0:	2823883a 	mov	r17,r5
   207d4:	d9800005 	stb	r6,0(sp)
   207d8:	3821883a 	mov	r16,r7
   207dc:	04000a0e 	bge	zero,r16,20808 <print_repeat+0x50>
   207e0:	88800117 	ldw	r2,4(r17)
   207e4:	01c00044 	movi	r7,1
   207e8:	d80d883a 	mov	r6,sp
   207ec:	880b883a 	mov	r5,r17
   207f0:	9009883a 	mov	r4,r18
   207f4:	103ee83a 	callr	r2
   207f8:	843fffc4 	addi	r16,r16,-1
   207fc:	103ff726 	beq	r2,zero,207dc <_gp+0xffff7124>
   20800:	00bfffc4 	movi	r2,-1
   20804:	00000106 	br	2080c <print_repeat+0x54>
   20808:	0005883a 	mov	r2,zero
   2080c:	dfc00417 	ldw	ra,16(sp)
   20810:	dc800317 	ldw	r18,12(sp)
   20814:	dc400217 	ldw	r17,8(sp)
   20818:	dc000117 	ldw	r16,4(sp)
   2081c:	dec00504 	addi	sp,sp,20
   20820:	f800283a 	ret

00020824 <___vfprintf_internal_r>:
   20824:	deffe504 	addi	sp,sp,-108
   20828:	d8c00804 	addi	r3,sp,32
   2082c:	ddc01815 	stw	r23,96(sp)
   20830:	dd801715 	stw	r22,92(sp)
   20834:	dd401615 	stw	r21,88(sp)
   20838:	dd001515 	stw	r20,84(sp)
   2083c:	dcc01415 	stw	r19,80(sp)
   20840:	dc801315 	stw	r18,76(sp)
   20844:	dc401215 	stw	r17,72(sp)
   20848:	dc001115 	stw	r16,68(sp)
   2084c:	dfc01a15 	stw	ra,104(sp)
   20850:	df001915 	stw	fp,100(sp)
   20854:	2029883a 	mov	r20,r4
   20858:	2823883a 	mov	r17,r5
   2085c:	382d883a 	mov	r22,r7
   20860:	d9800f15 	stw	r6,60(sp)
   20864:	0021883a 	mov	r16,zero
   20868:	d8000e15 	stw	zero,56(sp)
   2086c:	d8000a15 	stw	zero,40(sp)
   20870:	002b883a 	mov	r21,zero
   20874:	0027883a 	mov	r19,zero
   20878:	0025883a 	mov	r18,zero
   2087c:	d8000c15 	stw	zero,48(sp)
   20880:	d8000b15 	stw	zero,44(sp)
   20884:	002f883a 	mov	r23,zero
   20888:	d8c00915 	stw	r3,36(sp)
   2088c:	d8c00f17 	ldw	r3,60(sp)
   20890:	19000003 	ldbu	r4,0(r3)
   20894:	20803fcc 	andi	r2,r4,255
   20898:	1080201c 	xori	r2,r2,128
   2089c:	10bfe004 	addi	r2,r2,-128
   208a0:	10011e26 	beq	r2,zero,20d1c <___vfprintf_internal_r+0x4f8>
   208a4:	00c00044 	movi	r3,1
   208a8:	b8c01426 	beq	r23,r3,208fc <___vfprintf_internal_r+0xd8>
   208ac:	1dc00216 	blt	r3,r23,208b8 <___vfprintf_internal_r+0x94>
   208b0:	b8000626 	beq	r23,zero,208cc <___vfprintf_internal_r+0xa8>
   208b4:	00011506 	br	20d0c <___vfprintf_internal_r+0x4e8>
   208b8:	01400084 	movi	r5,2
   208bc:	b9401d26 	beq	r23,r5,20934 <___vfprintf_internal_r+0x110>
   208c0:	014000c4 	movi	r5,3
   208c4:	b9402b26 	beq	r23,r5,20974 <___vfprintf_internal_r+0x150>
   208c8:	00011006 	br	20d0c <___vfprintf_internal_r+0x4e8>
   208cc:	01400944 	movi	r5,37
   208d0:	1140fc26 	beq	r2,r5,20cc4 <___vfprintf_internal_r+0x4a0>
   208d4:	88800117 	ldw	r2,4(r17)
   208d8:	d9000005 	stb	r4,0(sp)
   208dc:	01c00044 	movi	r7,1
   208e0:	d80d883a 	mov	r6,sp
   208e4:	880b883a 	mov	r5,r17
   208e8:	a009883a 	mov	r4,r20
   208ec:	103ee83a 	callr	r2
   208f0:	1000d81e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   208f4:	84000044 	addi	r16,r16,1
   208f8:	00010406 	br	20d0c <___vfprintf_internal_r+0x4e8>
   208fc:	01400c04 	movi	r5,48
   20900:	1140fa26 	beq	r2,r5,20cec <___vfprintf_internal_r+0x4c8>
   20904:	01400944 	movi	r5,37
   20908:	11400a1e 	bne	r2,r5,20934 <___vfprintf_internal_r+0x110>
   2090c:	d8800005 	stb	r2,0(sp)
   20910:	88800117 	ldw	r2,4(r17)
   20914:	b80f883a 	mov	r7,r23
   20918:	d80d883a 	mov	r6,sp
   2091c:	880b883a 	mov	r5,r17
   20920:	a009883a 	mov	r4,r20
   20924:	103ee83a 	callr	r2
   20928:	1000ca1e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   2092c:	84000044 	addi	r16,r16,1
   20930:	0000f506 	br	20d08 <___vfprintf_internal_r+0x4e4>
   20934:	25fff404 	addi	r23,r4,-48
   20938:	bdc03fcc 	andi	r23,r23,255
   2093c:	00c00244 	movi	r3,9
   20940:	1dc00936 	bltu	r3,r23,20968 <___vfprintf_internal_r+0x144>
   20944:	00bfffc4 	movi	r2,-1
   20948:	90800426 	beq	r18,r2,2095c <___vfprintf_internal_r+0x138>
   2094c:	01400284 	movi	r5,10
   20950:	9009883a 	mov	r4,r18
   20954:	00210300 	call	21030 <__mulsi3>
   20958:	00000106 	br	20960 <___vfprintf_internal_r+0x13c>
   2095c:	0005883a 	mov	r2,zero
   20960:	b8a5883a 	add	r18,r23,r2
   20964:	0000e206 	br	20cf0 <___vfprintf_internal_r+0x4cc>
   20968:	01400b84 	movi	r5,46
   2096c:	1140e426 	beq	r2,r5,20d00 <___vfprintf_internal_r+0x4dc>
   20970:	05c00084 	movi	r23,2
   20974:	213ff404 	addi	r4,r4,-48
   20978:	27003fcc 	andi	fp,r4,255
   2097c:	00c00244 	movi	r3,9
   20980:	1f000936 	bltu	r3,fp,209a8 <___vfprintf_internal_r+0x184>
   20984:	00bfffc4 	movi	r2,-1
   20988:	98800426 	beq	r19,r2,2099c <___vfprintf_internal_r+0x178>
   2098c:	01400284 	movi	r5,10
   20990:	9809883a 	mov	r4,r19
   20994:	00210300 	call	21030 <__mulsi3>
   20998:	00000106 	br	209a0 <___vfprintf_internal_r+0x17c>
   2099c:	0005883a 	mov	r2,zero
   209a0:	e0a7883a 	add	r19,fp,r2
   209a4:	0000d906 	br	20d0c <___vfprintf_internal_r+0x4e8>
   209a8:	00c01b04 	movi	r3,108
   209ac:	10c0d226 	beq	r2,r3,20cf8 <___vfprintf_internal_r+0x4d4>
   209b0:	013fffc4 	movi	r4,-1
   209b4:	99000226 	beq	r19,r4,209c0 <___vfprintf_internal_r+0x19c>
   209b8:	d8000b15 	stw	zero,44(sp)
   209bc:	00000106 	br	209c4 <___vfprintf_internal_r+0x1a0>
   209c0:	04c00044 	movi	r19,1
   209c4:	01001a44 	movi	r4,105
   209c8:	11001626 	beq	r2,r4,20a24 <___vfprintf_internal_r+0x200>
   209cc:	20800916 	blt	r4,r2,209f4 <___vfprintf_internal_r+0x1d0>
   209d0:	010018c4 	movi	r4,99
   209d4:	11008826 	beq	r2,r4,20bf8 <___vfprintf_internal_r+0x3d4>
   209d8:	01001904 	movi	r4,100
   209dc:	11001126 	beq	r2,r4,20a24 <___vfprintf_internal_r+0x200>
   209e0:	01001604 	movi	r4,88
   209e4:	1100c81e 	bne	r2,r4,20d08 <___vfprintf_internal_r+0x4e4>
   209e8:	00c00044 	movi	r3,1
   209ec:	d8c00e15 	stw	r3,56(sp)
   209f0:	00001506 	br	20a48 <___vfprintf_internal_r+0x224>
   209f4:	01001cc4 	movi	r4,115
   209f8:	11009826 	beq	r2,r4,20c5c <___vfprintf_internal_r+0x438>
   209fc:	20800416 	blt	r4,r2,20a10 <___vfprintf_internal_r+0x1ec>
   20a00:	01001bc4 	movi	r4,111
   20a04:	1100c01e 	bne	r2,r4,20d08 <___vfprintf_internal_r+0x4e4>
   20a08:	05400204 	movi	r21,8
   20a0c:	00000f06 	br	20a4c <___vfprintf_internal_r+0x228>
   20a10:	01001d44 	movi	r4,117
   20a14:	11000d26 	beq	r2,r4,20a4c <___vfprintf_internal_r+0x228>
   20a18:	01001e04 	movi	r4,120
   20a1c:	11000a26 	beq	r2,r4,20a48 <___vfprintf_internal_r+0x224>
   20a20:	0000b906 	br	20d08 <___vfprintf_internal_r+0x4e4>
   20a24:	d8c00a17 	ldw	r3,40(sp)
   20a28:	b7000104 	addi	fp,r22,4
   20a2c:	18000726 	beq	r3,zero,20a4c <___vfprintf_internal_r+0x228>
   20a30:	df000d15 	stw	fp,52(sp)
   20a34:	b5c00017 	ldw	r23,0(r22)
   20a38:	b800080e 	bge	r23,zero,20a5c <___vfprintf_internal_r+0x238>
   20a3c:	05efc83a 	sub	r23,zero,r23
   20a40:	02400044 	movi	r9,1
   20a44:	00000606 	br	20a60 <___vfprintf_internal_r+0x23c>
   20a48:	05400404 	movi	r21,16
   20a4c:	b0c00104 	addi	r3,r22,4
   20a50:	d8c00d15 	stw	r3,52(sp)
   20a54:	b5c00017 	ldw	r23,0(r22)
   20a58:	d8000a15 	stw	zero,40(sp)
   20a5c:	0013883a 	mov	r9,zero
   20a60:	d839883a 	mov	fp,sp
   20a64:	b8001726 	beq	r23,zero,20ac4 <___vfprintf_internal_r+0x2a0>
   20a68:	a80b883a 	mov	r5,r21
   20a6c:	b809883a 	mov	r4,r23
   20a70:	da401015 	stw	r9,64(sp)
   20a74:	0020f740 	call	20f74 <__udivsi3>
   20a78:	a80b883a 	mov	r5,r21
   20a7c:	1009883a 	mov	r4,r2
   20a80:	102d883a 	mov	r22,r2
   20a84:	00210300 	call	21030 <__mulsi3>
   20a88:	b885c83a 	sub	r2,r23,r2
   20a8c:	00c00244 	movi	r3,9
   20a90:	da401017 	ldw	r9,64(sp)
   20a94:	18800216 	blt	r3,r2,20aa0 <___vfprintf_internal_r+0x27c>
   20a98:	10800c04 	addi	r2,r2,48
   20a9c:	00000506 	br	20ab4 <___vfprintf_internal_r+0x290>
   20aa0:	d8c00e17 	ldw	r3,56(sp)
   20aa4:	18000226 	beq	r3,zero,20ab0 <___vfprintf_internal_r+0x28c>
   20aa8:	10800dc4 	addi	r2,r2,55
   20aac:	00000106 	br	20ab4 <___vfprintf_internal_r+0x290>
   20ab0:	108015c4 	addi	r2,r2,87
   20ab4:	e0800005 	stb	r2,0(fp)
   20ab8:	b02f883a 	mov	r23,r22
   20abc:	e7000044 	addi	fp,fp,1
   20ac0:	003fe806 	br	20a64 <_gp+0xffff73ac>
   20ac4:	e6efc83a 	sub	r23,fp,sp
   20ac8:	9dc5c83a 	sub	r2,r19,r23
   20acc:	0080090e 	bge	zero,r2,20af4 <___vfprintf_internal_r+0x2d0>
   20ad0:	e085883a 	add	r2,fp,r2
   20ad4:	01400c04 	movi	r5,48
   20ad8:	d8c00917 	ldw	r3,36(sp)
   20adc:	e009883a 	mov	r4,fp
   20ae0:	e0c0032e 	bgeu	fp,r3,20af0 <___vfprintf_internal_r+0x2cc>
   20ae4:	e7000044 	addi	fp,fp,1
   20ae8:	21400005 	stb	r5,0(r4)
   20aec:	e0bffa1e 	bne	fp,r2,20ad8 <_gp+0xffff7420>
   20af0:	e6efc83a 	sub	r23,fp,sp
   20af4:	d8c00b17 	ldw	r3,44(sp)
   20af8:	4dd1883a 	add	r8,r9,r23
   20afc:	922dc83a 	sub	r22,r18,r8
   20b00:	18001626 	beq	r3,zero,20b5c <___vfprintf_internal_r+0x338>
   20b04:	48000a26 	beq	r9,zero,20b30 <___vfprintf_internal_r+0x30c>
   20b08:	00800b44 	movi	r2,45
   20b0c:	d8800805 	stb	r2,32(sp)
   20b10:	88800117 	ldw	r2,4(r17)
   20b14:	01c00044 	movi	r7,1
   20b18:	d9800804 	addi	r6,sp,32
   20b1c:	880b883a 	mov	r5,r17
   20b20:	a009883a 	mov	r4,r20
   20b24:	103ee83a 	callr	r2
   20b28:	10004a1e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20b2c:	84000044 	addi	r16,r16,1
   20b30:	0580070e 	bge	zero,r22,20b50 <___vfprintf_internal_r+0x32c>
   20b34:	b00f883a 	mov	r7,r22
   20b38:	01800c04 	movi	r6,48
   20b3c:	880b883a 	mov	r5,r17
   20b40:	a009883a 	mov	r4,r20
   20b44:	00207b80 	call	207b8 <print_repeat>
   20b48:	1000421e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20b4c:	85a1883a 	add	r16,r16,r22
   20b50:	e02d883a 	mov	r22,fp
   20b54:	bf2fc83a 	sub	r23,r23,fp
   20b58:	00002006 	br	20bdc <___vfprintf_internal_r+0x3b8>
   20b5c:	0580090e 	bge	zero,r22,20b84 <___vfprintf_internal_r+0x360>
   20b60:	b00f883a 	mov	r7,r22
   20b64:	01800804 	movi	r6,32
   20b68:	880b883a 	mov	r5,r17
   20b6c:	a009883a 	mov	r4,r20
   20b70:	da401015 	stw	r9,64(sp)
   20b74:	00207b80 	call	207b8 <print_repeat>
   20b78:	da401017 	ldw	r9,64(sp)
   20b7c:	1000351e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20b80:	85a1883a 	add	r16,r16,r22
   20b84:	483ff226 	beq	r9,zero,20b50 <_gp+0xffff7498>
   20b88:	00800b44 	movi	r2,45
   20b8c:	d8800805 	stb	r2,32(sp)
   20b90:	88800117 	ldw	r2,4(r17)
   20b94:	01c00044 	movi	r7,1
   20b98:	d9800804 	addi	r6,sp,32
   20b9c:	880b883a 	mov	r5,r17
   20ba0:	a009883a 	mov	r4,r20
   20ba4:	103ee83a 	callr	r2
   20ba8:	10002a1e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20bac:	84000044 	addi	r16,r16,1
   20bb0:	003fe706 	br	20b50 <_gp+0xffff7498>
   20bb4:	b5bfffc4 	addi	r22,r22,-1
   20bb8:	b0800003 	ldbu	r2,0(r22)
   20bbc:	01c00044 	movi	r7,1
   20bc0:	d9800804 	addi	r6,sp,32
   20bc4:	d8800805 	stb	r2,32(sp)
   20bc8:	88800117 	ldw	r2,4(r17)
   20bcc:	880b883a 	mov	r5,r17
   20bd0:	a009883a 	mov	r4,r20
   20bd4:	103ee83a 	callr	r2
   20bd8:	10001e1e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20bdc:	8585c83a 	sub	r2,r16,r22
   20be0:	b5c9883a 	add	r4,r22,r23
   20be4:	e085883a 	add	r2,fp,r2
   20be8:	013ff216 	blt	zero,r4,20bb4 <_gp+0xffff74fc>
   20bec:	1021883a 	mov	r16,r2
   20bf0:	dd800d17 	ldw	r22,52(sp)
   20bf4:	00004406 	br	20d08 <___vfprintf_internal_r+0x4e4>
   20bf8:	00800044 	movi	r2,1
   20bfc:	1480080e 	bge	r2,r18,20c20 <___vfprintf_internal_r+0x3fc>
   20c00:	95ffffc4 	addi	r23,r18,-1
   20c04:	b80f883a 	mov	r7,r23
   20c08:	01800804 	movi	r6,32
   20c0c:	880b883a 	mov	r5,r17
   20c10:	a009883a 	mov	r4,r20
   20c14:	00207b80 	call	207b8 <print_repeat>
   20c18:	10000e1e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20c1c:	85e1883a 	add	r16,r16,r23
   20c20:	b0800017 	ldw	r2,0(r22)
   20c24:	01c00044 	movi	r7,1
   20c28:	d80d883a 	mov	r6,sp
   20c2c:	d8800005 	stb	r2,0(sp)
   20c30:	88800117 	ldw	r2,4(r17)
   20c34:	880b883a 	mov	r5,r17
   20c38:	a009883a 	mov	r4,r20
   20c3c:	b5c00104 	addi	r23,r22,4
   20c40:	103ee83a 	callr	r2
   20c44:	1000031e 	bne	r2,zero,20c54 <___vfprintf_internal_r+0x430>
   20c48:	84000044 	addi	r16,r16,1
   20c4c:	b82d883a 	mov	r22,r23
   20c50:	00002d06 	br	20d08 <___vfprintf_internal_r+0x4e4>
   20c54:	00bfffc4 	movi	r2,-1
   20c58:	00003106 	br	20d20 <___vfprintf_internal_r+0x4fc>
   20c5c:	b5c00017 	ldw	r23,0(r22)
   20c60:	b7000104 	addi	fp,r22,4
   20c64:	b809883a 	mov	r4,r23
   20c68:	002079c0 	call	2079c <strlen>
   20c6c:	9091c83a 	sub	r8,r18,r2
   20c70:	102d883a 	mov	r22,r2
   20c74:	0200090e 	bge	zero,r8,20c9c <___vfprintf_internal_r+0x478>
   20c78:	400f883a 	mov	r7,r8
   20c7c:	01800804 	movi	r6,32
   20c80:	880b883a 	mov	r5,r17
   20c84:	a009883a 	mov	r4,r20
   20c88:	da001015 	stw	r8,64(sp)
   20c8c:	00207b80 	call	207b8 <print_repeat>
   20c90:	da001017 	ldw	r8,64(sp)
   20c94:	103fef1e 	bne	r2,zero,20c54 <_gp+0xffff759c>
   20c98:	8221883a 	add	r16,r16,r8
   20c9c:	88800117 	ldw	r2,4(r17)
   20ca0:	b00f883a 	mov	r7,r22
   20ca4:	b80d883a 	mov	r6,r23
   20ca8:	880b883a 	mov	r5,r17
   20cac:	a009883a 	mov	r4,r20
   20cb0:	103ee83a 	callr	r2
   20cb4:	103fe71e 	bne	r2,zero,20c54 <_gp+0xffff759c>
   20cb8:	85a1883a 	add	r16,r16,r22
   20cbc:	e02d883a 	mov	r22,fp
   20cc0:	00001106 	br	20d08 <___vfprintf_internal_r+0x4e4>
   20cc4:	00c00044 	movi	r3,1
   20cc8:	04ffffc4 	movi	r19,-1
   20ccc:	d8000e15 	stw	zero,56(sp)
   20cd0:	d8c00a15 	stw	r3,40(sp)
   20cd4:	05400284 	movi	r21,10
   20cd8:	9825883a 	mov	r18,r19
   20cdc:	d8000c15 	stw	zero,48(sp)
   20ce0:	d8000b15 	stw	zero,44(sp)
   20ce4:	182f883a 	mov	r23,r3
   20ce8:	00000806 	br	20d0c <___vfprintf_internal_r+0x4e8>
   20cec:	ddc00b15 	stw	r23,44(sp)
   20cf0:	05c00084 	movi	r23,2
   20cf4:	00000506 	br	20d0c <___vfprintf_internal_r+0x4e8>
   20cf8:	00c00044 	movi	r3,1
   20cfc:	d8c00c15 	stw	r3,48(sp)
   20d00:	05c000c4 	movi	r23,3
   20d04:	00000106 	br	20d0c <___vfprintf_internal_r+0x4e8>
   20d08:	002f883a 	mov	r23,zero
   20d0c:	d8c00f17 	ldw	r3,60(sp)
   20d10:	18c00044 	addi	r3,r3,1
   20d14:	d8c00f15 	stw	r3,60(sp)
   20d18:	003edc06 	br	2088c <_gp+0xffff71d4>
   20d1c:	8005883a 	mov	r2,r16
   20d20:	dfc01a17 	ldw	ra,104(sp)
   20d24:	df001917 	ldw	fp,100(sp)
   20d28:	ddc01817 	ldw	r23,96(sp)
   20d2c:	dd801717 	ldw	r22,92(sp)
   20d30:	dd401617 	ldw	r21,88(sp)
   20d34:	dd001517 	ldw	r20,84(sp)
   20d38:	dcc01417 	ldw	r19,80(sp)
   20d3c:	dc801317 	ldw	r18,76(sp)
   20d40:	dc401217 	ldw	r17,72(sp)
   20d44:	dc001117 	ldw	r16,68(sp)
   20d48:	dec01b04 	addi	sp,sp,108
   20d4c:	f800283a 	ret

00020d50 <__vfprintf_internal>:
   20d50:	008000b4 	movhi	r2,2
   20d54:	1085af04 	addi	r2,r2,5820
   20d58:	300f883a 	mov	r7,r6
   20d5c:	280d883a 	mov	r6,r5
   20d60:	200b883a 	mov	r5,r4
   20d64:	11000017 	ldw	r4,0(r2)
   20d68:	00208241 	jmpi	20824 <___vfprintf_internal_r>

00020d6c <__sfvwrite_small_dev>:
   20d6c:	2880000b 	ldhu	r2,0(r5)
   20d70:	1080020c 	andi	r2,r2,8
   20d74:	10002126 	beq	r2,zero,20dfc <__sfvwrite_small_dev+0x90>
   20d78:	2880008f 	ldh	r2,2(r5)
   20d7c:	defffa04 	addi	sp,sp,-24
   20d80:	dc000015 	stw	r16,0(sp)
   20d84:	dfc00515 	stw	ra,20(sp)
   20d88:	dd000415 	stw	r20,16(sp)
   20d8c:	dcc00315 	stw	r19,12(sp)
   20d90:	dc800215 	stw	r18,8(sp)
   20d94:	dc400115 	stw	r17,4(sp)
   20d98:	2821883a 	mov	r16,r5
   20d9c:	10001216 	blt	r2,zero,20de8 <__sfvwrite_small_dev+0x7c>
   20da0:	2027883a 	mov	r19,r4
   20da4:	3025883a 	mov	r18,r6
   20da8:	3823883a 	mov	r17,r7
   20dac:	05010004 	movi	r20,1024
   20db0:	04400b0e 	bge	zero,r17,20de0 <__sfvwrite_small_dev+0x74>
   20db4:	880f883a 	mov	r7,r17
   20db8:	a440010e 	bge	r20,r17,20dc0 <__sfvwrite_small_dev+0x54>
   20dbc:	01c10004 	movi	r7,1024
   20dc0:	8140008f 	ldh	r5,2(r16)
   20dc4:	900d883a 	mov	r6,r18
   20dc8:	9809883a 	mov	r4,r19
   20dcc:	0020e240 	call	20e24 <_write_r>
   20dd0:	0080050e 	bge	zero,r2,20de8 <__sfvwrite_small_dev+0x7c>
   20dd4:	88a3c83a 	sub	r17,r17,r2
   20dd8:	90a5883a 	add	r18,r18,r2
   20ddc:	003ff406 	br	20db0 <_gp+0xffff76f8>
   20de0:	0005883a 	mov	r2,zero
   20de4:	00000706 	br	20e04 <__sfvwrite_small_dev+0x98>
   20de8:	8080000b 	ldhu	r2,0(r16)
   20dec:	10801014 	ori	r2,r2,64
   20df0:	8080000d 	sth	r2,0(r16)
   20df4:	00bfffc4 	movi	r2,-1
   20df8:	00000206 	br	20e04 <__sfvwrite_small_dev+0x98>
   20dfc:	00bfffc4 	movi	r2,-1
   20e00:	f800283a 	ret
   20e04:	dfc00517 	ldw	ra,20(sp)
   20e08:	dd000417 	ldw	r20,16(sp)
   20e0c:	dcc00317 	ldw	r19,12(sp)
   20e10:	dc800217 	ldw	r18,8(sp)
   20e14:	dc400117 	ldw	r17,4(sp)
   20e18:	dc000017 	ldw	r16,0(sp)
   20e1c:	dec00604 	addi	sp,sp,24
   20e20:	f800283a 	ret

00020e24 <_write_r>:
   20e24:	defffd04 	addi	sp,sp,-12
   20e28:	dc000015 	stw	r16,0(sp)
   20e2c:	040000b4 	movhi	r16,2
   20e30:	dc400115 	stw	r17,4(sp)
   20e34:	8405ef04 	addi	r16,r16,6076
   20e38:	2023883a 	mov	r17,r4
   20e3c:	2809883a 	mov	r4,r5
   20e40:	300b883a 	mov	r5,r6
   20e44:	380d883a 	mov	r6,r7
   20e48:	dfc00215 	stw	ra,8(sp)
   20e4c:	80000015 	stw	zero,0(r16)
   20e50:	002119c0 	call	2119c <write>
   20e54:	00ffffc4 	movi	r3,-1
   20e58:	10c0031e 	bne	r2,r3,20e68 <_write_r+0x44>
   20e5c:	80c00017 	ldw	r3,0(r16)
   20e60:	18000126 	beq	r3,zero,20e68 <_write_r+0x44>
   20e64:	88c00015 	stw	r3,0(r17)
   20e68:	dfc00217 	ldw	ra,8(sp)
   20e6c:	dc400117 	ldw	r17,4(sp)
   20e70:	dc000017 	ldw	r16,0(sp)
   20e74:	dec00304 	addi	sp,sp,12
   20e78:	f800283a 	ret

00020e7c <__divsi3>:
   20e7c:	20001b16 	blt	r4,zero,20eec <__divsi3+0x70>
   20e80:	000f883a 	mov	r7,zero
   20e84:	28001616 	blt	r5,zero,20ee0 <__divsi3+0x64>
   20e88:	200d883a 	mov	r6,r4
   20e8c:	29001a2e 	bgeu	r5,r4,20ef8 <__divsi3+0x7c>
   20e90:	00800804 	movi	r2,32
   20e94:	00c00044 	movi	r3,1
   20e98:	00000106 	br	20ea0 <__divsi3+0x24>
   20e9c:	10000d26 	beq	r2,zero,20ed4 <__divsi3+0x58>
   20ea0:	294b883a 	add	r5,r5,r5
   20ea4:	10bfffc4 	addi	r2,r2,-1
   20ea8:	18c7883a 	add	r3,r3,r3
   20eac:	293ffb36 	bltu	r5,r4,20e9c <_gp+0xffff77e4>
   20eb0:	0005883a 	mov	r2,zero
   20eb4:	18000726 	beq	r3,zero,20ed4 <__divsi3+0x58>
   20eb8:	0005883a 	mov	r2,zero
   20ebc:	31400236 	bltu	r6,r5,20ec8 <__divsi3+0x4c>
   20ec0:	314dc83a 	sub	r6,r6,r5
   20ec4:	10c4b03a 	or	r2,r2,r3
   20ec8:	1806d07a 	srli	r3,r3,1
   20ecc:	280ad07a 	srli	r5,r5,1
   20ed0:	183ffa1e 	bne	r3,zero,20ebc <_gp+0xffff7804>
   20ed4:	38000126 	beq	r7,zero,20edc <__divsi3+0x60>
   20ed8:	0085c83a 	sub	r2,zero,r2
   20edc:	f800283a 	ret
   20ee0:	014bc83a 	sub	r5,zero,r5
   20ee4:	39c0005c 	xori	r7,r7,1
   20ee8:	003fe706 	br	20e88 <_gp+0xffff77d0>
   20eec:	0109c83a 	sub	r4,zero,r4
   20ef0:	01c00044 	movi	r7,1
   20ef4:	003fe306 	br	20e84 <_gp+0xffff77cc>
   20ef8:	00c00044 	movi	r3,1
   20efc:	003fee06 	br	20eb8 <_gp+0xffff7800>

00020f00 <__modsi3>:
   20f00:	20001716 	blt	r4,zero,20f60 <__modsi3+0x60>
   20f04:	000f883a 	mov	r7,zero
   20f08:	2005883a 	mov	r2,r4
   20f0c:	28001216 	blt	r5,zero,20f58 <__modsi3+0x58>
   20f10:	2900162e 	bgeu	r5,r4,20f6c <__modsi3+0x6c>
   20f14:	01800804 	movi	r6,32
   20f18:	00c00044 	movi	r3,1
   20f1c:	00000106 	br	20f24 <__modsi3+0x24>
   20f20:	30000a26 	beq	r6,zero,20f4c <__modsi3+0x4c>
   20f24:	294b883a 	add	r5,r5,r5
   20f28:	31bfffc4 	addi	r6,r6,-1
   20f2c:	18c7883a 	add	r3,r3,r3
   20f30:	293ffb36 	bltu	r5,r4,20f20 <_gp+0xffff7868>
   20f34:	18000526 	beq	r3,zero,20f4c <__modsi3+0x4c>
   20f38:	1806d07a 	srli	r3,r3,1
   20f3c:	11400136 	bltu	r2,r5,20f44 <__modsi3+0x44>
   20f40:	1145c83a 	sub	r2,r2,r5
   20f44:	280ad07a 	srli	r5,r5,1
   20f48:	183ffb1e 	bne	r3,zero,20f38 <_gp+0xffff7880>
   20f4c:	38000126 	beq	r7,zero,20f54 <__modsi3+0x54>
   20f50:	0085c83a 	sub	r2,zero,r2
   20f54:	f800283a 	ret
   20f58:	014bc83a 	sub	r5,zero,r5
   20f5c:	003fec06 	br	20f10 <_gp+0xffff7858>
   20f60:	0109c83a 	sub	r4,zero,r4
   20f64:	01c00044 	movi	r7,1
   20f68:	003fe706 	br	20f08 <_gp+0xffff7850>
   20f6c:	00c00044 	movi	r3,1
   20f70:	003ff106 	br	20f38 <_gp+0xffff7880>

00020f74 <__udivsi3>:
   20f74:	200d883a 	mov	r6,r4
   20f78:	2900152e 	bgeu	r5,r4,20fd0 <__udivsi3+0x5c>
   20f7c:	28001416 	blt	r5,zero,20fd0 <__udivsi3+0x5c>
   20f80:	00800804 	movi	r2,32
   20f84:	00c00044 	movi	r3,1
   20f88:	00000206 	br	20f94 <__udivsi3+0x20>
   20f8c:	10000e26 	beq	r2,zero,20fc8 <__udivsi3+0x54>
   20f90:	28000516 	blt	r5,zero,20fa8 <__udivsi3+0x34>
   20f94:	294b883a 	add	r5,r5,r5
   20f98:	10bfffc4 	addi	r2,r2,-1
   20f9c:	18c7883a 	add	r3,r3,r3
   20fa0:	293ffa36 	bltu	r5,r4,20f8c <_gp+0xffff78d4>
   20fa4:	18000826 	beq	r3,zero,20fc8 <__udivsi3+0x54>
   20fa8:	0005883a 	mov	r2,zero
   20fac:	31400236 	bltu	r6,r5,20fb8 <__udivsi3+0x44>
   20fb0:	314dc83a 	sub	r6,r6,r5
   20fb4:	10c4b03a 	or	r2,r2,r3
   20fb8:	1806d07a 	srli	r3,r3,1
   20fbc:	280ad07a 	srli	r5,r5,1
   20fc0:	183ffa1e 	bne	r3,zero,20fac <_gp+0xffff78f4>
   20fc4:	f800283a 	ret
   20fc8:	0005883a 	mov	r2,zero
   20fcc:	f800283a 	ret
   20fd0:	00c00044 	movi	r3,1
   20fd4:	003ff406 	br	20fa8 <_gp+0xffff78f0>

00020fd8 <__umodsi3>:
   20fd8:	2005883a 	mov	r2,r4
   20fdc:	2900122e 	bgeu	r5,r4,21028 <__umodsi3+0x50>
   20fe0:	28001116 	blt	r5,zero,21028 <__umodsi3+0x50>
   20fe4:	01800804 	movi	r6,32
   20fe8:	00c00044 	movi	r3,1
   20fec:	00000206 	br	20ff8 <__umodsi3+0x20>
   20ff0:	30000c26 	beq	r6,zero,21024 <__umodsi3+0x4c>
   20ff4:	28000516 	blt	r5,zero,2100c <__umodsi3+0x34>
   20ff8:	294b883a 	add	r5,r5,r5
   20ffc:	31bfffc4 	addi	r6,r6,-1
   21000:	18c7883a 	add	r3,r3,r3
   21004:	293ffa36 	bltu	r5,r4,20ff0 <_gp+0xffff7938>
   21008:	18000626 	beq	r3,zero,21024 <__umodsi3+0x4c>
   2100c:	1806d07a 	srli	r3,r3,1
   21010:	11400136 	bltu	r2,r5,21018 <__umodsi3+0x40>
   21014:	1145c83a 	sub	r2,r2,r5
   21018:	280ad07a 	srli	r5,r5,1
   2101c:	183ffb1e 	bne	r3,zero,2100c <_gp+0xffff7954>
   21020:	f800283a 	ret
   21024:	f800283a 	ret
   21028:	00c00044 	movi	r3,1
   2102c:	003ff706 	br	2100c <_gp+0xffff7954>

00021030 <__mulsi3>:
   21030:	0005883a 	mov	r2,zero
   21034:	20000726 	beq	r4,zero,21054 <__mulsi3+0x24>
   21038:	20c0004c 	andi	r3,r4,1
   2103c:	2008d07a 	srli	r4,r4,1
   21040:	18000126 	beq	r3,zero,21048 <__mulsi3+0x18>
   21044:	1145883a 	add	r2,r2,r5
   21048:	294b883a 	add	r5,r5,r5
   2104c:	203ffa1e 	bne	r4,zero,21038 <_gp+0xffff7980>
   21050:	f800283a 	ret
   21054:	f800283a 	ret

00021058 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   21058:	deffff04 	addi	sp,sp,-4
   2105c:	010000b4 	movhi	r4,2
   21060:	014000b4 	movhi	r5,2
   21064:	dfc00015 	stw	ra,0(sp)
   21068:	21057604 	addi	r4,r4,5592
   2106c:	2945b204 	addi	r5,r5,5832

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21070:	2140061e 	bne	r4,r5,2108c <alt_load+0x34>
   21074:	010000b4 	movhi	r4,2
   21078:	014000b4 	movhi	r5,2
   2107c:	21000804 	addi	r4,r4,32
   21080:	29400804 	addi	r5,r5,32
   21084:	2140121e 	bne	r4,r5,210d0 <alt_load+0x78>
   21088:	00000b06 	br	210b8 <alt_load+0x60>
   2108c:	00c000b4 	movhi	r3,2
   21090:	18c5b204 	addi	r3,r3,5832
   21094:	1907c83a 	sub	r3,r3,r4
   21098:	0005883a 	mov	r2,zero
  {
    while( to != end )
   2109c:	10fff526 	beq	r2,r3,21074 <_gp+0xffff79bc>
    {
      *to++ = *from++;
   210a0:	114f883a 	add	r7,r2,r5
   210a4:	39c00017 	ldw	r7,0(r7)
   210a8:	110d883a 	add	r6,r2,r4
   210ac:	10800104 	addi	r2,r2,4
   210b0:	31c00015 	stw	r7,0(r6)
   210b4:	003ff906 	br	2109c <_gp+0xffff79e4>
   210b8:	010000b4 	movhi	r4,2
   210bc:	014000b4 	movhi	r5,2
   210c0:	21050d04 	addi	r4,r4,5172
   210c4:	29450d04 	addi	r5,r5,5172

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   210c8:	2140101e 	bne	r4,r5,2110c <alt_load+0xb4>
   210cc:	00000b06 	br	210fc <alt_load+0xa4>
   210d0:	00c000b4 	movhi	r3,2
   210d4:	18c00804 	addi	r3,r3,32
   210d8:	1907c83a 	sub	r3,r3,r4
   210dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   210e0:	10fff526 	beq	r2,r3,210b8 <_gp+0xffff7a00>
    {
      *to++ = *from++;
   210e4:	114f883a 	add	r7,r2,r5
   210e8:	39c00017 	ldw	r7,0(r7)
   210ec:	110d883a 	add	r6,r2,r4
   210f0:	10800104 	addi	r2,r2,4
   210f4:	31c00015 	stw	r7,0(r6)
   210f8:	003ff906 	br	210e0 <_gp+0xffff7a28>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   210fc:	00214240 	call	21424 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   21100:	dfc00017 	ldw	ra,0(sp)
   21104:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   21108:	00214281 	jmpi	21428 <alt_icache_flush_all>
   2110c:	00c000b4 	movhi	r3,2
   21110:	18c57604 	addi	r3,r3,5592
   21114:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21118:	0005883a 	mov	r2,zero
  {
    while( to != end )
   2111c:	18bff726 	beq	r3,r2,210fc <_gp+0xffff7a44>
    {
      *to++ = *from++;
   21120:	114f883a 	add	r7,r2,r5
   21124:	39c00017 	ldw	r7,0(r7)
   21128:	110d883a 	add	r6,r2,r4
   2112c:	10800104 	addi	r2,r2,4
   21130:	31c00015 	stw	r7,0(r6)
   21134:	003ff906 	br	2111c <_gp+0xffff7a64>

00021138 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21138:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2113c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21140:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21144:	00211fc0 	call	211fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   21148:	002121c0 	call	2121c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   2114c:	d1a04217 	ldw	r6,-32504(gp)
   21150:	d1604317 	ldw	r5,-32500(gp)
   21154:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   21158:	dfc00017 	ldw	ra,0(sp)
   2115c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   21160:	002015c1 	jmpi	2015c <main>

00021164 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   21164:	defffe04 	addi	sp,sp,-8
   21168:	dc000015 	stw	r16,0(sp)
   2116c:	dfc00115 	stw	ra,4(sp)
   21170:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   21174:	002079c0 	call	2079c <strlen>
   21178:	010000b4 	movhi	r4,2
   2117c:	000f883a 	mov	r7,zero
   21180:	100d883a 	mov	r6,r2
   21184:	800b883a 	mov	r5,r16
   21188:	2105b004 	addi	r4,r4,5824
#else
    return fputs(str, stdout);
#endif
#endif
}
   2118c:	dfc00117 	ldw	ra,4(sp)
   21190:	dc000017 	ldw	r16,0(sp)
   21194:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   21198:	00213f01 	jmpi	213f0 <altera_avalon_jtag_uart_write>

0002119c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   2119c:	00800044 	movi	r2,1
   211a0:	20800226 	beq	r4,r2,211ac <write+0x10>
   211a4:	00800084 	movi	r2,2
   211a8:	2080041e 	bne	r4,r2,211bc <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   211ac:	010000b4 	movhi	r4,2
   211b0:	000f883a 	mov	r7,zero
   211b4:	2105b004 	addi	r4,r4,5824
   211b8:	00213f01 	jmpi	213f0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   211bc:	d0a00317 	ldw	r2,-32756(gp)
   211c0:	10000926 	beq	r2,zero,211e8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   211c4:	deffff04 	addi	sp,sp,-4
   211c8:	dfc00015 	stw	ra,0(sp)
   211cc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   211d0:	00c01444 	movi	r3,81
   211d4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   211d8:	00bfffc4 	movi	r2,-1
   211dc:	dfc00017 	ldw	ra,0(sp)
   211e0:	dec00104 	addi	sp,sp,4
   211e4:	f800283a 	ret
   211e8:	d0a04104 	addi	r2,gp,-32508
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   211ec:	00c01444 	movi	r3,81
   211f0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   211f4:	00bfffc4 	movi	r2,-1
   211f8:	f800283a 	ret

000211fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   211fc:	deffff04 	addi	sp,sp,-4
   21200:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_1, nios2_1);
   21204:	002142c0 	call	2142c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21208:	00800044 	movi	r2,1
   2120c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21210:	dfc00017 	ldw	ra,0(sp)
   21214:	dec00104 	addi	sp,sp,4
   21218:	f800283a 	ret

0002121c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2121c:	f800283a 	ret

00021220 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21220:	20800137 	ldwio	r2,4(r4)
}
   21224:	1144703a 	and	r2,r2,r5
   21228:	f800283a 	ret

0002122c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   2122c:	20800337 	ldwio	r2,12(r4)
}
   21230:	1144703a 	and	r2,r2,r5
   21234:	f800283a 	ret

00021238 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   21238:	20800437 	ldwio	r2,16(r4)
   2123c:	f800283a 	ret

00021240 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   21240:	20800537 	ldwio	r2,20(r4)
   21244:	f800283a 	ret

00021248 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   21248:	20800237 	ldwio	r2,8(r4)
}
   2124c:	1144703a 	and	r2,r2,r5
   21250:	f800283a 	ret

00021254 <altera_avalon_fifo_read_level>:
   21254:	20800037 	ldwio	r2,0(r4)
   21258:	f800283a 	ret

0002125c <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   2125c:	21000204 	addi	r4,r4,8
   21260:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   21264:	20800037 	ldwio	r2,0(r4)
   21268:	114a703a 	and	r5,r2,r5
   2126c:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   21270:	0085c83a 	sub	r2,zero,r2
   21274:	f800283a 	ret

00021278 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   21278:	21000304 	addi	r4,r4,12
   2127c:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   21280:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21284:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   21288:	28c00126 	beq	r5,r3,21290 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   2128c:	00bfff84 	movi	r2,-2
}
   21290:	f800283a 	ret

00021294 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   21294:	21000404 	addi	r4,r4,16
   21298:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   2129c:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   212a0:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   212a4:	28c00126 	beq	r5,r3,212ac <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   212a8:	00bfff44 	movi	r2,-3
}
   212ac:	f800283a 	ret

000212b0 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   212b0:	21000504 	addi	r4,r4,20
   212b4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   212b8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   212bc:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   212c0:	28c00126 	beq	r5,r3,212c8 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   212c4:	00bfff44 	movi	r2,-3
}
   212c8:	f800283a 	ret

000212cc <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   212cc:	defffb04 	addi	sp,sp,-20
   212d0:	dcc00315 	stw	r19,12(sp)
   212d4:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   212d8:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   212dc:	dc800215 	stw	r18,8(sp)
   212e0:	dc400115 	stw	r17,4(sp)
   212e4:	dc000015 	stw	r16,0(sp)
   212e8:	dfc00415 	stw	ra,16(sp)
   212ec:	2021883a 	mov	r16,r4
   212f0:	3023883a 	mov	r17,r6
   212f4:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   212f8:	002125c0 	call	2125c <altera_avalon_fifo_clear_event>
   212fc:	10000f1e 	bne	r2,zero,2133c <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   21300:	980b883a 	mov	r5,r19
   21304:	8009883a 	mov	r4,r16
   21308:	00212780 	call	21278 <altera_avalon_fifo_write_ienable>
   2130c:	10000d1e 	bne	r2,zero,21344 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   21310:	900b883a 	mov	r5,r18
   21314:	8009883a 	mov	r4,r16
   21318:	00212940 	call	21294 <altera_avalon_fifo_write_almostfull>
   2131c:	10000226 	beq	r2,zero,21328 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21320:	00bfff44 	movi	r2,-3
   21324:	00000806 	br	21348 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   21328:	880b883a 	mov	r5,r17
   2132c:	8009883a 	mov	r4,r16
   21330:	00212b00 	call	212b0 <altera_avalon_fifo_write_almostempty>
   21334:	10000426 	beq	r2,zero,21348 <altera_avalon_fifo_init+0x7c>
   21338:	003ff906 	br	21320 <_gp+0xffff7c68>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   2133c:	00bfffc4 	movi	r2,-1
   21340:	00000106 	br	21348 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   21344:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   21348:	dfc00417 	ldw	ra,16(sp)
   2134c:	dcc00317 	ldw	r19,12(sp)
   21350:	dc800217 	ldw	r18,8(sp)
   21354:	dc400117 	ldw	r17,4(sp)
   21358:	dc000017 	ldw	r16,0(sp)
   2135c:	dec00504 	addi	sp,sp,20
   21360:	f800283a 	ret

00021364 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21364:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   21368:	1080004c 	andi	r2,r2,1
   2136c:	1000021e 	bne	r2,zero,21378 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   21370:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21374:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   21378:	00bfff04 	movi	r2,-4
    }
}
   2137c:	f800283a 	ret

00021380 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   21380:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21384:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   21388:	1080008c 	andi	r2,r2,2
   2138c:	1000041e 	bne	r2,zero,213a0 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   21390:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   21394:	20c00037 	ldwio	r3,0(r4)
   21398:	30c00015 	stw	r3,0(r6)
   2139c:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   213a0:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   213a4:	f800283a 	ret

000213a8 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   213a8:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   213ac:	1080008c 	andi	r2,r2,2
   213b0:	1000021e 	bne	r2,zero,213bc <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   213b4:	20800037 	ldwio	r2,0(r4)
   213b8:	f800283a 	ret
    }
    return 0;
   213bc:	0005883a 	mov	r2,zero
}
   213c0:	f800283a 	ret

000213c4 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   213c4:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   213c8:	1080004c 	andi	r2,r2,1
   213cc:	1000021e 	bne	r2,zero,213d8 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   213d0:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   213d4:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   213d8:	00bfff04 	movi	r2,-4
    }
}
   213dc:	f800283a 	ret

000213e0 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   213e0:	20800137 	ldwio	r2,4(r4)
   213e4:	f800283a 	ret

000213e8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   213e8:	20800037 	ldwio	r2,0(r4)
   213ec:	f800283a 	ret

000213f0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   213f0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   213f4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   213f8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   213fc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   21400:	2980072e 	bgeu	r5,r6,21420 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21404:	38c00037 	ldwio	r3,0(r7)
   21408:	18ffffec 	andhi	r3,r3,65535
   2140c:	183ffc26 	beq	r3,zero,21400 <_gp+0xffff7d48>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21410:	28c00007 	ldb	r3,0(r5)
   21414:	20c00035 	stwio	r3,0(r4)
   21418:	29400044 	addi	r5,r5,1
   2141c:	003ff806 	br	21400 <_gp+0xffff7d48>

  return count;
}
   21420:	f800283a 	ret

00021424 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21424:	f800283a 	ret

00021428 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21428:	f800283a 	ret

0002142c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   2142c:	000170fa 	wrctl	ienable,zero
   21430:	f800283a 	ret
