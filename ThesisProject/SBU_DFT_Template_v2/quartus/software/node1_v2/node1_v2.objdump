
node1_v2.elf:     file format elf32-littlenios2
node1_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001ec8 memsz 0x00001ec8 flags r-x
    LOAD off    0x00002ee8 vaddr 0x00021ee8 paddr 0x00021fdc align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x000030d0 vaddr 0x000220d0 paddr 0x000220d0 align 2**12
         filesz 0x00000000 memsz 0x00000108 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002fdc  2**0
                  CONTENTS
  2 .text         00001dd4  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f4  00021df4  00021df4  00002df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00021ee8  00021fdc  00002ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000108  000220d0  000220d0  000030d0  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_1   00000000  000221d8  000221d8  00002fdc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000420  00000000  00000000  00003000  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007488  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002507  00000000  00000000  0000a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002936  00000000  00000000  0000cdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a00  00000000  00000000  0000f6e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000019fc  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000277f  00000000  00000000  00011ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014264  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000368  00000000  00000000  000142a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016126  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  00016129  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016130  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016131  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00016132  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001613d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00016148  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00016153  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  0001615e  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  000161b0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  00023d72  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00021df4 l    d  .rodata	00000000 .rodata
00021ee8 l    d  .rwdata	00000000 .rwdata
000220d0 l    d  .bss	00000000 .bss
000221d8 l    d  .data_mem_1	00000000 .data_mem_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node1_v2_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_1.c
00020354 l     F .text	00000060 send_data.part.1
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021100 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00021ee8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021fd0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00021a58 g     F .text	0000002c alt_main
00021000 g     F .text	00000080 _puts_r
00021bcc g     F .text	0000001c altera_avalon_fifo_write_almostfull
00021fdc g       *ABS*	00000000 __flash_rwdata_start
000221d8 g       *ABS*	00000000 __alt_heap_start
00020fb4 g     F .text	0000004c printf
00022188 g     O .bss	00000028 edges
00021c04 g     F .text	00000098 altera_avalon_fifo_init
00021c9c g     F .text	0000001c altera_avalon_fifo_write_fifo
00020b4c g     F .text	0000008c ring_buffer_dequeue_arr
00021dec g     F .text	00000008 altera_nios2_gen2_irq_init
00020b14 g     F .text	00000038 ring_buffer_dequeue
00020000 g     F .entry	0000000c __reset
00021d20 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00020020 g       *ABS*	00000000 __flash_exceptions_start
000220f4 g     O .bss	00000004 errno
0002005c g     F .text	00000020 proc_2
00020a74 g     F .text	0000000c ring_buffer_init
000220fc g     O .bss	00000004 alt_argv
00029fc8 g       *ABS*	00000000 _gp
00021ad0 g     F .text	00000004 usleep
00021b94 g     F .text	0000001c altera_avalon_fifo_clear_event
00022104 g     O .bss	00000082 buff_p1_p2
00020bd8 g     F .text	0000002c ring_buffer_pop
00020d14 g     F .text	00000028 memcpy
00021080 g     F .text	00000014 puts
00020000 g       *ABS*	00000000 __alt_mem_data_mem_1
00020518 g     F .text	00000058 get_edge
00020cec g     F .text	00000014 malloc
00020f78 g     F .text	0000003c _printf_r
00020a60 g     F .text	00000014 ring_buffer_num_items
000218bc g     F .text	00000064 .hidden __udivsi3
00020c04 g     F .text	00000084 ring_buffer_pop_arr
000221b0 g     O .bss	00000014 edge_p2_p3
00021094 g     F .text	00000050 _sbrk_r
00020a38 g     F .text	00000010 ring_buffer_is_empty
0002044c g     F .text	00000050 start_FIFO
00020a48 g     F .text	00000018 ring_buffer_is_full
0002042c g     F .text	00000020 cleanUp
00021fc8 g     O .rwdata	00000004 _global_impure_ptr
000221d8 g       *ABS*	00000000 __bss_end
000205f0 g     F .text	0000001c init_buffer
00020a10 g     F .text	00000028 receive_poll
000220d0 g     O .bss	00000004 proc_2_out_0
00021de4 g     F .text	00000004 alt_dcache_flush_all
00021bb0 g     F .text	0000001c altera_avalon_fifo_write_ienable
00021fdc g       *ABS*	00000000 __ram_rwdata_end
00021b78 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00021ad4 g     F .text	00000060 write
00021ee8 g       *ABS*	00000000 __ram_rodata_end
00021fd4 g     O .rwdata	00000004 jtag_uart_0
000220d4 g     O .bss	00000004 proc_2_inparg_0
00021920 g     F .text	00000058 .hidden __umodsi3
00020570 g     F .text	00000080 get_buffer
000221d8 g       *ABS*	00000000 end
00021b80 g     F .text	0000000c altera_avalon_fifo_read_event
00026000 g       *ABS*	00000000 __alt_stack_pointer
00021d28 g     F .text	00000034 altera_avalon_jtag_uart_write
000220d8 g     O .bss	00000004 input_fifo_wrclk_irq_event
00021ce0 g     F .text	0000001c altera_avalon_fifo_read_fifo
0002116c g     F .text	0000052c ___vfprintf_internal_r
00020d3c g     F .text	000000e4 _free_r
000206d8 g     F .text	000001e4 send_packet
00020020 g     F .text	0000003c _start
00021b54 g     F .text	00000004 alt_sys_init
000220dc g     O .bss	00000004 proc_2_outarg_0
00020a80 g     F .text	00000040 ring_buffer_queue
000202b4 g     F .text	000000a0 serializing_send
00020cc4 g     F .text	00000028 .hidden __mulsi3
00021ee8 g       *ABS*	00000000 __ram_rwdata_start
00021df4 g       *ABS*	00000000 __ram_rodata_start
00020238 g     F .text	0000007c read_data
00021d5c g     F .text	00000088 alt_busy_sleep
000221d8 g       *ABS*	00000000 __alt_stack_base
0002007c g     F .text	000000d0 print_status
000220e0 g     O .bss	00000004 proc_2_inps
00021b58 g     F .text	0000000c altera_avalon_fifo_read_status
00021d18 g     F .text	00000008 altera_avalon_fifo_read_other_info
00021a84 g     F .text	0000004c sbrk
000216b4 g     F .text	000000b8 __sfvwrite_small_dev
000220d0 g       *ABS*	00000000 __bss_start
0002049c g     F .text	0000007c main
000221c4 g     O .bss	00000014 edge_p1_p2
000220f8 g     O .bss	00000004 alt_envp
00021b8c g     F .text	00000008 altera_avalon_fifo_read_level
00026000 g       *ABS*	00000000 __alt_heap_limit
00020e20 g     F .text	00000158 _malloc_r
00021fd8 g     O .rwdata	00000004 alt_errno
0002060c g     F .text	000000cc init_structures
00020c88 g     F .text	0000003c ring_buffer_peek
000217c4 g     F .text	00000084 .hidden __divsi3
00021df4 g       *ABS*	00000000 __flash_rodata_start
00021b34 g     F .text	00000020 alt_irq_init
0002014c g     F .text	000000ec read_buff
0002176c g     F .text	00000058 _write_r
00021fcc g     O .rwdata	00000004 _impure_ptr
00022100 g     O .bss	00000004 alt_argc
000203b4 g     F .text	0000001c send_data
00020020 g       *ABS*	00000000 __ram_exceptions_start
000203d0 g     F .text	0000005c proc_args_init
000208e0 g     F .text	00000130 receive_packet
000220e4 g     O .bss	00000004 proc_2_outs
00021cfc g     F .text	0000001c altera_avalon_fifo_write_other_info
000208bc g     F .text	00000024 read_payload
00021fdc g       *ABS*	00000000 _edata
000221d8 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00021848 g     F .text	00000074 .hidden __modsi3
00021b64 g     F .text	0000000c altera_avalon_fifo_read_ienable
00026000 g       *ABS*	00000000 __alt_data_end
00020ac0 g     F .text	00000054 ring_buffer_queue_arr
0002000c g       .entry	00000000 _exit
00021b70 g     F .text	00000008 altera_avalon_fifo_read_almostfull
000210e4 g     F .text	0000001c strlen
00021cb8 g     F .text	00000028 altera_avalon_read_fifo
000220ec g     O .bss	00000004 __malloc_sbrk_start
000220e8 g     O .bss	00000004 proc_2_inp_0
00021de8 g     F .text	00000004 alt_icache_flush_all
000220f0 g     O .bss	00000004 __malloc_free_list
00021698 g     F .text	0000001c __vfprintf_internal
00021be8 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00021978 g     F .text	000000e0 alt_load
00020d00 g     F .text	00000014 free



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a7f214 	ori	gp,gp,40904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10883414 	ori	r2,r2,8400

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c87614 	ori	r3,r3,8664

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_gp+0xffff607c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00219780 	call	21978 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	0021a580 	call	21a58 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <_gp+0xffff6090>

0002005c <proc_2>:


void proc_2(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P2_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P2_OUT0_TYPE*)outargs[0][0];
   2005c:	28800017 	ldw	r2,0(r5)

	//printf("proc_2 -- num1: %x\n",*num1);

	*out1 = *num1 + 2;
   20060:	10c00017 	ldw	r3,0(r2)
void** proc_2_outs[P2_NUM_OF_OUTS];


void proc_2(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P2_INP0_TYPE*)inpargs[0][0];
   20064:	20800017 	ldw	r2,0(r4)
	int* out1 = (P2_OUT0_TYPE*)outargs[0][0];

	//printf("proc_2 -- num1: %x\n",*num1);

	*out1 = *num1 + 2;
   20068:	10800017 	ldw	r2,0(r2)
   2006c:	10800017 	ldw	r2,0(r2)
   20070:	10800084 	addi	r2,r2,2
   20074:	18800015 	stw	r2,0(r3)
   20078:	f800283a 	ret

0002007c <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   2007c:	defffd04 	addi	sp,sp,-12
   20080:	dc000015 	stw	r16,0(sp)
   20084:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   20088:	010000b4 	movhi	r4,2
   2008c:	21077d04 	addi	r4,r4,7668
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   20090:	dfc00215 	stw	ra,8(sp)
   20094:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   20098:	00210800 	call	21080 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   2009c:	8009883a 	mov	r4,r16
   200a0:	0021b8c0 	call	21b8c <altera_avalon_fifo_read_level>
   200a4:	010000b4 	movhi	r4,2
   200a8:	100b883a 	mov	r5,r2
   200ac:	21078704 	addi	r4,r4,7708
   200b0:	0020fb40 	call	20fb4 <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   200b4:	04400fc4 	movi	r17,63
   200b8:	880b883a 	mov	r5,r17
   200bc:	8009883a 	mov	r4,r16
   200c0:	0021b580 	call	21b58 <altera_avalon_fifo_read_status>
   200c4:	010000b4 	movhi	r4,2
   200c8:	100b883a 	mov	r5,r2
   200cc:	21078a04 	addi	r4,r4,7720
   200d0:	0020fb40 	call	20fb4 <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   200d4:	880b883a 	mov	r5,r17
   200d8:	8009883a 	mov	r4,r16
   200dc:	0021b800 	call	21b80 <altera_avalon_fifo_read_event>
   200e0:	010000b4 	movhi	r4,2
   200e4:	100b883a 	mov	r5,r2
   200e8:	21078e04 	addi	r4,r4,7736
   200ec:	0020fb40 	call	20fb4 <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   200f0:	880b883a 	mov	r5,r17
   200f4:	8009883a 	mov	r4,r16
   200f8:	0021b640 	call	21b64 <altera_avalon_fifo_read_ienable>
   200fc:	010000b4 	movhi	r4,2
   20100:	100b883a 	mov	r5,r2
   20104:	21079104 	addi	r4,r4,7748
   20108:	0020fb40 	call	20fb4 <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   2010c:	8009883a 	mov	r4,r16
   20110:	0021b780 	call	21b78 <altera_avalon_fifo_read_almostempty>
   20114:	010000b4 	movhi	r4,2
   20118:	100b883a 	mov	r5,r2
   2011c:	21079504 	addi	r4,r4,7764
   20120:	0020fb40 	call	20fb4 <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   20124:	8009883a 	mov	r4,r16
   20128:	0021b700 	call	21b70 <altera_avalon_fifo_read_almostfull>
   2012c:	010000b4 	movhi	r4,2
   20130:	100b883a 	mov	r5,r2
   20134:	21079a04 	addi	r4,r4,7784
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   20138:	dfc00217 	ldw	ra,8(sp)
   2013c:	dc400117 	ldw	r17,4(sp)
   20140:	dc000017 	ldw	r16,0(sp)
   20144:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   20148:	0020fb41 	jmpi	20fb4 <printf>

0002014c <read_buff>:
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){

	//printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);

	if(proc_num == 2){
   2014c:	297fffcc 	andi	r5,r5,65535
   20150:	00800084 	movi	r2,2
   20154:	2880371e 	bne	r5,r2,20234 <read_buff+0xe8>
		if(input_num == 0){
   20158:	31803fcc 	andi	r6,r6,255
   2015c:	3000351e 	bne	r6,zero,20234 <read_buff+0xe8>
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   20160:	defff904 	addi	sp,sp,-28
   20164:	df000515 	stw	fp,20(sp)
   20168:	dd000415 	stw	r20,16(sp)
   2016c:	dcc00315 	stw	r19,12(sp)
   20170:	dc800215 	stw	r18,8(sp)
   20174:	dc400115 	stw	r17,4(sp)
   20178:	dc000015 	stw	r16,0(sp)
   2017c:	dfc00615 	stw	ra,24(sp)
	//printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);

	if(proc_num == 2){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   20180:	20800203 	ldbu	r2,8(r4)
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}

/* This is only for current node */
void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   20184:	df000504 	addi	fp,sp,20

	//printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);

	if(proc_num == 2){
		if(input_num == 0){
   20188:	d825883a 	mov	r18,sp
			uint8_t tmp[edge->size_of_token_type];
   2018c:	108000c4 	addi	r2,r2,3
   20190:	10807f0c 	andi	r2,r2,508
   20194:	d8b7c83a 	sub	sp,sp,r2
   20198:	2021883a 	mov	r16,r4
   2019c:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
   201a0:	0023883a 	mov	r17,zero
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   201a4:	05000604 	movi	r20,24

	if(proc_num == 2){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   201a8:	80800183 	ldbu	r2,6(r16)
   201ac:	8880110e 	bge	r17,r2,201f4 <read_buff+0xa8>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   201b0:	81800203 	ldbu	r6,8(r16)
   201b4:	81000317 	ldw	r4,12(r16)
   201b8:	980b883a 	mov	r5,r19
   201bc:	0020b4c0 	call	20b4c <ring_buffer_dequeue_arr>
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   201c0:	81400203 	ldbu	r5,8(r16)
   201c4:	81000317 	ldw	r4,12(r16)
   201c8:	a14bc83a 	sub	r5,r20,r5
   201cc:	29403fcc 	andi	r5,r5,255
   201d0:	0020c040 	call	20c04 <ring_buffer_pop_arr>
				//printf("circular buffer size(after pop): %d\n",ring_buffer_num_items((edge->buffer)));
				/*for(int i =0; i< sizeof(tmp); i++){
					printf("tmp[i]: %d\n",tmp[i]);
				}*/
				proc_2_inp_0[i] = ( (P2_INP0_TYPE*)tmp )[0];
   201d4:	d1204817 	ldw	r4,-32480(gp)
   201d8:	8c45883a 	add	r2,r17,r17
   201dc:	98c00017 	ldw	r3,0(r19)
   201e0:	1085883a 	add	r2,r2,r2
   201e4:	2085883a 	add	r2,r4,r2
   201e8:	10c00015 	stw	r3,0(r2)

	if(proc_num == 2){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   201ec:	8c400044 	addi	r17,r17,1
   201f0:	003fed06 	br	201a8 <_gp+0xffff61e0>
				proc_2_inp_0[i] = ( (P2_INP0_TYPE*)tmp )[0];
			}
			/*for(int i =0; i< sizeof(proc_2_inp_0); i++){
				printf("proc_2_inp_0[i]: %d\n",proc_2_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P2_INP0_TYPE*)tmp )[0]);
   201f4:	99c00017 	ldw	r7,0(r19)
   201f8:	8180008b 	ldhu	r6,2(r16)
   201fc:	8140010b 	ldhu	r5,4(r16)
   20200:	010000b4 	movhi	r4,2
   20204:	21079f04 	addi	r4,r4,7804
   20208:	0020fb40 	call	20fb4 <printf>
   2020c:	9037883a 	mov	sp,r18
		}
	}
}
   20210:	e6fffb04 	addi	sp,fp,-20
   20214:	dfc00617 	ldw	ra,24(sp)
   20218:	df000517 	ldw	fp,20(sp)
   2021c:	dd000417 	ldw	r20,16(sp)
   20220:	dcc00317 	ldw	r19,12(sp)
   20224:	dc800217 	ldw	r18,8(sp)
   20228:	dc400117 	ldw	r17,4(sp)
   2022c:	dc000017 	ldw	r16,0(sp)
   20230:	dec00704 	addi	sp,sp,28
   20234:	f800283a 	ret

00020238 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   20238:	defffb04 	addi	sp,sp,-20
   2023c:	dcc00315 	stw	r19,12(sp)
   20240:	dc800215 	stw	r18,8(sp)
   20244:	dc400115 	stw	r17,4(sp)
   20248:	dfc00415 	stw	ra,16(sp)
   2024c:	dc000015 	stw	r16,0(sp)
   20250:	2023883a 	mov	r17,r4
   20254:	2825883a 	mov	r18,r5
   20258:	3027883a 	mov	r19,r6

	//printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
   2025c:	88c00317 	ldw	r3,12(r17)
   20260:	89000183 	ldbu	r4,6(r17)
   20264:	01400604 	movi	r5,24
   20268:	18802043 	ldbu	r2,129(r3)
   2026c:	1c002003 	ldbu	r16,128(r3)
   20270:	1421c83a 	sub	r16,r2,r16
   20274:	84001fcc 	andi	r16,r16,127
   20278:	0020cc40 	call	20cc4 <__mulsi3>
   2027c:	8080030e 	bge	r16,r2,2028c <read_data+0x54>
		//alt_putstr("waiting for receiving data:\n");
		receive_poll();
   20280:	0020a100 	call	20a10 <receive_poll>

		//alt_putstr("read from FIFO:\n");
		receive_packet();
   20284:	00208e00 	call	208e0 <receive_packet>
   20288:	003ff406 	br	2025c <_gp+0xffff6294>
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
   2028c:	99803fcc 	andi	r6,r19,255
   20290:	917fffcc 	andi	r5,r18,65535
   20294:	8809883a 	mov	r4,r17
}
   20298:	dfc00417 	ldw	ra,16(sp)
   2029c:	dcc00317 	ldw	r19,12(sp)
   202a0:	dc800217 	ldw	r18,8(sp)
   202a4:	dc400117 	ldw	r17,4(sp)
   202a8:	dc000017 	ldw	r16,0(sp)
   202ac:	dec00504 	addi	sp,sp,20

		//alt_putstr("read from FIFO:\n");
		receive_packet();
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
   202b0:	002014c1 	jmpi	2014c <read_buff>

000202b4 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array){
   202b4:	defff604 	addi	sp,sp,-40
   202b8:	dc000815 	stw	r16,32(sp)
   202bc:	dfc00915 	stw	ra,36(sp)
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   202c0:	20c00203 	ldbu	r3,8(r4)
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
}

void serializing_send(struct Edge *edge, unsigned char *array){
   202c4:	2021883a 	mov	r16,r4
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   202c8:	0005883a 	mov	r2,zero
   202cc:	10c0070e 	bge	r2,r3,202ec <serializing_send+0x38>
		send_array[i] = array[i];
   202d0:	d9800204 	addi	r6,sp,8
   202d4:	3089883a 	add	r4,r6,r2
   202d8:	288d883a 	add	r6,r5,r2
   202dc:	31800003 	ldbu	r6,0(r6)
}

void serializing_send(struct Edge *edge, unsigned char *array){
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   202e0:	10800044 	addi	r2,r2,1
		send_array[i] = array[i];
   202e4:	21800005 	stb	r6,0(r4)
   202e8:	003ff806 	br	202cc <_gp+0xffff6304>
		//printf("in serialized data function: array[i]: %d\n",array[i]);
	}

	if(edge->external == 1){
   202ec:	80800403 	ldbu	r2,16(r16)
   202f0:	10000a26 	beq	r2,zero,2031c <serializing_send+0x68>
		//printf("external\n");
		//alt_putstr("write to FIFO\n");
		/*for(int i = 0; i < 24; ++i)
			printf("send_array: %d\n",send_array[i]);*/
		send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   202f4:	d8800204 	addi	r2,sp,8
   202f8:	81c0010b 	ldhu	r7,4(r16)
   202fc:	8180008b 	ldhu	r6,2(r16)
   20300:	81400043 	ldbu	r5,1(r16)
   20304:	81000003 	ldbu	r4,0(r16)
   20308:	d8800115 	stw	r2,4(sp)
   2030c:	00800804 	movi	r2,32
   20310:	d8800015 	stw	r2,0(sp)
   20314:	00206d80 	call	206d8 <send_packet>
   20318:	00000406 	br	2032c <serializing_send+0x78>
	}
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
   2031c:	81000317 	ldw	r4,12(r16)
   20320:	01800604 	movi	r6,24
   20324:	d9400204 	addi	r5,sp,8
   20328:	0020ac00 	call	20ac0 <ring_buffer_queue_arr>
	}
	printf("processor number %d sends data to %d ,which is %x\n",edge->proc_src,edge->proc_dest,( (int*)send_array )[0]);
   2032c:	d9c00217 	ldw	r7,8(sp)
   20330:	8180010b 	ldhu	r6,4(r16)
   20334:	8140008b 	ldhu	r5,2(r16)
   20338:	010000b4 	movhi	r4,2
   2033c:	2107ad04 	addi	r4,r4,7860
   20340:	0020fb40 	call	20fb4 <printf>

}
   20344:	dfc00917 	ldw	ra,36(sp)
   20348:	dc000817 	ldw	r16,32(sp)
   2034c:	dec00a04 	addi	sp,sp,40
   20350:	f800283a 	ret

00020354 <send_data.part.1>:

/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   20354:	defffc04 	addi	sp,sp,-16
   20358:	dc800215 	stw	r18,8(sp)
   2035c:	dc400115 	stw	r17,4(sp)
   20360:	dc000015 	stw	r16,0(sp)
   20364:	dfc00315 	stw	ra,12(sp)
   20368:	2023883a 	mov	r17,r4
   2036c:	0021883a 	mov	r16,zero

	if(proc_num == 2){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
   20370:	d4a04504 	addi	r18,gp,-32492
/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 2){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   20374:	888001c3 	ldbu	r2,7(r17)
   20378:	8080080e 	bge	r16,r2,2039c <send_data.part.1+0x48>
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
   2037c:	8405883a 	add	r2,r16,r16
   20380:	1085883a 	add	r2,r2,r2
   20384:	1485883a 	add	r2,r2,r18
   20388:	11400017 	ldw	r5,0(r2)
   2038c:	8809883a 	mov	r4,r17
/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 2){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   20390:	84000044 	addi	r16,r16,1
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
   20394:	00202b40 	call	202b4 <serializing_send>
   20398:	003ff606 	br	20374 <_gp+0xffff63ac>
			}
		}
	}
}
   2039c:	dfc00317 	ldw	ra,12(sp)
   203a0:	dc800217 	ldw	r18,8(sp)
   203a4:	dc400117 	ldw	r17,4(sp)
   203a8:	dc000017 	ldw	r16,0(sp)
   203ac:	dec00404 	addi	sp,sp,16
   203b0:	f800283a 	ret

000203b4 <send_data>:
}

/* This is only for current node */
void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 2){
   203b4:	297fffcc 	andi	r5,r5,65535
   203b8:	00800084 	movi	r2,2
   203bc:	2880031e 	bne	r5,r2,203cc <send_data+0x18>
		if(output_num == 0){
   203c0:	31803fcc 	andi	r6,r6,255
   203c4:	3000011e 	bne	r6,zero,203cc <send_data+0x18>
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_2_outarg_0[i]));
			}
		}
	}
}
   203c8:	00203541 	jmpi	20354 <send_data.part.1>
   203cc:	f800283a 	ret

000203d0 <proc_args_init>:

void proc_args_init(){
   203d0:	defffd04 	addi	sp,sp,-12
   203d4:	dc400115 	stw	r17,4(sp)
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
   203d8:	04400104 	movi	r17,4
   203dc:	8809883a 	mov	r4,r17
			}
		}
	}
}

void proc_args_init(){
   203e0:	dfc00215 	stw	ra,8(sp)
   203e4:	dc000015 	stw	r16,0(sp)
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
   203e8:	0020cec0 	call	20cec <malloc>
	proc_2_out_0 = (P2_OUT0_TYPE*)malloc(P2_OUT0_NUM_OF_TOKEN*sizeof(P2_OUT0_TYPE));
   203ec:	8809883a 	mov	r4,r17
	}
}

void proc_args_init(){
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
   203f0:	1021883a 	mov	r16,r2
   203f4:	d0a04815 	stw	r2,-32480(gp)
	proc_2_out_0 = (P2_OUT0_TYPE*)malloc(P2_OUT0_NUM_OF_TOKEN*sizeof(P2_OUT0_TYPE));
   203f8:	0020cec0 	call	20cec <malloc>
   203fc:	d0a04215 	stw	r2,-32504(gp)

	// pointers to elements for proc 2
    proc_2_inparg_0[0] = &proc_2_inp_0[0];
    proc_2_outarg_0[0] = &proc_2_out_0[0];
   20400:	d0a04515 	stw	r2,-32492(gp)

    // top level pointers to be passed for proc 2
    proc_2_inps[0] = proc_2_inparg_0;
   20404:	d0a04304 	addi	r2,gp,-32500
   20408:	d0a04615 	stw	r2,-32488(gp)
    proc_2_outs[0] = proc_2_outarg_0;
   2040c:	d0a04504 	addi	r2,gp,-32492
	// space allocation for input and output for proc 2
	proc_2_inp_0 = (P2_INP0_TYPE*)malloc(P2_INP0_NUM_OF_TOKEN*sizeof(P2_INP0_TYPE));
	proc_2_out_0 = (P2_OUT0_TYPE*)malloc(P2_OUT0_NUM_OF_TOKEN*sizeof(P2_OUT0_TYPE));

	// pointers to elements for proc 2
    proc_2_inparg_0[0] = &proc_2_inp_0[0];
   20410:	d4204315 	stw	r16,-32500(gp)
    proc_2_outarg_0[0] = &proc_2_out_0[0];

    // top level pointers to be passed for proc 2
    proc_2_inps[0] = proc_2_inparg_0;
    proc_2_outs[0] = proc_2_outarg_0;
   20414:	d0a04715 	stw	r2,-32484(gp)
}
   20418:	dfc00217 	ldw	ra,8(sp)
   2041c:	dc400117 	ldw	r17,4(sp)
   20420:	dc000017 	ldw	r16,0(sp)
   20424:	dec00304 	addi	sp,sp,12
   20428:	f800283a 	ret

0002042c <cleanUp>:

void cleanUp(){
	// clean up proc 2
	free(proc_2_inp_0);
   2042c:	d1204817 	ldw	r4,-32480(gp)
    // top level pointers to be passed for proc 2
    proc_2_inps[0] = proc_2_inparg_0;
    proc_2_outs[0] = proc_2_outarg_0;
}

void cleanUp(){
   20430:	deffff04 	addi	sp,sp,-4
   20434:	dfc00015 	stw	ra,0(sp)
	// clean up proc 2
	free(proc_2_inp_0);
   20438:	0020d000 	call	20d00 <free>
	free(proc_2_out_0);
   2043c:	d1204217 	ldw	r4,-32504(gp)
}
   20440:	dfc00017 	ldw	ra,0(sp)
   20444:	dec00104 	addi	sp,sp,4
}

void cleanUp(){
	// clean up proc 2
	free(proc_2_inp_0);
	free(proc_2_out_0);
   20448:	0020d001 	jmpi	20d00 <free>

0002044c <start_FIFO>:
}

void start_FIFO(){
   2044c:	defffd04 	addi	sp,sp,-12
   20450:	dc400115 	stw	r17,4(sp)
   20454:	dc000015 	stw	r16,0(sp)
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   20458:	044002c4 	movi	r17,11
   2045c:	04000084 	movi	r16,2
   20460:	880f883a 	mov	r7,r17
   20464:	800d883a 	mov	r6,r16
   20468:	000b883a 	mov	r5,zero
   2046c:	01240814 	movui	r4,36896
	// clean up proc 2
	free(proc_2_inp_0);
	free(proc_2_out_0);
}

void start_FIFO(){
   20470:	dfc00215 	stw	ra,8(sp)
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   20474:	0021c040 	call	21c04 <altera_avalon_fifo_init>
   20478:	880f883a 	mov	r7,r17
   2047c:	800d883a 	mov	r6,r16
   20480:	000b883a 	mov	r5,zero
   20484:	01240014 	movui	r4,36864
	//alt_putstr("source status:\n");
	//print_status(FIFO_SOURCE_1_IN_CSR_BASE);

	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_1_IN_CSR_BASE);
}
   20488:	dfc00217 	ldw	ra,8(sp)
   2048c:	dc400117 	ldw	r17,4(sp)
   20490:	dc000017 	ldw	r16,0(sp)
   20494:	dec00304 	addi	sp,sp,12
}

static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   20498:	0021c041 	jmpi	21c04 <altera_avalon_fifo_init>

0002049c <main>:
	//print_status(FIFO_SINK_1_IN_CSR_BASE);
}

/* This is only for current node */
int main()
{
   2049c:	defffe04 	addi	sp,sp,-8
   204a0:	dfc00115 	stw	ra,4(sp)
   204a4:	dc000015 	stw	r16,0(sp)
	start_FIFO();
   204a8:	002044c0 	call	2044c <start_FIFO>
	proc_args_init();
	init_structures();
   204ac:	04000144 	movi	r16,5

/* This is only for current node */
int main()
{
	start_FIFO();
	proc_args_init();
   204b0:	00203d00 	call	203d0 <proc_args_init>
	init_structures();
   204b4:	002060c0 	call	2060c <init_structures>
	for(int k = 0; k < 5; k++){

	  for(int i = 0; i <P2_NUM_OF_INPS; ++i){
		  //alt_putstr("before get edge(for receive)\n");
		  /* This is only for current node */
		  struct Edge *edge = get_edge(2,i,0/*it means input edges*/);
   204b8:	000d883a 	mov	r6,zero
   204bc:	000b883a 	mov	r5,zero
   204c0:	01000084 	movi	r4,2
   204c4:	00205180 	call	20518 <get_edge>
		  printf("edge node dest: %d\n",edge->node_dest);
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  //alt_putstr("before read_data\n");
		  read_data(edge,2/*which process*/, i/*which input*/);
   204c8:	1009883a 	mov	r4,r2
   204cc:	000d883a 	mov	r6,zero
   204d0:	01400084 	movi	r5,2
   204d4:	00202380 	call	20238 <read_data>
		  //alt_putstr("after read_data\n");
	  }

	  //alt_putstr("before call proc_2\n");
	  proc_2(proc_2_inps, proc_2_outs);
   204d8:	d1604704 	addi	r5,gp,-32484
   204dc:	d1204604 	addi	r4,gp,-32488
   204e0:	002005c0 	call	2005c <proc_2>


	  for(int i = 0; i <P2_NUM_OF_OUTS; ++i){

		  //alt_putstr("before get edge(for send)\n");
		  struct Edge *edge = get_edge(2,i,1/*it means output edges*/);
   204e4:	01800044 	movi	r6,1
   204e8:	000b883a 	mov	r5,zero
   204ec:	01000084 	movi	r4,2
   204f0:	00205180 	call	20518 <get_edge>
   204f4:	1009883a 	mov	r4,r2
   204f8:	00203540 	call	20354 <send_data.part.1>

		  //alt_putstr("before send_data\n");
		  send_data(edge,2/*which process*/, i/*which output*/);
		  //alt_putstr("after send_data\n");
	  }
	  usleep(4000000000);
   204fc:	013b9af4 	movhi	r4,61035
   20500:	210a0004 	addi	r4,r4,10240
   20504:	843fffc4 	addi	r16,r16,-1
   20508:	0021ad00 	call	21ad0 <usleep>
	start_FIFO();
	proc_args_init();
	init_structures();


	for(int k = 0; k < 5; k++){
   2050c:	803fea1e 	bne	r16,zero,204b8 <_gp+0xffff64f0>
		  send_data(edge,2/*which process*/, i/*which output*/);
		  //alt_putstr("after send_data\n");
	  }
	  usleep(4000000000);
	}
	  cleanUp();
   20510:	002042c0 	call	2042c <cleanUp>
   20514:	003fff06 	br	20514 <_gp+0xffff654c>

00020518 <get_edge>:
/****************** Structure ******************/

/* This is only for current node */
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   20518:	31803fcc 	andi	r6,r6,255
   2051c:	3000081e 	bne	r6,zero,20540 <get_edge+0x28>
        if (proc_num == 2) {
   20520:	21003fcc 	andi	r4,r4,255
   20524:	00800084 	movi	r2,2
   20528:	20800f1e 	bne	r4,r2,20568 <get_edge+0x50>
            if (port_num == 0) {
   2052c:	29403fcc 	andi	r5,r5,255
   20530:	28000d1e 	bne	r5,zero,20568 <get_edge+0x50>
                return &edge_p1_p2;
   20534:	008000b4 	movhi	r2,2
   20538:	10887104 	addi	r2,r2,8644
   2053c:	f800283a 	ret
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   20540:	00800044 	movi	r2,1
   20544:	3080081e 	bne	r6,r2,20568 <get_edge+0x50>
    	if (proc_num == 2) {
   20548:	21003fcc 	andi	r4,r4,255
   2054c:	00800084 	movi	r2,2
   20550:	2080051e 	bne	r4,r2,20568 <get_edge+0x50>
			if (port_num == 0) {
   20554:	29403fcc 	andi	r5,r5,255
   20558:	2800031e 	bne	r5,zero,20568 <get_edge+0x50>
				return &edge_p2_p3;
   2055c:	008000b4 	movhi	r2,2
   20560:	10886c04 	addi	r2,r2,8624
   20564:	f800283a 	ret
			}
		}
    }

    return 0;
   20568:	0005883a 	mov	r2,zero
}
   2056c:	f800283a 	ret

00020570 <get_buffer>:

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   20570:	defffe04 	addi	sp,sp,-8
   20574:	dc000015 	stw	r16,0(sp)
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
   20578:	040000b4 	movhi	r16,2
   2057c:	84086204 	addi	r16,r16,8584
   20580:	8080008b 	ldhu	r2,2(r16)
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   20584:	dfc00115 	stw	ra,4(sp)
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
   20588:	213fffcc 	andi	r4,r4,65535
   2058c:	2080031e 	bne	r4,r2,2059c <get_buffer+0x2c>
            if (edges[i].proc_dest == proc_dest) {
   20590:	80c0010b 	ldhu	r3,4(r16)
   20594:	28bfffcc 	andi	r2,r5,65535
   20598:	10c00a26 	beq	r2,r3,205c4 <get_buffer+0x54>

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
   2059c:	8080058b 	ldhu	r2,22(r16)
   205a0:	20800e1e 	bne	r4,r2,205dc <get_buffer+0x6c>
            if (edges[i].proc_dest == proc_dest) {
   205a4:	008000b4 	movhi	r2,2
   205a8:	10886204 	addi	r2,r2,8584
   205ac:	10c0060b 	ldhu	r3,24(r2)
   205b0:	297fffcc 	andi	r5,r5,65535
                return edges[i].buffer;
            }
        }
    }
    return 0;
   205b4:	0005883a 	mov	r2,zero
/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 2; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
   205b8:	28c0091e 	bne	r5,r3,205e0 <get_buffer+0x70>
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 2; i++) {
   205bc:	01000044 	movi	r4,1
   205c0:	00000106 	br	205c8 <get_buffer+0x58>
   205c4:	0009883a 	mov	r4,zero
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   205c8:	01400504 	movi	r5,20
   205cc:	0020cc40 	call	20cc4 <__mulsi3>
   205d0:	8085883a 	add	r2,r16,r2
   205d4:	10800317 	ldw	r2,12(r2)
   205d8:	00000106 	br	205e0 <get_buffer+0x70>
            }
        }
    }
    return 0;
   205dc:	0005883a 	mov	r2,zero
}
   205e0:	dfc00117 	ldw	ra,4(sp)
   205e4:	dc000017 	ldw	r16,0(sp)
   205e8:	dec00204 	addi	sp,sp,8
   205ec:	f800283a 	ret

000205f0 <init_buffer>:

/* This is only for current node */
void init_buffer(){
   205f0:	deffde04 	addi	sp,sp,-136
	ring_buffer_t buff_p1_p2;
	ring_buffer_init(&buff_p1_p2);
   205f4:	d809883a 	mov	r4,sp
    }
    return 0;
}

/* This is only for current node */
void init_buffer(){
   205f8:	dfc02115 	stw	ra,132(sp)
	ring_buffer_t buff_p1_p2;
	ring_buffer_init(&buff_p1_p2);
   205fc:	0020a740 	call	20a74 <ring_buffer_init>
}
   20600:	dfc02117 	ldw	ra,132(sp)
   20604:	dec02204 	addi	sp,sp,136
   20608:	f800283a 	ret

0002060c <init_structures>:

/* This is only for current node */
void init_structures(){
   2060c:	defffb04 	addi	sp,sp,-20
   20610:	dfc00415 	stw	ra,16(sp)
   20614:	dcc00315 	stw	r19,12(sp)
   20618:	dc800215 	stw	r18,8(sp)
   2061c:	dc400115 	stw	r17,4(sp)
   20620:	dc000015 	stw	r16,0(sp)
	init_buffer();
   20624:	00205f00 	call	205f0 <init_buffer>

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   20628:	014000b4 	movhi	r5,2
   2062c:	29487104 	addi	r5,r5,8644
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
   20630:	00800044 	movi	r2,1
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20634:	00c000b4 	movhi	r3,2
   20638:	04400504 	movi	r17,20
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
   2063c:	2880008d 	sth	r2,2(r5)
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
   20640:	28800185 	stb	r2,6(r5)
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20644:	18c86204 	addi	r3,r3,8584
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;
   20648:	008000b4 	movhi	r2,2
void init_structures(){
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
   2064c:	04000044 	movi	r16,1
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   20650:	04c00084 	movi	r19,2
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
   20654:	04800104 	movi	r18,4
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20658:	880d883a 	mov	r6,r17
   2065c:	1809883a 	mov	r4,r3
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;
   20660:	10884104 	addi	r2,r2,8452
void init_structures(){
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
   20664:	2c000045 	stb	r16,1(r5)
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   20668:	2cc0010d 	sth	r19,4(r5)
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
   2066c:	2c800205 	stb	r18,8(r5)
	edge_p1_p2.external = 1;
   20670:	2c000405 	stb	r16,16(r5)
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   20674:	28000005 	stb	zero,0(r5)
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;
   20678:	28800315 	stw	r2,12(r5)

	edges[0] = edge_p1_p2;
   2067c:	0020d140 	call	20d14 <memcpy>


	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   20680:	014000b4 	movhi	r5,2
   20684:	29486c04 	addi	r5,r5,8624
	edge_p1_p2.num_of_inp_token = P2_INP0_NUM_OF_TOKEN;
	edge_p1_p2.size_of_token_type = sizeof(P2_INP0_TYPE);
	edge_p1_p2.external = 1;
	edge_p1_p2.buffer = &buff_p1_p2;

	edges[0] = edge_p1_p2;
   20688:	1007883a 	mov	r3,r2


	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
	edge_p2_p3.node_dest = 3;
   2068c:	008000c4 	movi	r2,3
   20690:	28800045 	stb	r2,1(r5)
	edge_p2_p3.proc_dest = 3;
	edge_p2_p3.num_of_out_token = P2_OUT0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P2_OUT0_TYPE);
	edge_p2_p3.external = 1;

	edges[1] = edge_p2_p3;
   20694:	880d883a 	mov	r6,r17

	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
	edge_p2_p3.node_dest = 3;
	edge_p2_p3.proc_src = 2;
	edge_p2_p3.proc_dest = 3;
   20698:	008000c4 	movi	r2,3
	edge_p2_p3.num_of_out_token = P2_OUT0_NUM_OF_TOKEN;
	edge_p2_p3.size_of_token_type = sizeof(P2_OUT0_TYPE);
	edge_p2_p3.external = 1;

	edges[1] = edge_p2_p3;
   2069c:	1c49883a 	add	r4,r3,r17

	edges[0] = edge_p1_p2;


	//Edge p2 to p3
	edge_p2_p3.node_src = 1;
   206a0:	2c000005 	stb	r16,0(r5)
	edge_p2_p3.node_dest = 3;
	edge_p2_p3.proc_src = 2;
   206a4:	2cc0008d 	sth	r19,2(r5)
	edge_p2_p3.proc_dest = 3;
   206a8:	2880010d 	sth	r2,4(r5)
	edge_p2_p3.num_of_out_token = P2_OUT0_NUM_OF_TOKEN;
   206ac:	2c0001c5 	stb	r16,7(r5)
	edge_p2_p3.size_of_token_type = sizeof(P2_OUT0_TYPE);
   206b0:	2c800205 	stb	r18,8(r5)
	edge_p2_p3.external = 1;
   206b4:	2c000405 	stb	r16,16(r5)

	edges[1] = edge_p2_p3;
   206b8:	0020d140 	call	20d14 <memcpy>

}
   206bc:	dfc00417 	ldw	ra,16(sp)
   206c0:	dcc00317 	ldw	r19,12(sp)
   206c4:	dc800217 	ldw	r18,8(sp)
   206c8:	dc400117 	ldw	r17,4(sp)
   206cc:	dc000017 	ldw	r16,0(sp)
   206d0:	dec00504 	addi	sp,sp,20
   206d4:	f800283a 	ret

000206d8 <send_packet>:


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206d8:	defff904 	addi	sp,sp,-28
   206dc:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   206e0:	25403fcc 	andi	r21,r4,255

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206e4:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206e8:	d8800703 	ldbu	r2,28(sp)

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   206ec:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   206f0:	a80c923a 	slli	r6,r21,8
   206f4:	29403fcc 	andi	r5,r5,255
   206f8:	1004943a 	slli	r2,r2,16
   206fc:	314ab03a 	or	r5,r6,r5
   20700:	a00c943a 	slli	r6,r20,16

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20704:	dcc00315 	stw	r19,12(sp)
   20708:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2070c:	9cffffcc 	andi	r19,r19,65535

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   20710:	dc800215 	stw	r18,8(sp)
   20714:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20718:	04a40014 	movui	r18,36864
   2071c:	04641214 	movui	r17,36936
   20720:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20724:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20728:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2072c:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20730:	298cb03a 	or	r6,r5,r6
   20734:	8809883a 	mov	r4,r17
   20738:	900b883a 	mov	r5,r18

}


void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   2073c:	dfc00615 	stw	ra,24(sp)
   20740:	dc000015 	stw	r16,0(sp)
   20744:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20748:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   2074c:	ace6b03a 	or	r19,r21,r19
   20750:	a1803fcc 	andi	r6,r20,255
   20754:	998cb03a 	or	r6,r19,r6
   20758:	900b883a 	mov	r5,r18
   2075c:	8809883a 	mov	r4,r17
   20760:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>
   20764:	80800043 	ldbu	r2,1(r16)
   20768:	81000003 	ldbu	r4,0(r16)
   2076c:	818000c3 	ldbu	r6,3(r16)
   20770:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20774:	900b883a 	mov	r5,r18
   20778:	300c963a 	slli	r6,r6,24
   2077c:	1106b03a 	or	r3,r2,r4
   20780:	80800083 	ldbu	r2,2(r16)
   20784:	8809883a 	mov	r4,r17
   20788:	1004943a 	slli	r2,r2,16
   2078c:	10c4b03a 	or	r2,r2,r3
   20790:	308cb03a 	or	r6,r6,r2
   20794:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>
   20798:	80800143 	ldbu	r2,5(r16)
   2079c:	81000103 	ldbu	r4,4(r16)
   207a0:	818001c3 	ldbu	r6,7(r16)
   207a4:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   207a8:	900b883a 	mov	r5,r18
   207ac:	300c963a 	slli	r6,r6,24
   207b0:	1106b03a 	or	r3,r2,r4
   207b4:	80800183 	ldbu	r2,6(r16)
   207b8:	8809883a 	mov	r4,r17
   207bc:	1004943a 	slli	r2,r2,16
   207c0:	10c4b03a 	or	r2,r2,r3
   207c4:	308cb03a 	or	r6,r6,r2
   207c8:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>
   207cc:	80800243 	ldbu	r2,9(r16)
   207d0:	81000203 	ldbu	r4,8(r16)
   207d4:	818002c3 	ldbu	r6,11(r16)
   207d8:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   207dc:	900b883a 	mov	r5,r18
   207e0:	300c963a 	slli	r6,r6,24
   207e4:	1106b03a 	or	r3,r2,r4
   207e8:	80800283 	ldbu	r2,10(r16)
   207ec:	8809883a 	mov	r4,r17
   207f0:	1004943a 	slli	r2,r2,16
   207f4:	10c4b03a 	or	r2,r2,r3
   207f8:	308cb03a 	or	r6,r6,r2
   207fc:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>
   20800:	80800343 	ldbu	r2,13(r16)
   20804:	81000303 	ldbu	r4,12(r16)
   20808:	818003c3 	ldbu	r6,15(r16)
   2080c:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20810:	900b883a 	mov	r5,r18
   20814:	300c963a 	slli	r6,r6,24
   20818:	1106b03a 	or	r3,r2,r4
   2081c:	80800383 	ldbu	r2,14(r16)
   20820:	8809883a 	mov	r4,r17
   20824:	1004943a 	slli	r2,r2,16
   20828:	10c4b03a 	or	r2,r2,r3
   2082c:	308cb03a 	or	r6,r6,r2
   20830:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>
   20834:	80800443 	ldbu	r2,17(r16)
   20838:	81000403 	ldbu	r4,16(r16)
   2083c:	818004c3 	ldbu	r6,19(r16)
   20840:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20844:	900b883a 	mov	r5,r18
   20848:	300c963a 	slli	r6,r6,24
   2084c:	1106b03a 	or	r3,r2,r4
   20850:	80800483 	ldbu	r2,18(r16)
   20854:	8809883a 	mov	r4,r17
   20858:	1004943a 	slli	r2,r2,16
   2085c:	10c4b03a 	or	r2,r2,r3
   20860:	308cb03a 	or	r6,r6,r2
   20864:	0021c9c0 	call	21c9c <altera_avalon_fifo_write_fifo>
   20868:	80800543 	ldbu	r2,21(r16)
   2086c:	81000503 	ldbu	r4,20(r16)
   20870:	818005c3 	ldbu	r6,23(r16)
   20874:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   20878:	900b883a 	mov	r5,r18
   2087c:	300c963a 	slli	r6,r6,24
   20880:	1106b03a 	or	r3,r2,r4
   20884:	80800583 	ldbu	r2,22(r16)
   20888:	8809883a 	mov	r4,r17
   2088c:	1004943a 	slli	r2,r2,16
   20890:	10c4b03a 	or	r2,r2,r3
   20894:	308cb03a 	or	r6,r6,r2

}
   20898:	dfc00617 	ldw	ra,24(sp)
   2089c:	dd400517 	ldw	r21,20(sp)
   208a0:	dd000417 	ldw	r20,16(sp)
   208a4:	dcc00317 	ldw	r19,12(sp)
   208a8:	dc800217 	ldw	r18,8(sp)
   208ac:	dc400117 	ldw	r17,4(sp)
   208b0:	dc000017 	ldw	r16,0(sp)
   208b4:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   208b8:	0021c9c1 	jmpi	21c9c <altera_avalon_fifo_write_fifo>

000208bc <read_payload>:
}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
   208bc:	2004d23a 	srli	r2,r4,8
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
   208c0:	314b883a 	add	r5,r6,r5
   208c4:	29000005 	stb	r4,0(r5)
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   208c8:	28800045 	stb	r2,1(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
   208cc:	2004d43a 	srli	r2,r4,16
	
	*(payload + 2 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   208d0:	2008d63a 	srli	r4,r4,24
	
	*(payload + 1 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   208d4:	28800085 	stb	r2,2(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   208d8:	290000c5 	stb	r4,3(r5)
   208dc:	f800283a 	ret

000208e0 <receive_packet>:
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   208e0:	defff504 	addi	sp,sp,-44
   208e4:	dc400715 	stw	r17,28(sp)
   208e8:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   208ec:	04640814 	movui	r17,36896
   208f0:	04241014 	movui	r16,36928
   208f4:	880b883a 	mov	r5,r17
   208f8:	8009883a 	mov	r4,r16
	
	*(payload + 3 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   208fc:	dfc00a15 	stw	ra,40(sp)
   20900:	dcc00915 	stw	r19,36(sp)
   20904:	dc800815 	stw	r18,32(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20908:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	packet_size = temp;
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   2090c:	1004d63a 	srli	r2,r2,24
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20910:	880b883a 	mov	r5,r17
   20914:	8009883a 	mov	r4,r16
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   20918:	1026923a 	slli	r19,r2,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   2091c:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
   20920:	1025883a 	mov	r18,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20924:	880b883a 	mov	r5,r17
   20928:	8009883a 	mov	r4,r16


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   2092c:	10803fcc 	andi	r2,r2,255
   20930:	98a6b03a 	or	r19,r19,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20934:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   20938:	d80d883a 	mov	r6,sp
   2093c:	1009883a 	mov	r4,r2
   20940:	000b883a 	mov	r5,zero
   20944:	00208bc0 	call	208bc <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20948:	880b883a 	mov	r5,r17
   2094c:	8009883a 	mov	r4,r16
   20950:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   20954:	d80d883a 	mov	r6,sp
   20958:	1009883a 	mov	r4,r2
   2095c:	01400104 	movi	r5,4
   20960:	00208bc0 	call	208bc <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20964:	880b883a 	mov	r5,r17
   20968:	8009883a 	mov	r4,r16
   2096c:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   20970:	d80d883a 	mov	r6,sp
   20974:	1009883a 	mov	r4,r2
   20978:	01400204 	movi	r5,8
   2097c:	00208bc0 	call	208bc <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   20980:	880b883a 	mov	r5,r17
   20984:	8009883a 	mov	r4,r16
   20988:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   2098c:	d80d883a 	mov	r6,sp
   20990:	1009883a 	mov	r4,r2
   20994:	01400304 	movi	r5,12
   20998:	00208bc0 	call	208bc <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   2099c:	880b883a 	mov	r5,r17
   209a0:	8009883a 	mov	r4,r16
   209a4:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   209a8:	d80d883a 	mov	r6,sp
   209ac:	1009883a 	mov	r4,r2
   209b0:	01400404 	movi	r5,16
   209b4:	00208bc0 	call	208bc <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   209b8:	880b883a 	mov	r5,r17
   209bc:	8009883a 	mov	r4,r16
   209c0:	0021ce00 	call	21ce0 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   209c4:	d80d883a 	mov	r6,sp
   209c8:	1009883a 	mov	r4,r2
   209cc:	01400504 	movi	r5,20
   209d0:	00208bc0 	call	208bc <read_payload>

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);
   209d4:	900ad23a 	srli	r5,r18,8
   209d8:	993fffcc 	andi	r4,r19,65535
   209dc:	297fffcc 	andi	r5,r5,65535
   209e0:	00205700 	call	20570 <get_buffer>

	ring_buffer_queue_arr(buffer,payload,24);
   209e4:	01800604 	movi	r6,24
   209e8:	d80b883a 	mov	r5,sp
   209ec:	1009883a 	mov	r4,r2
   209f0:	0020ac00 	call	20ac0 <ring_buffer_queue_arr>
}
   209f4:	dfc00a17 	ldw	ra,40(sp)
   209f8:	dcc00917 	ldw	r19,36(sp)
   209fc:	dc800817 	ldw	r18,32(sp)
   20a00:	dc400717 	ldw	r17,28(sp)
   20a04:	dc000617 	ldw	r16,24(sp)
   20a08:	dec00b04 	addi	sp,sp,44
   20a0c:	f800283a 	ret

00020a10 <receive_poll>:

void receive_poll(){
   20a10:	deffff04 	addi	sp,sp,-4
   20a14:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   20a18:	01400fc4 	movi	r5,63
   20a1c:	01240814 	movui	r4,36896
   20a20:	0021b580 	call	21b58 <altera_avalon_fifo_read_status>
}

void receive_poll(){
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
   20a24:	1080008c 	andi	r2,r2,2
   20a28:	103ffb1e 	bne	r2,zero,20a18 <_gp+0xffff6a50>
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    }
}
   20a2c:	dfc00017 	ldw	ra,0(sp)
   20a30:	dec00104 	addi	sp,sp,4
   20a34:	f800283a 	ret

00020a38 <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   20a38:	20c02043 	ldbu	r3,129(r4)
   20a3c:	20802003 	ldbu	r2,128(r4)
   20a40:	1885003a 	cmpeq	r2,r3,r2
}
   20a44:	f800283a 	ret

00020a48 <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   20a48:	20802043 	ldbu	r2,129(r4)
   20a4c:	20c02003 	ldbu	r3,128(r4)
   20a50:	10c5c83a 	sub	r2,r2,r3
   20a54:	10801fcc 	andi	r2,r2,127
   20a58:	10801fe0 	cmpeqi	r2,r2,127
}
   20a5c:	f800283a 	ret

00020a60 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   20a60:	20802043 	ldbu	r2,129(r4)
   20a64:	20c02003 	ldbu	r3,128(r4)
   20a68:	10c5c83a 	sub	r2,r2,r3
}
   20a6c:	10801fcc 	andi	r2,r2,127
   20a70:	f800283a 	ret

00020a74 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   20a74:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   20a78:	20002045 	stb	zero,129(r4)
   20a7c:	f800283a 	ret

00020a80 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   20a80:	20802043 	ldbu	r2,129(r4)
   20a84:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   20a88:	02001fc4 	movi	r8,127
   20a8c:	11803fcc 	andi	r6,r2,255
   20a90:	30cfc83a 	sub	r7,r6,r3
   20a94:	39c01fcc 	andi	r7,r7,127
   20a98:	3a00031e 	bne	r7,r8,20aa8 <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   20a9c:	18c00044 	addi	r3,r3,1
   20aa0:	1a06703a 	and	r3,r3,r8
   20aa4:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   20aa8:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   20aac:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   20ab0:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   20ab4:	10801fcc 	andi	r2,r2,127
   20ab8:	20802045 	stb	r2,129(r4)
   20abc:	f800283a 	ret

00020ac0 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   20ac0:	defffc04 	addi	sp,sp,-16
   20ac4:	31803fcc 	andi	r6,r6,255
   20ac8:	dc800215 	stw	r18,8(sp)
   20acc:	dc400115 	stw	r17,4(sp)
   20ad0:	dc000015 	stw	r16,0(sp)
   20ad4:	dfc00315 	stw	ra,12(sp)
   20ad8:	2025883a 	mov	r18,r4
   20adc:	2821883a 	mov	r16,r5
   20ae0:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   20ae4:	84400526 	beq	r16,r17,20afc <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   20ae8:	81400007 	ldb	r5,0(r16)
   20aec:	9009883a 	mov	r4,r18
   20af0:	84000044 	addi	r16,r16,1
   20af4:	0020a800 	call	20a80 <ring_buffer_queue>
   20af8:	003ffa06 	br	20ae4 <_gp+0xffff6b1c>
  }
}
   20afc:	dfc00317 	ldw	ra,12(sp)
   20b00:	dc800217 	ldw	r18,8(sp)
   20b04:	dc400117 	ldw	r17,4(sp)
   20b08:	dc000017 	ldw	r16,0(sp)
   20b0c:	dec00404 	addi	sp,sp,16
   20b10:	f800283a 	ret

00020b14 <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   20b14:	20c02043 	ldbu	r3,129(r4)
   20b18:	20802003 	ldbu	r2,128(r4)
   20b1c:	18800926 	beq	r3,r2,20b44 <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   20b20:	2085883a 	add	r2,r4,r2
   20b24:	10800003 	ldbu	r2,0(r2)
   20b28:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   20b2c:	20802003 	ldbu	r2,128(r4)
   20b30:	10800044 	addi	r2,r2,1
   20b34:	10801fcc 	andi	r2,r2,127
   20b38:	20802005 	stb	r2,128(r4)
  return 1;
   20b3c:	00800044 	movi	r2,1
   20b40:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20b44:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   20b48:	f800283a 	ret

00020b4c <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   20b4c:	20c02043 	ldbu	r3,129(r4)
   20b50:	20802003 	ldbu	r2,128(r4)
   20b54:	18801526 	beq	r3,r2,20bac <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   20b58:	defffa04 	addi	sp,sp,-24
   20b5c:	dcc00315 	stw	r19,12(sp)
   20b60:	dc800215 	stw	r18,8(sp)
   20b64:	dc400115 	stw	r17,4(sp)
   20b68:	dc000015 	stw	r16,0(sp)
   20b6c:	dfc00515 	stw	ra,20(sp)
   20b70:	dd000415 	stw	r20,16(sp)
   20b74:	2827883a 	mov	r19,r5
   20b78:	2023883a 	mov	r17,r4
   20b7c:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   20b80:	0021883a 	mov	r16,zero
   20b84:	9c0b883a 	add	r5,r19,r16
   20b88:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   20b8c:	84800926 	beq	r16,r18,20bb4 <ring_buffer_dequeue_arr+0x68>
   20b90:	8809883a 	mov	r4,r17
   20b94:	0020b140 	call	20b14 <ring_buffer_dequeue>
   20b98:	10803fcc 	andi	r2,r2,255
   20b9c:	84000044 	addi	r16,r16,1
   20ba0:	103ff81e 	bne	r2,zero,20b84 <_gp+0xffff6bbc>
   20ba4:	a005883a 	mov	r2,r20
   20ba8:	00000306 	br	20bb8 <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20bac:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   20bb0:	f800283a 	ret
   20bb4:	8005883a 	mov	r2,r16
   20bb8:	dfc00517 	ldw	ra,20(sp)
   20bbc:	dd000417 	ldw	r20,16(sp)
   20bc0:	dcc00317 	ldw	r19,12(sp)
   20bc4:	dc800217 	ldw	r18,8(sp)
   20bc8:	dc400117 	ldw	r17,4(sp)
   20bcc:	dc000017 	ldw	r16,0(sp)
   20bd0:	dec00604 	addi	sp,sp,24
   20bd4:	f800283a 	ret

00020bd8 <ring_buffer_pop>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   20bd8:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
   20bdc:	21402043 	ldbu	r5,129(r4)
   20be0:	10c03fcc 	andi	r3,r2,255
   20be4:	28c00526 	beq	r5,r3,20bfc <ring_buffer_pop+0x24>
    /* No items */
    return 0;
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   20be8:	10800044 	addi	r2,r2,1
   20bec:	10801fcc 	andi	r2,r2,127
   20bf0:	20802005 	stb	r2,128(r4)
  return 1;
   20bf4:	00800044 	movi	r2,1
   20bf8:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20bfc:	0005883a 	mov	r2,zero
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   20c00:	f800283a 	ret

00020c04 <ring_buffer_pop_arr>:

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   20c04:	20c02043 	ldbu	r3,129(r4)
   20c08:	20802003 	ldbu	r2,128(r4)
   20c0c:	18801426 	beq	r3,r2,20c60 <ring_buffer_pop_arr+0x5c>

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
   20c10:	defffb04 	addi	sp,sp,-20
   20c14:	dcc00315 	stw	r19,12(sp)
   20c18:	dc800215 	stw	r18,8(sp)
   20c1c:	dc400115 	stw	r17,4(sp)
   20c20:	dc000015 	stw	r16,0(sp)
   20c24:	dfc00415 	stw	ra,16(sp)
   20c28:	2821883a 	mov	r16,r5
   20c2c:	2023883a 	mov	r17,r4
   20c30:	0025883a 	mov	r18,zero
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
  }
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
   20c34:	2cc03fcc 	andi	r19,r5,255
   20c38:	90803fcc 	andi	r2,r18,255
   20c3c:	14c00a26 	beq	r2,r19,20c68 <ring_buffer_pop_arr+0x64>
   20c40:	8809883a 	mov	r4,r17
   20c44:	0020bd80 	call	20bd8 <ring_buffer_pop>
   20c48:	10803fcc 	andi	r2,r2,255
   20c4c:	10000226 	beq	r2,zero,20c58 <ring_buffer_pop_arr+0x54>
    cnt++;
   20c50:	94800044 	addi	r18,r18,1
   20c54:	003ff806 	br	20c38 <_gp+0xffff6c70>
   20c58:	9005883a 	mov	r2,r18
   20c5c:	00000306 	br	20c6c <ring_buffer_pop_arr+0x68>
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   20c60:	0005883a 	mov	r2,zero
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
    cnt++;
  }
  return cnt;
}
   20c64:	f800283a 	ret
   20c68:	8005883a 	mov	r2,r16
   20c6c:	dfc00417 	ldw	ra,16(sp)
   20c70:	dcc00317 	ldw	r19,12(sp)
   20c74:	dc800217 	ldw	r18,8(sp)
   20c78:	dc400117 	ldw	r17,4(sp)
   20c7c:	dc000017 	ldw	r16,0(sp)
   20c80:	dec00504 	addi	sp,sp,20
   20c84:	f800283a 	ret

00020c88 <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   20c88:	20802003 	ldbu	r2,128(r4)



ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   20c8c:	20c02043 	ldbu	r3,129(r4)
   20c90:	31c03fcc 	andi	r7,r6,255
   20c94:	1887c83a 	sub	r3,r3,r2
   20c98:	18c01fcc 	andi	r3,r3,127
   20c9c:	38c0072e 	bgeu	r7,r3,20cbc <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   20ca0:	3085883a 	add	r2,r6,r2
   20ca4:	10801fcc 	andi	r2,r2,127
   20ca8:	2089883a 	add	r4,r4,r2
   20cac:	20800003 	ldbu	r2,0(r4)
   20cb0:	28800005 	stb	r2,0(r5)
  return 1;
   20cb4:	00800044 	movi	r2,1
   20cb8:	f800283a 	ret


ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   20cbc:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   20cc0:	f800283a 	ret

00020cc4 <__mulsi3>:
   20cc4:	0005883a 	mov	r2,zero
   20cc8:	20000726 	beq	r4,zero,20ce8 <__mulsi3+0x24>
   20ccc:	20c0004c 	andi	r3,r4,1
   20cd0:	2008d07a 	srli	r4,r4,1
   20cd4:	18000126 	beq	r3,zero,20cdc <__mulsi3+0x18>
   20cd8:	1145883a 	add	r2,r2,r5
   20cdc:	294b883a 	add	r5,r5,r5
   20ce0:	203ffa1e 	bne	r4,zero,20ccc <_gp+0xffff6d04>
   20ce4:	f800283a 	ret
   20ce8:	f800283a 	ret

00020cec <malloc>:
   20cec:	008000b4 	movhi	r2,2
   20cf0:	1087f304 	addi	r2,r2,8140
   20cf4:	200b883a 	mov	r5,r4
   20cf8:	11000017 	ldw	r4,0(r2)
   20cfc:	0020e201 	jmpi	20e20 <_malloc_r>

00020d00 <free>:
   20d00:	008000b4 	movhi	r2,2
   20d04:	1087f304 	addi	r2,r2,8140
   20d08:	200b883a 	mov	r5,r4
   20d0c:	11000017 	ldw	r4,0(r2)
   20d10:	0020d3c1 	jmpi	20d3c <_free_r>

00020d14 <memcpy>:
   20d14:	2005883a 	mov	r2,r4
   20d18:	2007883a 	mov	r3,r4
   20d1c:	218d883a 	add	r6,r4,r6
   20d20:	19800526 	beq	r3,r6,20d38 <memcpy+0x24>
   20d24:	29000003 	ldbu	r4,0(r5)
   20d28:	18c00044 	addi	r3,r3,1
   20d2c:	29400044 	addi	r5,r5,1
   20d30:	193fffc5 	stb	r4,-1(r3)
   20d34:	003ffa06 	br	20d20 <_gp+0xffff6d58>
   20d38:	f800283a 	ret

00020d3c <_free_r>:
   20d3c:	28003726 	beq	r5,zero,20e1c <_free_r+0xe0>
   20d40:	28ffff17 	ldw	r3,-4(r5)
   20d44:	28bfff04 	addi	r2,r5,-4
   20d48:	1800010e 	bge	r3,zero,20d50 <_free_r+0x14>
   20d4c:	10c5883a 	add	r2,r2,r3
   20d50:	014000b4 	movhi	r5,2
   20d54:	29483c04 	addi	r5,r5,8432
   20d58:	28c00017 	ldw	r3,0(r5)
   20d5c:	280d883a 	mov	r6,r5
   20d60:	1800031e 	bne	r3,zero,20d70 <_free_r+0x34>
   20d64:	10000115 	stw	zero,4(r2)
   20d68:	28800015 	stw	r2,0(r5)
   20d6c:	f800283a 	ret
   20d70:	10c00c2e 	bgeu	r2,r3,20da4 <_free_r+0x68>
   20d74:	11000017 	ldw	r4,0(r2)
   20d78:	110b883a 	add	r5,r2,r4
   20d7c:	1940041e 	bne	r3,r5,20d90 <_free_r+0x54>
   20d80:	19400017 	ldw	r5,0(r3)
   20d84:	18c00117 	ldw	r3,4(r3)
   20d88:	2909883a 	add	r4,r5,r4
   20d8c:	11000015 	stw	r4,0(r2)
   20d90:	10c00115 	stw	r3,4(r2)
   20d94:	30800015 	stw	r2,0(r6)
   20d98:	f800283a 	ret
   20d9c:	11400336 	bltu	r2,r5,20dac <_free_r+0x70>
   20da0:	2807883a 	mov	r3,r5
   20da4:	19400117 	ldw	r5,4(r3)
   20da8:	283ffc1e 	bne	r5,zero,20d9c <_gp+0xffff6dd4>
   20dac:	19c00017 	ldw	r7,0(r3)
   20db0:	19cd883a 	add	r6,r3,r7
   20db4:	30800a1e 	bne	r6,r2,20de0 <_free_r+0xa4>
   20db8:	10800017 	ldw	r2,0(r2)
   20dbc:	3885883a 	add	r2,r7,r2
   20dc0:	18800015 	stw	r2,0(r3)
   20dc4:	1889883a 	add	r4,r3,r2
   20dc8:	2900141e 	bne	r5,r4,20e1c <_free_r+0xe0>
   20dcc:	29000017 	ldw	r4,0(r5)
   20dd0:	2085883a 	add	r2,r4,r2
   20dd4:	18800015 	stw	r2,0(r3)
   20dd8:	28800117 	ldw	r2,4(r5)
   20ddc:	00000e06 	br	20e18 <_free_r+0xdc>
   20de0:	1180032e 	bgeu	r2,r6,20df0 <_free_r+0xb4>
   20de4:	00800304 	movi	r2,12
   20de8:	20800015 	stw	r2,0(r4)
   20dec:	f800283a 	ret
   20df0:	11000017 	ldw	r4,0(r2)
   20df4:	110d883a 	add	r6,r2,r4
   20df8:	2980061e 	bne	r5,r6,20e14 <_free_r+0xd8>
   20dfc:	29800017 	ldw	r6,0(r5)
   20e00:	3109883a 	add	r4,r6,r4
   20e04:	11000015 	stw	r4,0(r2)
   20e08:	29000117 	ldw	r4,4(r5)
   20e0c:	11000115 	stw	r4,4(r2)
   20e10:	00000106 	br	20e18 <_free_r+0xdc>
   20e14:	11400115 	stw	r5,4(r2)
   20e18:	18800115 	stw	r2,4(r3)
   20e1c:	f800283a 	ret

00020e20 <_malloc_r>:
   20e20:	defffb04 	addi	sp,sp,-20
   20e24:	00bfff04 	movi	r2,-4
   20e28:	dc400115 	stw	r17,4(sp)
   20e2c:	2c4000c4 	addi	r17,r5,3
   20e30:	88a2703a 	and	r17,r17,r2
   20e34:	dc800215 	stw	r18,8(sp)
   20e38:	dfc00415 	stw	ra,16(sp)
   20e3c:	dcc00315 	stw	r19,12(sp)
   20e40:	dc000015 	stw	r16,0(sp)
   20e44:	8c400204 	addi	r17,r17,8
   20e48:	00800304 	movi	r2,12
   20e4c:	2025883a 	mov	r18,r4
   20e50:	8880022e 	bgeu	r17,r2,20e5c <_malloc_r+0x3c>
   20e54:	1023883a 	mov	r17,r2
   20e58:	00000506 	br	20e70 <_malloc_r+0x50>
   20e5c:	8800040e 	bge	r17,zero,20e70 <_malloc_r+0x50>
   20e60:	00800304 	movi	r2,12
   20e64:	90800015 	stw	r2,0(r18)
   20e68:	0005883a 	mov	r2,zero
   20e6c:	00003b06 	br	20f5c <_malloc_r+0x13c>
   20e70:	897ffb36 	bltu	r17,r5,20e60 <_gp+0xffff6e98>
   20e74:	008000b4 	movhi	r2,2
   20e78:	10883c04 	addi	r2,r2,8432
   20e7c:	10c00017 	ldw	r3,0(r2)
   20e80:	1009883a 	mov	r4,r2
   20e84:	1821883a 	mov	r16,r3
   20e88:	80000926 	beq	r16,zero,20eb0 <_malloc_r+0x90>
   20e8c:	80800017 	ldw	r2,0(r16)
   20e90:	1445c83a 	sub	r2,r2,r17
   20e94:	10001516 	blt	r2,zero,20eec <_malloc_r+0xcc>
   20e98:	014002c4 	movi	r5,11
   20e9c:	28800d2e 	bgeu	r5,r2,20ed4 <_malloc_r+0xb4>
   20ea0:	80800015 	stw	r2,0(r16)
   20ea4:	80a1883a 	add	r16,r16,r2
   20ea8:	84400015 	stw	r17,0(r16)
   20eac:	8000221e 	bne	r16,zero,20f38 <_malloc_r+0x118>
   20eb0:	040000b4 	movhi	r16,2
   20eb4:	84083b04 	addi	r16,r16,8428
   20eb8:	80800017 	ldw	r2,0(r16)
   20ebc:	10000e1e 	bne	r2,zero,20ef8 <_malloc_r+0xd8>
   20ec0:	000b883a 	mov	r5,zero
   20ec4:	9009883a 	mov	r4,r18
   20ec8:	00210940 	call	21094 <_sbrk_r>
   20ecc:	80800015 	stw	r2,0(r16)
   20ed0:	00000906 	br	20ef8 <_malloc_r+0xd8>
   20ed4:	80800117 	ldw	r2,4(r16)
   20ed8:	1c00021e 	bne	r3,r16,20ee4 <_malloc_r+0xc4>
   20edc:	20800015 	stw	r2,0(r4)
   20ee0:	00001506 	br	20f38 <_malloc_r+0x118>
   20ee4:	18800115 	stw	r2,4(r3)
   20ee8:	00001306 	br	20f38 <_malloc_r+0x118>
   20eec:	8007883a 	mov	r3,r16
   20ef0:	84000117 	ldw	r16,4(r16)
   20ef4:	003fe406 	br	20e88 <_gp+0xffff6ec0>
   20ef8:	880b883a 	mov	r5,r17
   20efc:	9009883a 	mov	r4,r18
   20f00:	00210940 	call	21094 <_sbrk_r>
   20f04:	04ffffc4 	movi	r19,-1
   20f08:	14ffd526 	beq	r2,r19,20e60 <_gp+0xffff6e98>
   20f0c:	140000c4 	addi	r16,r2,3
   20f10:	00ffff04 	movi	r3,-4
   20f14:	80e0703a 	and	r16,r16,r3
   20f18:	1400021e 	bne	r2,r16,20f24 <_malloc_r+0x104>
   20f1c:	84400015 	stw	r17,0(r16)
   20f20:	00000506 	br	20f38 <_malloc_r+0x118>
   20f24:	808bc83a 	sub	r5,r16,r2
   20f28:	9009883a 	mov	r4,r18
   20f2c:	00210940 	call	21094 <_sbrk_r>
   20f30:	14fffa1e 	bne	r2,r19,20f1c <_gp+0xffff6f54>
   20f34:	003fca06 	br	20e60 <_gp+0xffff6e98>
   20f38:	810002c4 	addi	r4,r16,11
   20f3c:	00bffe04 	movi	r2,-8
   20f40:	80c00104 	addi	r3,r16,4
   20f44:	2084703a 	and	r2,r4,r2
   20f48:	10c7c83a 	sub	r3,r2,r3
   20f4c:	18000326 	beq	r3,zero,20f5c <_malloc_r+0x13c>
   20f50:	80e1883a 	add	r16,r16,r3
   20f54:	00c7c83a 	sub	r3,zero,r3
   20f58:	80c00015 	stw	r3,0(r16)
   20f5c:	dfc00417 	ldw	ra,16(sp)
   20f60:	dcc00317 	ldw	r19,12(sp)
   20f64:	dc800217 	ldw	r18,8(sp)
   20f68:	dc400117 	ldw	r17,4(sp)
   20f6c:	dc000017 	ldw	r16,0(sp)
   20f70:	dec00504 	addi	sp,sp,20
   20f74:	f800283a 	ret

00020f78 <_printf_r>:
   20f78:	defffd04 	addi	sp,sp,-12
   20f7c:	dfc00015 	stw	ra,0(sp)
   20f80:	d9800115 	stw	r6,4(sp)
   20f84:	d9c00215 	stw	r7,8(sp)
   20f88:	20c00217 	ldw	r3,8(r4)
   20f8c:	018000b4 	movhi	r6,2
   20f90:	3185ad04 	addi	r6,r6,5812
   20f94:	19800115 	stw	r6,4(r3)
   20f98:	280d883a 	mov	r6,r5
   20f9c:	21400217 	ldw	r5,8(r4)
   20fa0:	d9c00104 	addi	r7,sp,4
   20fa4:	002116c0 	call	2116c <___vfprintf_internal_r>
   20fa8:	dfc00017 	ldw	ra,0(sp)
   20fac:	dec00304 	addi	sp,sp,12
   20fb0:	f800283a 	ret

00020fb4 <printf>:
   20fb4:	defffc04 	addi	sp,sp,-16
   20fb8:	dfc00015 	stw	ra,0(sp)
   20fbc:	d9400115 	stw	r5,4(sp)
   20fc0:	d9800215 	stw	r6,8(sp)
   20fc4:	d9c00315 	stw	r7,12(sp)
   20fc8:	008000b4 	movhi	r2,2
   20fcc:	1087f304 	addi	r2,r2,8140
   20fd0:	10800017 	ldw	r2,0(r2)
   20fd4:	014000b4 	movhi	r5,2
   20fd8:	2945ad04 	addi	r5,r5,5812
   20fdc:	10c00217 	ldw	r3,8(r2)
   20fe0:	d9800104 	addi	r6,sp,4
   20fe4:	19400115 	stw	r5,4(r3)
   20fe8:	200b883a 	mov	r5,r4
   20fec:	11000217 	ldw	r4,8(r2)
   20ff0:	00216980 	call	21698 <__vfprintf_internal>
   20ff4:	dfc00017 	ldw	ra,0(sp)
   20ff8:	dec00404 	addi	sp,sp,16
   20ffc:	f800283a 	ret

00021000 <_puts_r>:
   21000:	defffd04 	addi	sp,sp,-12
   21004:	dc000015 	stw	r16,0(sp)
   21008:	2021883a 	mov	r16,r4
   2100c:	2809883a 	mov	r4,r5
   21010:	dfc00215 	stw	ra,8(sp)
   21014:	dc400115 	stw	r17,4(sp)
   21018:	2823883a 	mov	r17,r5
   2101c:	00210e40 	call	210e4 <strlen>
   21020:	81400217 	ldw	r5,8(r16)
   21024:	010000b4 	movhi	r4,2
   21028:	2105ad04 	addi	r4,r4,5812
   2102c:	29000115 	stw	r4,4(r5)
   21030:	100f883a 	mov	r7,r2
   21034:	880d883a 	mov	r6,r17
   21038:	8009883a 	mov	r4,r16
   2103c:	00216b40 	call	216b4 <__sfvwrite_small_dev>
   21040:	00ffffc4 	movi	r3,-1
   21044:	10c00926 	beq	r2,r3,2106c <_puts_r+0x6c>
   21048:	81400217 	ldw	r5,8(r16)
   2104c:	018000b4 	movhi	r6,2
   21050:	01c00044 	movi	r7,1
   21054:	28800117 	ldw	r2,4(r5)
   21058:	31879e04 	addi	r6,r6,7800
   2105c:	8009883a 	mov	r4,r16
   21060:	103ee83a 	callr	r2
   21064:	10bfffe0 	cmpeqi	r2,r2,-1
   21068:	0085c83a 	sub	r2,zero,r2
   2106c:	dfc00217 	ldw	ra,8(sp)
   21070:	dc400117 	ldw	r17,4(sp)
   21074:	dc000017 	ldw	r16,0(sp)
   21078:	dec00304 	addi	sp,sp,12
   2107c:	f800283a 	ret

00021080 <puts>:
   21080:	008000b4 	movhi	r2,2
   21084:	1087f304 	addi	r2,r2,8140
   21088:	200b883a 	mov	r5,r4
   2108c:	11000017 	ldw	r4,0(r2)
   21090:	00210001 	jmpi	21000 <_puts_r>

00021094 <_sbrk_r>:
   21094:	defffd04 	addi	sp,sp,-12
   21098:	dc000015 	stw	r16,0(sp)
   2109c:	040000b4 	movhi	r16,2
   210a0:	dc400115 	stw	r17,4(sp)
   210a4:	84083d04 	addi	r16,r16,8436
   210a8:	2023883a 	mov	r17,r4
   210ac:	2809883a 	mov	r4,r5
   210b0:	dfc00215 	stw	ra,8(sp)
   210b4:	80000015 	stw	zero,0(r16)
   210b8:	0021a840 	call	21a84 <sbrk>
   210bc:	00ffffc4 	movi	r3,-1
   210c0:	10c0031e 	bne	r2,r3,210d0 <_sbrk_r+0x3c>
   210c4:	80c00017 	ldw	r3,0(r16)
   210c8:	18000126 	beq	r3,zero,210d0 <_sbrk_r+0x3c>
   210cc:	88c00015 	stw	r3,0(r17)
   210d0:	dfc00217 	ldw	ra,8(sp)
   210d4:	dc400117 	ldw	r17,4(sp)
   210d8:	dc000017 	ldw	r16,0(sp)
   210dc:	dec00304 	addi	sp,sp,12
   210e0:	f800283a 	ret

000210e4 <strlen>:
   210e4:	2005883a 	mov	r2,r4
   210e8:	10c00007 	ldb	r3,0(r2)
   210ec:	18000226 	beq	r3,zero,210f8 <strlen+0x14>
   210f0:	10800044 	addi	r2,r2,1
   210f4:	003ffc06 	br	210e8 <_gp+0xffff7120>
   210f8:	1105c83a 	sub	r2,r2,r4
   210fc:	f800283a 	ret

00021100 <print_repeat>:
   21100:	defffb04 	addi	sp,sp,-20
   21104:	dc800315 	stw	r18,12(sp)
   21108:	dc400215 	stw	r17,8(sp)
   2110c:	dc000115 	stw	r16,4(sp)
   21110:	dfc00415 	stw	ra,16(sp)
   21114:	2025883a 	mov	r18,r4
   21118:	2823883a 	mov	r17,r5
   2111c:	d9800005 	stb	r6,0(sp)
   21120:	3821883a 	mov	r16,r7
   21124:	04000a0e 	bge	zero,r16,21150 <print_repeat+0x50>
   21128:	88800117 	ldw	r2,4(r17)
   2112c:	01c00044 	movi	r7,1
   21130:	d80d883a 	mov	r6,sp
   21134:	880b883a 	mov	r5,r17
   21138:	9009883a 	mov	r4,r18
   2113c:	103ee83a 	callr	r2
   21140:	843fffc4 	addi	r16,r16,-1
   21144:	103ff726 	beq	r2,zero,21124 <_gp+0xffff715c>
   21148:	00bfffc4 	movi	r2,-1
   2114c:	00000106 	br	21154 <print_repeat+0x54>
   21150:	0005883a 	mov	r2,zero
   21154:	dfc00417 	ldw	ra,16(sp)
   21158:	dc800317 	ldw	r18,12(sp)
   2115c:	dc400217 	ldw	r17,8(sp)
   21160:	dc000117 	ldw	r16,4(sp)
   21164:	dec00504 	addi	sp,sp,20
   21168:	f800283a 	ret

0002116c <___vfprintf_internal_r>:
   2116c:	deffe504 	addi	sp,sp,-108
   21170:	d8c00804 	addi	r3,sp,32
   21174:	ddc01815 	stw	r23,96(sp)
   21178:	dd801715 	stw	r22,92(sp)
   2117c:	dd401615 	stw	r21,88(sp)
   21180:	dd001515 	stw	r20,84(sp)
   21184:	dcc01415 	stw	r19,80(sp)
   21188:	dc801315 	stw	r18,76(sp)
   2118c:	dc401215 	stw	r17,72(sp)
   21190:	dc001115 	stw	r16,68(sp)
   21194:	dfc01a15 	stw	ra,104(sp)
   21198:	df001915 	stw	fp,100(sp)
   2119c:	2029883a 	mov	r20,r4
   211a0:	2823883a 	mov	r17,r5
   211a4:	382d883a 	mov	r22,r7
   211a8:	d9800f15 	stw	r6,60(sp)
   211ac:	0021883a 	mov	r16,zero
   211b0:	d8000e15 	stw	zero,56(sp)
   211b4:	d8000a15 	stw	zero,40(sp)
   211b8:	002b883a 	mov	r21,zero
   211bc:	0027883a 	mov	r19,zero
   211c0:	0025883a 	mov	r18,zero
   211c4:	d8000c15 	stw	zero,48(sp)
   211c8:	d8000b15 	stw	zero,44(sp)
   211cc:	002f883a 	mov	r23,zero
   211d0:	d8c00915 	stw	r3,36(sp)
   211d4:	d8c00f17 	ldw	r3,60(sp)
   211d8:	19000003 	ldbu	r4,0(r3)
   211dc:	20803fcc 	andi	r2,r4,255
   211e0:	1080201c 	xori	r2,r2,128
   211e4:	10bfe004 	addi	r2,r2,-128
   211e8:	10011e26 	beq	r2,zero,21664 <___vfprintf_internal_r+0x4f8>
   211ec:	00c00044 	movi	r3,1
   211f0:	b8c01426 	beq	r23,r3,21244 <___vfprintf_internal_r+0xd8>
   211f4:	1dc00216 	blt	r3,r23,21200 <___vfprintf_internal_r+0x94>
   211f8:	b8000626 	beq	r23,zero,21214 <___vfprintf_internal_r+0xa8>
   211fc:	00011506 	br	21654 <___vfprintf_internal_r+0x4e8>
   21200:	01400084 	movi	r5,2
   21204:	b9401d26 	beq	r23,r5,2127c <___vfprintf_internal_r+0x110>
   21208:	014000c4 	movi	r5,3
   2120c:	b9402b26 	beq	r23,r5,212bc <___vfprintf_internal_r+0x150>
   21210:	00011006 	br	21654 <___vfprintf_internal_r+0x4e8>
   21214:	01400944 	movi	r5,37
   21218:	1140fc26 	beq	r2,r5,2160c <___vfprintf_internal_r+0x4a0>
   2121c:	88800117 	ldw	r2,4(r17)
   21220:	d9000005 	stb	r4,0(sp)
   21224:	01c00044 	movi	r7,1
   21228:	d80d883a 	mov	r6,sp
   2122c:	880b883a 	mov	r5,r17
   21230:	a009883a 	mov	r4,r20
   21234:	103ee83a 	callr	r2
   21238:	1000d81e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   2123c:	84000044 	addi	r16,r16,1
   21240:	00010406 	br	21654 <___vfprintf_internal_r+0x4e8>
   21244:	01400c04 	movi	r5,48
   21248:	1140fa26 	beq	r2,r5,21634 <___vfprintf_internal_r+0x4c8>
   2124c:	01400944 	movi	r5,37
   21250:	11400a1e 	bne	r2,r5,2127c <___vfprintf_internal_r+0x110>
   21254:	d8800005 	stb	r2,0(sp)
   21258:	88800117 	ldw	r2,4(r17)
   2125c:	b80f883a 	mov	r7,r23
   21260:	d80d883a 	mov	r6,sp
   21264:	880b883a 	mov	r5,r17
   21268:	a009883a 	mov	r4,r20
   2126c:	103ee83a 	callr	r2
   21270:	1000ca1e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   21274:	84000044 	addi	r16,r16,1
   21278:	0000f506 	br	21650 <___vfprintf_internal_r+0x4e4>
   2127c:	25fff404 	addi	r23,r4,-48
   21280:	bdc03fcc 	andi	r23,r23,255
   21284:	00c00244 	movi	r3,9
   21288:	1dc00936 	bltu	r3,r23,212b0 <___vfprintf_internal_r+0x144>
   2128c:	00bfffc4 	movi	r2,-1
   21290:	90800426 	beq	r18,r2,212a4 <___vfprintf_internal_r+0x138>
   21294:	01400284 	movi	r5,10
   21298:	9009883a 	mov	r4,r18
   2129c:	0020cc40 	call	20cc4 <__mulsi3>
   212a0:	00000106 	br	212a8 <___vfprintf_internal_r+0x13c>
   212a4:	0005883a 	mov	r2,zero
   212a8:	b8a5883a 	add	r18,r23,r2
   212ac:	0000e206 	br	21638 <___vfprintf_internal_r+0x4cc>
   212b0:	01400b84 	movi	r5,46
   212b4:	1140e426 	beq	r2,r5,21648 <___vfprintf_internal_r+0x4dc>
   212b8:	05c00084 	movi	r23,2
   212bc:	213ff404 	addi	r4,r4,-48
   212c0:	27003fcc 	andi	fp,r4,255
   212c4:	00c00244 	movi	r3,9
   212c8:	1f000936 	bltu	r3,fp,212f0 <___vfprintf_internal_r+0x184>
   212cc:	00bfffc4 	movi	r2,-1
   212d0:	98800426 	beq	r19,r2,212e4 <___vfprintf_internal_r+0x178>
   212d4:	01400284 	movi	r5,10
   212d8:	9809883a 	mov	r4,r19
   212dc:	0020cc40 	call	20cc4 <__mulsi3>
   212e0:	00000106 	br	212e8 <___vfprintf_internal_r+0x17c>
   212e4:	0005883a 	mov	r2,zero
   212e8:	e0a7883a 	add	r19,fp,r2
   212ec:	0000d906 	br	21654 <___vfprintf_internal_r+0x4e8>
   212f0:	00c01b04 	movi	r3,108
   212f4:	10c0d226 	beq	r2,r3,21640 <___vfprintf_internal_r+0x4d4>
   212f8:	013fffc4 	movi	r4,-1
   212fc:	99000226 	beq	r19,r4,21308 <___vfprintf_internal_r+0x19c>
   21300:	d8000b15 	stw	zero,44(sp)
   21304:	00000106 	br	2130c <___vfprintf_internal_r+0x1a0>
   21308:	04c00044 	movi	r19,1
   2130c:	01001a44 	movi	r4,105
   21310:	11001626 	beq	r2,r4,2136c <___vfprintf_internal_r+0x200>
   21314:	20800916 	blt	r4,r2,2133c <___vfprintf_internal_r+0x1d0>
   21318:	010018c4 	movi	r4,99
   2131c:	11008826 	beq	r2,r4,21540 <___vfprintf_internal_r+0x3d4>
   21320:	01001904 	movi	r4,100
   21324:	11001126 	beq	r2,r4,2136c <___vfprintf_internal_r+0x200>
   21328:	01001604 	movi	r4,88
   2132c:	1100c81e 	bne	r2,r4,21650 <___vfprintf_internal_r+0x4e4>
   21330:	00c00044 	movi	r3,1
   21334:	d8c00e15 	stw	r3,56(sp)
   21338:	00001506 	br	21390 <___vfprintf_internal_r+0x224>
   2133c:	01001cc4 	movi	r4,115
   21340:	11009826 	beq	r2,r4,215a4 <___vfprintf_internal_r+0x438>
   21344:	20800416 	blt	r4,r2,21358 <___vfprintf_internal_r+0x1ec>
   21348:	01001bc4 	movi	r4,111
   2134c:	1100c01e 	bne	r2,r4,21650 <___vfprintf_internal_r+0x4e4>
   21350:	05400204 	movi	r21,8
   21354:	00000f06 	br	21394 <___vfprintf_internal_r+0x228>
   21358:	01001d44 	movi	r4,117
   2135c:	11000d26 	beq	r2,r4,21394 <___vfprintf_internal_r+0x228>
   21360:	01001e04 	movi	r4,120
   21364:	11000a26 	beq	r2,r4,21390 <___vfprintf_internal_r+0x224>
   21368:	0000b906 	br	21650 <___vfprintf_internal_r+0x4e4>
   2136c:	d8c00a17 	ldw	r3,40(sp)
   21370:	b7000104 	addi	fp,r22,4
   21374:	18000726 	beq	r3,zero,21394 <___vfprintf_internal_r+0x228>
   21378:	df000d15 	stw	fp,52(sp)
   2137c:	b5c00017 	ldw	r23,0(r22)
   21380:	b800080e 	bge	r23,zero,213a4 <___vfprintf_internal_r+0x238>
   21384:	05efc83a 	sub	r23,zero,r23
   21388:	02400044 	movi	r9,1
   2138c:	00000606 	br	213a8 <___vfprintf_internal_r+0x23c>
   21390:	05400404 	movi	r21,16
   21394:	b0c00104 	addi	r3,r22,4
   21398:	d8c00d15 	stw	r3,52(sp)
   2139c:	b5c00017 	ldw	r23,0(r22)
   213a0:	d8000a15 	stw	zero,40(sp)
   213a4:	0013883a 	mov	r9,zero
   213a8:	d839883a 	mov	fp,sp
   213ac:	b8001726 	beq	r23,zero,2140c <___vfprintf_internal_r+0x2a0>
   213b0:	a80b883a 	mov	r5,r21
   213b4:	b809883a 	mov	r4,r23
   213b8:	da401015 	stw	r9,64(sp)
   213bc:	00218bc0 	call	218bc <__udivsi3>
   213c0:	a80b883a 	mov	r5,r21
   213c4:	1009883a 	mov	r4,r2
   213c8:	102d883a 	mov	r22,r2
   213cc:	0020cc40 	call	20cc4 <__mulsi3>
   213d0:	b885c83a 	sub	r2,r23,r2
   213d4:	00c00244 	movi	r3,9
   213d8:	da401017 	ldw	r9,64(sp)
   213dc:	18800216 	blt	r3,r2,213e8 <___vfprintf_internal_r+0x27c>
   213e0:	10800c04 	addi	r2,r2,48
   213e4:	00000506 	br	213fc <___vfprintf_internal_r+0x290>
   213e8:	d8c00e17 	ldw	r3,56(sp)
   213ec:	18000226 	beq	r3,zero,213f8 <___vfprintf_internal_r+0x28c>
   213f0:	10800dc4 	addi	r2,r2,55
   213f4:	00000106 	br	213fc <___vfprintf_internal_r+0x290>
   213f8:	108015c4 	addi	r2,r2,87
   213fc:	e0800005 	stb	r2,0(fp)
   21400:	b02f883a 	mov	r23,r22
   21404:	e7000044 	addi	fp,fp,1
   21408:	003fe806 	br	213ac <_gp+0xffff73e4>
   2140c:	e6efc83a 	sub	r23,fp,sp
   21410:	9dc5c83a 	sub	r2,r19,r23
   21414:	0080090e 	bge	zero,r2,2143c <___vfprintf_internal_r+0x2d0>
   21418:	e085883a 	add	r2,fp,r2
   2141c:	01400c04 	movi	r5,48
   21420:	d8c00917 	ldw	r3,36(sp)
   21424:	e009883a 	mov	r4,fp
   21428:	e0c0032e 	bgeu	fp,r3,21438 <___vfprintf_internal_r+0x2cc>
   2142c:	e7000044 	addi	fp,fp,1
   21430:	21400005 	stb	r5,0(r4)
   21434:	e0bffa1e 	bne	fp,r2,21420 <_gp+0xffff7458>
   21438:	e6efc83a 	sub	r23,fp,sp
   2143c:	d8c00b17 	ldw	r3,44(sp)
   21440:	4dd1883a 	add	r8,r9,r23
   21444:	922dc83a 	sub	r22,r18,r8
   21448:	18001626 	beq	r3,zero,214a4 <___vfprintf_internal_r+0x338>
   2144c:	48000a26 	beq	r9,zero,21478 <___vfprintf_internal_r+0x30c>
   21450:	00800b44 	movi	r2,45
   21454:	d8800805 	stb	r2,32(sp)
   21458:	88800117 	ldw	r2,4(r17)
   2145c:	01c00044 	movi	r7,1
   21460:	d9800804 	addi	r6,sp,32
   21464:	880b883a 	mov	r5,r17
   21468:	a009883a 	mov	r4,r20
   2146c:	103ee83a 	callr	r2
   21470:	10004a1e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   21474:	84000044 	addi	r16,r16,1
   21478:	0580070e 	bge	zero,r22,21498 <___vfprintf_internal_r+0x32c>
   2147c:	b00f883a 	mov	r7,r22
   21480:	01800c04 	movi	r6,48
   21484:	880b883a 	mov	r5,r17
   21488:	a009883a 	mov	r4,r20
   2148c:	00211000 	call	21100 <print_repeat>
   21490:	1000421e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   21494:	85a1883a 	add	r16,r16,r22
   21498:	e02d883a 	mov	r22,fp
   2149c:	bf2fc83a 	sub	r23,r23,fp
   214a0:	00002006 	br	21524 <___vfprintf_internal_r+0x3b8>
   214a4:	0580090e 	bge	zero,r22,214cc <___vfprintf_internal_r+0x360>
   214a8:	b00f883a 	mov	r7,r22
   214ac:	01800804 	movi	r6,32
   214b0:	880b883a 	mov	r5,r17
   214b4:	a009883a 	mov	r4,r20
   214b8:	da401015 	stw	r9,64(sp)
   214bc:	00211000 	call	21100 <print_repeat>
   214c0:	da401017 	ldw	r9,64(sp)
   214c4:	1000351e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   214c8:	85a1883a 	add	r16,r16,r22
   214cc:	483ff226 	beq	r9,zero,21498 <_gp+0xffff74d0>
   214d0:	00800b44 	movi	r2,45
   214d4:	d8800805 	stb	r2,32(sp)
   214d8:	88800117 	ldw	r2,4(r17)
   214dc:	01c00044 	movi	r7,1
   214e0:	d9800804 	addi	r6,sp,32
   214e4:	880b883a 	mov	r5,r17
   214e8:	a009883a 	mov	r4,r20
   214ec:	103ee83a 	callr	r2
   214f0:	10002a1e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   214f4:	84000044 	addi	r16,r16,1
   214f8:	003fe706 	br	21498 <_gp+0xffff74d0>
   214fc:	b5bfffc4 	addi	r22,r22,-1
   21500:	b0800003 	ldbu	r2,0(r22)
   21504:	01c00044 	movi	r7,1
   21508:	d9800804 	addi	r6,sp,32
   2150c:	d8800805 	stb	r2,32(sp)
   21510:	88800117 	ldw	r2,4(r17)
   21514:	880b883a 	mov	r5,r17
   21518:	a009883a 	mov	r4,r20
   2151c:	103ee83a 	callr	r2
   21520:	10001e1e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   21524:	8585c83a 	sub	r2,r16,r22
   21528:	b5c9883a 	add	r4,r22,r23
   2152c:	e085883a 	add	r2,fp,r2
   21530:	013ff216 	blt	zero,r4,214fc <_gp+0xffff7534>
   21534:	1021883a 	mov	r16,r2
   21538:	dd800d17 	ldw	r22,52(sp)
   2153c:	00004406 	br	21650 <___vfprintf_internal_r+0x4e4>
   21540:	00800044 	movi	r2,1
   21544:	1480080e 	bge	r2,r18,21568 <___vfprintf_internal_r+0x3fc>
   21548:	95ffffc4 	addi	r23,r18,-1
   2154c:	b80f883a 	mov	r7,r23
   21550:	01800804 	movi	r6,32
   21554:	880b883a 	mov	r5,r17
   21558:	a009883a 	mov	r4,r20
   2155c:	00211000 	call	21100 <print_repeat>
   21560:	10000e1e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   21564:	85e1883a 	add	r16,r16,r23
   21568:	b0800017 	ldw	r2,0(r22)
   2156c:	01c00044 	movi	r7,1
   21570:	d80d883a 	mov	r6,sp
   21574:	d8800005 	stb	r2,0(sp)
   21578:	88800117 	ldw	r2,4(r17)
   2157c:	880b883a 	mov	r5,r17
   21580:	a009883a 	mov	r4,r20
   21584:	b5c00104 	addi	r23,r22,4
   21588:	103ee83a 	callr	r2
   2158c:	1000031e 	bne	r2,zero,2159c <___vfprintf_internal_r+0x430>
   21590:	84000044 	addi	r16,r16,1
   21594:	b82d883a 	mov	r22,r23
   21598:	00002d06 	br	21650 <___vfprintf_internal_r+0x4e4>
   2159c:	00bfffc4 	movi	r2,-1
   215a0:	00003106 	br	21668 <___vfprintf_internal_r+0x4fc>
   215a4:	b5c00017 	ldw	r23,0(r22)
   215a8:	b7000104 	addi	fp,r22,4
   215ac:	b809883a 	mov	r4,r23
   215b0:	00210e40 	call	210e4 <strlen>
   215b4:	9091c83a 	sub	r8,r18,r2
   215b8:	102d883a 	mov	r22,r2
   215bc:	0200090e 	bge	zero,r8,215e4 <___vfprintf_internal_r+0x478>
   215c0:	400f883a 	mov	r7,r8
   215c4:	01800804 	movi	r6,32
   215c8:	880b883a 	mov	r5,r17
   215cc:	a009883a 	mov	r4,r20
   215d0:	da001015 	stw	r8,64(sp)
   215d4:	00211000 	call	21100 <print_repeat>
   215d8:	da001017 	ldw	r8,64(sp)
   215dc:	103fef1e 	bne	r2,zero,2159c <_gp+0xffff75d4>
   215e0:	8221883a 	add	r16,r16,r8
   215e4:	88800117 	ldw	r2,4(r17)
   215e8:	b00f883a 	mov	r7,r22
   215ec:	b80d883a 	mov	r6,r23
   215f0:	880b883a 	mov	r5,r17
   215f4:	a009883a 	mov	r4,r20
   215f8:	103ee83a 	callr	r2
   215fc:	103fe71e 	bne	r2,zero,2159c <_gp+0xffff75d4>
   21600:	85a1883a 	add	r16,r16,r22
   21604:	e02d883a 	mov	r22,fp
   21608:	00001106 	br	21650 <___vfprintf_internal_r+0x4e4>
   2160c:	00c00044 	movi	r3,1
   21610:	04ffffc4 	movi	r19,-1
   21614:	d8000e15 	stw	zero,56(sp)
   21618:	d8c00a15 	stw	r3,40(sp)
   2161c:	05400284 	movi	r21,10
   21620:	9825883a 	mov	r18,r19
   21624:	d8000c15 	stw	zero,48(sp)
   21628:	d8000b15 	stw	zero,44(sp)
   2162c:	182f883a 	mov	r23,r3
   21630:	00000806 	br	21654 <___vfprintf_internal_r+0x4e8>
   21634:	ddc00b15 	stw	r23,44(sp)
   21638:	05c00084 	movi	r23,2
   2163c:	00000506 	br	21654 <___vfprintf_internal_r+0x4e8>
   21640:	00c00044 	movi	r3,1
   21644:	d8c00c15 	stw	r3,48(sp)
   21648:	05c000c4 	movi	r23,3
   2164c:	00000106 	br	21654 <___vfprintf_internal_r+0x4e8>
   21650:	002f883a 	mov	r23,zero
   21654:	d8c00f17 	ldw	r3,60(sp)
   21658:	18c00044 	addi	r3,r3,1
   2165c:	d8c00f15 	stw	r3,60(sp)
   21660:	003edc06 	br	211d4 <_gp+0xffff720c>
   21664:	8005883a 	mov	r2,r16
   21668:	dfc01a17 	ldw	ra,104(sp)
   2166c:	df001917 	ldw	fp,100(sp)
   21670:	ddc01817 	ldw	r23,96(sp)
   21674:	dd801717 	ldw	r22,92(sp)
   21678:	dd401617 	ldw	r21,88(sp)
   2167c:	dd001517 	ldw	r20,84(sp)
   21680:	dcc01417 	ldw	r19,80(sp)
   21684:	dc801317 	ldw	r18,76(sp)
   21688:	dc401217 	ldw	r17,72(sp)
   2168c:	dc001117 	ldw	r16,68(sp)
   21690:	dec01b04 	addi	sp,sp,108
   21694:	f800283a 	ret

00021698 <__vfprintf_internal>:
   21698:	008000b4 	movhi	r2,2
   2169c:	1087f304 	addi	r2,r2,8140
   216a0:	300f883a 	mov	r7,r6
   216a4:	280d883a 	mov	r6,r5
   216a8:	200b883a 	mov	r5,r4
   216ac:	11000017 	ldw	r4,0(r2)
   216b0:	002116c1 	jmpi	2116c <___vfprintf_internal_r>

000216b4 <__sfvwrite_small_dev>:
   216b4:	2880000b 	ldhu	r2,0(r5)
   216b8:	1080020c 	andi	r2,r2,8
   216bc:	10002126 	beq	r2,zero,21744 <__sfvwrite_small_dev+0x90>
   216c0:	2880008f 	ldh	r2,2(r5)
   216c4:	defffa04 	addi	sp,sp,-24
   216c8:	dc000015 	stw	r16,0(sp)
   216cc:	dfc00515 	stw	ra,20(sp)
   216d0:	dd000415 	stw	r20,16(sp)
   216d4:	dcc00315 	stw	r19,12(sp)
   216d8:	dc800215 	stw	r18,8(sp)
   216dc:	dc400115 	stw	r17,4(sp)
   216e0:	2821883a 	mov	r16,r5
   216e4:	10001216 	blt	r2,zero,21730 <__sfvwrite_small_dev+0x7c>
   216e8:	2027883a 	mov	r19,r4
   216ec:	3025883a 	mov	r18,r6
   216f0:	3823883a 	mov	r17,r7
   216f4:	05010004 	movi	r20,1024
   216f8:	04400b0e 	bge	zero,r17,21728 <__sfvwrite_small_dev+0x74>
   216fc:	880f883a 	mov	r7,r17
   21700:	a440010e 	bge	r20,r17,21708 <__sfvwrite_small_dev+0x54>
   21704:	01c10004 	movi	r7,1024
   21708:	8140008f 	ldh	r5,2(r16)
   2170c:	900d883a 	mov	r6,r18
   21710:	9809883a 	mov	r4,r19
   21714:	002176c0 	call	2176c <_write_r>
   21718:	0080050e 	bge	zero,r2,21730 <__sfvwrite_small_dev+0x7c>
   2171c:	88a3c83a 	sub	r17,r17,r2
   21720:	90a5883a 	add	r18,r18,r2
   21724:	003ff406 	br	216f8 <_gp+0xffff7730>
   21728:	0005883a 	mov	r2,zero
   2172c:	00000706 	br	2174c <__sfvwrite_small_dev+0x98>
   21730:	8080000b 	ldhu	r2,0(r16)
   21734:	10801014 	ori	r2,r2,64
   21738:	8080000d 	sth	r2,0(r16)
   2173c:	00bfffc4 	movi	r2,-1
   21740:	00000206 	br	2174c <__sfvwrite_small_dev+0x98>
   21744:	00bfffc4 	movi	r2,-1
   21748:	f800283a 	ret
   2174c:	dfc00517 	ldw	ra,20(sp)
   21750:	dd000417 	ldw	r20,16(sp)
   21754:	dcc00317 	ldw	r19,12(sp)
   21758:	dc800217 	ldw	r18,8(sp)
   2175c:	dc400117 	ldw	r17,4(sp)
   21760:	dc000017 	ldw	r16,0(sp)
   21764:	dec00604 	addi	sp,sp,24
   21768:	f800283a 	ret

0002176c <_write_r>:
   2176c:	defffd04 	addi	sp,sp,-12
   21770:	dc000015 	stw	r16,0(sp)
   21774:	040000b4 	movhi	r16,2
   21778:	dc400115 	stw	r17,4(sp)
   2177c:	84083d04 	addi	r16,r16,8436
   21780:	2023883a 	mov	r17,r4
   21784:	2809883a 	mov	r4,r5
   21788:	300b883a 	mov	r5,r6
   2178c:	380d883a 	mov	r6,r7
   21790:	dfc00215 	stw	ra,8(sp)
   21794:	80000015 	stw	zero,0(r16)
   21798:	0021ad40 	call	21ad4 <write>
   2179c:	00ffffc4 	movi	r3,-1
   217a0:	10c0031e 	bne	r2,r3,217b0 <_write_r+0x44>
   217a4:	80c00017 	ldw	r3,0(r16)
   217a8:	18000126 	beq	r3,zero,217b0 <_write_r+0x44>
   217ac:	88c00015 	stw	r3,0(r17)
   217b0:	dfc00217 	ldw	ra,8(sp)
   217b4:	dc400117 	ldw	r17,4(sp)
   217b8:	dc000017 	ldw	r16,0(sp)
   217bc:	dec00304 	addi	sp,sp,12
   217c0:	f800283a 	ret

000217c4 <__divsi3>:
   217c4:	20001b16 	blt	r4,zero,21834 <__divsi3+0x70>
   217c8:	000f883a 	mov	r7,zero
   217cc:	28001616 	blt	r5,zero,21828 <__divsi3+0x64>
   217d0:	200d883a 	mov	r6,r4
   217d4:	29001a2e 	bgeu	r5,r4,21840 <__divsi3+0x7c>
   217d8:	00800804 	movi	r2,32
   217dc:	00c00044 	movi	r3,1
   217e0:	00000106 	br	217e8 <__divsi3+0x24>
   217e4:	10000d26 	beq	r2,zero,2181c <__divsi3+0x58>
   217e8:	294b883a 	add	r5,r5,r5
   217ec:	10bfffc4 	addi	r2,r2,-1
   217f0:	18c7883a 	add	r3,r3,r3
   217f4:	293ffb36 	bltu	r5,r4,217e4 <_gp+0xffff781c>
   217f8:	0005883a 	mov	r2,zero
   217fc:	18000726 	beq	r3,zero,2181c <__divsi3+0x58>
   21800:	0005883a 	mov	r2,zero
   21804:	31400236 	bltu	r6,r5,21810 <__divsi3+0x4c>
   21808:	314dc83a 	sub	r6,r6,r5
   2180c:	10c4b03a 	or	r2,r2,r3
   21810:	1806d07a 	srli	r3,r3,1
   21814:	280ad07a 	srli	r5,r5,1
   21818:	183ffa1e 	bne	r3,zero,21804 <_gp+0xffff783c>
   2181c:	38000126 	beq	r7,zero,21824 <__divsi3+0x60>
   21820:	0085c83a 	sub	r2,zero,r2
   21824:	f800283a 	ret
   21828:	014bc83a 	sub	r5,zero,r5
   2182c:	39c0005c 	xori	r7,r7,1
   21830:	003fe706 	br	217d0 <_gp+0xffff7808>
   21834:	0109c83a 	sub	r4,zero,r4
   21838:	01c00044 	movi	r7,1
   2183c:	003fe306 	br	217cc <_gp+0xffff7804>
   21840:	00c00044 	movi	r3,1
   21844:	003fee06 	br	21800 <_gp+0xffff7838>

00021848 <__modsi3>:
   21848:	20001716 	blt	r4,zero,218a8 <__modsi3+0x60>
   2184c:	000f883a 	mov	r7,zero
   21850:	2005883a 	mov	r2,r4
   21854:	28001216 	blt	r5,zero,218a0 <__modsi3+0x58>
   21858:	2900162e 	bgeu	r5,r4,218b4 <__modsi3+0x6c>
   2185c:	01800804 	movi	r6,32
   21860:	00c00044 	movi	r3,1
   21864:	00000106 	br	2186c <__modsi3+0x24>
   21868:	30000a26 	beq	r6,zero,21894 <__modsi3+0x4c>
   2186c:	294b883a 	add	r5,r5,r5
   21870:	31bfffc4 	addi	r6,r6,-1
   21874:	18c7883a 	add	r3,r3,r3
   21878:	293ffb36 	bltu	r5,r4,21868 <_gp+0xffff78a0>
   2187c:	18000526 	beq	r3,zero,21894 <__modsi3+0x4c>
   21880:	1806d07a 	srli	r3,r3,1
   21884:	11400136 	bltu	r2,r5,2188c <__modsi3+0x44>
   21888:	1145c83a 	sub	r2,r2,r5
   2188c:	280ad07a 	srli	r5,r5,1
   21890:	183ffb1e 	bne	r3,zero,21880 <_gp+0xffff78b8>
   21894:	38000126 	beq	r7,zero,2189c <__modsi3+0x54>
   21898:	0085c83a 	sub	r2,zero,r2
   2189c:	f800283a 	ret
   218a0:	014bc83a 	sub	r5,zero,r5
   218a4:	003fec06 	br	21858 <_gp+0xffff7890>
   218a8:	0109c83a 	sub	r4,zero,r4
   218ac:	01c00044 	movi	r7,1
   218b0:	003fe706 	br	21850 <_gp+0xffff7888>
   218b4:	00c00044 	movi	r3,1
   218b8:	003ff106 	br	21880 <_gp+0xffff78b8>

000218bc <__udivsi3>:
   218bc:	200d883a 	mov	r6,r4
   218c0:	2900152e 	bgeu	r5,r4,21918 <__udivsi3+0x5c>
   218c4:	28001416 	blt	r5,zero,21918 <__udivsi3+0x5c>
   218c8:	00800804 	movi	r2,32
   218cc:	00c00044 	movi	r3,1
   218d0:	00000206 	br	218dc <__udivsi3+0x20>
   218d4:	10000e26 	beq	r2,zero,21910 <__udivsi3+0x54>
   218d8:	28000516 	blt	r5,zero,218f0 <__udivsi3+0x34>
   218dc:	294b883a 	add	r5,r5,r5
   218e0:	10bfffc4 	addi	r2,r2,-1
   218e4:	18c7883a 	add	r3,r3,r3
   218e8:	293ffa36 	bltu	r5,r4,218d4 <_gp+0xffff790c>
   218ec:	18000826 	beq	r3,zero,21910 <__udivsi3+0x54>
   218f0:	0005883a 	mov	r2,zero
   218f4:	31400236 	bltu	r6,r5,21900 <__udivsi3+0x44>
   218f8:	314dc83a 	sub	r6,r6,r5
   218fc:	10c4b03a 	or	r2,r2,r3
   21900:	1806d07a 	srli	r3,r3,1
   21904:	280ad07a 	srli	r5,r5,1
   21908:	183ffa1e 	bne	r3,zero,218f4 <_gp+0xffff792c>
   2190c:	f800283a 	ret
   21910:	0005883a 	mov	r2,zero
   21914:	f800283a 	ret
   21918:	00c00044 	movi	r3,1
   2191c:	003ff406 	br	218f0 <_gp+0xffff7928>

00021920 <__umodsi3>:
   21920:	2005883a 	mov	r2,r4
   21924:	2900122e 	bgeu	r5,r4,21970 <__umodsi3+0x50>
   21928:	28001116 	blt	r5,zero,21970 <__umodsi3+0x50>
   2192c:	01800804 	movi	r6,32
   21930:	00c00044 	movi	r3,1
   21934:	00000206 	br	21940 <__umodsi3+0x20>
   21938:	30000c26 	beq	r6,zero,2196c <__umodsi3+0x4c>
   2193c:	28000516 	blt	r5,zero,21954 <__umodsi3+0x34>
   21940:	294b883a 	add	r5,r5,r5
   21944:	31bfffc4 	addi	r6,r6,-1
   21948:	18c7883a 	add	r3,r3,r3
   2194c:	293ffa36 	bltu	r5,r4,21938 <_gp+0xffff7970>
   21950:	18000626 	beq	r3,zero,2196c <__umodsi3+0x4c>
   21954:	1806d07a 	srli	r3,r3,1
   21958:	11400136 	bltu	r2,r5,21960 <__umodsi3+0x40>
   2195c:	1145c83a 	sub	r2,r2,r5
   21960:	280ad07a 	srli	r5,r5,1
   21964:	183ffb1e 	bne	r3,zero,21954 <_gp+0xffff798c>
   21968:	f800283a 	ret
   2196c:	f800283a 	ret
   21970:	00c00044 	movi	r3,1
   21974:	003ff706 	br	21954 <_gp+0xffff798c>

00021978 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   21978:	deffff04 	addi	sp,sp,-4
   2197c:	010000b4 	movhi	r4,2
   21980:	014000b4 	movhi	r5,2
   21984:	dfc00015 	stw	ra,0(sp)
   21988:	2107ba04 	addi	r4,r4,7912
   2198c:	2947f704 	addi	r5,r5,8156

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21990:	2140061e 	bne	r4,r5,219ac <alt_load+0x34>
   21994:	010000b4 	movhi	r4,2
   21998:	014000b4 	movhi	r5,2
   2199c:	21000804 	addi	r4,r4,32
   219a0:	29400804 	addi	r5,r5,32
   219a4:	2140121e 	bne	r4,r5,219f0 <alt_load+0x78>
   219a8:	00000b06 	br	219d8 <alt_load+0x60>
   219ac:	00c000b4 	movhi	r3,2
   219b0:	18c7f704 	addi	r3,r3,8156
   219b4:	1907c83a 	sub	r3,r3,r4
   219b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   219bc:	10fff526 	beq	r2,r3,21994 <_gp+0xffff79cc>
    {
      *to++ = *from++;
   219c0:	114f883a 	add	r7,r2,r5
   219c4:	39c00017 	ldw	r7,0(r7)
   219c8:	110d883a 	add	r6,r2,r4
   219cc:	10800104 	addi	r2,r2,4
   219d0:	31c00015 	stw	r7,0(r6)
   219d4:	003ff906 	br	219bc <_gp+0xffff79f4>
   219d8:	010000b4 	movhi	r4,2
   219dc:	014000b4 	movhi	r5,2
   219e0:	21077d04 	addi	r4,r4,7668
   219e4:	29477d04 	addi	r5,r5,7668

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   219e8:	2140101e 	bne	r4,r5,21a2c <alt_load+0xb4>
   219ec:	00000b06 	br	21a1c <alt_load+0xa4>
   219f0:	00c000b4 	movhi	r3,2
   219f4:	18c00804 	addi	r3,r3,32
   219f8:	1907c83a 	sub	r3,r3,r4
   219fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   21a00:	10fff526 	beq	r2,r3,219d8 <_gp+0xffff7a10>
    {
      *to++ = *from++;
   21a04:	114f883a 	add	r7,r2,r5
   21a08:	39c00017 	ldw	r7,0(r7)
   21a0c:	110d883a 	add	r6,r2,r4
   21a10:	10800104 	addi	r2,r2,4
   21a14:	31c00015 	stw	r7,0(r6)
   21a18:	003ff906 	br	21a00 <_gp+0xffff7a38>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   21a1c:	0021de40 	call	21de4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   21a20:	dfc00017 	ldw	ra,0(sp)
   21a24:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   21a28:	0021de81 	jmpi	21de8 <alt_icache_flush_all>
   21a2c:	00c000b4 	movhi	r3,2
   21a30:	18c7ba04 	addi	r3,r3,7912
   21a34:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21a38:	0005883a 	mov	r2,zero
  {
    while( to != end )
   21a3c:	18bff726 	beq	r3,r2,21a1c <_gp+0xffff7a54>
    {
      *to++ = *from++;
   21a40:	114f883a 	add	r7,r2,r5
   21a44:	39c00017 	ldw	r7,0(r7)
   21a48:	110d883a 	add	r6,r2,r4
   21a4c:	10800104 	addi	r2,r2,4
   21a50:	31c00015 	stw	r7,0(r6)
   21a54:	003ff906 	br	21a3c <_gp+0xffff7a74>

00021a58 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21a58:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21a5c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   21a60:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   21a64:	0021b340 	call	21b34 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   21a68:	0021b540 	call	21b54 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   21a6c:	d1a04c17 	ldw	r6,-32464(gp)
   21a70:	d1604d17 	ldw	r5,-32460(gp)
   21a74:	d1204e17 	ldw	r4,-32456(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   21a78:	dfc00017 	ldw	ra,0(sp)
   21a7c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   21a80:	002049c1 	jmpi	2049c <main>

00021a84 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a84:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a88:	00bfff84 	movi	r2,-2
   21a8c:	2884703a 	and	r2,r5,r2
   21a90:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21a94:	d0a00217 	ldw	r2,-32760(gp)
   21a98:	00ffff04 	movi	r3,-4
   21a9c:	108000c4 	addi	r2,r2,3
   21aa0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   21aa4:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   21aa8:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   21aac:	1109883a 	add	r4,r2,r4
   21ab0:	18d80004 	addi	r3,r3,24576
   21ab4:	1900032e 	bgeu	r3,r4,21ac4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ab8:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   21abc:	00bfffc4 	movi	r2,-1
   21ac0:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   21ac4:	d1200215 	stw	r4,-32760(gp)
   21ac8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   21acc:	f800283a 	ret

00021ad0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   21ad0:	0021d5c1 	jmpi	21d5c <alt_busy_sleep>

00021ad4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   21ad4:	00800044 	movi	r2,1
   21ad8:	20800226 	beq	r4,r2,21ae4 <write+0x10>
   21adc:	00800084 	movi	r2,2
   21ae0:	2080041e 	bne	r4,r2,21af4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   21ae4:	010000b4 	movhi	r4,2
   21ae8:	000f883a 	mov	r7,zero
   21aec:	2107f504 	addi	r4,r4,8148
   21af0:	0021d281 	jmpi	21d28 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   21af4:	d0a00417 	ldw	r2,-32752(gp)
   21af8:	10000926 	beq	r2,zero,21b20 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   21afc:	deffff04 	addi	sp,sp,-4
   21b00:	dfc00015 	stw	ra,0(sp)
   21b04:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   21b08:	00c01444 	movi	r3,81
   21b0c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   21b10:	00bfffc4 	movi	r2,-1
   21b14:	dfc00017 	ldw	ra,0(sp)
   21b18:	dec00104 	addi	sp,sp,4
   21b1c:	f800283a 	ret
   21b20:	d0a04b04 	addi	r2,gp,-32468
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   21b24:	00c01444 	movi	r3,81
   21b28:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   21b2c:	00bfffc4 	movi	r2,-1
   21b30:	f800283a 	ret

00021b34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21b34:	deffff04 	addi	sp,sp,-4
   21b38:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_1, nios2_1);
   21b3c:	0021dec0 	call	21dec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21b40:	00800044 	movi	r2,1
   21b44:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21b48:	dfc00017 	ldw	ra,0(sp)
   21b4c:	dec00104 	addi	sp,sp,4
   21b50:	f800283a 	ret

00021b54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21b54:	f800283a 	ret

00021b58 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21b58:	20800137 	ldwio	r2,4(r4)
}
   21b5c:	1144703a 	and	r2,r2,r5
   21b60:	f800283a 	ret

00021b64 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   21b64:	20800337 	ldwio	r2,12(r4)
}
   21b68:	1144703a 	and	r2,r2,r5
   21b6c:	f800283a 	ret

00021b70 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   21b70:	20800437 	ldwio	r2,16(r4)
   21b74:	f800283a 	ret

00021b78 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   21b78:	20800537 	ldwio	r2,20(r4)
   21b7c:	f800283a 	ret

00021b80 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   21b80:	20800237 	ldwio	r2,8(r4)
}
   21b84:	1144703a 	and	r2,r2,r5
   21b88:	f800283a 	ret

00021b8c <altera_avalon_fifo_read_level>:
   21b8c:	20800037 	ldwio	r2,0(r4)
   21b90:	f800283a 	ret

00021b94 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   21b94:	21000204 	addi	r4,r4,8
   21b98:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   21b9c:	20800037 	ldwio	r2,0(r4)
   21ba0:	114a703a 	and	r5,r2,r5
   21ba4:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   21ba8:	0085c83a 	sub	r2,zero,r2
   21bac:	f800283a 	ret

00021bb0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   21bb0:	21000304 	addi	r4,r4,12
   21bb4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   21bb8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21bbc:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   21bc0:	28c00126 	beq	r5,r3,21bc8 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   21bc4:	00bfff84 	movi	r2,-2
}
   21bc8:	f800283a 	ret

00021bcc <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   21bcc:	21000404 	addi	r4,r4,16
   21bd0:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   21bd4:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21bd8:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   21bdc:	28c00126 	beq	r5,r3,21be4 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21be0:	00bfff44 	movi	r2,-3
}
   21be4:	f800283a 	ret

00021be8 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   21be8:	21000504 	addi	r4,r4,20
   21bec:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   21bf0:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21bf4:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   21bf8:	28c00126 	beq	r5,r3,21c00 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21bfc:	00bfff44 	movi	r2,-3
}
   21c00:	f800283a 	ret

00021c04 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   21c04:	defffb04 	addi	sp,sp,-20
   21c08:	dcc00315 	stw	r19,12(sp)
   21c0c:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   21c10:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   21c14:	dc800215 	stw	r18,8(sp)
   21c18:	dc400115 	stw	r17,4(sp)
   21c1c:	dc000015 	stw	r16,0(sp)
   21c20:	dfc00415 	stw	ra,16(sp)
   21c24:	2021883a 	mov	r16,r4
   21c28:	3023883a 	mov	r17,r6
   21c2c:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   21c30:	0021b940 	call	21b94 <altera_avalon_fifo_clear_event>
   21c34:	10000f1e 	bne	r2,zero,21c74 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   21c38:	980b883a 	mov	r5,r19
   21c3c:	8009883a 	mov	r4,r16
   21c40:	0021bb00 	call	21bb0 <altera_avalon_fifo_write_ienable>
   21c44:	10000d1e 	bne	r2,zero,21c7c <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   21c48:	900b883a 	mov	r5,r18
   21c4c:	8009883a 	mov	r4,r16
   21c50:	0021bcc0 	call	21bcc <altera_avalon_fifo_write_almostfull>
   21c54:	10000226 	beq	r2,zero,21c60 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   21c58:	00bfff44 	movi	r2,-3
   21c5c:	00000806 	br	21c80 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   21c60:	880b883a 	mov	r5,r17
   21c64:	8009883a 	mov	r4,r16
   21c68:	0021be80 	call	21be8 <altera_avalon_fifo_write_almostempty>
   21c6c:	10000426 	beq	r2,zero,21c80 <altera_avalon_fifo_init+0x7c>
   21c70:	003ff906 	br	21c58 <_gp+0xffff7c90>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   21c74:	00bfffc4 	movi	r2,-1
   21c78:	00000106 	br	21c80 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   21c7c:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   21c80:	dfc00417 	ldw	ra,16(sp)
   21c84:	dcc00317 	ldw	r19,12(sp)
   21c88:	dc800217 	ldw	r18,8(sp)
   21c8c:	dc400117 	ldw	r17,4(sp)
   21c90:	dc000017 	ldw	r16,0(sp)
   21c94:	dec00504 	addi	sp,sp,20
   21c98:	f800283a 	ret

00021c9c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21c9c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   21ca0:	1080004c 	andi	r2,r2,1
   21ca4:	1000021e 	bne	r2,zero,21cb0 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   21ca8:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   21cac:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   21cb0:	00bfff04 	movi	r2,-4
    }
}
   21cb4:	f800283a 	ret

00021cb8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   21cb8:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21cbc:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   21cc0:	1080008c 	andi	r2,r2,2
   21cc4:	1000041e 	bne	r2,zero,21cd8 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   21cc8:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   21ccc:	20c00037 	ldwio	r3,0(r4)
   21cd0:	30c00015 	stw	r3,0(r6)
   21cd4:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   21cd8:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   21cdc:	f800283a 	ret

00021ce0 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21ce0:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   21ce4:	1080008c 	andi	r2,r2,2
   21ce8:	1000021e 	bne	r2,zero,21cf4 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   21cec:	20800037 	ldwio	r2,0(r4)
   21cf0:	f800283a 	ret
    }
    return 0;
   21cf4:	0005883a 	mov	r2,zero
}
   21cf8:	f800283a 	ret

00021cfc <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   21cfc:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   21d00:	1080004c 	andi	r2,r2,1
   21d04:	1000021e 	bne	r2,zero,21d10 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   21d08:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   21d0c:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   21d10:	00bfff04 	movi	r2,-4
    }
}
   21d14:	f800283a 	ret

00021d18 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   21d18:	20800137 	ldwio	r2,4(r4)
   21d1c:	f800283a 	ret

00021d20 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   21d20:	20800037 	ldwio	r2,0(r4)
   21d24:	f800283a 	ret

00021d28 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   21d28:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   21d2c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   21d30:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21d34:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   21d38:	2980072e 	bgeu	r5,r6,21d58 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21d3c:	38c00037 	ldwio	r3,0(r7)
   21d40:	18ffffec 	andhi	r3,r3,65535
   21d44:	183ffc26 	beq	r3,zero,21d38 <_gp+0xffff7d70>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21d48:	28c00007 	ldb	r3,0(r5)
   21d4c:	20c00035 	stwio	r3,0(r4)
   21d50:	29400044 	addi	r5,r5,1
   21d54:	003ff806 	br	21d38 <_gp+0xffff7d70>

  return count;
}
   21d58:	f800283a 	ret

00021d5c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   21d5c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21d60:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   21d64:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21d68:	dc000015 	stw	r16,0(sp)
   21d6c:	dfc00115 	stw	ra,4(sp)
   21d70:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   21d74:	00218bc0 	call	218bc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   21d78:	10001026 	beq	r2,zero,21dbc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21d7c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21d80:	013999b4 	movhi	r4,58982
   21d84:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21d88:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21d8c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21d90:	297fffc4 	addi	r5,r5,-1
   21d94:	283ffe1e 	bne	r5,zero,21d90 <_gp+0xffff7dc8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   21d98:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21d9c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   21da0:	18bffb16 	blt	r3,r2,21d90 <_gp+0xffff7dc8>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21da4:	01400144 	movi	r5,5
   21da8:	8009883a 	mov	r4,r16
   21dac:	0020cc40 	call	20cc4 <__mulsi3>
   21db0:	10bfffc4 	addi	r2,r2,-1
   21db4:	103ffe1e 	bne	r2,zero,21db0 <_gp+0xffff7de8>
   21db8:	00000506 	br	21dd0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21dbc:	01400144 	movi	r5,5
   21dc0:	8009883a 	mov	r4,r16
   21dc4:	0020cc40 	call	20cc4 <__mulsi3>
   21dc8:	10bfffc4 	addi	r2,r2,-1
   21dcc:	00bffe16 	blt	zero,r2,21dc8 <_gp+0xffff7e00>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   21dd0:	0005883a 	mov	r2,zero
   21dd4:	dfc00117 	ldw	ra,4(sp)
   21dd8:	dc000017 	ldw	r16,0(sp)
   21ddc:	dec00204 	addi	sp,sp,8
   21de0:	f800283a 	ret

00021de4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21de4:	f800283a 	ret

00021de8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21de8:	f800283a 	ret

00021dec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   21dec:	000170fa 	wrctl	ienable,zero
   21df0:	f800283a 	ret
