
node0_v2.elf:     file format elf32-littlenios2
node0_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00018020

Program Header:
    LOAD off    0x00001000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00018020 paddr 0x00018020 align 2**12
         filesz 0x00002418 memsz 0x00002418 flags r-x
    LOAD off    0x00003438 vaddr 0x0001a438 paddr 0x0001a52c align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003620 vaddr 0x0001a620 paddr 0x0001a620 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00018000  00018000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00018020  00018020  0000352c  2**0
                  CONTENTS
  2 .text         00002094  00018020  00018020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000384  0001a0b4  0001a0b4  000030b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  0001a438  0001a52c  00003438  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  0001a620  0001a620  00003620  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_0   00000000  0001a87c  0001a87c  0000352c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000352c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000400  00000000  00000000  00003550  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007a41  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000248e  00000000  00000000  0000b391  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000028d6  00000000  00000000  0000d81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000938  00000000  00000000  000100f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a33  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000284e  00000000  00000000  00012463  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00014cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000300  00000000  00000000  00014cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016a82  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  00016a85  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016a8c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016a8d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00016a8e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00016a99  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00016aa4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00016aaf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  00016aba  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  00016b0c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  000246ce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00018000 l    d  .entry	00000000 .entry
00018020 l    d  .exceptions	00000000 .exceptions
00018020 l    d  .text	00000000 .text
0001a0b4 l    d  .rodata	00000000 .rodata
0001a438 l    d  .rwdata	00000000 .rwdata
0001a620 l    d  .bss	00000000 .bss
0001a87c l    d  .data_mem_0	00000000 .data_mem_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node0_v2_bsp//obj/HAL/src/crt0.o
00018058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_0.c
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000193ec l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0001a438 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001a520 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00019d6c g     F .text	0000002c alt_main
0001a7dc g     O .bss	00000010 edge_p1_p3
000192ec g     F .text	00000080 _puts_r
00019f14 g     F .text	0000001c altera_avalon_fifo_write_almostfull
0001a52c g       *ABS*	00000000 __flash_rwdata_start
0001805c g     F .text	00000058 proc_0
0001a87c g       *ABS*	00000000 __alt_heap_start
0001a620 g     O .bss	00000004 proc_0_inp_0
000192a0 g     F .text	0000004c printf
0001a7ec g     O .bss	00000050 edges
00019f4c g     F .text	00000098 altera_avalon_fifo_init
00019fe4 g     F .text	0000001c altera_avalon_fifo_write_fifo
00018f10 g     F .text	0000008c ring_buffer_dequeue_arr
00019d98 g     F .text	00000038 alt_putstr
0001a0ac g     F .text	00000008 altera_nios2_gen2_irq_init
00018000 g       *ABS*	00000000 __alt_mem_data_mem_0
00018ed8 g     F .text	00000038 ring_buffer_dequeue
00018000 g     F .entry	0000000c __reset
0001a068 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00018020 g       *ABS*	00000000 __flash_exceptions_start
0001a644 g     O .bss	00000004 errno
00018e38 g     F .text	0000000c ring_buffer_init
0001a83c g     O .bss	00000010 edge_p0_p1
0001a64c g     O .bss	00000004 alt_argv
00022518 g       *ABS*	00000000 _gp
00019edc g     F .text	0000001c altera_avalon_fifo_clear_event
00019000 g     F .text	00000028 memcpy
0001a654 g     O .bss	00000082 buff_p4_p1
0001936c g     F .text	00000014 puts
00018734 g     F .text	0000009c get_edge
00018fd8 g     F .text	00000014 malloc
00019264 g     F .text	0000003c _printf_r
00018e24 g     F .text	00000014 ring_buffer_num_items
00019ba8 g     F .text	00000064 .hidden __udivsi3
0001a84c g     O .bss	00000010 edge_p5_p0
0001a85c g     O .bss	00000010 edge_p4_p1
00019380 g     F .text	00000050 _sbrk_r
0001a6d6 g     O .bss	00000082 buff_p5_p0
00018dfc g     F .text	00000010 ring_buffer_is_empty
00018e0c g     F .text	00000018 ring_buffer_is_full
0001a518 g     O .rwdata	00000004 _global_impure_ptr
0001a87c g       *ABS*	00000000 __bss_end
00018824 g     F .text	0000002c init_buffer
00018dd4 g     F .text	00000028 receive_poll
0001a624 g     O .bss	00000004 proc_1_out_1
0001a0a4 g     F .text	00000004 alt_dcache_flush_all
00019ef8 g     F .text	0000001c altera_avalon_fifo_write_ienable
0001a52c g       *ABS*	00000000 __ram_rwdata_end
00019ec0 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00019e1c g     F .text	00000060 write
0001a628 g     O .bss	00000004 proc_1_out_0
0001a438 g       *ABS*	00000000 __ram_rodata_end
0001a524 g     O .rwdata	00000004 jtag_uart_0
00019c0c g     F .text	00000058 .hidden __umodsi3
000187d0 g     F .text	00000054 get_buffer
0001a62c g     O .bss	00000004 proc_0_out_0
0001a87c g       *ABS*	00000000 end
00019ec8 g     F .text	0000000c altera_avalon_fifo_read_event
0001e000 g       *ABS*	00000000 __alt_stack_pointer
0001a070 g     F .text	00000034 altera_avalon_jtag_uart_write
0001a630 g     O .bss	00000004 input_fifo_wrclk_irq_event
0001a028 g     F .text	0000001c altera_avalon_fifo_read_fifo
00019458 g     F .text	0000052c ___vfprintf_internal_r
00019028 g     F .text	000000e4 _free_r
000189b8 g     F .text	000001e4 send_packet
00018020 g     F .text	0000003c _start
0001a758 g     O .bss	00000082 buff_p0_p1
00019e9c g     F .text	00000004 alt_sys_init
000180b4 g     F .text	00000044 proc_1
00018e44 g     F .text	00000040 ring_buffer_queue
00018384 g     F .text	0000010c serializing_send
00019c64 g     F .text	00000028 .hidden __mulsi3
0001a438 g       *ABS*	00000000 __ram_rwdata_start
0001a0b4 g       *ABS*	00000000 __ram_rodata_start
000182d0 g     F .text	000000b4 read_data
0001a87c g       *ABS*	00000000 __alt_stack_base
000180f8 g     F .text	000000d0 print_status
00019ea0 g     F .text	0000000c altera_avalon_fifo_read_status
0001a060 g     F .text	00000008 altera_avalon_fifo_read_other_info
0001a634 g     O .bss	00000004 proc_1_inp_1
0001a638 g     O .bss	00000004 proc_1_inp_0
00019dd0 g     F .text	0000004c sbrk
000199a0 g     F .text	000000b8 __sfvwrite_small_dev
0001a620 g       *ABS*	00000000 __bss_start
000184dc g     F .text	00000258 main
0001a86c g     O .bss	00000010 edge_p1_p2
0001a648 g     O .bss	00000004 alt_envp
00019ed4 g     F .text	00000008 altera_avalon_fifo_read_level
0001e000 g       *ABS*	00000000 __alt_heap_limit
0001910c g     F .text	00000158 _malloc_r
0001a528 g     O .rwdata	00000004 alt_errno
00018850 g     F .text	00000168 init_structures
00018f9c g     F .text	0000003c ring_buffer_peek
00019ab0 g     F .text	00000084 .hidden __divsi3
0001a0b4 g       *ABS*	00000000 __flash_rodata_start
00019e7c g     F .text	00000020 alt_irq_init
000181c8 g     F .text	00000108 read_buff
00019a58 g     F .text	00000058 _write_r
0001a51c g     O .rwdata	00000004 _impure_ptr
0001a650 g     O .bss	00000004 alt_argc
00018490 g     F .text	0000004c send_data
00018020 g       *ABS*	00000000 __ram_exceptions_start
00018c44 g     F .text	00000190 receive_packet
0001a044 g     F .text	0000001c altera_avalon_fifo_write_other_info
00018b9c g     F .text	000000a8 read_payload
0001a52c g       *ABS*	00000000 _edata
0001a87c g       *ABS*	00000000 _end
00018020 g       *ABS*	00000000 __ram_exceptions_end
00019b34 g     F .text	00000074 .hidden __modsi3
00019eac g     F .text	0000000c altera_avalon_fifo_read_ienable
0001e000 g       *ABS*	00000000 __alt_data_end
00018e84 g     F .text	00000054 ring_buffer_queue_arr
0001800c g       .entry	00000000 _exit
00019eb8 g     F .text	00000008 altera_avalon_fifo_read_almostfull
000193d0 g     F .text	0000001c strlen
0001a000 g     F .text	00000028 altera_avalon_read_fifo
0001a63c g     O .bss	00000004 __malloc_sbrk_start
0001a0a8 g     F .text	00000004 alt_icache_flush_all
0001a640 g     O .bss	00000004 __malloc_free_list
00019984 g     F .text	0000001c __vfprintf_internal
00019f30 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00019c8c g     F .text	000000e0 alt_load
00018fec g     F .text	00000014 free



Disassembly of section .entry:

00018000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   18000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   18004:	08600814 	ori	at,at,32800
    jmp r1
   18008:	0800683a 	jmp	at

0001800c <_exit>:
	...

Disassembly of section .text:

00018020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   18020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   18024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
   18028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1802c:	d6894614 	ori	gp,gp,9496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   18030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   18034:	10a98814 	ori	r2,r2,42528

    movhi r3, %hi(__bss_end)
   18038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1803c:	18ea1f14 	ori	r3,r3,43132

    beq r2, r3, 1f
   18040:	10c00326 	beq	r2,r3,18050 <_start+0x30>

0:
    stw zero, (r2)
   18044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   18048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1804c:	10fffd36 	bltu	r2,r3,18044 <_gp+0xffff5b2c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   18050:	0019c8c0 	call	19c8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   18054:	0019d6c0 	call	19d6c <alt_main>

00018058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   18058:	003fff06 	br	18058 <_gp+0xffff5b40>

0001805c <proc_0>:
	return;
}*/

void proc_0(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
   1805c:	20800017 	ldw	r2,0(r4)
	printf("args->output_0[0]: %d\n",args->output_0[0]);

	return;
}*/

void proc_0(void ***inpargs, void ***outargs){
   18060:	defffd04 	addi	sp,sp,-12
   18064:	dc000015 	stw	r16,0(sp)
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
   18068:	14000017 	ldw	r16,0(r2)
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];
   1806c:	28800017 	ldw	r2,0(r5)

	printf("proc_0 -- num1: %x\n",*num1);
   18070:	010000b4 	movhi	r4,2
   18074:	81400017 	ldw	r5,0(r16)
   18078:	21282d04 	addi	r4,r4,-24396
	printf("args->output_0[0]: %d\n",args->output_0[0]);

	return;
}*/

void proc_0(void ***inpargs, void ***outargs){
   1807c:	dc400115 	stw	r17,4(sp)
   18080:	dfc00215 	stw	ra,8(sp)
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];
   18084:	14400017 	ldw	r17,0(r2)

	printf("proc_0 -- num1: %x\n",*num1);
   18088:	00192a00 	call	192a0 <printf>

	*out1 = *num1 + 1;
   1808c:	81400017 	ldw	r5,0(r16)

	printf("proc_0 -- out1: %x\n",*out1);
   18090:	010000b4 	movhi	r4,2
   18094:	21283204 	addi	r4,r4,-24376
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];

	printf("proc_0 -- num1: %x\n",*num1);

	*out1 = *num1 + 1;
   18098:	29400044 	addi	r5,r5,1
   1809c:	89400015 	stw	r5,0(r17)

	printf("proc_0 -- out1: %x\n",*out1);
}
   180a0:	dfc00217 	ldw	ra,8(sp)
   180a4:	dc400117 	ldw	r17,4(sp)
   180a8:	dc000017 	ldw	r16,0(sp)
   180ac:	dec00304 	addi	sp,sp,12

	printf("proc_0 -- num1: %x\n",*num1);

	*out1 = *num1 + 1;

	printf("proc_0 -- out1: %x\n",*out1);
   180b0:	00192a01 	jmpi	192a0 <printf>

000180b4 <proc_1>:
}

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
   180b4:	20800017 	ldw	r2,0(r4)
   180b8:	11800017 	ldw	r6,0(r2)
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
   180bc:	20800117 	ldw	r2,4(r4)
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];

	*out1 = *num1 + *num2;
   180c0:	31c00017 	ldw	r7,0(r6)
}

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
   180c4:	10c00017 	ldw	r3,0(r2)
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];
   180c8:	28800117 	ldw	r2,4(r5)
   180cc:	11000017 	ldw	r4,0(r2)

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
   180d0:	28800017 	ldw	r2,0(r5)
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];

	*out1 = *num1 + *num2;
   180d4:	11400017 	ldw	r5,0(r2)
   180d8:	18800017 	ldw	r2,0(r3)
   180dc:	3885883a 	add	r2,r7,r2
   180e0:	28800015 	stw	r2,0(r5)
	*out2 = *num1 - *num2;
   180e4:	30800017 	ldw	r2,0(r6)
   180e8:	18c00017 	ldw	r3,0(r3)
   180ec:	10c5c83a 	sub	r2,r2,r3
   180f0:	20800015 	stw	r2,0(r4)
   180f4:	f800283a 	ret

000180f8 <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   180f8:	defffd04 	addi	sp,sp,-12
   180fc:	dc000015 	stw	r16,0(sp)
   18100:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   18104:	010000b4 	movhi	r4,2
   18108:	21283704 	addi	r4,r4,-24356
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   1810c:	dfc00215 	stw	ra,8(sp)
   18110:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   18114:	001936c0 	call	1936c <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   18118:	8009883a 	mov	r4,r16
   1811c:	0019ed40 	call	19ed4 <altera_avalon_fifo_read_level>
   18120:	010000b4 	movhi	r4,2
   18124:	100b883a 	mov	r5,r2
   18128:	21284104 	addi	r4,r4,-24316
   1812c:	00192a00 	call	192a0 <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   18130:	04400fc4 	movi	r17,63
   18134:	880b883a 	mov	r5,r17
   18138:	8009883a 	mov	r4,r16
   1813c:	0019ea00 	call	19ea0 <altera_avalon_fifo_read_status>
   18140:	010000b4 	movhi	r4,2
   18144:	100b883a 	mov	r5,r2
   18148:	21284404 	addi	r4,r4,-24304
   1814c:	00192a00 	call	192a0 <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   18150:	880b883a 	mov	r5,r17
   18154:	8009883a 	mov	r4,r16
   18158:	0019ec80 	call	19ec8 <altera_avalon_fifo_read_event>
   1815c:	010000b4 	movhi	r4,2
   18160:	100b883a 	mov	r5,r2
   18164:	21284804 	addi	r4,r4,-24288
   18168:	00192a00 	call	192a0 <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   1816c:	880b883a 	mov	r5,r17
   18170:	8009883a 	mov	r4,r16
   18174:	0019eac0 	call	19eac <altera_avalon_fifo_read_ienable>
   18178:	010000b4 	movhi	r4,2
   1817c:	100b883a 	mov	r5,r2
   18180:	21284b04 	addi	r4,r4,-24276
   18184:	00192a00 	call	192a0 <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   18188:	8009883a 	mov	r4,r16
   1818c:	0019ec00 	call	19ec0 <altera_avalon_fifo_read_almostempty>
   18190:	010000b4 	movhi	r4,2
   18194:	100b883a 	mov	r5,r2
   18198:	21284f04 	addi	r4,r4,-24260
   1819c:	00192a00 	call	192a0 <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   181a0:	8009883a 	mov	r4,r16
   181a4:	0019eb80 	call	19eb8 <altera_avalon_fifo_read_almostfull>
   181a8:	010000b4 	movhi	r4,2
   181ac:	100b883a 	mov	r5,r2
   181b0:	21285404 	addi	r4,r4,-24240
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   181b4:	dfc00217 	ldw	ra,8(sp)
   181b8:	dc400117 	ldw	r17,4(sp)
   181bc:	dc000017 	ldw	r16,0(sp)
   181c0:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   181c4:	00192a01 	jmpi	192a0 <printf>

000181c8 <read_buff>:
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(ring_buffer_t *cbuf, uint8_t num_of_token, alt_u16 proc_num, uint8_t input_num){
   181c8:	defffb04 	addi	sp,sp,-20
   181cc:	dc400215 	stw	r17,8(sp)
   181d0:	dfc00415 	stw	ra,16(sp)
   181d4:	dc800315 	stw	r18,12(sp)
   181d8:	dc000115 	stw	r16,4(sp)

	if(proc_num == 0){
   181dc:	31bfffcc 	andi	r6,r6,65535
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(ring_buffer_t *cbuf, uint8_t num_of_token, alt_u16 proc_num, uint8_t input_num){
   181e0:	2023883a 	mov	r17,r4

	if(proc_num == 0){
   181e4:	3000111e 	bne	r6,zero,1822c <read_buff+0x64>
		if(input_num == 0){
   181e8:	39c03fcc 	andi	r7,r7,255
   181ec:	3800321e 	bne	r7,zero,182b8 <read_buff+0xf0>
   181f0:	0025883a 	mov	r18,zero
			uint8_t tmp[P0_INP0_TYPE_SIZE];

			for(int i =0; i < num_of_token; ++i){
   181f4:	2c003fcc 	andi	r16,r5,255
   181f8:	94002f0e 	bge	r18,r16,182b8 <read_buff+0xf0>
				ring_buffer_dequeue_arr(cbuf,tmp,P0_INP0_TYPE_SIZE);
   181fc:	01800104 	movi	r6,4
   18200:	d80b883a 	mov	r5,sp
   18204:	8809883a 	mov	r4,r17
   18208:	0018f100 	call	18f10 <ring_buffer_dequeue_arr>
				proc_0_inp_0[i] = ( (P0_INP0_TYPE*)tmp )[0];
   1820c:	d0e04217 	ldw	r3,-32504(gp)
   18210:	9485883a 	add	r2,r18,r18
   18214:	1085883a 	add	r2,r2,r2
   18218:	1885883a 	add	r2,r3,r2
   1821c:	d8c00017 	ldw	r3,0(sp)

	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[P0_INP0_TYPE_SIZE];

			for(int i =0; i < num_of_token; ++i){
   18220:	94800044 	addi	r18,r18,1
				ring_buffer_dequeue_arr(cbuf,tmp,P0_INP0_TYPE_SIZE);
				proc_0_inp_0[i] = ( (P0_INP0_TYPE*)tmp )[0];
   18224:	10c00015 	stw	r3,0(r2)
   18228:	003ff306 	br	181f8 <_gp+0xffff5ce0>
			}
		}
	}

	if(proc_num == 1){
   1822c:	00800044 	movi	r2,1
   18230:	3080211e 	bne	r6,r2,182b8 <read_buff+0xf0>
		if(input_num == 0){
   18234:	39c03fcc 	andi	r7,r7,255
   18238:	38000f1e 	bne	r7,zero,18278 <read_buff+0xb0>
   1823c:	0025883a 	mov	r18,zero
			uint8_t tmp[P1_INP0_TYPE_SIZE];

			for(int i =0; i < num_of_token; ++i){
   18240:	2c003fcc 	andi	r16,r5,255
   18244:	94001c0e 	bge	r18,r16,182b8 <read_buff+0xf0>
				ring_buffer_dequeue_arr(cbuf,tmp,P1_INP0_TYPE_SIZE);
   18248:	01800104 	movi	r6,4
   1824c:	d80b883a 	mov	r5,sp
   18250:	8809883a 	mov	r4,r17
   18254:	0018f100 	call	18f10 <ring_buffer_dequeue_arr>
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
   18258:	d0e04817 	ldw	r3,-32480(gp)
   1825c:	9485883a 	add	r2,r18,r18
   18260:	1085883a 	add	r2,r2,r2
   18264:	1885883a 	add	r2,r3,r2
   18268:	d8c00017 	ldw	r3,0(sp)

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[P1_INP0_TYPE_SIZE];

			for(int i =0; i < num_of_token; ++i){
   1826c:	94800044 	addi	r18,r18,1
				ring_buffer_dequeue_arr(cbuf,tmp,P1_INP0_TYPE_SIZE);
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
   18270:	10c00015 	stw	r3,0(r2)
   18274:	003ff306 	br	18244 <_gp+0xffff5d2c>
			}
		}
		if(input_num == 1){
   18278:	39800f1e 	bne	r7,r6,182b8 <read_buff+0xf0>
   1827c:	0025883a 	mov	r18,zero
			uint8_t tmp[P1_INP1_TYPE_SIZE];

			for(int i =0; i < num_of_token; ++i){
   18280:	2c003fcc 	andi	r16,r5,255
   18284:	94000c0e 	bge	r18,r16,182b8 <read_buff+0xf0>
				ring_buffer_dequeue_arr(cbuf,tmp,P1_INP1_TYPE_SIZE);
   18288:	01800104 	movi	r6,4
   1828c:	d80b883a 	mov	r5,sp
   18290:	8809883a 	mov	r4,r17
   18294:	0018f100 	call	18f10 <ring_buffer_dequeue_arr>
				proc_1_inp_1[i] = ( (P1_INP1_TYPE*)tmp )[0];
   18298:	d0e04717 	ldw	r3,-32484(gp)
   1829c:	9485883a 	add	r2,r18,r18
   182a0:	1085883a 	add	r2,r2,r2
   182a4:	1885883a 	add	r2,r3,r2
   182a8:	d8c00017 	ldw	r3,0(sp)
			}
		}
		if(input_num == 1){
			uint8_t tmp[P1_INP1_TYPE_SIZE];

			for(int i =0; i < num_of_token; ++i){
   182ac:	94800044 	addi	r18,r18,1
				ring_buffer_dequeue_arr(cbuf,tmp,P1_INP1_TYPE_SIZE);
				proc_1_inp_1[i] = ( (P1_INP1_TYPE*)tmp )[0];
   182b0:	10c00015 	stw	r3,0(r2)
   182b4:	003ff306 	br	18284 <_gp+0xffff5d6c>
			}
		}
	}
}
   182b8:	dfc00417 	ldw	ra,16(sp)
   182bc:	dc800317 	ldw	r18,12(sp)
   182c0:	dc400217 	ldw	r17,8(sp)
   182c4:	dc000117 	ldw	r16,4(sp)
   182c8:	dec00504 	addi	sp,sp,20
   182cc:	f800283a 	ret

000182d0 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){

	printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
   182d0:	20c00217 	ldw	r3,8(r4)
			}
		}
	}
}

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   182d4:	defffc04 	addi	sp,sp,-16
   182d8:	dc800215 	stw	r18,8(sp)
   182dc:	dc400115 	stw	r17,4(sp)
   182e0:	dc000015 	stw	r16,0(sp)
   182e4:	dfc00315 	stw	ra,12(sp)
   182e8:	2823883a 	mov	r17,r5

	printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
   182ec:	18802043 	ldbu	r2,129(r3)
   182f0:	19402003 	ldbu	r5,128(r3)
			}
		}
	}
}

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   182f4:	2021883a 	mov	r16,r4

	printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
   182f8:	010000b4 	movhi	r4,2
   182fc:	114bc83a 	sub	r5,r2,r5
   18300:	29401fcc 	andi	r5,r5,127
   18304:	21285904 	addi	r4,r4,-24220
			}
		}
	}
}

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   18308:	3025883a 	mov	r18,r6

	printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
   1830c:	00192a00 	call	192a0 <printf>
	while(ring_buffer_num_items((edge->buffer)) < edge->num_of_token){
   18310:	80c00217 	ldw	r3,8(r16)
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   18314:	18802043 	ldbu	r2,129(r3)
   18318:	19402003 	ldbu	r5,128(r3)
   1831c:	114bc83a 	sub	r5,r2,r5
   18320:	80800183 	ldbu	r2,6(r16)
   18324:	29401fcc 	andi	r5,r5,127
   18328:	2880092e 	bgeu	r5,r2,18350 <read_data+0x80>
		alt_putstr("waiting for receiving data:\n");
   1832c:	010000b4 	movhi	r4,2
   18330:	21286004 	addi	r4,r4,-24192
   18334:	0019d980 	call	19d98 <alt_putstr>
		receive_poll();
   18338:	0018dd40 	call	18dd4 <receive_poll>

		alt_putstr("read from FIFO:\n");
   1833c:	010000b4 	movhi	r4,2
   18340:	21286804 	addi	r4,r4,-24160
   18344:	0019d980 	call	19d98 <alt_putstr>
		receive_packet();
   18348:	0018c440 	call	18c44 <receive_packet>
   1834c:	003ff006 	br	18310 <_gp+0xffff5df8>
	}
	printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
   18350:	010000b4 	movhi	r4,2
   18354:	21286d04 	addi	r4,r4,-24140
   18358:	00192a00 	call	192a0 <printf>
	read_buff(edge->buffer, edge->num_of_token, proc_num, input_num);
   1835c:	81400183 	ldbu	r5,6(r16)
   18360:	81000217 	ldw	r4,8(r16)
   18364:	91c03fcc 	andi	r7,r18,255
   18368:	89bfffcc 	andi	r6,r17,65535
}
   1836c:	dfc00317 	ldw	ra,12(sp)
   18370:	dc800217 	ldw	r18,8(sp)
   18374:	dc400117 	ldw	r17,4(sp)
   18378:	dc000017 	ldw	r16,0(sp)
   1837c:	dec00404 	addi	sp,sp,16

		alt_putstr("read from FIFO:\n");
		receive_packet();
	}
	printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge->buffer, edge->num_of_token, proc_num, input_num);
   18380:	00181c81 	jmpi	181c8 <read_buff>

00018384 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array, unsigned char out_type_size){
   18384:	defff304 	addi	sp,sp,-52
   18388:	dcc00b15 	stw	r19,44(sp)
   1838c:	2827883a 	mov	r19,r5
	unsigned char send_array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   18390:	014000b4 	movhi	r5,2
	}
	printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge->buffer, edge->num_of_token, proc_num, input_num);
}

void serializing_send(struct Edge *edge, unsigned char *array, unsigned char out_type_size){
   18394:	dc800a15 	stw	r18,40(sp)
   18398:	dc000815 	stw	r16,32(sp)
   1839c:	3025883a 	mov	r18,r6
   183a0:	2021883a 	mov	r16,r4
	unsigned char send_array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   183a4:	01800604 	movi	r6,24
   183a8:	2968e544 	addi	r5,r5,-23659
   183ac:	d9000204 	addi	r4,sp,8
	}
	printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge->buffer, edge->num_of_token, proc_num, input_num);
}

void serializing_send(struct Edge *edge, unsigned char *array, unsigned char out_type_size){
   183b0:	dfc00c15 	stw	ra,48(sp)
   183b4:	dc400915 	stw	r17,36(sp)
	unsigned char send_array[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   183b8:	00190000 	call	19000 <memcpy>
	uint8_t num_of_packet_size = 0;
	uint8_t count = 0;
	num_of_packet_size = sizeof(array)/24;

	if(edge->external == 1){
   183bc:	80800303 	ldbu	r2,12(r16)
   183c0:	10002826 	beq	r2,zero,18464 <serializing_send+0xe0>
		printf("external\n");
   183c4:	010000b4 	movhi	r4,2
   183c8:	21287804 	addi	r4,r4,-24096
   183cc:	001936c0 	call	1936c <puts>
		do{
			for(int i = 0; i < out_type_size; ++i){
   183d0:	0023883a 	mov	r17,zero
   183d4:	94803fcc 	andi	r18,r18,255
   183d8:	8c800b0e 	bge	r17,r18,18408 <serializing_send+0x84>
				send_array[i] = array[i + (count * 24)];
   183dc:	9c45883a 	add	r2,r19,r17
   183e0:	11400003 	ldbu	r5,0(r2)
   183e4:	d8c00204 	addi	r3,sp,8
   183e8:	1c45883a 	add	r2,r3,r17
				printf("in seriliazed data function: array[i]: %d\n",array[i + (count * 24)]);
   183ec:	010000b4 	movhi	r4,2

	if(edge->external == 1){
		printf("external\n");
		do{
			for(int i = 0; i < out_type_size; ++i){
				send_array[i] = array[i + (count * 24)];
   183f0:	11400005 	stb	r5,0(r2)
				printf("in seriliazed data function: array[i]: %d\n",array[i + (count * 24)]);
   183f4:	21287b04 	addi	r4,r4,-24084
   183f8:	29403fcc 	andi	r5,r5,255
   183fc:	00192a00 	call	192a0 <printf>
	num_of_packet_size = sizeof(array)/24;

	if(edge->external == 1){
		printf("external\n");
		do{
			for(int i = 0; i < out_type_size; ++i){
   18400:	8c400044 	addi	r17,r17,1
   18404:	003ff406 	br	183d8 <_gp+0xffff5ec0>
				printf("in seriliazed data function: array[i]: %d\n",array[i + (count * 24)]);

			}
			count++;

			alt_putstr("write to FIFO\n");
   18408:	010000b4 	movhi	r4,2
   1840c:	21288604 	addi	r4,r4,-24040
   18410:	0019d980 	call	19d98 <alt_putstr>
			for(int i = 0; i < 24; ++i)
   18414:	0023883a 	mov	r17,zero
   18418:	04800604 	movi	r18,24
				printf("send_array: %d\n",send_array[i]);
   1841c:	d8c00204 	addi	r3,sp,8
   18420:	1c45883a 	add	r2,r3,r17
   18424:	11400003 	ldbu	r5,0(r2)
   18428:	010000b4 	movhi	r4,2
   1842c:	21288a04 	addi	r4,r4,-24024

			}
			count++;

			alt_putstr("write to FIFO\n");
			for(int i = 0; i < 24; ++i)
   18430:	8c400044 	addi	r17,r17,1
				printf("send_array: %d\n",send_array[i]);
   18434:	00192a00 	call	192a0 <printf>

			}
			count++;

			alt_putstr("write to FIFO\n");
			for(int i = 0; i < 24; ++i)
   18438:	8cbff81e 	bne	r17,r18,1841c <_gp+0xffff5f04>
				printf("send_array: %d\n",send_array[i]);
			send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   1843c:	d8800204 	addi	r2,sp,8
   18440:	81c0010b 	ldhu	r7,4(r16)
   18444:	8180008b 	ldhu	r6,2(r16)
   18448:	81400043 	ldbu	r5,1(r16)
   1844c:	81000003 	ldbu	r4,0(r16)
   18450:	d8800115 	stw	r2,4(sp)
   18454:	00800804 	movi	r2,32
   18458:	d8800015 	stw	r2,0(sp)
   1845c:	00189b80 	call	189b8 <send_packet>
   18460:	00000406 	br	18474 <serializing_send+0xf0>
		}while(count < num_of_packet_size);
	}

	else{
		ring_buffer_queue_arr(edge->buffer,array,sizeof(array));
   18464:	81000217 	ldw	r4,8(r16)
   18468:	01800104 	movi	r6,4
   1846c:	980b883a 	mov	r5,r19
   18470:	0018e840 	call	18e84 <ring_buffer_queue_arr>
	}

}
   18474:	dfc00c17 	ldw	ra,48(sp)
   18478:	dcc00b17 	ldw	r19,44(sp)
   1847c:	dc800a17 	ldw	r18,40(sp)
   18480:	dc400917 	ldw	r17,36(sp)
   18484:	dc000817 	ldw	r16,32(sp)
   18488:	dec00d04 	addi	sp,sp,52
   1848c:	f800283a 	ret

00018490 <send_data>:

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 0){
   18490:	297fffcc 	andi	r5,r5,65535
   18494:	2800051e 	bne	r5,zero,184ac <send_data+0x1c>
		if(output_num == 0)
   18498:	31803fcc 	andi	r6,r6,255
   1849c:	30000e1e 	bne	r6,zero,184d8 <send_data+0x48>
			serializing_send(edge, ((unsigned char*)proc_0_out_0), P0_OUT0_TYPE_SIZE );
   184a0:	01800104 	movi	r6,4
   184a4:	d1604517 	ldw	r5,-32492(gp)
   184a8:	00000a06 	br	184d4 <send_data+0x44>
	}

	if(proc_num == 1){
   184ac:	00800044 	movi	r2,1
   184b0:	2880091e 	bne	r5,r2,184d8 <send_data+0x48>
		if(output_num == 0)
   184b4:	31803fcc 	andi	r6,r6,255
   184b8:	3000031e 	bne	r6,zero,184c8 <send_data+0x38>
			serializing_send(edge, ((unsigned char*)proc_1_out_0), P0_OUT0_TYPE_SIZE );
   184bc:	01800104 	movi	r6,4
   184c0:	d1604417 	ldw	r5,-32496(gp)
   184c4:	00000306 	br	184d4 <send_data+0x44>
		if(output_num == 1)
   184c8:	3140031e 	bne	r6,r5,184d8 <send_data+0x48>
			serializing_send(edge, ((unsigned char*)proc_1_out_1), P1_OUT1_TYPE_SIZE );
   184cc:	d1604317 	ldw	r5,-32500(gp)
   184d0:	01800104 	movi	r6,4
   184d4:	00183841 	jmpi	18384 <serializing_send>
   184d8:	f800283a 	ret

000184dc <main>:
	}
}


int main()
{
   184dc:	defff904 	addi	sp,sp,-28
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (int*)malloc(P0_INP0_TOKENT_SIZE*sizeof(int));
   184e0:	01000104 	movi	r4,4
	}
}


int main()
{
   184e4:	dfc00615 	stw	ra,24(sp)
   184e8:	dc400515 	stw	r17,20(sp)
   184ec:	dc000415 	stw	r16,16(sp)
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (int*)malloc(P0_INP0_TOKENT_SIZE*sizeof(int));
   184f0:	0018fd80 	call	18fd8 <malloc>
	proc_0_out_0 = (int*)malloc(P0_OUT0_TOKENT_SIZE*sizeof(int));
   184f4:	01000104 	movi	r4,4


int main()
{
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (int*)malloc(P0_INP0_TOKENT_SIZE*sizeof(int));
   184f8:	1023883a 	mov	r17,r2
   184fc:	d0a04215 	stw	r2,-32504(gp)
	proc_0_out_0 = (int*)malloc(P0_OUT0_TOKENT_SIZE*sizeof(int));
   18500:	0018fd80 	call	18fd8 <malloc>

	// space allocation for input and output for proc 1
	proc_1_inp_0 = (int*)malloc(P1_INP0_TOKENT_SIZE*sizeof(int));
   18504:	01000104 	movi	r4,4

int main()
{
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (int*)malloc(P0_INP0_TOKENT_SIZE*sizeof(int));
	proc_0_out_0 = (int*)malloc(P0_OUT0_TOKENT_SIZE*sizeof(int));
   18508:	1021883a 	mov	r16,r2
   1850c:	d0a04515 	stw	r2,-32492(gp)

	// space allocation for input and output for proc 1
	proc_1_inp_0 = (int*)malloc(P1_INP0_TOKENT_SIZE*sizeof(int));
   18510:	0018fd80 	call	18fd8 <malloc>
	proc_1_inp_1 = (int*)malloc(P1_INP1_TOKENT_SIZE*sizeof(int));
   18514:	01000104 	movi	r4,4
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (int*)malloc(P0_INP0_TOKENT_SIZE*sizeof(int));
	proc_0_out_0 = (int*)malloc(P0_OUT0_TOKENT_SIZE*sizeof(int));

	// space allocation for input and output for proc 1
	proc_1_inp_0 = (int*)malloc(P1_INP0_TOKENT_SIZE*sizeof(int));
   18518:	d0a04815 	stw	r2,-32480(gp)
	proc_1_inp_1 = (int*)malloc(P1_INP1_TOKENT_SIZE*sizeof(int));
   1851c:	0018fd80 	call	18fd8 <malloc>
	proc_1_out_0 = (int*)malloc(P1_OUT0_TOKENT_SIZE*sizeof(int));
   18520:	01000104 	movi	r4,4
	proc_0_inp_0 = (int*)malloc(P0_INP0_TOKENT_SIZE*sizeof(int));
	proc_0_out_0 = (int*)malloc(P0_OUT0_TOKENT_SIZE*sizeof(int));

	// space allocation for input and output for proc 1
	proc_1_inp_0 = (int*)malloc(P1_INP0_TOKENT_SIZE*sizeof(int));
	proc_1_inp_1 = (int*)malloc(P1_INP1_TOKENT_SIZE*sizeof(int));
   18524:	d0a04715 	stw	r2,-32484(gp)
	proc_1_out_0 = (int*)malloc(P1_OUT0_TOKENT_SIZE*sizeof(int));
   18528:	0018fd80 	call	18fd8 <malloc>
	proc_1_out_1 = (int*)malloc(P1_OUT1_TOKENT_SIZE*sizeof(int));
   1852c:	01000104 	movi	r4,4
	proc_0_out_0 = (int*)malloc(P0_OUT0_TOKENT_SIZE*sizeof(int));

	// space allocation for input and output for proc 1
	proc_1_inp_0 = (int*)malloc(P1_INP0_TOKENT_SIZE*sizeof(int));
	proc_1_inp_1 = (int*)malloc(P1_INP1_TOKENT_SIZE*sizeof(int));
	proc_1_out_0 = (int*)malloc(P1_OUT0_TOKENT_SIZE*sizeof(int));
   18530:	d0a04415 	stw	r2,-32496(gp)
	proc_1_out_1 = (int*)malloc(P1_OUT1_TOKENT_SIZE*sizeof(int));
   18534:	0018fd80 	call	18fd8 <malloc>
   18538:	d0a04315 	stw	r2,-32500(gp)
    // top level pointers to be passed for proc 1
    void** proc_1_inps[2] = {proc_1_inparg_0,proc_1_inparg_1};
    void** proc_1_outs[2] = {proc_1_outarg_0,proc_1_outarg_1};


	alt_putstr("Hello from Nios II!\n");
   1853c:	010000b4 	movhi	r4,2
    proc_1_inparg_1[0] = &proc_1_inp_1[0];
    proc_1_outarg_0[0] = &proc_1_out_0[0];
    proc_1_outarg_1[0] = &proc_1_out_1[0];

    // top level pointers to be passed for proc 0
    void** proc_0_inps[1] = {proc_0_inparg_0};
   18540:	d8800304 	addi	r2,sp,12
   18544:	d8800115 	stw	r2,4(sp)
    // top level pointers to be passed for proc 1
    void** proc_1_inps[2] = {proc_1_inparg_0,proc_1_inparg_1};
    void** proc_1_outs[2] = {proc_1_outarg_0,proc_1_outarg_1};


	alt_putstr("Hello from Nios II!\n");
   18548:	21288e04 	addi	r4,r4,-24008
    proc_1_outarg_0[0] = &proc_1_out_0[0];
    proc_1_outarg_1[0] = &proc_1_out_1[0];

    // top level pointers to be passed for proc 0
    void** proc_0_inps[1] = {proc_0_inparg_0};
    void** proc_0_outs[1] = {proc_0_outarg_0};
   1854c:	d8800204 	addi	r2,sp,8

	// pointers to elements for proc 1
    void* proc_0_inparg_0[1];
    void* proc_0_outarg_0[1];
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
    proc_0_outarg_0[0] = &proc_0_out_0[0];
   18550:	dc000215 	stw	r16,8(sp)
	proc_1_out_1 = (int*)malloc(P1_OUT1_TOKENT_SIZE*sizeof(int));

	// pointers to elements for proc 1
    void* proc_0_inparg_0[1];
    void* proc_0_outarg_0[1];
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
   18554:	dc400315 	stw	r17,12(sp)
    proc_1_outarg_0[0] = &proc_1_out_0[0];
    proc_1_outarg_1[0] = &proc_1_out_1[0];

    // top level pointers to be passed for proc 0
    void** proc_0_inps[1] = {proc_0_inparg_0};
    void** proc_0_outs[1] = {proc_0_outarg_0};
   18558:	d8800015 	stw	r2,0(sp)
    // top level pointers to be passed for proc 1
    void** proc_1_inps[2] = {proc_1_inparg_0,proc_1_inparg_1};
    void** proc_1_outs[2] = {proc_1_outarg_0,proc_1_outarg_1};


	alt_putstr("Hello from Nios II!\n");
   1855c:	0019d980 	call	19d98 <alt_putstr>


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   18560:	01c002c4 	movi	r7,11
   18564:	01800084 	movi	r6,2
   18568:	000b883a 	mov	r5,zero
   1856c:	01240814 	movui	r4,36896
   18570:	0019f4c0 	call	19f4c <altera_avalon_fifo_init>
   18574:	01c002c4 	movi	r7,11
   18578:	01800084 	movi	r6,2
   1857c:	000b883a 	mov	r5,zero
   18580:	01240014 	movui	r4,36864
   18584:	0019f4c0 	call	19f4c <altera_avalon_fifo_init>

	//initialization of FIFOs
	init_input_fifo_wrclk_control(FIFO_SINK_0_IN_CSR_BASE);
	init_input_fifo_wrclk_control(FIFO_SOURCE_0_IN_CSR_BASE);

	alt_putstr("source status:\n");
   18588:	010000b4 	movhi	r4,2
   1858c:	21289404 	addi	r4,r4,-23984
   18590:	0019d980 	call	19d98 <alt_putstr>
	print_status(FIFO_SOURCE_0_IN_CSR_BASE);
   18594:	01240014 	movui	r4,36864
   18598:	00180f80 	call	180f8 <print_status>

	alt_putstr("sink status:\n");
   1859c:	010000b4 	movhi	r4,2
   185a0:	21289804 	addi	r4,r4,-23968
   185a4:	0019d980 	call	19d98 <alt_putstr>
	print_status(FIFO_SINK_0_IN_CSR_BASE);
   185a8:	01240814 	movui	r4,36896
   185ac:	00180f80 	call	180f8 <print_status>

	//init_buffer();
	alt_putstr("before init_structures\n");
   185b0:	010000b4 	movhi	r4,2
   185b4:	21289c04 	addi	r4,r4,-23952
   185b8:	0019d980 	call	19d98 <alt_putstr>
	init_structures();
   185bc:	00188500 	call	18850 <init_structures>
	alt_putstr("after init_structures\n");
   185c0:	010000b4 	movhi	r4,2
   185c4:	2128a204 	addi	r4,r4,-23928
   185c8:	0019d980 	call	19d98 <alt_putstr>

	//while(1){

	  for(int i = 0; i < 1 /*number of process_0's input(0) ports*/; ++i){
		  alt_putstr("before get edge(for receive)\n");
   185cc:	010000b4 	movhi	r4,2
   185d0:	2128a804 	addi	r4,r4,-23904
   185d4:	0019d980 	call	19d98 <alt_putstr>
		  struct Edge *edge = get_edge(0,i,0/*it means input edges*/);
   185d8:	000d883a 	mov	r6,zero
   185dc:	000b883a 	mov	r5,zero
   185e0:	0009883a 	mov	r4,zero
   185e4:	00187340 	call	18734 <get_edge>

		  printf("edge node source: %d\n",edge->node_src);
   185e8:	11400003 	ldbu	r5,0(r2)
   185ec:	010000b4 	movhi	r4,2
   185f0:	2128b004 	addi	r4,r4,-23872

	//while(1){

	  for(int i = 0; i < 1 /*number of process_0's input(0) ports*/; ++i){
		  alt_putstr("before get edge(for receive)\n");
		  struct Edge *edge = get_edge(0,i,0/*it means input edges*/);
   185f4:	1021883a 	mov	r16,r2

		  printf("edge node source: %d\n",edge->node_src);
   185f8:	00192a00 	call	192a0 <printf>
		  printf("edge node dest: %d\n",edge->node_dest);
   185fc:	81400043 	ldbu	r5,1(r16)
   18600:	010000b4 	movhi	r4,2
   18604:	2128b604 	addi	r4,r4,-23848
   18608:	00192a00 	call	192a0 <printf>
		  printf("edge proc source: %d\n",edge->proc_src);
   1860c:	8140008b 	ldhu	r5,2(r16)
   18610:	010000b4 	movhi	r4,2
   18614:	2128bb04 	addi	r4,r4,-23828
   18618:	00192a00 	call	192a0 <printf>
		  printf("edge proc source: %d\n",edge->proc_dest);
   1861c:	8140010b 	ldhu	r5,4(r16)
   18620:	010000b4 	movhi	r4,2
   18624:	2128bb04 	addi	r4,r4,-23828
   18628:	00192a00 	call	192a0 <printf>

		  alt_putstr("before read_data\n");
   1862c:	010000b4 	movhi	r4,2
   18630:	2128c104 	addi	r4,r4,-23804
   18634:	0019d980 	call	19d98 <alt_putstr>
		  read_data(edge,0/*which process*/, i/*which input*/);
   18638:	000d883a 	mov	r6,zero
   1863c:	000b883a 	mov	r5,zero
   18640:	8009883a 	mov	r4,r16
   18644:	00182d00 	call	182d0 <read_data>
		  alt_putstr("after read_data\n");
   18648:	010000b4 	movhi	r4,2
   1864c:	2128c604 	addi	r4,r4,-23784
   18650:	0019d980 	call	19d98 <alt_putstr>
	  }

	  alt_putstr("before call proc_0\n");
   18654:	010000b4 	movhi	r4,2
   18658:	2128cb04 	addi	r4,r4,-23764
   1865c:	0019d980 	call	19d98 <alt_putstr>
	  proc_0(proc_0_inps, proc_0_outs);
   18660:	d80b883a 	mov	r5,sp
   18664:	d9000104 	addi	r4,sp,4
   18668:	001805c0 	call	1805c <proc_0>
	  alt_putstr("after call proc_0\n");
   1866c:	010000b4 	movhi	r4,2
   18670:	2128d004 	addi	r4,r4,-23744
   18674:	0019d980 	call	19d98 <alt_putstr>


	  for(int i = 0; i < 1 /*number of process_0's output(1) ports*/ ; ++i){

		  alt_putstr("before get edge(for send)\n");
   18678:	010000b4 	movhi	r4,2
   1867c:	2128d504 	addi	r4,r4,-23724
   18680:	0019d980 	call	19d98 <alt_putstr>
		  struct Edge *edge = get_edge(0,i,1/*it means output edges*/);
   18684:	01800044 	movi	r6,1
   18688:	000b883a 	mov	r5,zero
   1868c:	0009883a 	mov	r4,zero
   18690:	00187340 	call	18734 <get_edge>

		  printf("edge node source: %d\n",edge->node_src);
   18694:	11400003 	ldbu	r5,0(r2)
   18698:	010000b4 	movhi	r4,2
   1869c:	2128b004 	addi	r4,r4,-23872


	  for(int i = 0; i < 1 /*number of process_0's output(1) ports*/ ; ++i){

		  alt_putstr("before get edge(for send)\n");
		  struct Edge *edge = get_edge(0,i,1/*it means output edges*/);
   186a0:	1021883a 	mov	r16,r2

		  printf("edge node source: %d\n",edge->node_src);
   186a4:	00192a00 	call	192a0 <printf>
		  printf("edge node dest: %d\n",  edge->node_dest);
   186a8:	81400043 	ldbu	r5,1(r16)
   186ac:	010000b4 	movhi	r4,2
   186b0:	2128b604 	addi	r4,r4,-23848
   186b4:	00192a00 	call	192a0 <printf>
		  printf("edge proc source: %d\n",edge->proc_src);
   186b8:	8140008b 	ldhu	r5,2(r16)
   186bc:	010000b4 	movhi	r4,2
   186c0:	2128bb04 	addi	r4,r4,-23828
   186c4:	00192a00 	call	192a0 <printf>
		  printf("edge proc source: %d\n",edge->proc_dest);
   186c8:	8140010b 	ldhu	r5,4(r16)
   186cc:	010000b4 	movhi	r4,2
   186d0:	2128bb04 	addi	r4,r4,-23828
   186d4:	00192a00 	call	192a0 <printf>

		  alt_putstr("before send_data\n");
   186d8:	010000b4 	movhi	r4,2
   186dc:	2128dc04 	addi	r4,r4,-23696
   186e0:	0019d980 	call	19d98 <alt_putstr>
		  send_data(edge,0/*which process*/, i/*which output*/);
   186e4:	000d883a 	mov	r6,zero
   186e8:	000b883a 	mov	r5,zero
   186ec:	8009883a 	mov	r4,r16
   186f0:	00184900 	call	18490 <send_data>
		  alt_putstr("after send_data\n");
   186f4:	010000b4 	movhi	r4,2
   186f8:	2128e104 	addi	r4,r4,-23676
   186fc:	0019d980 	call	19d98 <alt_putstr>

	alt_putstr("read from FIFO:\n");
	receive_packet(receive_array);*/

	// clean up proc 0
	free(proc_0_inp_0);
   18700:	d1204217 	ldw	r4,-32504(gp)
   18704:	0018fec0 	call	18fec <free>
	free(proc_0_out_0);
   18708:	d1204517 	ldw	r4,-32492(gp)
   1870c:	0018fec0 	call	18fec <free>

	// clean up proc 1
	free(proc_1_inp_0);
   18710:	d1204817 	ldw	r4,-32480(gp)
   18714:	0018fec0 	call	18fec <free>
	free(proc_1_inp_1);
   18718:	d1204717 	ldw	r4,-32484(gp)
   1871c:	0018fec0 	call	18fec <free>
	free(proc_1_out_0);
   18720:	d1204417 	ldw	r4,-32496(gp)
   18724:	0018fec0 	call	18fec <free>
	free(proc_1_out_1);
   18728:	d1204317 	ldw	r4,-32500(gp)
   1872c:	0018fec0 	call	18fec <free>
   18730:	003fff06 	br	18730 <_gp+0xffff6218>

00018734 <get_edge>:
struct Edge edges[5];
/****************** Structure ******************/

struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   18734:	31803fcc 	andi	r6,r6,255
   18738:	30000f1e 	bne	r6,zero,18778 <get_edge+0x44>
        if (proc_num == 0) {
   1873c:	21003fcc 	andi	r4,r4,255
   18740:	2000051e 	bne	r4,zero,18758 <get_edge+0x24>
            if (port_num == 0) {
   18744:	29403fcc 	andi	r5,r5,255
   18748:	28001f1e 	bne	r5,zero,187c8 <get_edge+0x94>
                return &edge_p5_p0;
   1874c:	008000b4 	movhi	r2,2
   18750:	10aa1304 	addi	r2,r2,-22452
   18754:	f800283a 	ret
            }
        }
        if (proc_num == 1) {
   18758:	00800044 	movi	r2,1
   1875c:	20801a1e 	bne	r4,r2,187c8 <get_edge+0x94>
            if (port_num == 0) {
   18760:	29403fcc 	andi	r5,r5,255
   18764:	28001226 	beq	r5,zero,187b0 <get_edge+0x7c>
                return &edge_p0_p1;
            }
            if (port_num == 1) {
   18768:	2900171e 	bne	r5,r4,187c8 <get_edge+0x94>
                return &edge_p4_p1;
   1876c:	008000b4 	movhi	r2,2
   18770:	10aa1704 	addi	r2,r2,-22436
   18774:	f800283a 	ret
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   18778:	00800044 	movi	r2,1
   1877c:	3080121e 	bne	r6,r2,187c8 <get_edge+0x94>
        if (proc_num == 0) {
   18780:	21003fcc 	andi	r4,r4,255
   18784:	2000031e 	bne	r4,zero,18794 <get_edge+0x60>
            if (port_num == 0) {
   18788:	29403fcc 	andi	r5,r5,255
   1878c:	28000e1e 	bne	r5,zero,187c8 <get_edge+0x94>
   18790:	00000706 	br	187b0 <get_edge+0x7c>
                return &edge_p0_p1;
            }
        }
        if (proc_num == 1) {
   18794:	21800c1e 	bne	r4,r6,187c8 <get_edge+0x94>
            if (port_num == 0) {
   18798:	29403fcc 	andi	r5,r5,255
   1879c:	28000726 	beq	r5,zero,187bc <get_edge+0x88>
                return &edge_p1_p2;
            }
            if (port_num == 1) {
   187a0:	2900091e 	bne	r5,r4,187c8 <get_edge+0x94>
                return &edge_p1_p3;
   187a4:	008000b4 	movhi	r2,2
   187a8:	10a9f704 	addi	r2,r2,-22564
   187ac:	f800283a 	ret
                return &edge_p5_p0;
            }
        }
        if (proc_num == 1) {
            if (port_num == 0) {
                return &edge_p0_p1;
   187b0:	008000b4 	movhi	r2,2
   187b4:	10aa0f04 	addi	r2,r2,-22468
   187b8:	f800283a 	ret
                return &edge_p0_p1;
            }
        }
        if (proc_num == 1) {
            if (port_num == 0) {
                return &edge_p1_p2;
   187bc:	008000b4 	movhi	r2,2
   187c0:	10aa1b04 	addi	r2,r2,-22420
   187c4:	f800283a 	ret
                return &edge_p1_p3;
            }
        }
    }

    return 0;
   187c8:	0005883a 	mov	r2,zero
}
   187cc:	f800283a 	ret

000187d0 <get_buffer>:

ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   187d0:	00c000b4 	movhi	r3,2
   187d4:	18e9fb84 	addi	r3,r3,-22546
    for (int i = 0; i < 5; i++) {
   187d8:	0005883a 	mov	r2,zero
        if (edges[i].proc_src == proc_src) {
   187dc:	213fffcc 	andi	r4,r4,65535
            if (edges[i].proc_dest == proc_dest) {
   187e0:	297fffcc 	andi	r5,r5,65535
    return 0;
}

ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 5; i++) {
   187e4:	01800144 	movi	r6,5
        if (edges[i].proc_src == proc_src) {
   187e8:	19c0000b 	ldhu	r7,0(r3)
   187ec:	3900081e 	bne	r7,r4,18810 <get_buffer+0x40>
            if (edges[i].proc_dest == proc_dest) {
   187f0:	19c0008b 	ldhu	r7,2(r3)
   187f4:	3940061e 	bne	r7,r5,18810 <get_buffer+0x40>
                return edges[i].buffer;
   187f8:	1004913a 	slli	r2,r2,4
   187fc:	00c000b4 	movhi	r3,2
   18800:	18e9fd04 	addi	r3,r3,-22540
   18804:	10c5883a 	add	r2,r2,r3
   18808:	10800017 	ldw	r2,0(r2)
   1880c:	f800283a 	ret
    return 0;
}

ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 5; i++) {
   18810:	10800044 	addi	r2,r2,1
   18814:	18c00404 	addi	r3,r3,16
   18818:	11bff31e 	bne	r2,r6,187e8 <_gp+0xffff62d0>
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
            }
        }
    }
    return 0;
   1881c:	0005883a 	mov	r2,zero
}
   18820:	f800283a 	ret

00018824 <init_buffer>:
		}
	}
	return 0;
}*/

void init_buffer(){
   18824:	deff9d04 	addi	sp,sp,-396
	ring_buffer_t buff_p5_p0;
	ring_buffer_init(&buff_p5_p0);
   18828:	d9004104 	addi	r4,sp,260
		}
	}
	return 0;
}*/

void init_buffer(){
   1882c:	dfc06215 	stw	ra,392(sp)
	ring_buffer_t buff_p5_p0;
	ring_buffer_init(&buff_p5_p0);
   18830:	0018e380 	call	18e38 <ring_buffer_init>

	ring_buffer_t buff_p0_p1;
	ring_buffer_init(&buff_p0_p1);
   18834:	d9002084 	addi	r4,sp,130
   18838:	0018e380 	call	18e38 <ring_buffer_init>

	ring_buffer_t buff_p4_p1;
	ring_buffer_init(&buff_p4_p1);
   1883c:	d809883a 	mov	r4,sp
   18840:	0018e380 	call	18e38 <ring_buffer_init>
}
   18844:	dfc06217 	ldw	ra,392(sp)
   18848:	dec06304 	addi	sp,sp,396
   1884c:	f800283a 	ret

00018850 <init_structures>:

void init_structures(){
   18850:	defffa04 	addi	sp,sp,-24
   18854:	dfc00515 	stw	ra,20(sp)
   18858:	dd000415 	stw	r20,16(sp)
   1885c:	dcc00315 	stw	r19,12(sp)
   18860:	dc800215 	stw	r18,8(sp)
   18864:	dc400115 	stw	r17,4(sp)
   18868:	dc000015 	stw	r16,0(sp)
	init_buffer();
   1886c:	00188240 	call	18824 <init_buffer>

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   18870:	014000b4 	movhi	r5,2
   18874:	296a1304 	addi	r5,r5,-22452
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
   18878:	00800144 	movi	r2,5
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_token = 1;
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;

	edges[0] = edge_p5_p0;
   1887c:	044000b4 	movhi	r17,2
   18880:	04800404 	movi	r18,16
   18884:	8c69fb04 	addi	r17,r17,-22548
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
   18888:	2880008d 	sth	r2,2(r5)
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_token = 1;
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   1888c:	008000b4 	movhi	r2,2
	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_token = 1;
   18890:	04000044 	movi	r16,1

void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   18894:	05000084 	movi	r20,2
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_token = 1;
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;

	edges[0] = edge_p5_p0;
   18898:	900d883a 	mov	r6,r18
   1889c:	8809883a 	mov	r4,r17
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_token = 1;
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   188a0:	10a9b584 	addi	r2,r2,-22826

void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   188a4:	2d000005 	stb	r20,0(r5)
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_token = 1;
   188a8:	2c000185 	stb	r16,6(r5)
	edge_p5_p0.external = 1;
   188ac:	2c000305 	stb	r16,12(r5)
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
   188b0:	28000045 	stb	zero,1(r5)
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
   188b4:	2800010d 	sth	zero,4(r5)
	edge_p5_p0.num_of_token = 1;
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   188b8:	28800215 	stw	r2,8(r5)

	edges[0] = edge_p5_p0;
   188bc:	00190000 	call	19000 <memcpy>


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   188c0:	014000b4 	movhi	r5,2
	edge_p0_p1.node_dest = 1;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_token = 1;
	edge_p0_p1.external = 1;
	edge_p0_p1.buffer = &buff_p0_p1;
   188c4:	008000b4 	movhi	r2,2

	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   188c8:	296a0f04 	addi	r5,r5,-22468
	edge_p0_p1.node_dest = 1;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
   188cc:	04c00044 	movi	r19,1
	edge_p0_p1.num_of_token = 1;
	edge_p0_p1.external = 1;
	edge_p0_p1.buffer = &buff_p0_p1;

	edges[1] = edge_p0_p1;
   188d0:	900d883a 	mov	r6,r18
   188d4:	8c89883a 	add	r4,r17,r18
	edge_p0_p1.node_dest = 1;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_token = 1;
	edge_p0_p1.external = 1;
	edge_p0_p1.buffer = &buff_p0_p1;
   188d8:	10a9d604 	addi	r2,r2,-22696
	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
	edge_p0_p1.node_dest = 1;
   188dc:	2c000045 	stb	r16,1(r5)
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
   188e0:	2cc0010d 	sth	r19,4(r5)
	edge_p0_p1.num_of_token = 1;
   188e4:	2cc00185 	stb	r19,6(r5)
	edge_p0_p1.external = 1;
   188e8:	2c000305 	stb	r16,12(r5)

	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   188ec:	28000005 	stb	zero,0(r5)
	edge_p0_p1.node_dest = 1;
	edge_p0_p1.proc_src = 0;
   188f0:	2800008d 	sth	zero,2(r5)
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_token = 1;
	edge_p0_p1.external = 1;
	edge_p0_p1.buffer = &buff_p0_p1;
   188f4:	28800215 	stw	r2,8(r5)

	edges[1] = edge_p0_p1;
   188f8:	00190000 	call	19000 <memcpy>


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   188fc:	014000b4 	movhi	r5,2
   18900:	296a1704 	addi	r5,r5,-22436
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
   18904:	00800104 	movi	r2,4
   18908:	2880008d 	sth	r2,2(r5)
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_token = 1;
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   1890c:	008000b4 	movhi	r2,2

	edges[2] = edge_p4_p1;
   18910:	900d883a 	mov	r6,r18
   18914:	89000804 	addi	r4,r17,32
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_token = 1;
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18918:	10a99504 	addi	r2,r2,-22956

	edges[1] = edge_p0_p1;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   1891c:	2d000005 	stb	r20,0(r5)
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
   18920:	2cc0010d 	sth	r19,4(r5)
	edge_p4_p1.num_of_token = 1;
   18924:	2c000185 	stb	r16,6(r5)
	edge_p4_p1.external = 1;
   18928:	2c000305 	stb	r16,12(r5)
	edges[1] = edge_p0_p1;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
	edge_p4_p1.node_dest = 0;
   1892c:	28000045 	stb	zero,1(r5)
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_token = 1;
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18930:	28800215 	stw	r2,8(r5)

	edges[2] = edge_p4_p1;
   18934:	00190000 	call	19000 <memcpy>


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   18938:	014000b4 	movhi	r5,2
   1893c:	296a1b04 	addi	r5,r5,-22420
	edge_p1_p2.node_dest = 2;
   18940:	2d000045 	stb	r20,1(r5)
	edge_p1_p2.proc_src = 2;
	edge_p1_p2.proc_dest = 3;
	edge_p1_p2.num_of_token = 1;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   18944:	900d883a 	mov	r6,r18

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 2;
	edge_p1_p2.proc_src = 2;
	edge_p1_p2.proc_dest = 3;
   18948:	050000c4 	movi	r20,3
	edge_p1_p2.num_of_token = 1;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   1894c:	89000c04 	addi	r4,r17,48


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 2;
	edge_p1_p2.proc_src = 2;
   18950:	00800084 	movi	r2,2
	edge_p1_p2.proc_dest = 3;
   18954:	2d00010d 	sth	r20,4(r5)
	edge_p1_p2.num_of_token = 1;
   18958:	2c000185 	stb	r16,6(r5)
	edge_p1_p2.external = 1;
   1895c:	2c000305 	stb	r16,12(r5)

	edges[2] = edge_p4_p1;


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   18960:	28000005 	stb	zero,0(r5)
	edge_p1_p2.node_dest = 2;
	edge_p1_p2.proc_src = 2;
   18964:	2880008d 	sth	r2,2(r5)
	edge_p1_p2.proc_dest = 3;
	edge_p1_p2.num_of_token = 1;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   18968:	00190000 	call	19000 <memcpy>


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   1896c:	014000b4 	movhi	r5,2
   18970:	2969f704 	addi	r5,r5,-22564
	edge_p1_p3.proc_src = 1;
	edge_p1_p3.proc_dest = 3;
	edge_p1_p3.num_of_token = 1;
	edge_p1_p3.external = 1;

	edges[4] = edge_p1_p3;
   18974:	900d883a 	mov	r6,r18
   18978:	89001004 	addi	r4,r17,64

	edges[3] = edge_p1_p2;


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   1897c:	28000005 	stb	zero,0(r5)
	edge_p1_p3.node_dest = 3;
   18980:	2d000045 	stb	r20,1(r5)
	edge_p1_p3.proc_src = 1;
   18984:	2cc0008d 	sth	r19,2(r5)
	edge_p1_p3.proc_dest = 3;
   18988:	2d00010d 	sth	r20,4(r5)
	edge_p1_p3.num_of_token = 1;
   1898c:	2c000185 	stb	r16,6(r5)
	edge_p1_p3.external = 1;
   18990:	2c000305 	stb	r16,12(r5)

	edges[4] = edge_p1_p3;
   18994:	00190000 	call	19000 <memcpy>
}
   18998:	dfc00517 	ldw	ra,20(sp)
   1899c:	dd000417 	ldw	r20,16(sp)
   189a0:	dcc00317 	ldw	r19,12(sp)
   189a4:	dc800217 	ldw	r18,8(sp)
   189a8:	dc400117 	ldw	r17,4(sp)
   189ac:	dc000017 	ldw	r16,0(sp)
   189b0:	dec00604 	addi	sp,sp,24
   189b4:	f800283a 	ret

000189b8 <send_packet>:

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   189b8:	defff904 	addi	sp,sp,-28
   189bc:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   189c0:	25403fcc 	andi	r21,r4,255

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   189c4:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   189c8:	d8800703 	ldbu	r2,28(sp)

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   189cc:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   189d0:	a80c923a 	slli	r6,r21,8
   189d4:	29403fcc 	andi	r5,r5,255
   189d8:	1004943a 	slli	r2,r2,16
   189dc:	314ab03a 	or	r5,r6,r5
   189e0:	a00c943a 	slli	r6,r20,16

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   189e4:	dcc00315 	stw	r19,12(sp)
   189e8:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   189ec:	9cffffcc 	andi	r19,r19,65535

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   189f0:	dc800215 	stw	r18,8(sp)
   189f4:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   189f8:	04a40014 	movui	r18,36864
   189fc:	04641214 	movui	r17,36936
   18a00:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a04:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a08:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a0c:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a10:	298cb03a 	or	r6,r5,r6
   18a14:	8809883a 	mov	r4,r17
   18a18:	900b883a 	mov	r5,r18

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18a1c:	dfc00615 	stw	ra,24(sp)
   18a20:	dc000015 	stw	r16,0(sp)
   18a24:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a28:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a2c:	ace6b03a 	or	r19,r21,r19
   18a30:	a1803fcc 	andi	r6,r20,255
   18a34:	998cb03a 	or	r6,r19,r6
   18a38:	900b883a 	mov	r5,r18
   18a3c:	8809883a 	mov	r4,r17
   18a40:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>
   18a44:	80800043 	ldbu	r2,1(r16)
   18a48:	81000003 	ldbu	r4,0(r16)
   18a4c:	818000c3 	ldbu	r6,3(r16)
   18a50:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a54:	900b883a 	mov	r5,r18
   18a58:	300c963a 	slli	r6,r6,24
   18a5c:	1106b03a 	or	r3,r2,r4
   18a60:	80800083 	ldbu	r2,2(r16)
   18a64:	8809883a 	mov	r4,r17
   18a68:	1004943a 	slli	r2,r2,16
   18a6c:	10c4b03a 	or	r2,r2,r3
   18a70:	308cb03a 	or	r6,r6,r2
   18a74:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>
   18a78:	80800143 	ldbu	r2,5(r16)
   18a7c:	81000103 	ldbu	r4,4(r16)
   18a80:	818001c3 	ldbu	r6,7(r16)
   18a84:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18a88:	900b883a 	mov	r5,r18
   18a8c:	300c963a 	slli	r6,r6,24
   18a90:	1106b03a 	or	r3,r2,r4
   18a94:	80800183 	ldbu	r2,6(r16)
   18a98:	8809883a 	mov	r4,r17
   18a9c:	1004943a 	slli	r2,r2,16
   18aa0:	10c4b03a 	or	r2,r2,r3
   18aa4:	308cb03a 	or	r6,r6,r2
   18aa8:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>
   18aac:	80800243 	ldbu	r2,9(r16)
   18ab0:	81000203 	ldbu	r4,8(r16)
   18ab4:	818002c3 	ldbu	r6,11(r16)
   18ab8:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18abc:	900b883a 	mov	r5,r18
   18ac0:	300c963a 	slli	r6,r6,24
   18ac4:	1106b03a 	or	r3,r2,r4
   18ac8:	80800283 	ldbu	r2,10(r16)
   18acc:	8809883a 	mov	r4,r17
   18ad0:	1004943a 	slli	r2,r2,16
   18ad4:	10c4b03a 	or	r2,r2,r3
   18ad8:	308cb03a 	or	r6,r6,r2
   18adc:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>
   18ae0:	80800343 	ldbu	r2,13(r16)
   18ae4:	81000303 	ldbu	r4,12(r16)
   18ae8:	818003c3 	ldbu	r6,15(r16)
   18aec:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18af0:	900b883a 	mov	r5,r18
   18af4:	300c963a 	slli	r6,r6,24
   18af8:	1106b03a 	or	r3,r2,r4
   18afc:	80800383 	ldbu	r2,14(r16)
   18b00:	8809883a 	mov	r4,r17
   18b04:	1004943a 	slli	r2,r2,16
   18b08:	10c4b03a 	or	r2,r2,r3
   18b0c:	308cb03a 	or	r6,r6,r2
   18b10:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>
   18b14:	80800443 	ldbu	r2,17(r16)
   18b18:	81000403 	ldbu	r4,16(r16)
   18b1c:	818004c3 	ldbu	r6,19(r16)
   18b20:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b24:	900b883a 	mov	r5,r18
   18b28:	300c963a 	slli	r6,r6,24
   18b2c:	1106b03a 	or	r3,r2,r4
   18b30:	80800483 	ldbu	r2,18(r16)
   18b34:	8809883a 	mov	r4,r17
   18b38:	1004943a 	slli	r2,r2,16
   18b3c:	10c4b03a 	or	r2,r2,r3
   18b40:	308cb03a 	or	r6,r6,r2
   18b44:	0019fe40 	call	19fe4 <altera_avalon_fifo_write_fifo>
   18b48:	80800543 	ldbu	r2,21(r16)
   18b4c:	81000503 	ldbu	r4,20(r16)
   18b50:	818005c3 	ldbu	r6,23(r16)
   18b54:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b58:	900b883a 	mov	r5,r18
   18b5c:	300c963a 	slli	r6,r6,24
   18b60:	1106b03a 	or	r3,r2,r4
   18b64:	80800583 	ldbu	r2,22(r16)
   18b68:	8809883a 	mov	r4,r17
   18b6c:	1004943a 	slli	r2,r2,16
   18b70:	10c4b03a 	or	r2,r2,r3
   18b74:	308cb03a 	or	r6,r6,r2

}
   18b78:	dfc00617 	ldw	ra,24(sp)
   18b7c:	dd400517 	ldw	r21,20(sp)
   18b80:	dd000417 	ldw	r20,16(sp)
   18b84:	dcc00317 	ldw	r19,12(sp)
   18b88:	dc800217 	ldw	r18,8(sp)
   18b8c:	dc400117 	ldw	r17,4(sp)
   18b90:	dc000017 	ldw	r16,0(sp)
   18b94:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b98:	0019fe41 	jmpi	19fe4 <altera_avalon_fifo_write_fifo>

00018b9c <read_payload>:

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   18b9c:	defffb04 	addi	sp,sp,-20
   18ba0:	dcc00315 	stw	r19,12(sp)
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   18ba4:	04c000b4 	movhi	r19,2
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   18ba8:	dfc00415 	stw	ra,16(sp)
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   18bac:	9ce8ec04 	addi	r19,r19,-23632
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   18bb0:	dc800215 	stw	r18,8(sp)
   18bb4:	dc400115 	stw	r17,4(sp)
   18bb8:	dc000015 	stw	r16,0(sp)
	*(payload + 0 + byte_coef) = temp;
   18bbc:	3145883a 	add	r2,r6,r5
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   18bc0:	2021883a 	mov	r16,r4
   18bc4:	3025883a 	mov	r18,r6
	*(payload + 0 + byte_coef) = temp;
   18bc8:	11000005 	stb	r4,0(r2)
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   18bcc:	21803fcc 	andi	r6,r4,255
   18bd0:	9809883a 	mov	r4,r19
    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
   18bd4:	2823883a 	mov	r17,r5
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
   18bd8:	00192a00 	call	192a0 <printf>
	temp >>= 8;
   18bdc:	800cd23a 	srli	r6,r16,8
	
	*(payload + 1 + byte_coef) = temp;
   18be0:	89400044 	addi	r5,r17,1
   18be4:	9145883a 	add	r2,r18,r5
	printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
   18be8:	9809883a 	mov	r4,r19
void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   18bec:	11800005 	stb	r6,0(r2)
	printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
   18bf0:	31803fcc 	andi	r6,r6,255
   18bf4:	00192a00 	call	192a0 <printf>
	temp >>= 8;
   18bf8:	800cd43a 	srli	r6,r16,16
	
	*(payload + 2 + byte_coef) = temp;
   18bfc:	89400084 	addi	r5,r17,2
   18c00:	9145883a 	add	r2,r18,r5
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
   18c04:	9809883a 	mov	r4,r19
	
	*(payload + 1 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   18c08:	11800005 	stb	r6,0(r2)
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
   18c0c:	31803fcc 	andi	r6,r6,255
   18c10:	00192a00 	call	192a0 <printf>
	temp >>= 8;
   18c14:	800cd63a 	srli	r6,r16,24
	
	*(payload + 3 + byte_coef) = temp;
   18c18:	894000c4 	addi	r5,r17,3
   18c1c:	9165883a 	add	r18,r18,r5
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
   18c20:	9809883a 	mov	r4,r19
	
	*(payload + 2 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   18c24:	91800005 	stb	r6,0(r18)
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}
   18c28:	dfc00417 	ldw	ra,16(sp)
   18c2c:	dcc00317 	ldw	r19,12(sp)
   18c30:	dc800217 	ldw	r18,8(sp)
   18c34:	dc400117 	ldw	r17,4(sp)
   18c38:	dc000017 	ldw	r16,0(sp)
   18c3c:	dec00504 	addi	sp,sp,20
	*(payload + 2 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
   18c40:	00192a01 	jmpi	192a0 <printf>

00018c44 <receive_packet>:
}

void receive_packet(){
   18c44:	defff504 	addi	sp,sp,-44
   18c48:	dc800815 	stw	r18,32(sp)
   18c4c:	dc400715 	stw	r17,28(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18c50:	04a40814 	movui	r18,36896
   18c54:	04641014 	movui	r17,36928
   18c58:	900b883a 	mov	r5,r18
   18c5c:	8809883a 	mov	r4,r17
	
	*(payload + 3 + byte_coef) = temp;
	printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   18c60:	dfc00a15 	stw	ra,40(sp)
   18c64:	dcc00915 	stw	r19,36(sp)
   18c68:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18c6c:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	node_dest = temp;
	printf("node destination = %d\n",node_dest);
   18c70:	010000b4 	movhi	r4,2
   18c74:	11403fcc 	andi	r5,r2,255
   18c78:	2128f104 	addi	r4,r4,-23612
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18c7c:	1021883a 	mov	r16,r2
	node_dest = temp;
	printf("node destination = %d\n",node_dest);
   18c80:	00192a00 	call	192a0 <printf>
	temp >>= 8;
   18c84:	800ad23a 	srli	r5,r16,8

	node_src = temp;
	printf("node source = %d\n",node_src);
   18c88:	010000b4 	movhi	r4,2
   18c8c:	2128f704 	addi	r4,r4,-23588
   18c90:	29403fcc 	andi	r5,r5,255
   18c94:	00192a00 	call	192a0 <printf>
	temp >>= 8;
   18c98:	800ad43a 	srli	r5,r16,16

	packet_size = temp;
	printf("packet_size = %d\n",packet_size);
   18c9c:	010000b4 	movhi	r4,2
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   18ca0:	8020d63a 	srli	r16,r16,24
	node_src = temp;
	printf("node source = %d\n",node_src);
	temp >>= 8;

	packet_size = temp;
	printf("packet_size = %d\n",packet_size);
   18ca4:	29403fcc 	andi	r5,r5,255
   18ca8:	2128fc04 	addi	r4,r4,-23568
   18cac:	00192a00 	call	192a0 <printf>
	src_proc = src_high;
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18cb0:	900b883a 	mov	r5,r18
   18cb4:	8809883a 	mov	r4,r17
	printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   18cb8:	8020923a 	slli	r16,r16,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18cbc:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
   18cc0:	1027883a 	mov	r19,r2
	src_low = temp;
	src_proc |= src_low;
	temp >>= 8;
	dst_proc = temp;
	printf("source process = %d\n",src_proc);
   18cc4:	10803fcc 	andi	r2,r2,255
   18cc8:	1420b03a 	or	r16,r2,r16
   18ccc:	010000b4 	movhi	r4,2
	printf("destination process = %d\n",dst_proc);
   18cd0:	9826d23a 	srli	r19,r19,8
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
	temp >>= 8;
	dst_proc = temp;
	printf("source process = %d\n",src_proc);
   18cd4:	800b883a 	mov	r5,r16
   18cd8:	21290104 	addi	r4,r4,-23548
   18cdc:	00192a00 	call	192a0 <printf>
	printf("destination process = %d\n",dst_proc);
   18ce0:	9cffffcc 	andi	r19,r19,65535
   18ce4:	010000b4 	movhi	r4,2
   18ce8:	980b883a 	mov	r5,r19
   18cec:	21290704 	addi	r4,r4,-23524
   18cf0:	00192a00 	call	192a0 <printf>


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18cf4:	900b883a 	mov	r5,r18
   18cf8:	8809883a 	mov	r4,r17
   18cfc:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   18d00:	d80d883a 	mov	r6,sp
   18d04:	1009883a 	mov	r4,r2
   18d08:	000b883a 	mov	r5,zero
   18d0c:	0018b9c0 	call	18b9c <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d10:	900b883a 	mov	r5,r18
   18d14:	8809883a 	mov	r4,r17
   18d18:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   18d1c:	d80d883a 	mov	r6,sp
   18d20:	1009883a 	mov	r4,r2
   18d24:	01400104 	movi	r5,4
   18d28:	0018b9c0 	call	18b9c <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d2c:	900b883a 	mov	r5,r18
   18d30:	8809883a 	mov	r4,r17
   18d34:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   18d38:	d80d883a 	mov	r6,sp
   18d3c:	1009883a 	mov	r4,r2
   18d40:	01400204 	movi	r5,8
   18d44:	0018b9c0 	call	18b9c <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d48:	900b883a 	mov	r5,r18
   18d4c:	8809883a 	mov	r4,r17
   18d50:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   18d54:	d80d883a 	mov	r6,sp
   18d58:	1009883a 	mov	r4,r2
   18d5c:	01400304 	movi	r5,12
   18d60:	0018b9c0 	call	18b9c <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d64:	900b883a 	mov	r5,r18
   18d68:	8809883a 	mov	r4,r17
   18d6c:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   18d70:	d80d883a 	mov	r6,sp
   18d74:	1009883a 	mov	r4,r2
   18d78:	01400404 	movi	r5,16
   18d7c:	0018b9c0 	call	18b9c <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d80:	900b883a 	mov	r5,r18
   18d84:	8809883a 	mov	r4,r17
   18d88:	001a0280 	call	1a028 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   18d8c:	d80d883a 	mov	r6,sp
   18d90:	1009883a 	mov	r4,r2
   18d94:	01400504 	movi	r5,20
   18d98:	0018b9c0 	call	18b9c <read_payload>

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);
   18d9c:	980b883a 	mov	r5,r19
   18da0:	8009883a 	mov	r4,r16
   18da4:	00187d00 	call	187d0 <get_buffer>

	ring_buffer_queue_arr(buffer,payload,24);
   18da8:	01800604 	movi	r6,24
   18dac:	d80b883a 	mov	r5,sp
   18db0:	1009883a 	mov	r4,r2
   18db4:	0018e840 	call	18e84 <ring_buffer_queue_arr>
}
   18db8:	dfc00a17 	ldw	ra,40(sp)
   18dbc:	dcc00917 	ldw	r19,36(sp)
   18dc0:	dc800817 	ldw	r18,32(sp)
   18dc4:	dc400717 	ldw	r17,28(sp)
   18dc8:	dc000617 	ldw	r16,24(sp)
   18dcc:	dec00b04 	addi	sp,sp,44
   18dd0:	f800283a 	ret

00018dd4 <receive_poll>:

void receive_poll(){
   18dd4:	deffff04 	addi	sp,sp,-4
   18dd8:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   18ddc:	01400fc4 	movi	r5,63
   18de0:	01240814 	movui	r4,36896
   18de4:	0019ea00 	call	19ea0 <altera_avalon_fifo_read_status>
}

void receive_poll(){
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
   18de8:	1080008c 	andi	r2,r2,2
   18dec:	103ffb1e 	bne	r2,zero,18ddc <_gp+0xffff68c4>
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    }
}
   18df0:	dfc00017 	ldw	ra,0(sp)
   18df4:	dec00104 	addi	sp,sp,4
   18df8:	f800283a 	ret

00018dfc <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   18dfc:	20c02043 	ldbu	r3,129(r4)
   18e00:	20802003 	ldbu	r2,128(r4)
   18e04:	1885003a 	cmpeq	r2,r3,r2
}
   18e08:	f800283a 	ret

00018e0c <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   18e0c:	20802043 	ldbu	r2,129(r4)
   18e10:	20c02003 	ldbu	r3,128(r4)
   18e14:	10c5c83a 	sub	r2,r2,r3
   18e18:	10801fcc 	andi	r2,r2,127
   18e1c:	10801fe0 	cmpeqi	r2,r2,127
}
   18e20:	f800283a 	ret

00018e24 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   18e24:	20802043 	ldbu	r2,129(r4)
   18e28:	20c02003 	ldbu	r3,128(r4)
   18e2c:	10c5c83a 	sub	r2,r2,r3
}
   18e30:	10801fcc 	andi	r2,r2,127
   18e34:	f800283a 	ret

00018e38 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   18e38:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   18e3c:	20002045 	stb	zero,129(r4)
   18e40:	f800283a 	ret

00018e44 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   18e44:	20802043 	ldbu	r2,129(r4)
   18e48:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   18e4c:	02001fc4 	movi	r8,127
   18e50:	11803fcc 	andi	r6,r2,255
   18e54:	30cfc83a 	sub	r7,r6,r3
   18e58:	39c01fcc 	andi	r7,r7,127
   18e5c:	3a00031e 	bne	r7,r8,18e6c <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   18e60:	18c00044 	addi	r3,r3,1
   18e64:	1a06703a 	and	r3,r3,r8
   18e68:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   18e6c:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   18e70:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   18e74:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   18e78:	10801fcc 	andi	r2,r2,127
   18e7c:	20802045 	stb	r2,129(r4)
   18e80:	f800283a 	ret

00018e84 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   18e84:	defffc04 	addi	sp,sp,-16
   18e88:	31803fcc 	andi	r6,r6,255
   18e8c:	dc800215 	stw	r18,8(sp)
   18e90:	dc400115 	stw	r17,4(sp)
   18e94:	dc000015 	stw	r16,0(sp)
   18e98:	dfc00315 	stw	ra,12(sp)
   18e9c:	2025883a 	mov	r18,r4
   18ea0:	2821883a 	mov	r16,r5
   18ea4:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   18ea8:	84400526 	beq	r16,r17,18ec0 <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   18eac:	81400007 	ldb	r5,0(r16)
   18eb0:	9009883a 	mov	r4,r18
   18eb4:	84000044 	addi	r16,r16,1
   18eb8:	0018e440 	call	18e44 <ring_buffer_queue>
   18ebc:	003ffa06 	br	18ea8 <_gp+0xffff6990>
  }
}
   18ec0:	dfc00317 	ldw	ra,12(sp)
   18ec4:	dc800217 	ldw	r18,8(sp)
   18ec8:	dc400117 	ldw	r17,4(sp)
   18ecc:	dc000017 	ldw	r16,0(sp)
   18ed0:	dec00404 	addi	sp,sp,16
   18ed4:	f800283a 	ret

00018ed8 <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   18ed8:	20c02043 	ldbu	r3,129(r4)
   18edc:	20802003 	ldbu	r2,128(r4)
   18ee0:	18800926 	beq	r3,r2,18f08 <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   18ee4:	2085883a 	add	r2,r4,r2
   18ee8:	10800003 	ldbu	r2,0(r2)
   18eec:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   18ef0:	20802003 	ldbu	r2,128(r4)
   18ef4:	10800044 	addi	r2,r2,1
   18ef8:	10801fcc 	andi	r2,r2,127
   18efc:	20802005 	stb	r2,128(r4)
  return 1;
   18f00:	00800044 	movi	r2,1
   18f04:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   18f08:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   18f0c:	f800283a 	ret

00018f10 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   18f10:	20c02043 	ldbu	r3,129(r4)
   18f14:	20802003 	ldbu	r2,128(r4)
   18f18:	18801526 	beq	r3,r2,18f70 <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   18f1c:	defffa04 	addi	sp,sp,-24
   18f20:	dcc00315 	stw	r19,12(sp)
   18f24:	dc800215 	stw	r18,8(sp)
   18f28:	dc400115 	stw	r17,4(sp)
   18f2c:	dc000015 	stw	r16,0(sp)
   18f30:	dfc00515 	stw	ra,20(sp)
   18f34:	dd000415 	stw	r20,16(sp)
   18f38:	2827883a 	mov	r19,r5
   18f3c:	2023883a 	mov	r17,r4
   18f40:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   18f44:	0021883a 	mov	r16,zero
   18f48:	9c0b883a 	add	r5,r19,r16
   18f4c:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   18f50:	84800926 	beq	r16,r18,18f78 <ring_buffer_dequeue_arr+0x68>
   18f54:	8809883a 	mov	r4,r17
   18f58:	0018ed80 	call	18ed8 <ring_buffer_dequeue>
   18f5c:	10803fcc 	andi	r2,r2,255
   18f60:	84000044 	addi	r16,r16,1
   18f64:	103ff81e 	bne	r2,zero,18f48 <_gp+0xffff6a30>
   18f68:	a005883a 	mov	r2,r20
   18f6c:	00000306 	br	18f7c <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   18f70:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   18f74:	f800283a 	ret
   18f78:	8005883a 	mov	r2,r16
   18f7c:	dfc00517 	ldw	ra,20(sp)
   18f80:	dd000417 	ldw	r20,16(sp)
   18f84:	dcc00317 	ldw	r19,12(sp)
   18f88:	dc800217 	ldw	r18,8(sp)
   18f8c:	dc400117 	ldw	r17,4(sp)
   18f90:	dc000017 	ldw	r16,0(sp)
   18f94:	dec00604 	addi	sp,sp,24
   18f98:	f800283a 	ret

00018f9c <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   18f9c:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   18fa0:	20c02043 	ldbu	r3,129(r4)
   18fa4:	31c03fcc 	andi	r7,r6,255
   18fa8:	1887c83a 	sub	r3,r3,r2
   18fac:	18c01fcc 	andi	r3,r3,127
   18fb0:	38c0072e 	bgeu	r7,r3,18fd0 <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   18fb4:	3085883a 	add	r2,r6,r2
   18fb8:	10801fcc 	andi	r2,r2,127
   18fbc:	2089883a 	add	r4,r4,r2
   18fc0:	20800003 	ldbu	r2,0(r4)
   18fc4:	28800005 	stb	r2,0(r5)
  return 1;
   18fc8:	00800044 	movi	r2,1
   18fcc:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   18fd0:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   18fd4:	f800283a 	ret

00018fd8 <malloc>:
   18fd8:	008000b4 	movhi	r2,2
   18fdc:	10a94704 	addi	r2,r2,-23268
   18fe0:	200b883a 	mov	r5,r4
   18fe4:	11000017 	ldw	r4,0(r2)
   18fe8:	001910c1 	jmpi	1910c <_malloc_r>

00018fec <free>:
   18fec:	008000b4 	movhi	r2,2
   18ff0:	10a94704 	addi	r2,r2,-23268
   18ff4:	200b883a 	mov	r5,r4
   18ff8:	11000017 	ldw	r4,0(r2)
   18ffc:	00190281 	jmpi	19028 <_free_r>

00019000 <memcpy>:
   19000:	2005883a 	mov	r2,r4
   19004:	2007883a 	mov	r3,r4
   19008:	218d883a 	add	r6,r4,r6
   1900c:	19800526 	beq	r3,r6,19024 <memcpy+0x24>
   19010:	29000003 	ldbu	r4,0(r5)
   19014:	18c00044 	addi	r3,r3,1
   19018:	29400044 	addi	r5,r5,1
   1901c:	193fffc5 	stb	r4,-1(r3)
   19020:	003ffa06 	br	1900c <_gp+0xffff6af4>
   19024:	f800283a 	ret

00019028 <_free_r>:
   19028:	28003726 	beq	r5,zero,19108 <_free_r+0xe0>
   1902c:	28ffff17 	ldw	r3,-4(r5)
   19030:	28bfff04 	addi	r2,r5,-4
   19034:	1800010e 	bge	r3,zero,1903c <_free_r+0x14>
   19038:	10c5883a 	add	r2,r2,r3
   1903c:	014000b4 	movhi	r5,2
   19040:	29699004 	addi	r5,r5,-22976
   19044:	28c00017 	ldw	r3,0(r5)
   19048:	280d883a 	mov	r6,r5
   1904c:	1800031e 	bne	r3,zero,1905c <_free_r+0x34>
   19050:	10000115 	stw	zero,4(r2)
   19054:	28800015 	stw	r2,0(r5)
   19058:	f800283a 	ret
   1905c:	10c00c2e 	bgeu	r2,r3,19090 <_free_r+0x68>
   19060:	11000017 	ldw	r4,0(r2)
   19064:	110b883a 	add	r5,r2,r4
   19068:	1940041e 	bne	r3,r5,1907c <_free_r+0x54>
   1906c:	19400017 	ldw	r5,0(r3)
   19070:	18c00117 	ldw	r3,4(r3)
   19074:	2909883a 	add	r4,r5,r4
   19078:	11000015 	stw	r4,0(r2)
   1907c:	10c00115 	stw	r3,4(r2)
   19080:	30800015 	stw	r2,0(r6)
   19084:	f800283a 	ret
   19088:	11400336 	bltu	r2,r5,19098 <_free_r+0x70>
   1908c:	2807883a 	mov	r3,r5
   19090:	19400117 	ldw	r5,4(r3)
   19094:	283ffc1e 	bne	r5,zero,19088 <_gp+0xffff6b70>
   19098:	19c00017 	ldw	r7,0(r3)
   1909c:	19cd883a 	add	r6,r3,r7
   190a0:	30800a1e 	bne	r6,r2,190cc <_free_r+0xa4>
   190a4:	10800017 	ldw	r2,0(r2)
   190a8:	3885883a 	add	r2,r7,r2
   190ac:	18800015 	stw	r2,0(r3)
   190b0:	1889883a 	add	r4,r3,r2
   190b4:	2900141e 	bne	r5,r4,19108 <_free_r+0xe0>
   190b8:	29000017 	ldw	r4,0(r5)
   190bc:	2085883a 	add	r2,r4,r2
   190c0:	18800015 	stw	r2,0(r3)
   190c4:	28800117 	ldw	r2,4(r5)
   190c8:	00000e06 	br	19104 <_free_r+0xdc>
   190cc:	1180032e 	bgeu	r2,r6,190dc <_free_r+0xb4>
   190d0:	00800304 	movi	r2,12
   190d4:	20800015 	stw	r2,0(r4)
   190d8:	f800283a 	ret
   190dc:	11000017 	ldw	r4,0(r2)
   190e0:	110d883a 	add	r6,r2,r4
   190e4:	2980061e 	bne	r5,r6,19100 <_free_r+0xd8>
   190e8:	29800017 	ldw	r6,0(r5)
   190ec:	3109883a 	add	r4,r6,r4
   190f0:	11000015 	stw	r4,0(r2)
   190f4:	29000117 	ldw	r4,4(r5)
   190f8:	11000115 	stw	r4,4(r2)
   190fc:	00000106 	br	19104 <_free_r+0xdc>
   19100:	11400115 	stw	r5,4(r2)
   19104:	18800115 	stw	r2,4(r3)
   19108:	f800283a 	ret

0001910c <_malloc_r>:
   1910c:	defffb04 	addi	sp,sp,-20
   19110:	00bfff04 	movi	r2,-4
   19114:	dc400115 	stw	r17,4(sp)
   19118:	2c4000c4 	addi	r17,r5,3
   1911c:	88a2703a 	and	r17,r17,r2
   19120:	dc800215 	stw	r18,8(sp)
   19124:	dfc00415 	stw	ra,16(sp)
   19128:	dcc00315 	stw	r19,12(sp)
   1912c:	dc000015 	stw	r16,0(sp)
   19130:	8c400204 	addi	r17,r17,8
   19134:	00800304 	movi	r2,12
   19138:	2025883a 	mov	r18,r4
   1913c:	8880022e 	bgeu	r17,r2,19148 <_malloc_r+0x3c>
   19140:	1023883a 	mov	r17,r2
   19144:	00000506 	br	1915c <_malloc_r+0x50>
   19148:	8800040e 	bge	r17,zero,1915c <_malloc_r+0x50>
   1914c:	00800304 	movi	r2,12
   19150:	90800015 	stw	r2,0(r18)
   19154:	0005883a 	mov	r2,zero
   19158:	00003b06 	br	19248 <_malloc_r+0x13c>
   1915c:	897ffb36 	bltu	r17,r5,1914c <_gp+0xffff6c34>
   19160:	008000b4 	movhi	r2,2
   19164:	10a99004 	addi	r2,r2,-22976
   19168:	10c00017 	ldw	r3,0(r2)
   1916c:	1009883a 	mov	r4,r2
   19170:	1821883a 	mov	r16,r3
   19174:	80000926 	beq	r16,zero,1919c <_malloc_r+0x90>
   19178:	80800017 	ldw	r2,0(r16)
   1917c:	1445c83a 	sub	r2,r2,r17
   19180:	10001516 	blt	r2,zero,191d8 <_malloc_r+0xcc>
   19184:	014002c4 	movi	r5,11
   19188:	28800d2e 	bgeu	r5,r2,191c0 <_malloc_r+0xb4>
   1918c:	80800015 	stw	r2,0(r16)
   19190:	80a1883a 	add	r16,r16,r2
   19194:	84400015 	stw	r17,0(r16)
   19198:	8000221e 	bne	r16,zero,19224 <_malloc_r+0x118>
   1919c:	040000b4 	movhi	r16,2
   191a0:	84298f04 	addi	r16,r16,-22980
   191a4:	80800017 	ldw	r2,0(r16)
   191a8:	10000e1e 	bne	r2,zero,191e4 <_malloc_r+0xd8>
   191ac:	000b883a 	mov	r5,zero
   191b0:	9009883a 	mov	r4,r18
   191b4:	00193800 	call	19380 <_sbrk_r>
   191b8:	80800015 	stw	r2,0(r16)
   191bc:	00000906 	br	191e4 <_malloc_r+0xd8>
   191c0:	80800117 	ldw	r2,4(r16)
   191c4:	1c00021e 	bne	r3,r16,191d0 <_malloc_r+0xc4>
   191c8:	20800015 	stw	r2,0(r4)
   191cc:	00001506 	br	19224 <_malloc_r+0x118>
   191d0:	18800115 	stw	r2,4(r3)
   191d4:	00001306 	br	19224 <_malloc_r+0x118>
   191d8:	8007883a 	mov	r3,r16
   191dc:	84000117 	ldw	r16,4(r16)
   191e0:	003fe406 	br	19174 <_gp+0xffff6c5c>
   191e4:	880b883a 	mov	r5,r17
   191e8:	9009883a 	mov	r4,r18
   191ec:	00193800 	call	19380 <_sbrk_r>
   191f0:	04ffffc4 	movi	r19,-1
   191f4:	14ffd526 	beq	r2,r19,1914c <_gp+0xffff6c34>
   191f8:	140000c4 	addi	r16,r2,3
   191fc:	00ffff04 	movi	r3,-4
   19200:	80e0703a 	and	r16,r16,r3
   19204:	1400021e 	bne	r2,r16,19210 <_malloc_r+0x104>
   19208:	84400015 	stw	r17,0(r16)
   1920c:	00000506 	br	19224 <_malloc_r+0x118>
   19210:	808bc83a 	sub	r5,r16,r2
   19214:	9009883a 	mov	r4,r18
   19218:	00193800 	call	19380 <_sbrk_r>
   1921c:	14fffa1e 	bne	r2,r19,19208 <_gp+0xffff6cf0>
   19220:	003fca06 	br	1914c <_gp+0xffff6c34>
   19224:	810002c4 	addi	r4,r16,11
   19228:	00bffe04 	movi	r2,-8
   1922c:	80c00104 	addi	r3,r16,4
   19230:	2084703a 	and	r2,r4,r2
   19234:	10c7c83a 	sub	r3,r2,r3
   19238:	18000326 	beq	r3,zero,19248 <_malloc_r+0x13c>
   1923c:	80e1883a 	add	r16,r16,r3
   19240:	00c7c83a 	sub	r3,zero,r3
   19244:	80c00015 	stw	r3,0(r16)
   19248:	dfc00417 	ldw	ra,16(sp)
   1924c:	dcc00317 	ldw	r19,12(sp)
   19250:	dc800217 	ldw	r18,8(sp)
   19254:	dc400117 	ldw	r17,4(sp)
   19258:	dc000017 	ldw	r16,0(sp)
   1925c:	dec00504 	addi	sp,sp,20
   19260:	f800283a 	ret

00019264 <_printf_r>:
   19264:	defffd04 	addi	sp,sp,-12
   19268:	dfc00015 	stw	ra,0(sp)
   1926c:	d9800115 	stw	r6,4(sp)
   19270:	d9c00215 	stw	r7,8(sp)
   19274:	20c00217 	ldw	r3,8(r4)
   19278:	018000b4 	movhi	r6,2
   1927c:	31a66804 	addi	r6,r6,-26208
   19280:	19800115 	stw	r6,4(r3)
   19284:	280d883a 	mov	r6,r5
   19288:	21400217 	ldw	r5,8(r4)
   1928c:	d9c00104 	addi	r7,sp,4
   19290:	00194580 	call	19458 <___vfprintf_internal_r>
   19294:	dfc00017 	ldw	ra,0(sp)
   19298:	dec00304 	addi	sp,sp,12
   1929c:	f800283a 	ret

000192a0 <printf>:
   192a0:	defffc04 	addi	sp,sp,-16
   192a4:	dfc00015 	stw	ra,0(sp)
   192a8:	d9400115 	stw	r5,4(sp)
   192ac:	d9800215 	stw	r6,8(sp)
   192b0:	d9c00315 	stw	r7,12(sp)
   192b4:	008000b4 	movhi	r2,2
   192b8:	10a94704 	addi	r2,r2,-23268
   192bc:	10800017 	ldw	r2,0(r2)
   192c0:	014000b4 	movhi	r5,2
   192c4:	29666804 	addi	r5,r5,-26208
   192c8:	10c00217 	ldw	r3,8(r2)
   192cc:	d9800104 	addi	r6,sp,4
   192d0:	19400115 	stw	r5,4(r3)
   192d4:	200b883a 	mov	r5,r4
   192d8:	11000217 	ldw	r4,8(r2)
   192dc:	00199840 	call	19984 <__vfprintf_internal>
   192e0:	dfc00017 	ldw	ra,0(sp)
   192e4:	dec00404 	addi	sp,sp,16
   192e8:	f800283a 	ret

000192ec <_puts_r>:
   192ec:	defffd04 	addi	sp,sp,-12
   192f0:	dc000015 	stw	r16,0(sp)
   192f4:	2021883a 	mov	r16,r4
   192f8:	2809883a 	mov	r4,r5
   192fc:	dfc00215 	stw	ra,8(sp)
   19300:	dc400115 	stw	r17,4(sp)
   19304:	2823883a 	mov	r17,r5
   19308:	00193d00 	call	193d0 <strlen>
   1930c:	81400217 	ldw	r5,8(r16)
   19310:	010000b4 	movhi	r4,2
   19314:	21266804 	addi	r4,r4,-26208
   19318:	29000115 	stw	r4,4(r5)
   1931c:	100f883a 	mov	r7,r2
   19320:	880d883a 	mov	r6,r17
   19324:	8009883a 	mov	r4,r16
   19328:	00199a00 	call	199a0 <__sfvwrite_small_dev>
   1932c:	00ffffc4 	movi	r3,-1
   19330:	10c00926 	beq	r2,r3,19358 <_puts_r+0x6c>
   19334:	81400217 	ldw	r5,8(r16)
   19338:	018000b4 	movhi	r6,2
   1933c:	01c00044 	movi	r7,1
   19340:	28800117 	ldw	r2,4(r5)
   19344:	31a85804 	addi	r6,r6,-24224
   19348:	8009883a 	mov	r4,r16
   1934c:	103ee83a 	callr	r2
   19350:	10bfffe0 	cmpeqi	r2,r2,-1
   19354:	0085c83a 	sub	r2,zero,r2
   19358:	dfc00217 	ldw	ra,8(sp)
   1935c:	dc400117 	ldw	r17,4(sp)
   19360:	dc000017 	ldw	r16,0(sp)
   19364:	dec00304 	addi	sp,sp,12
   19368:	f800283a 	ret

0001936c <puts>:
   1936c:	008000b4 	movhi	r2,2
   19370:	10a94704 	addi	r2,r2,-23268
   19374:	200b883a 	mov	r5,r4
   19378:	11000017 	ldw	r4,0(r2)
   1937c:	00192ec1 	jmpi	192ec <_puts_r>

00019380 <_sbrk_r>:
   19380:	defffd04 	addi	sp,sp,-12
   19384:	dc000015 	stw	r16,0(sp)
   19388:	040000b4 	movhi	r16,2
   1938c:	dc400115 	stw	r17,4(sp)
   19390:	84299104 	addi	r16,r16,-22972
   19394:	2023883a 	mov	r17,r4
   19398:	2809883a 	mov	r4,r5
   1939c:	dfc00215 	stw	ra,8(sp)
   193a0:	80000015 	stw	zero,0(r16)
   193a4:	0019dd00 	call	19dd0 <sbrk>
   193a8:	00ffffc4 	movi	r3,-1
   193ac:	10c0031e 	bne	r2,r3,193bc <_sbrk_r+0x3c>
   193b0:	80c00017 	ldw	r3,0(r16)
   193b4:	18000126 	beq	r3,zero,193bc <_sbrk_r+0x3c>
   193b8:	88c00015 	stw	r3,0(r17)
   193bc:	dfc00217 	ldw	ra,8(sp)
   193c0:	dc400117 	ldw	r17,4(sp)
   193c4:	dc000017 	ldw	r16,0(sp)
   193c8:	dec00304 	addi	sp,sp,12
   193cc:	f800283a 	ret

000193d0 <strlen>:
   193d0:	2005883a 	mov	r2,r4
   193d4:	10c00007 	ldb	r3,0(r2)
   193d8:	18000226 	beq	r3,zero,193e4 <strlen+0x14>
   193dc:	10800044 	addi	r2,r2,1
   193e0:	003ffc06 	br	193d4 <_gp+0xffff6ebc>
   193e4:	1105c83a 	sub	r2,r2,r4
   193e8:	f800283a 	ret

000193ec <print_repeat>:
   193ec:	defffb04 	addi	sp,sp,-20
   193f0:	dc800315 	stw	r18,12(sp)
   193f4:	dc400215 	stw	r17,8(sp)
   193f8:	dc000115 	stw	r16,4(sp)
   193fc:	dfc00415 	stw	ra,16(sp)
   19400:	2025883a 	mov	r18,r4
   19404:	2823883a 	mov	r17,r5
   19408:	d9800005 	stb	r6,0(sp)
   1940c:	3821883a 	mov	r16,r7
   19410:	04000a0e 	bge	zero,r16,1943c <print_repeat+0x50>
   19414:	88800117 	ldw	r2,4(r17)
   19418:	01c00044 	movi	r7,1
   1941c:	d80d883a 	mov	r6,sp
   19420:	880b883a 	mov	r5,r17
   19424:	9009883a 	mov	r4,r18
   19428:	103ee83a 	callr	r2
   1942c:	843fffc4 	addi	r16,r16,-1
   19430:	103ff726 	beq	r2,zero,19410 <_gp+0xffff6ef8>
   19434:	00bfffc4 	movi	r2,-1
   19438:	00000106 	br	19440 <print_repeat+0x54>
   1943c:	0005883a 	mov	r2,zero
   19440:	dfc00417 	ldw	ra,16(sp)
   19444:	dc800317 	ldw	r18,12(sp)
   19448:	dc400217 	ldw	r17,8(sp)
   1944c:	dc000117 	ldw	r16,4(sp)
   19450:	dec00504 	addi	sp,sp,20
   19454:	f800283a 	ret

00019458 <___vfprintf_internal_r>:
   19458:	deffe504 	addi	sp,sp,-108
   1945c:	d8c00804 	addi	r3,sp,32
   19460:	ddc01815 	stw	r23,96(sp)
   19464:	dd801715 	stw	r22,92(sp)
   19468:	dd401615 	stw	r21,88(sp)
   1946c:	dd001515 	stw	r20,84(sp)
   19470:	dcc01415 	stw	r19,80(sp)
   19474:	dc801315 	stw	r18,76(sp)
   19478:	dc401215 	stw	r17,72(sp)
   1947c:	dc001115 	stw	r16,68(sp)
   19480:	dfc01a15 	stw	ra,104(sp)
   19484:	df001915 	stw	fp,100(sp)
   19488:	2029883a 	mov	r20,r4
   1948c:	2823883a 	mov	r17,r5
   19490:	382d883a 	mov	r22,r7
   19494:	d9800f15 	stw	r6,60(sp)
   19498:	0021883a 	mov	r16,zero
   1949c:	d8000e15 	stw	zero,56(sp)
   194a0:	d8000a15 	stw	zero,40(sp)
   194a4:	002b883a 	mov	r21,zero
   194a8:	0027883a 	mov	r19,zero
   194ac:	0025883a 	mov	r18,zero
   194b0:	d8000c15 	stw	zero,48(sp)
   194b4:	d8000b15 	stw	zero,44(sp)
   194b8:	002f883a 	mov	r23,zero
   194bc:	d8c00915 	stw	r3,36(sp)
   194c0:	d8c00f17 	ldw	r3,60(sp)
   194c4:	19000003 	ldbu	r4,0(r3)
   194c8:	20803fcc 	andi	r2,r4,255
   194cc:	1080201c 	xori	r2,r2,128
   194d0:	10bfe004 	addi	r2,r2,-128
   194d4:	10011e26 	beq	r2,zero,19950 <___vfprintf_internal_r+0x4f8>
   194d8:	00c00044 	movi	r3,1
   194dc:	b8c01426 	beq	r23,r3,19530 <___vfprintf_internal_r+0xd8>
   194e0:	1dc00216 	blt	r3,r23,194ec <___vfprintf_internal_r+0x94>
   194e4:	b8000626 	beq	r23,zero,19500 <___vfprintf_internal_r+0xa8>
   194e8:	00011506 	br	19940 <___vfprintf_internal_r+0x4e8>
   194ec:	01400084 	movi	r5,2
   194f0:	b9401d26 	beq	r23,r5,19568 <___vfprintf_internal_r+0x110>
   194f4:	014000c4 	movi	r5,3
   194f8:	b9402b26 	beq	r23,r5,195a8 <___vfprintf_internal_r+0x150>
   194fc:	00011006 	br	19940 <___vfprintf_internal_r+0x4e8>
   19500:	01400944 	movi	r5,37
   19504:	1140fc26 	beq	r2,r5,198f8 <___vfprintf_internal_r+0x4a0>
   19508:	88800117 	ldw	r2,4(r17)
   1950c:	d9000005 	stb	r4,0(sp)
   19510:	01c00044 	movi	r7,1
   19514:	d80d883a 	mov	r6,sp
   19518:	880b883a 	mov	r5,r17
   1951c:	a009883a 	mov	r4,r20
   19520:	103ee83a 	callr	r2
   19524:	1000d81e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   19528:	84000044 	addi	r16,r16,1
   1952c:	00010406 	br	19940 <___vfprintf_internal_r+0x4e8>
   19530:	01400c04 	movi	r5,48
   19534:	1140fa26 	beq	r2,r5,19920 <___vfprintf_internal_r+0x4c8>
   19538:	01400944 	movi	r5,37
   1953c:	11400a1e 	bne	r2,r5,19568 <___vfprintf_internal_r+0x110>
   19540:	d8800005 	stb	r2,0(sp)
   19544:	88800117 	ldw	r2,4(r17)
   19548:	b80f883a 	mov	r7,r23
   1954c:	d80d883a 	mov	r6,sp
   19550:	880b883a 	mov	r5,r17
   19554:	a009883a 	mov	r4,r20
   19558:	103ee83a 	callr	r2
   1955c:	1000ca1e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   19560:	84000044 	addi	r16,r16,1
   19564:	0000f506 	br	1993c <___vfprintf_internal_r+0x4e4>
   19568:	25fff404 	addi	r23,r4,-48
   1956c:	bdc03fcc 	andi	r23,r23,255
   19570:	00c00244 	movi	r3,9
   19574:	1dc00936 	bltu	r3,r23,1959c <___vfprintf_internal_r+0x144>
   19578:	00bfffc4 	movi	r2,-1
   1957c:	90800426 	beq	r18,r2,19590 <___vfprintf_internal_r+0x138>
   19580:	01400284 	movi	r5,10
   19584:	9009883a 	mov	r4,r18
   19588:	0019c640 	call	19c64 <__mulsi3>
   1958c:	00000106 	br	19594 <___vfprintf_internal_r+0x13c>
   19590:	0005883a 	mov	r2,zero
   19594:	b8a5883a 	add	r18,r23,r2
   19598:	0000e206 	br	19924 <___vfprintf_internal_r+0x4cc>
   1959c:	01400b84 	movi	r5,46
   195a0:	1140e426 	beq	r2,r5,19934 <___vfprintf_internal_r+0x4dc>
   195a4:	05c00084 	movi	r23,2
   195a8:	213ff404 	addi	r4,r4,-48
   195ac:	27003fcc 	andi	fp,r4,255
   195b0:	00c00244 	movi	r3,9
   195b4:	1f000936 	bltu	r3,fp,195dc <___vfprintf_internal_r+0x184>
   195b8:	00bfffc4 	movi	r2,-1
   195bc:	98800426 	beq	r19,r2,195d0 <___vfprintf_internal_r+0x178>
   195c0:	01400284 	movi	r5,10
   195c4:	9809883a 	mov	r4,r19
   195c8:	0019c640 	call	19c64 <__mulsi3>
   195cc:	00000106 	br	195d4 <___vfprintf_internal_r+0x17c>
   195d0:	0005883a 	mov	r2,zero
   195d4:	e0a7883a 	add	r19,fp,r2
   195d8:	0000d906 	br	19940 <___vfprintf_internal_r+0x4e8>
   195dc:	00c01b04 	movi	r3,108
   195e0:	10c0d226 	beq	r2,r3,1992c <___vfprintf_internal_r+0x4d4>
   195e4:	013fffc4 	movi	r4,-1
   195e8:	99000226 	beq	r19,r4,195f4 <___vfprintf_internal_r+0x19c>
   195ec:	d8000b15 	stw	zero,44(sp)
   195f0:	00000106 	br	195f8 <___vfprintf_internal_r+0x1a0>
   195f4:	04c00044 	movi	r19,1
   195f8:	01001a44 	movi	r4,105
   195fc:	11001626 	beq	r2,r4,19658 <___vfprintf_internal_r+0x200>
   19600:	20800916 	blt	r4,r2,19628 <___vfprintf_internal_r+0x1d0>
   19604:	010018c4 	movi	r4,99
   19608:	11008826 	beq	r2,r4,1982c <___vfprintf_internal_r+0x3d4>
   1960c:	01001904 	movi	r4,100
   19610:	11001126 	beq	r2,r4,19658 <___vfprintf_internal_r+0x200>
   19614:	01001604 	movi	r4,88
   19618:	1100c81e 	bne	r2,r4,1993c <___vfprintf_internal_r+0x4e4>
   1961c:	00c00044 	movi	r3,1
   19620:	d8c00e15 	stw	r3,56(sp)
   19624:	00001506 	br	1967c <___vfprintf_internal_r+0x224>
   19628:	01001cc4 	movi	r4,115
   1962c:	11009826 	beq	r2,r4,19890 <___vfprintf_internal_r+0x438>
   19630:	20800416 	blt	r4,r2,19644 <___vfprintf_internal_r+0x1ec>
   19634:	01001bc4 	movi	r4,111
   19638:	1100c01e 	bne	r2,r4,1993c <___vfprintf_internal_r+0x4e4>
   1963c:	05400204 	movi	r21,8
   19640:	00000f06 	br	19680 <___vfprintf_internal_r+0x228>
   19644:	01001d44 	movi	r4,117
   19648:	11000d26 	beq	r2,r4,19680 <___vfprintf_internal_r+0x228>
   1964c:	01001e04 	movi	r4,120
   19650:	11000a26 	beq	r2,r4,1967c <___vfprintf_internal_r+0x224>
   19654:	0000b906 	br	1993c <___vfprintf_internal_r+0x4e4>
   19658:	d8c00a17 	ldw	r3,40(sp)
   1965c:	b7000104 	addi	fp,r22,4
   19660:	18000726 	beq	r3,zero,19680 <___vfprintf_internal_r+0x228>
   19664:	df000d15 	stw	fp,52(sp)
   19668:	b5c00017 	ldw	r23,0(r22)
   1966c:	b800080e 	bge	r23,zero,19690 <___vfprintf_internal_r+0x238>
   19670:	05efc83a 	sub	r23,zero,r23
   19674:	02400044 	movi	r9,1
   19678:	00000606 	br	19694 <___vfprintf_internal_r+0x23c>
   1967c:	05400404 	movi	r21,16
   19680:	b0c00104 	addi	r3,r22,4
   19684:	d8c00d15 	stw	r3,52(sp)
   19688:	b5c00017 	ldw	r23,0(r22)
   1968c:	d8000a15 	stw	zero,40(sp)
   19690:	0013883a 	mov	r9,zero
   19694:	d839883a 	mov	fp,sp
   19698:	b8001726 	beq	r23,zero,196f8 <___vfprintf_internal_r+0x2a0>
   1969c:	a80b883a 	mov	r5,r21
   196a0:	b809883a 	mov	r4,r23
   196a4:	da401015 	stw	r9,64(sp)
   196a8:	0019ba80 	call	19ba8 <__udivsi3>
   196ac:	a80b883a 	mov	r5,r21
   196b0:	1009883a 	mov	r4,r2
   196b4:	102d883a 	mov	r22,r2
   196b8:	0019c640 	call	19c64 <__mulsi3>
   196bc:	b885c83a 	sub	r2,r23,r2
   196c0:	00c00244 	movi	r3,9
   196c4:	da401017 	ldw	r9,64(sp)
   196c8:	18800216 	blt	r3,r2,196d4 <___vfprintf_internal_r+0x27c>
   196cc:	10800c04 	addi	r2,r2,48
   196d0:	00000506 	br	196e8 <___vfprintf_internal_r+0x290>
   196d4:	d8c00e17 	ldw	r3,56(sp)
   196d8:	18000226 	beq	r3,zero,196e4 <___vfprintf_internal_r+0x28c>
   196dc:	10800dc4 	addi	r2,r2,55
   196e0:	00000106 	br	196e8 <___vfprintf_internal_r+0x290>
   196e4:	108015c4 	addi	r2,r2,87
   196e8:	e0800005 	stb	r2,0(fp)
   196ec:	b02f883a 	mov	r23,r22
   196f0:	e7000044 	addi	fp,fp,1
   196f4:	003fe806 	br	19698 <_gp+0xffff7180>
   196f8:	e6efc83a 	sub	r23,fp,sp
   196fc:	9dc5c83a 	sub	r2,r19,r23
   19700:	0080090e 	bge	zero,r2,19728 <___vfprintf_internal_r+0x2d0>
   19704:	e085883a 	add	r2,fp,r2
   19708:	01400c04 	movi	r5,48
   1970c:	d8c00917 	ldw	r3,36(sp)
   19710:	e009883a 	mov	r4,fp
   19714:	e0c0032e 	bgeu	fp,r3,19724 <___vfprintf_internal_r+0x2cc>
   19718:	e7000044 	addi	fp,fp,1
   1971c:	21400005 	stb	r5,0(r4)
   19720:	e0bffa1e 	bne	fp,r2,1970c <_gp+0xffff71f4>
   19724:	e6efc83a 	sub	r23,fp,sp
   19728:	d8c00b17 	ldw	r3,44(sp)
   1972c:	4dd1883a 	add	r8,r9,r23
   19730:	922dc83a 	sub	r22,r18,r8
   19734:	18001626 	beq	r3,zero,19790 <___vfprintf_internal_r+0x338>
   19738:	48000a26 	beq	r9,zero,19764 <___vfprintf_internal_r+0x30c>
   1973c:	00800b44 	movi	r2,45
   19740:	d8800805 	stb	r2,32(sp)
   19744:	88800117 	ldw	r2,4(r17)
   19748:	01c00044 	movi	r7,1
   1974c:	d9800804 	addi	r6,sp,32
   19750:	880b883a 	mov	r5,r17
   19754:	a009883a 	mov	r4,r20
   19758:	103ee83a 	callr	r2
   1975c:	10004a1e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   19760:	84000044 	addi	r16,r16,1
   19764:	0580070e 	bge	zero,r22,19784 <___vfprintf_internal_r+0x32c>
   19768:	b00f883a 	mov	r7,r22
   1976c:	01800c04 	movi	r6,48
   19770:	880b883a 	mov	r5,r17
   19774:	a009883a 	mov	r4,r20
   19778:	00193ec0 	call	193ec <print_repeat>
   1977c:	1000421e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   19780:	85a1883a 	add	r16,r16,r22
   19784:	e02d883a 	mov	r22,fp
   19788:	bf2fc83a 	sub	r23,r23,fp
   1978c:	00002006 	br	19810 <___vfprintf_internal_r+0x3b8>
   19790:	0580090e 	bge	zero,r22,197b8 <___vfprintf_internal_r+0x360>
   19794:	b00f883a 	mov	r7,r22
   19798:	01800804 	movi	r6,32
   1979c:	880b883a 	mov	r5,r17
   197a0:	a009883a 	mov	r4,r20
   197a4:	da401015 	stw	r9,64(sp)
   197a8:	00193ec0 	call	193ec <print_repeat>
   197ac:	da401017 	ldw	r9,64(sp)
   197b0:	1000351e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   197b4:	85a1883a 	add	r16,r16,r22
   197b8:	483ff226 	beq	r9,zero,19784 <_gp+0xffff726c>
   197bc:	00800b44 	movi	r2,45
   197c0:	d8800805 	stb	r2,32(sp)
   197c4:	88800117 	ldw	r2,4(r17)
   197c8:	01c00044 	movi	r7,1
   197cc:	d9800804 	addi	r6,sp,32
   197d0:	880b883a 	mov	r5,r17
   197d4:	a009883a 	mov	r4,r20
   197d8:	103ee83a 	callr	r2
   197dc:	10002a1e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   197e0:	84000044 	addi	r16,r16,1
   197e4:	003fe706 	br	19784 <_gp+0xffff726c>
   197e8:	b5bfffc4 	addi	r22,r22,-1
   197ec:	b0800003 	ldbu	r2,0(r22)
   197f0:	01c00044 	movi	r7,1
   197f4:	d9800804 	addi	r6,sp,32
   197f8:	d8800805 	stb	r2,32(sp)
   197fc:	88800117 	ldw	r2,4(r17)
   19800:	880b883a 	mov	r5,r17
   19804:	a009883a 	mov	r4,r20
   19808:	103ee83a 	callr	r2
   1980c:	10001e1e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   19810:	8585c83a 	sub	r2,r16,r22
   19814:	b5c9883a 	add	r4,r22,r23
   19818:	e085883a 	add	r2,fp,r2
   1981c:	013ff216 	blt	zero,r4,197e8 <_gp+0xffff72d0>
   19820:	1021883a 	mov	r16,r2
   19824:	dd800d17 	ldw	r22,52(sp)
   19828:	00004406 	br	1993c <___vfprintf_internal_r+0x4e4>
   1982c:	00800044 	movi	r2,1
   19830:	1480080e 	bge	r2,r18,19854 <___vfprintf_internal_r+0x3fc>
   19834:	95ffffc4 	addi	r23,r18,-1
   19838:	b80f883a 	mov	r7,r23
   1983c:	01800804 	movi	r6,32
   19840:	880b883a 	mov	r5,r17
   19844:	a009883a 	mov	r4,r20
   19848:	00193ec0 	call	193ec <print_repeat>
   1984c:	10000e1e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   19850:	85e1883a 	add	r16,r16,r23
   19854:	b0800017 	ldw	r2,0(r22)
   19858:	01c00044 	movi	r7,1
   1985c:	d80d883a 	mov	r6,sp
   19860:	d8800005 	stb	r2,0(sp)
   19864:	88800117 	ldw	r2,4(r17)
   19868:	880b883a 	mov	r5,r17
   1986c:	a009883a 	mov	r4,r20
   19870:	b5c00104 	addi	r23,r22,4
   19874:	103ee83a 	callr	r2
   19878:	1000031e 	bne	r2,zero,19888 <___vfprintf_internal_r+0x430>
   1987c:	84000044 	addi	r16,r16,1
   19880:	b82d883a 	mov	r22,r23
   19884:	00002d06 	br	1993c <___vfprintf_internal_r+0x4e4>
   19888:	00bfffc4 	movi	r2,-1
   1988c:	00003106 	br	19954 <___vfprintf_internal_r+0x4fc>
   19890:	b5c00017 	ldw	r23,0(r22)
   19894:	b7000104 	addi	fp,r22,4
   19898:	b809883a 	mov	r4,r23
   1989c:	00193d00 	call	193d0 <strlen>
   198a0:	9091c83a 	sub	r8,r18,r2
   198a4:	102d883a 	mov	r22,r2
   198a8:	0200090e 	bge	zero,r8,198d0 <___vfprintf_internal_r+0x478>
   198ac:	400f883a 	mov	r7,r8
   198b0:	01800804 	movi	r6,32
   198b4:	880b883a 	mov	r5,r17
   198b8:	a009883a 	mov	r4,r20
   198bc:	da001015 	stw	r8,64(sp)
   198c0:	00193ec0 	call	193ec <print_repeat>
   198c4:	da001017 	ldw	r8,64(sp)
   198c8:	103fef1e 	bne	r2,zero,19888 <_gp+0xffff7370>
   198cc:	8221883a 	add	r16,r16,r8
   198d0:	88800117 	ldw	r2,4(r17)
   198d4:	b00f883a 	mov	r7,r22
   198d8:	b80d883a 	mov	r6,r23
   198dc:	880b883a 	mov	r5,r17
   198e0:	a009883a 	mov	r4,r20
   198e4:	103ee83a 	callr	r2
   198e8:	103fe71e 	bne	r2,zero,19888 <_gp+0xffff7370>
   198ec:	85a1883a 	add	r16,r16,r22
   198f0:	e02d883a 	mov	r22,fp
   198f4:	00001106 	br	1993c <___vfprintf_internal_r+0x4e4>
   198f8:	00c00044 	movi	r3,1
   198fc:	04ffffc4 	movi	r19,-1
   19900:	d8000e15 	stw	zero,56(sp)
   19904:	d8c00a15 	stw	r3,40(sp)
   19908:	05400284 	movi	r21,10
   1990c:	9825883a 	mov	r18,r19
   19910:	d8000c15 	stw	zero,48(sp)
   19914:	d8000b15 	stw	zero,44(sp)
   19918:	182f883a 	mov	r23,r3
   1991c:	00000806 	br	19940 <___vfprintf_internal_r+0x4e8>
   19920:	ddc00b15 	stw	r23,44(sp)
   19924:	05c00084 	movi	r23,2
   19928:	00000506 	br	19940 <___vfprintf_internal_r+0x4e8>
   1992c:	00c00044 	movi	r3,1
   19930:	d8c00c15 	stw	r3,48(sp)
   19934:	05c000c4 	movi	r23,3
   19938:	00000106 	br	19940 <___vfprintf_internal_r+0x4e8>
   1993c:	002f883a 	mov	r23,zero
   19940:	d8c00f17 	ldw	r3,60(sp)
   19944:	18c00044 	addi	r3,r3,1
   19948:	d8c00f15 	stw	r3,60(sp)
   1994c:	003edc06 	br	194c0 <_gp+0xffff6fa8>
   19950:	8005883a 	mov	r2,r16
   19954:	dfc01a17 	ldw	ra,104(sp)
   19958:	df001917 	ldw	fp,100(sp)
   1995c:	ddc01817 	ldw	r23,96(sp)
   19960:	dd801717 	ldw	r22,92(sp)
   19964:	dd401617 	ldw	r21,88(sp)
   19968:	dd001517 	ldw	r20,84(sp)
   1996c:	dcc01417 	ldw	r19,80(sp)
   19970:	dc801317 	ldw	r18,76(sp)
   19974:	dc401217 	ldw	r17,72(sp)
   19978:	dc001117 	ldw	r16,68(sp)
   1997c:	dec01b04 	addi	sp,sp,108
   19980:	f800283a 	ret

00019984 <__vfprintf_internal>:
   19984:	008000b4 	movhi	r2,2
   19988:	10a94704 	addi	r2,r2,-23268
   1998c:	300f883a 	mov	r7,r6
   19990:	280d883a 	mov	r6,r5
   19994:	200b883a 	mov	r5,r4
   19998:	11000017 	ldw	r4,0(r2)
   1999c:	00194581 	jmpi	19458 <___vfprintf_internal_r>

000199a0 <__sfvwrite_small_dev>:
   199a0:	2880000b 	ldhu	r2,0(r5)
   199a4:	1080020c 	andi	r2,r2,8
   199a8:	10002126 	beq	r2,zero,19a30 <__sfvwrite_small_dev+0x90>
   199ac:	2880008f 	ldh	r2,2(r5)
   199b0:	defffa04 	addi	sp,sp,-24
   199b4:	dc000015 	stw	r16,0(sp)
   199b8:	dfc00515 	stw	ra,20(sp)
   199bc:	dd000415 	stw	r20,16(sp)
   199c0:	dcc00315 	stw	r19,12(sp)
   199c4:	dc800215 	stw	r18,8(sp)
   199c8:	dc400115 	stw	r17,4(sp)
   199cc:	2821883a 	mov	r16,r5
   199d0:	10001216 	blt	r2,zero,19a1c <__sfvwrite_small_dev+0x7c>
   199d4:	2027883a 	mov	r19,r4
   199d8:	3025883a 	mov	r18,r6
   199dc:	3823883a 	mov	r17,r7
   199e0:	05010004 	movi	r20,1024
   199e4:	04400b0e 	bge	zero,r17,19a14 <__sfvwrite_small_dev+0x74>
   199e8:	880f883a 	mov	r7,r17
   199ec:	a440010e 	bge	r20,r17,199f4 <__sfvwrite_small_dev+0x54>
   199f0:	01c10004 	movi	r7,1024
   199f4:	8140008f 	ldh	r5,2(r16)
   199f8:	900d883a 	mov	r6,r18
   199fc:	9809883a 	mov	r4,r19
   19a00:	0019a580 	call	19a58 <_write_r>
   19a04:	0080050e 	bge	zero,r2,19a1c <__sfvwrite_small_dev+0x7c>
   19a08:	88a3c83a 	sub	r17,r17,r2
   19a0c:	90a5883a 	add	r18,r18,r2
   19a10:	003ff406 	br	199e4 <_gp+0xffff74cc>
   19a14:	0005883a 	mov	r2,zero
   19a18:	00000706 	br	19a38 <__sfvwrite_small_dev+0x98>
   19a1c:	8080000b 	ldhu	r2,0(r16)
   19a20:	10801014 	ori	r2,r2,64
   19a24:	8080000d 	sth	r2,0(r16)
   19a28:	00bfffc4 	movi	r2,-1
   19a2c:	00000206 	br	19a38 <__sfvwrite_small_dev+0x98>
   19a30:	00bfffc4 	movi	r2,-1
   19a34:	f800283a 	ret
   19a38:	dfc00517 	ldw	ra,20(sp)
   19a3c:	dd000417 	ldw	r20,16(sp)
   19a40:	dcc00317 	ldw	r19,12(sp)
   19a44:	dc800217 	ldw	r18,8(sp)
   19a48:	dc400117 	ldw	r17,4(sp)
   19a4c:	dc000017 	ldw	r16,0(sp)
   19a50:	dec00604 	addi	sp,sp,24
   19a54:	f800283a 	ret

00019a58 <_write_r>:
   19a58:	defffd04 	addi	sp,sp,-12
   19a5c:	dc000015 	stw	r16,0(sp)
   19a60:	040000b4 	movhi	r16,2
   19a64:	dc400115 	stw	r17,4(sp)
   19a68:	84299104 	addi	r16,r16,-22972
   19a6c:	2023883a 	mov	r17,r4
   19a70:	2809883a 	mov	r4,r5
   19a74:	300b883a 	mov	r5,r6
   19a78:	380d883a 	mov	r6,r7
   19a7c:	dfc00215 	stw	ra,8(sp)
   19a80:	80000015 	stw	zero,0(r16)
   19a84:	0019e1c0 	call	19e1c <write>
   19a88:	00ffffc4 	movi	r3,-1
   19a8c:	10c0031e 	bne	r2,r3,19a9c <_write_r+0x44>
   19a90:	80c00017 	ldw	r3,0(r16)
   19a94:	18000126 	beq	r3,zero,19a9c <_write_r+0x44>
   19a98:	88c00015 	stw	r3,0(r17)
   19a9c:	dfc00217 	ldw	ra,8(sp)
   19aa0:	dc400117 	ldw	r17,4(sp)
   19aa4:	dc000017 	ldw	r16,0(sp)
   19aa8:	dec00304 	addi	sp,sp,12
   19aac:	f800283a 	ret

00019ab0 <__divsi3>:
   19ab0:	20001b16 	blt	r4,zero,19b20 <__divsi3+0x70>
   19ab4:	000f883a 	mov	r7,zero
   19ab8:	28001616 	blt	r5,zero,19b14 <__divsi3+0x64>
   19abc:	200d883a 	mov	r6,r4
   19ac0:	29001a2e 	bgeu	r5,r4,19b2c <__divsi3+0x7c>
   19ac4:	00800804 	movi	r2,32
   19ac8:	00c00044 	movi	r3,1
   19acc:	00000106 	br	19ad4 <__divsi3+0x24>
   19ad0:	10000d26 	beq	r2,zero,19b08 <__divsi3+0x58>
   19ad4:	294b883a 	add	r5,r5,r5
   19ad8:	10bfffc4 	addi	r2,r2,-1
   19adc:	18c7883a 	add	r3,r3,r3
   19ae0:	293ffb36 	bltu	r5,r4,19ad0 <_gp+0xffff75b8>
   19ae4:	0005883a 	mov	r2,zero
   19ae8:	18000726 	beq	r3,zero,19b08 <__divsi3+0x58>
   19aec:	0005883a 	mov	r2,zero
   19af0:	31400236 	bltu	r6,r5,19afc <__divsi3+0x4c>
   19af4:	314dc83a 	sub	r6,r6,r5
   19af8:	10c4b03a 	or	r2,r2,r3
   19afc:	1806d07a 	srli	r3,r3,1
   19b00:	280ad07a 	srli	r5,r5,1
   19b04:	183ffa1e 	bne	r3,zero,19af0 <_gp+0xffff75d8>
   19b08:	38000126 	beq	r7,zero,19b10 <__divsi3+0x60>
   19b0c:	0085c83a 	sub	r2,zero,r2
   19b10:	f800283a 	ret
   19b14:	014bc83a 	sub	r5,zero,r5
   19b18:	39c0005c 	xori	r7,r7,1
   19b1c:	003fe706 	br	19abc <_gp+0xffff75a4>
   19b20:	0109c83a 	sub	r4,zero,r4
   19b24:	01c00044 	movi	r7,1
   19b28:	003fe306 	br	19ab8 <_gp+0xffff75a0>
   19b2c:	00c00044 	movi	r3,1
   19b30:	003fee06 	br	19aec <_gp+0xffff75d4>

00019b34 <__modsi3>:
   19b34:	20001716 	blt	r4,zero,19b94 <__modsi3+0x60>
   19b38:	000f883a 	mov	r7,zero
   19b3c:	2005883a 	mov	r2,r4
   19b40:	28001216 	blt	r5,zero,19b8c <__modsi3+0x58>
   19b44:	2900162e 	bgeu	r5,r4,19ba0 <__modsi3+0x6c>
   19b48:	01800804 	movi	r6,32
   19b4c:	00c00044 	movi	r3,1
   19b50:	00000106 	br	19b58 <__modsi3+0x24>
   19b54:	30000a26 	beq	r6,zero,19b80 <__modsi3+0x4c>
   19b58:	294b883a 	add	r5,r5,r5
   19b5c:	31bfffc4 	addi	r6,r6,-1
   19b60:	18c7883a 	add	r3,r3,r3
   19b64:	293ffb36 	bltu	r5,r4,19b54 <_gp+0xffff763c>
   19b68:	18000526 	beq	r3,zero,19b80 <__modsi3+0x4c>
   19b6c:	1806d07a 	srli	r3,r3,1
   19b70:	11400136 	bltu	r2,r5,19b78 <__modsi3+0x44>
   19b74:	1145c83a 	sub	r2,r2,r5
   19b78:	280ad07a 	srli	r5,r5,1
   19b7c:	183ffb1e 	bne	r3,zero,19b6c <_gp+0xffff7654>
   19b80:	38000126 	beq	r7,zero,19b88 <__modsi3+0x54>
   19b84:	0085c83a 	sub	r2,zero,r2
   19b88:	f800283a 	ret
   19b8c:	014bc83a 	sub	r5,zero,r5
   19b90:	003fec06 	br	19b44 <_gp+0xffff762c>
   19b94:	0109c83a 	sub	r4,zero,r4
   19b98:	01c00044 	movi	r7,1
   19b9c:	003fe706 	br	19b3c <_gp+0xffff7624>
   19ba0:	00c00044 	movi	r3,1
   19ba4:	003ff106 	br	19b6c <_gp+0xffff7654>

00019ba8 <__udivsi3>:
   19ba8:	200d883a 	mov	r6,r4
   19bac:	2900152e 	bgeu	r5,r4,19c04 <__udivsi3+0x5c>
   19bb0:	28001416 	blt	r5,zero,19c04 <__udivsi3+0x5c>
   19bb4:	00800804 	movi	r2,32
   19bb8:	00c00044 	movi	r3,1
   19bbc:	00000206 	br	19bc8 <__udivsi3+0x20>
   19bc0:	10000e26 	beq	r2,zero,19bfc <__udivsi3+0x54>
   19bc4:	28000516 	blt	r5,zero,19bdc <__udivsi3+0x34>
   19bc8:	294b883a 	add	r5,r5,r5
   19bcc:	10bfffc4 	addi	r2,r2,-1
   19bd0:	18c7883a 	add	r3,r3,r3
   19bd4:	293ffa36 	bltu	r5,r4,19bc0 <_gp+0xffff76a8>
   19bd8:	18000826 	beq	r3,zero,19bfc <__udivsi3+0x54>
   19bdc:	0005883a 	mov	r2,zero
   19be0:	31400236 	bltu	r6,r5,19bec <__udivsi3+0x44>
   19be4:	314dc83a 	sub	r6,r6,r5
   19be8:	10c4b03a 	or	r2,r2,r3
   19bec:	1806d07a 	srli	r3,r3,1
   19bf0:	280ad07a 	srli	r5,r5,1
   19bf4:	183ffa1e 	bne	r3,zero,19be0 <_gp+0xffff76c8>
   19bf8:	f800283a 	ret
   19bfc:	0005883a 	mov	r2,zero
   19c00:	f800283a 	ret
   19c04:	00c00044 	movi	r3,1
   19c08:	003ff406 	br	19bdc <_gp+0xffff76c4>

00019c0c <__umodsi3>:
   19c0c:	2005883a 	mov	r2,r4
   19c10:	2900122e 	bgeu	r5,r4,19c5c <__umodsi3+0x50>
   19c14:	28001116 	blt	r5,zero,19c5c <__umodsi3+0x50>
   19c18:	01800804 	movi	r6,32
   19c1c:	00c00044 	movi	r3,1
   19c20:	00000206 	br	19c2c <__umodsi3+0x20>
   19c24:	30000c26 	beq	r6,zero,19c58 <__umodsi3+0x4c>
   19c28:	28000516 	blt	r5,zero,19c40 <__umodsi3+0x34>
   19c2c:	294b883a 	add	r5,r5,r5
   19c30:	31bfffc4 	addi	r6,r6,-1
   19c34:	18c7883a 	add	r3,r3,r3
   19c38:	293ffa36 	bltu	r5,r4,19c24 <_gp+0xffff770c>
   19c3c:	18000626 	beq	r3,zero,19c58 <__umodsi3+0x4c>
   19c40:	1806d07a 	srli	r3,r3,1
   19c44:	11400136 	bltu	r2,r5,19c4c <__umodsi3+0x40>
   19c48:	1145c83a 	sub	r2,r2,r5
   19c4c:	280ad07a 	srli	r5,r5,1
   19c50:	183ffb1e 	bne	r3,zero,19c40 <_gp+0xffff7728>
   19c54:	f800283a 	ret
   19c58:	f800283a 	ret
   19c5c:	00c00044 	movi	r3,1
   19c60:	003ff706 	br	19c40 <_gp+0xffff7728>

00019c64 <__mulsi3>:
   19c64:	0005883a 	mov	r2,zero
   19c68:	20000726 	beq	r4,zero,19c88 <__mulsi3+0x24>
   19c6c:	20c0004c 	andi	r3,r4,1
   19c70:	2008d07a 	srli	r4,r4,1
   19c74:	18000126 	beq	r3,zero,19c7c <__mulsi3+0x18>
   19c78:	1145883a 	add	r2,r2,r5
   19c7c:	294b883a 	add	r5,r5,r5
   19c80:	203ffa1e 	bne	r4,zero,19c6c <_gp+0xffff7754>
   19c84:	f800283a 	ret
   19c88:	f800283a 	ret

00019c8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19c8c:	deffff04 	addi	sp,sp,-4
   19c90:	010000b4 	movhi	r4,2
   19c94:	014000b4 	movhi	r5,2
   19c98:	dfc00015 	stw	ra,0(sp)
   19c9c:	21290e04 	addi	r4,r4,-23496
   19ca0:	29694b04 	addi	r5,r5,-23252

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19ca4:	2140061e 	bne	r4,r5,19cc0 <alt_load+0x34>
   19ca8:	010000b4 	movhi	r4,2
   19cac:	014000b4 	movhi	r5,2
   19cb0:	21200804 	addi	r4,r4,-32736
   19cb4:	29600804 	addi	r5,r5,-32736
   19cb8:	2140121e 	bne	r4,r5,19d04 <alt_load+0x78>
   19cbc:	00000b06 	br	19cec <alt_load+0x60>
   19cc0:	00c000b4 	movhi	r3,2
   19cc4:	18e94b04 	addi	r3,r3,-23252
   19cc8:	1907c83a 	sub	r3,r3,r4
   19ccc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19cd0:	10fff526 	beq	r2,r3,19ca8 <_gp+0xffff7790>
    {
      *to++ = *from++;
   19cd4:	114f883a 	add	r7,r2,r5
   19cd8:	39c00017 	ldw	r7,0(r7)
   19cdc:	110d883a 	add	r6,r2,r4
   19ce0:	10800104 	addi	r2,r2,4
   19ce4:	31c00015 	stw	r7,0(r6)
   19ce8:	003ff906 	br	19cd0 <_gp+0xffff77b8>
   19cec:	010000b4 	movhi	r4,2
   19cf0:	014000b4 	movhi	r5,2
   19cf4:	21282d04 	addi	r4,r4,-24396
   19cf8:	29682d04 	addi	r5,r5,-24396

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19cfc:	2140101e 	bne	r4,r5,19d40 <alt_load+0xb4>
   19d00:	00000b06 	br	19d30 <alt_load+0xa4>
   19d04:	00c000b4 	movhi	r3,2
   19d08:	18e00804 	addi	r3,r3,-32736
   19d0c:	1907c83a 	sub	r3,r3,r4
   19d10:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19d14:	10fff526 	beq	r2,r3,19cec <_gp+0xffff77d4>
    {
      *to++ = *from++;
   19d18:	114f883a 	add	r7,r2,r5
   19d1c:	39c00017 	ldw	r7,0(r7)
   19d20:	110d883a 	add	r6,r2,r4
   19d24:	10800104 	addi	r2,r2,4
   19d28:	31c00015 	stw	r7,0(r6)
   19d2c:	003ff906 	br	19d14 <_gp+0xffff77fc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   19d30:	001a0a40 	call	1a0a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   19d34:	dfc00017 	ldw	ra,0(sp)
   19d38:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   19d3c:	001a0a81 	jmpi	1a0a8 <alt_icache_flush_all>
   19d40:	00c000b4 	movhi	r3,2
   19d44:	18e90e04 	addi	r3,r3,-23496
   19d48:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19d4c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19d50:	18bff726 	beq	r3,r2,19d30 <_gp+0xffff7818>
    {
      *to++ = *from++;
   19d54:	114f883a 	add	r7,r2,r5
   19d58:	39c00017 	ldw	r7,0(r7)
   19d5c:	110d883a 	add	r6,r2,r4
   19d60:	10800104 	addi	r2,r2,4
   19d64:	31c00015 	stw	r7,0(r6)
   19d68:	003ff906 	br	19d50 <_gp+0xffff7838>

00019d6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19d6c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19d70:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19d74:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19d78:	0019e7c0 	call	19e7c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   19d7c:	0019e9c0 	call	19e9c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   19d80:	d1a04c17 	ldw	r6,-32464(gp)
   19d84:	d1604d17 	ldw	r5,-32460(gp)
   19d88:	d1204e17 	ldw	r4,-32456(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   19d8c:	dfc00017 	ldw	ra,0(sp)
   19d90:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   19d94:	00184dc1 	jmpi	184dc <main>

00019d98 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   19d98:	defffe04 	addi	sp,sp,-8
   19d9c:	dc000015 	stw	r16,0(sp)
   19da0:	dfc00115 	stw	ra,4(sp)
   19da4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   19da8:	00193d00 	call	193d0 <strlen>
   19dac:	010000b4 	movhi	r4,2
   19db0:	000f883a 	mov	r7,zero
   19db4:	100d883a 	mov	r6,r2
   19db8:	800b883a 	mov	r5,r16
   19dbc:	21294904 	addi	r4,r4,-23260
#else
    return fputs(str, stdout);
#endif
#endif
}
   19dc0:	dfc00117 	ldw	ra,4(sp)
   19dc4:	dc000017 	ldw	r16,0(sp)
   19dc8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   19dcc:	001a0701 	jmpi	1a070 <altera_avalon_jtag_uart_write>

00019dd0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19dd0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19dd4:	00bfff84 	movi	r2,-2
   19dd8:	2884703a 	and	r2,r5,r2
   19ddc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19de0:	d0a00217 	ldw	r2,-32760(gp)
   19de4:	00ffff04 	movi	r3,-4
   19de8:	108000c4 	addi	r2,r2,3
   19dec:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19df0:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19df4:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19df8:	1109883a 	add	r4,r2,r4
   19dfc:	18f80004 	addi	r3,r3,-8192
   19e00:	1900032e 	bgeu	r3,r4,19e10 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e04:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   19e08:	00bfffc4 	movi	r2,-1
   19e0c:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   19e10:	d1200215 	stw	r4,-32760(gp)
   19e14:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   19e18:	f800283a 	ret

00019e1c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   19e1c:	00800044 	movi	r2,1
   19e20:	20800226 	beq	r4,r2,19e2c <write+0x10>
   19e24:	00800084 	movi	r2,2
   19e28:	2080041e 	bne	r4,r2,19e3c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   19e2c:	010000b4 	movhi	r4,2
   19e30:	000f883a 	mov	r7,zero
   19e34:	21294904 	addi	r4,r4,-23260
   19e38:	001a0701 	jmpi	1a070 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   19e3c:	d0a00417 	ldw	r2,-32752(gp)
   19e40:	10000926 	beq	r2,zero,19e68 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   19e44:	deffff04 	addi	sp,sp,-4
   19e48:	dfc00015 	stw	ra,0(sp)
   19e4c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   19e50:	00c01444 	movi	r3,81
   19e54:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19e58:	00bfffc4 	movi	r2,-1
   19e5c:	dfc00017 	ldw	ra,0(sp)
   19e60:	dec00104 	addi	sp,sp,4
   19e64:	f800283a 	ret
   19e68:	d0a04b04 	addi	r2,gp,-32468
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   19e6c:	00c01444 	movi	r3,81
   19e70:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19e74:	00bfffc4 	movi	r2,-1
   19e78:	f800283a 	ret

00019e7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   19e7c:	deffff04 	addi	sp,sp,-4
   19e80:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_0, nios2_0);
   19e84:	001a0ac0 	call	1a0ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   19e88:	00800044 	movi	r2,1
   19e8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   19e90:	dfc00017 	ldw	ra,0(sp)
   19e94:	dec00104 	addi	sp,sp,4
   19e98:	f800283a 	ret

00019e9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   19e9c:	f800283a 	ret

00019ea0 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   19ea0:	20800137 	ldwio	r2,4(r4)
}
   19ea4:	1144703a 	and	r2,r2,r5
   19ea8:	f800283a 	ret

00019eac <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   19eac:	20800337 	ldwio	r2,12(r4)
}
   19eb0:	1144703a 	and	r2,r2,r5
   19eb4:	f800283a 	ret

00019eb8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   19eb8:	20800437 	ldwio	r2,16(r4)
   19ebc:	f800283a 	ret

00019ec0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   19ec0:	20800537 	ldwio	r2,20(r4)
   19ec4:	f800283a 	ret

00019ec8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   19ec8:	20800237 	ldwio	r2,8(r4)
}
   19ecc:	1144703a 	and	r2,r2,r5
   19ed0:	f800283a 	ret

00019ed4 <altera_avalon_fifo_read_level>:
   19ed4:	20800037 	ldwio	r2,0(r4)
   19ed8:	f800283a 	ret

00019edc <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   19edc:	21000204 	addi	r4,r4,8
   19ee0:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   19ee4:	20800037 	ldwio	r2,0(r4)
   19ee8:	114a703a 	and	r5,r2,r5
   19eec:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   19ef0:	0085c83a 	sub	r2,zero,r2
   19ef4:	f800283a 	ret

00019ef8 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   19ef8:	21000304 	addi	r4,r4,12
   19efc:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   19f00:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   19f04:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   19f08:	28c00126 	beq	r5,r3,19f10 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   19f0c:	00bfff84 	movi	r2,-2
}
   19f10:	f800283a 	ret

00019f14 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   19f14:	21000404 	addi	r4,r4,16
   19f18:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   19f1c:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   19f20:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   19f24:	28c00126 	beq	r5,r3,19f2c <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   19f28:	00bfff44 	movi	r2,-3
}
   19f2c:	f800283a 	ret

00019f30 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   19f30:	21000504 	addi	r4,r4,20
   19f34:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   19f38:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   19f3c:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   19f40:	28c00126 	beq	r5,r3,19f48 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   19f44:	00bfff44 	movi	r2,-3
}
   19f48:	f800283a 	ret

00019f4c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   19f4c:	defffb04 	addi	sp,sp,-20
   19f50:	dcc00315 	stw	r19,12(sp)
   19f54:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   19f58:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   19f5c:	dc800215 	stw	r18,8(sp)
   19f60:	dc400115 	stw	r17,4(sp)
   19f64:	dc000015 	stw	r16,0(sp)
   19f68:	dfc00415 	stw	ra,16(sp)
   19f6c:	2021883a 	mov	r16,r4
   19f70:	3023883a 	mov	r17,r6
   19f74:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   19f78:	0019edc0 	call	19edc <altera_avalon_fifo_clear_event>
   19f7c:	10000f1e 	bne	r2,zero,19fbc <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   19f80:	980b883a 	mov	r5,r19
   19f84:	8009883a 	mov	r4,r16
   19f88:	0019ef80 	call	19ef8 <altera_avalon_fifo_write_ienable>
   19f8c:	10000d1e 	bne	r2,zero,19fc4 <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   19f90:	900b883a 	mov	r5,r18
   19f94:	8009883a 	mov	r4,r16
   19f98:	0019f140 	call	19f14 <altera_avalon_fifo_write_almostfull>
   19f9c:	10000226 	beq	r2,zero,19fa8 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   19fa0:	00bfff44 	movi	r2,-3
   19fa4:	00000806 	br	19fc8 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   19fa8:	880b883a 	mov	r5,r17
   19fac:	8009883a 	mov	r4,r16
   19fb0:	0019f300 	call	19f30 <altera_avalon_fifo_write_almostempty>
   19fb4:	10000426 	beq	r2,zero,19fc8 <altera_avalon_fifo_init+0x7c>
   19fb8:	003ff906 	br	19fa0 <_gp+0xffff7a88>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   19fbc:	00bfffc4 	movi	r2,-1
   19fc0:	00000106 	br	19fc8 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   19fc4:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   19fc8:	dfc00417 	ldw	ra,16(sp)
   19fcc:	dcc00317 	ldw	r19,12(sp)
   19fd0:	dc800217 	ldw	r18,8(sp)
   19fd4:	dc400117 	ldw	r17,4(sp)
   19fd8:	dc000017 	ldw	r16,0(sp)
   19fdc:	dec00504 	addi	sp,sp,20
   19fe0:	f800283a 	ret

00019fe4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   19fe4:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   19fe8:	1080004c 	andi	r2,r2,1
   19fec:	1000021e 	bne	r2,zero,19ff8 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   19ff0:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   19ff4:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   19ff8:	00bfff04 	movi	r2,-4
    }
}
   19ffc:	f800283a 	ret

0001a000 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   1a000:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a004:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1a008:	1080008c 	andi	r2,r2,2
   1a00c:	1000041e 	bne	r2,zero,1a020 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1a010:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1a014:	20c00037 	ldwio	r3,0(r4)
   1a018:	30c00015 	stw	r3,0(r6)
   1a01c:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   1a020:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   1a024:	f800283a 	ret

0001a028 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a028:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1a02c:	1080008c 	andi	r2,r2,2
   1a030:	1000021e 	bne	r2,zero,1a03c <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1a034:	20800037 	ldwio	r2,0(r4)
   1a038:	f800283a 	ret
    }
    return 0;
   1a03c:	0005883a 	mov	r2,zero
}
   1a040:	f800283a 	ret

0001a044 <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a044:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1a048:	1080004c 	andi	r2,r2,1
   1a04c:	1000021e 	bne	r2,zero,1a058 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   1a050:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   1a054:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1a058:	00bfff04 	movi	r2,-4
    }
}
   1a05c:	f800283a 	ret

0001a060 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   1a060:	20800137 	ldwio	r2,4(r4)
   1a064:	f800283a 	ret

0001a068 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   1a068:	20800037 	ldwio	r2,0(r4)
   1a06c:	f800283a 	ret

0001a070 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1a070:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1a074:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1a078:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1a07c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1a080:	2980072e 	bgeu	r5,r6,1a0a0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1a084:	38c00037 	ldwio	r3,0(r7)
   1a088:	18ffffec 	andhi	r3,r3,65535
   1a08c:	183ffc26 	beq	r3,zero,1a080 <_gp+0xffff7b68>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1a090:	28c00007 	ldb	r3,0(r5)
   1a094:	20c00035 	stwio	r3,0(r4)
   1a098:	29400044 	addi	r5,r5,1
   1a09c:	003ff806 	br	1a080 <_gp+0xffff7b68>

  return count;
}
   1a0a0:	f800283a 	ret

0001a0a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a0a4:	f800283a 	ret

0001a0a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a0a8:	f800283a 	ret

0001a0ac <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1a0ac:	000170fa 	wrctl	ienable,zero
   1a0b0:	f800283a 	ret
