
node0_v2.elf:     file format elf32-littlenios2
node0_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00018020

Program Header:
    LOAD off    0x00001000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00018020 paddr 0x00018020 align 2**12
         filesz 0x00002318 memsz 0x00002318 flags r-x
    LOAD off    0x00003338 vaddr 0x0001a338 paddr 0x0001a42c align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003520 vaddr 0x0001a520 paddr 0x0001a520 align 2**12
         filesz 0x00000000 memsz 0x000002b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00018000  00018000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00018020  00018020  0000342c  2**0
                  CONTENTS
  2 .text         000021f4  00018020  00018020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  0001a214  0001a214  00003214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  0001a338  0001a42c  00003338  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b4  0001a520  0001a520  00003520  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_0   00000000  0001a7d4  0001a7d4  0000342c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000420  00000000  00000000  00003450  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000079f7  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000254f  00000000  00000000  0000b267  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a86  00000000  00000000  0000d7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a14  00000000  00000000  0001023c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001af2  00000000  00000000  00010c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000029d1  00000000  00000000  00012742  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00015114  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a0  00000000  00000000  00015158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000171b6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  000171b9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000171c0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000171c1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000171c2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000171cd  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000171d8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000171e3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  000171ee  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  00017240  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  00024e02  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00018000 l    d  .entry	00000000 .entry
00018020 l    d  .exceptions	00000000 .exceptions
00018020 l    d  .text	00000000 .text
0001a214 l    d  .rodata	00000000 .rodata
0001a338 l    d  .rwdata	00000000 .rwdata
0001a520 l    d  .bss	00000000 .bss
0001a7d4 l    d  .data_mem_0	00000000 .data_mem_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node0_v2_bsp//obj/HAL/src/crt0.o
00018058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_0.c
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019520 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0001a338 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001a420 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00019e78 g     F .text	0000002c alt_main
0001a70c g     O .bss	00000014 edge_p1_p3
00019420 g     F .text	00000080 _puts_r
00019fec g     F .text	0000001c altera_avalon_fifo_write_almostfull
0001a42c g       *ABS*	00000000 __flash_rwdata_start
0001a520 g     O .bss	00000004 proc_1_inparg_0
0001805c g     F .text	00000020 proc_0
0001a7d4 g       *ABS*	00000000 __alt_heap_start
0001a524 g     O .bss	00000004 proc_0_inp_0
000193d4 g     F .text	0000004c printf
0001a720 g     O .bss	00000064 edges
0001a528 g     O .bss	00000004 proc_0_outarg_0
0001a024 g     F .text	00000098 altera_avalon_fifo_init
0001a0bc g     F .text	0000001c altera_avalon_fifo_write_fifo
00018f6c g     F .text	0000008c ring_buffer_dequeue_arr
0001a20c g     F .text	00000008 altera_nios2_gen2_irq_init
00018000 g       *ABS*	00000000 __alt_mem_data_mem_0
00018f34 g     F .text	00000038 ring_buffer_dequeue
00018000 g     F .entry	0000000c __reset
0001a140 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00018020 g       *ABS*	00000000 __flash_exceptions_start
0001a574 g     O .bss	00000004 errno
00018e94 g     F .text	0000000c ring_buffer_init
0001a784 g     O .bss	00000014 edge_p0_p1
0001a57c g     O .bss	00000004 alt_argv
00022418 g       *ABS*	00000000 _gp
00019ef0 g     F .text	00000004 usleep
0001a52c g     O .bss	00000004 proc_1_inparg_1
00019fb4 g     F .text	0000001c altera_avalon_fifo_clear_event
00018ff8 g     F .text	0000002c ring_buffer_pop
00019134 g     F .text	00000028 memcpy
0001a584 g     O .bss	00000082 buff_p4_p1
000194a0 g     F .text	00000014 puts
0001a530 g     O .bss	00000008 proc_1_outs
00018834 g     F .text	0000009c get_edge
0001910c g     F .text	00000014 malloc
00019398 g     F .text	0000003c _printf_r
00018e80 g     F .text	00000014 ring_buffer_num_items
00019cdc g     F .text	00000064 .hidden __udivsi3
0001a798 g     O .bss	00000014 edge_p5_p0
0001a7ac g     O .bss	00000014 edge_p4_p1
00019024 g     F .text	00000084 ring_buffer_pop_arr
000194b4 g     F .text	00000050 _sbrk_r
0001a606 g     O .bss	00000082 buff_p5_p0
00018e58 g     F .text	00000010 ring_buffer_is_empty
00018684 g     F .text	00000050 start_FIFO
00018e68 g     F .text	00000018 ring_buffer_is_full
00018644 g     F .text	00000040 cleanUp
0001a418 g     O .rwdata	00000004 _global_impure_ptr
0001a7d4 g       *ABS*	00000000 __bss_end
0001893c g     F .text	0000002c init_buffer
0001a538 g     O .bss	00000004 proc_0_outs
00018e30 g     F .text	00000028 receive_poll
0001a53c g     O .bss	00000004 proc_1_out_1
0001a540 g     O .bss	00000004 proc_1_outarg_1
0001a204 g     F .text	00000004 alt_dcache_flush_all
00019fd0 g     F .text	0000001c altera_avalon_fifo_write_ienable
0001a42c g       *ABS*	00000000 __ram_rwdata_end
00019f98 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00019ef4 g     F .text	00000060 write
0001a544 g     O .bss	00000004 proc_1_out_0
0001a338 g       *ABS*	00000000 __ram_rodata_end
0001a424 g     O .rwdata	00000004 jtag_uart_0
00019d40 g     F .text	00000058 .hidden __umodsi3
000188d0 g     F .text	0000006c get_buffer
0001a548 g     O .bss	00000004 proc_0_out_0
0001a7d4 g       *ABS*	00000000 end
00019fa0 g     F .text	0000000c altera_avalon_fifo_read_event
0001e000 g       *ABS*	00000000 __alt_stack_pointer
0001a148 g     F .text	00000034 altera_avalon_jtag_uart_write
0001a54c g     O .bss	00000004 input_fifo_wrclk_irq_event
0001a100 g     F .text	0000001c altera_avalon_fifo_read_fifo
0001958c g     F .text	0000052c ___vfprintf_internal_r
0001915c g     F .text	000000e4 _free_r
00018af8 g     F .text	000001e4 send_packet
00018020 g     F .text	0000003c _start
0001a688 g     O .bss	00000082 buff_p0_p1
00019f74 g     F .text	00000004 alt_sys_init
0001a550 g     O .bss	00000008 proc_1_inps
0001807c g     F .text	00000044 proc_1
00018ea0 g     F .text	00000040 ring_buffer_queue
000183e0 g     F .text	000000a0 serializing_send
000190e4 g     F .text	00000028 .hidden __mulsi3
0001a338 g       *ABS*	00000000 __ram_rwdata_start
0001a214 g       *ABS*	00000000 __ram_rodata_start
00018364 g     F .text	0000007c read_data
0001a17c g     F .text	00000088 alt_busy_sleep
0001a7d4 g       *ABS*	00000000 __alt_stack_base
000180c0 g     F .text	000000d0 print_status
00019f78 g     F .text	0000000c altera_avalon_fifo_read_status
0001a138 g     F .text	00000008 altera_avalon_fifo_read_other_info
0001a558 g     O .bss	00000004 proc_1_inp_1
0001a55c g     O .bss	00000004 proc_1_inp_0
00019ea4 g     F .text	0000004c sbrk
00019ad4 g     F .text	000000b8 __sfvwrite_small_dev
0001a560 g     O .bss	00000004 proc_0_inparg_0
0001a520 g       *ABS*	00000000 __bss_start
0001a564 g     O .bss	00000004 proc_1_outarg_0
000186d4 g     F .text	00000160 main
0001a7c0 g     O .bss	00000014 edge_p1_p2
0001a578 g     O .bss	00000004 alt_envp
00019fac g     F .text	00000008 altera_avalon_fifo_read_level
0001a568 g     O .bss	00000004 proc_0_inps
0001e000 g       *ABS*	00000000 __alt_heap_limit
00019240 g     F .text	00000158 _malloc_r
0001a428 g     O .rwdata	00000004 alt_errno
00018968 g     F .text	00000190 init_structures
000190a8 g     F .text	0000003c ring_buffer_peek
00019be4 g     F .text	00000084 .hidden __divsi3
0001a214 g       *ABS*	00000000 __flash_rodata_start
00019f54 g     F .text	00000020 alt_irq_init
00018190 g     F .text	000001d4 read_buff
00019b8c g     F .text	00000058 _write_r
0001a41c g     O .rwdata	00000004 _impure_ptr
0001a580 g     O .bss	00000004 alt_argc
00018480 g     F .text	000000e4 send_data
00018020 g       *ABS*	00000000 __ram_exceptions_start
00018564 g     F .text	000000e0 proc_args_init
00018d00 g     F .text	00000130 receive_packet
0001a11c g     F .text	0000001c altera_avalon_fifo_write_other_info
00018cdc g     F .text	00000024 read_payload
0001a42c g       *ABS*	00000000 _edata
0001a7d4 g       *ABS*	00000000 _end
00018020 g       *ABS*	00000000 __ram_exceptions_end
00019c68 g     F .text	00000074 .hidden __modsi3
00019f84 g     F .text	0000000c altera_avalon_fifo_read_ienable
0001e000 g       *ABS*	00000000 __alt_data_end
00018ee0 g     F .text	00000054 ring_buffer_queue_arr
0001800c g       .entry	00000000 _exit
00019f90 g     F .text	00000008 altera_avalon_fifo_read_almostfull
00019504 g     F .text	0000001c strlen
0001a0d8 g     F .text	00000028 altera_avalon_read_fifo
0001a56c g     O .bss	00000004 __malloc_sbrk_start
0001a208 g     F .text	00000004 alt_icache_flush_all
0001a570 g     O .bss	00000004 __malloc_free_list
00019ab8 g     F .text	0000001c __vfprintf_internal
0001a008 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00019d98 g     F .text	000000e0 alt_load
00019120 g     F .text	00000014 free



Disassembly of section .entry:

00018000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   18000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   18004:	08600814 	ori	at,at,32800
    jmp r1
   18008:	0800683a 	jmp	at

0001800c <_exit>:
	...

Disassembly of section .text:

00018020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   18020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   18024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
   18028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1802c:	d6890614 	ori	gp,gp,9240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   18030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   18034:	10a94814 	ori	r2,r2,42272

    movhi r3, %hi(__bss_end)
   18038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1803c:	18e9f514 	ori	r3,r3,42964

    beq r2, r3, 1f
   18040:	10c00326 	beq	r2,r3,18050 <_start+0x30>

0:
    stw zero, (r2)
   18044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   18048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1804c:	10fffd36 	bltu	r2,r3,18044 <_gp+0xffff5c2c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   18050:	0019d980 	call	19d98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   18054:	0019e780 	call	19e78 <alt_main>

00018058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   18058:	003fff06 	br	18058 <_gp+0xffff5c40>

0001805c <proc_0>:


void proc_0(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];
   1805c:	28800017 	ldw	r2,0(r5)

	//printf("proc_0 -- num1: %x\n",*num1);

	*out1 = *num1 + 1;
   18060:	10c00017 	ldw	r3,0(r2)
void** proc_1_outs[P1_NUM_OF_OUTS];


void proc_0(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
   18064:	20800017 	ldw	r2,0(r4)
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];

	//printf("proc_0 -- num1: %x\n",*num1);

	*out1 = *num1 + 1;
   18068:	10800017 	ldw	r2,0(r2)
   1806c:	10800017 	ldw	r2,0(r2)
   18070:	10800044 	addi	r2,r2,1
   18074:	18800015 	stw	r2,0(r3)
   18078:	f800283a 	ret

0001807c <proc_1>:
	//printf("proc_0 -- out1: %x\n",*out1);
}

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
   1807c:	20800017 	ldw	r2,0(r4)
   18080:	10c00017 	ldw	r3,0(r2)
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
   18084:	20800117 	ldw	r2,4(r4)
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];

	//printf("proc_1 -- num1: %x\n",*num1);
	//printf("proc_1 -- num2: %x\n",*num2);

	*out1 = *num1 + *num2;
   18088:	19c00017 	ldw	r7,0(r3)
}

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
   1808c:	11000017 	ldw	r4,0(r2)
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];
   18090:	28800117 	ldw	r2,4(r5)
   18094:	11800017 	ldw	r6,0(r2)

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
   18098:	28800017 	ldw	r2,0(r5)
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];

	//printf("proc_1 -- num1: %x\n",*num1);
	//printf("proc_1 -- num2: %x\n",*num2);

	*out1 = *num1 + *num2;
   1809c:	11400017 	ldw	r5,0(r2)
   180a0:	20800017 	ldw	r2,0(r4)
   180a4:	3885883a 	add	r2,r7,r2
   180a8:	28800015 	stw	r2,0(r5)
	*out2 = *num2 - *num1;
   180ac:	20800017 	ldw	r2,0(r4)
   180b0:	18c00017 	ldw	r3,0(r3)
   180b4:	10c5c83a 	sub	r2,r2,r3
   180b8:	30800015 	stw	r2,0(r6)
   180bc:	f800283a 	ret

000180c0 <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   180c0:	defffd04 	addi	sp,sp,-12
   180c4:	dc000015 	stw	r16,0(sp)
   180c8:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   180cc:	010000b4 	movhi	r4,2
   180d0:	21288504 	addi	r4,r4,-24044
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   180d4:	dfc00215 	stw	ra,8(sp)
   180d8:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   180dc:	00194a00 	call	194a0 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   180e0:	8009883a 	mov	r4,r16
   180e4:	0019fac0 	call	19fac <altera_avalon_fifo_read_level>
   180e8:	010000b4 	movhi	r4,2
   180ec:	100b883a 	mov	r5,r2
   180f0:	21288f04 	addi	r4,r4,-24004
   180f4:	00193d40 	call	193d4 <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   180f8:	04400fc4 	movi	r17,63
   180fc:	880b883a 	mov	r5,r17
   18100:	8009883a 	mov	r4,r16
   18104:	0019f780 	call	19f78 <altera_avalon_fifo_read_status>
   18108:	010000b4 	movhi	r4,2
   1810c:	100b883a 	mov	r5,r2
   18110:	21289204 	addi	r4,r4,-23992
   18114:	00193d40 	call	193d4 <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   18118:	880b883a 	mov	r5,r17
   1811c:	8009883a 	mov	r4,r16
   18120:	0019fa00 	call	19fa0 <altera_avalon_fifo_read_event>
   18124:	010000b4 	movhi	r4,2
   18128:	100b883a 	mov	r5,r2
   1812c:	21289604 	addi	r4,r4,-23976
   18130:	00193d40 	call	193d4 <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   18134:	880b883a 	mov	r5,r17
   18138:	8009883a 	mov	r4,r16
   1813c:	0019f840 	call	19f84 <altera_avalon_fifo_read_ienable>
   18140:	010000b4 	movhi	r4,2
   18144:	100b883a 	mov	r5,r2
   18148:	21289904 	addi	r4,r4,-23964
   1814c:	00193d40 	call	193d4 <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   18150:	8009883a 	mov	r4,r16
   18154:	0019f980 	call	19f98 <altera_avalon_fifo_read_almostempty>
   18158:	010000b4 	movhi	r4,2
   1815c:	100b883a 	mov	r5,r2
   18160:	21289d04 	addi	r4,r4,-23948
   18164:	00193d40 	call	193d4 <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   18168:	8009883a 	mov	r4,r16
   1816c:	0019f900 	call	19f90 <altera_avalon_fifo_read_almostfull>
   18170:	010000b4 	movhi	r4,2
   18174:	100b883a 	mov	r5,r2
   18178:	2128a204 	addi	r4,r4,-23928
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   1817c:	dfc00217 	ldw	ra,8(sp)
   18180:	dc400117 	ldw	r17,4(sp)
   18184:	dc000017 	ldw	r16,0(sp)
   18188:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   1818c:	00193d41 	jmpi	193d4 <printf>

00018190 <read_buff>:
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   18190:	defff904 	addi	sp,sp,-28
   18194:	df000515 	stw	fp,20(sp)
   18198:	dc000015 	stw	r16,0(sp)
   1819c:	dfc00615 	stw	ra,24(sp)
   181a0:	dd000415 	stw	r20,16(sp)
   181a4:	dcc00315 	stw	r19,12(sp)
   181a8:	dc800215 	stw	r18,8(sp)
   181ac:	dc400115 	stw	r17,4(sp)

	//printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);


	if(proc_num == 0){
   181b0:	297fffcc 	andi	r5,r5,65535
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   181b4:	df000504 	addi	fp,sp,20
   181b8:	2021883a 	mov	r16,r4

	//printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);


	if(proc_num == 0){
   181bc:	28001d1e 	bne	r5,zero,18234 <read_buff+0xa4>
		if(input_num == 0){
   181c0:	31803fcc 	andi	r6,r6,255
   181c4:	30005d1e 	bne	r6,zero,1833c <read_buff+0x1ac>
			uint8_t tmp[edge->size_of_token_type];
   181c8:	20800203 	ldbu	r2,8(r4)
	//printf("read buffer - size of token type: %d\n",edge->size_of_token_type);
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);


	if(proc_num == 0){
		if(input_num == 0){
   181cc:	d825883a 	mov	r18,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   181d0:	0023883a 	mov	r17,zero
	//printf("read buffer - number of input token: %d\n",edge->num_of_inp_token);


	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   181d4:	108000c4 	addi	r2,r2,3
   181d8:	10807f0c 	andi	r2,r2,508
   181dc:	d8b7c83a 	sub	sp,sp,r2
   181e0:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   181e4:	05000604 	movi	r20,24

	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   181e8:	80800183 	ldbu	r2,6(r16)
   181ec:	88804c0e 	bge	r17,r2,18320 <read_buff+0x190>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   181f0:	81800203 	ldbu	r6,8(r16)
   181f4:	81000317 	ldw	r4,12(r16)
   181f8:	980b883a 	mov	r5,r19
   181fc:	0018f6c0 	call	18f6c <ring_buffer_dequeue_arr>
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   18200:	81400203 	ldbu	r5,8(r16)
   18204:	81000317 	ldw	r4,12(r16)
   18208:	a14bc83a 	sub	r5,r20,r5
   1820c:	29403fcc 	andi	r5,r5,255
   18210:	00190240 	call	19024 <ring_buffer_pop_arr>
				//printf("circular buffer size(after pop): %d\n",ring_buffer_num_items((edge->buffer)));
				/*for(int i =0; i< sizeof(tmp); i++){
					printf("tmp[i]: %d\n",tmp[i]);
				}*/
				proc_0_inp_0[i] = ( (P0_INP0_TYPE*)tmp )[0];
   18214:	d1204317 	ldw	r4,-32500(gp)
   18218:	8c45883a 	add	r2,r17,r17
   1821c:	98c00017 	ldw	r3,0(r19)
   18220:	1085883a 	add	r2,r2,r2
   18224:	2085883a 	add	r2,r4,r2
   18228:	10c00015 	stw	r3,0(r2)

	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   1822c:	8c400044 	addi	r17,r17,1
   18230:	003fed06 	br	181e8 <_gp+0xffff5dd0>
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P0_INP0_TYPE*)tmp )[0]);
		}
	}

	if(proc_num == 1){
   18234:	00800044 	movi	r2,1
   18238:	2880401e 	bne	r5,r2,1833c <read_buff+0x1ac>
		if(input_num == 0){
   1823c:	31803fcc 	andi	r6,r6,255
   18240:	30001b1e 	bne	r6,zero,182b0 <read_buff+0x120>
			uint8_t tmp[edge->size_of_token_type];
   18244:	20800203 	ldbu	r2,8(r4)
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P0_INP0_TYPE*)tmp )[0]);
		}
	}

	if(proc_num == 1){
		if(input_num == 0){
   18248:	d825883a 	mov	r18,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   1824c:	0023883a 	mov	r17,zero
		}
	}

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   18250:	108000c4 	addi	r2,r2,3
   18254:	10807f0c 	andi	r2,r2,508
   18258:	d8b7c83a 	sub	sp,sp,r2
   1825c:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   18260:	05000604 	movi	r20,24

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   18264:	80800183 	ldbu	r2,6(r16)
   18268:	88802d0e 	bge	r17,r2,18320 <read_buff+0x190>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   1826c:	81800203 	ldbu	r6,8(r16)
   18270:	81000317 	ldw	r4,12(r16)
   18274:	980b883a 	mov	r5,r19
   18278:	0018f6c0 	call	18f6c <ring_buffer_dequeue_arr>
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   1827c:	81400203 	ldbu	r5,8(r16)
   18280:	81000317 	ldw	r4,12(r16)
   18284:	a14bc83a 	sub	r5,r20,r5
   18288:	29403fcc 	andi	r5,r5,255
   1828c:	00190240 	call	19024 <ring_buffer_pop_arr>
				//printf("circular buffer size(after pop): %d\n",ring_buffer_num_items((edge->buffer)));
				/*for(int i =0; i< sizeof(tmp); i++){
					printf("tmp[i]: %d\n",tmp[i]);
				}*/
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
   18290:	d1205117 	ldw	r4,-32444(gp)
   18294:	8c45883a 	add	r2,r17,r17
   18298:	98c00017 	ldw	r3,0(r19)
   1829c:	1085883a 	add	r2,r2,r2
   182a0:	2085883a 	add	r2,r4,r2
   182a4:	10c00015 	stw	r3,0(r2)

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   182a8:	8c400044 	addi	r17,r17,1
   182ac:	003fed06 	br	18264 <_gp+0xffff5e4c>
			/*for(int i =0; i< sizeof(proc_1_inp_0); i++){
				printf("proc_1_inp_0[i]: %d\n",proc_1_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P1_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
   182b0:	3140221e 	bne	r6,r5,1833c <read_buff+0x1ac>
			uint8_t tmp[edge->size_of_token_type];
   182b4:	20800203 	ldbu	r2,8(r4)
			/*for(int i =0; i< sizeof(proc_1_inp_0); i++){
				printf("proc_1_inp_0[i]: %d\n",proc_1_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P1_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
   182b8:	d825883a 	mov	r18,sp
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   182bc:	0023883a 	mov	r17,zero
				printf("proc_1_inp_0[i]: %d\n",proc_1_inp_0[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P1_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];
   182c0:	108000c4 	addi	r2,r2,3
   182c4:	10807f0c 	andi	r2,r2,508
   182c8:	d8b7c83a 	sub	sp,sp,r2
   182cc:	d827883a 	mov	r19,sp

			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   182d0:	05000604 	movi	r20,24
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P1_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   182d4:	80800183 	ldbu	r2,6(r16)
   182d8:	8880110e 	bge	r17,r2,18320 <read_buff+0x190>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   182dc:	81800203 	ldbu	r6,8(r16)
   182e0:	81000317 	ldw	r4,12(r16)
   182e4:	980b883a 	mov	r5,r19
   182e8:	0018f6c0 	call	18f6c <ring_buffer_dequeue_arr>
				//printf("circular buffer size(after dequeue): %d\n",ring_buffer_num_items((edge->buffer)));
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   182ec:	81400203 	ldbu	r5,8(r16)
   182f0:	81000317 	ldw	r4,12(r16)
   182f4:	a14bc83a 	sub	r5,r20,r5
   182f8:	29403fcc 	andi	r5,r5,255
   182fc:	00190240 	call	19024 <ring_buffer_pop_arr>
				//printf("circular buffer size(after pop): %d\n",ring_buffer_num_items((edge->buffer)));
				/*for(int i =0; i< sizeof(tmp); i++){
					printf("tmp[i]: %d\n",tmp[i]);
				}*/
				proc_1_inp_1[i] = ( (P1_INP1_TYPE*)tmp )[0];
   18300:	d1205017 	ldw	r4,-32448(gp)
   18304:	8c45883a 	add	r2,r17,r17
   18308:	98c00017 	ldw	r3,0(r19)
   1830c:	1085883a 	add	r2,r2,r2
   18310:	2085883a 	add	r2,r4,r2
   18314:	10c00015 	stw	r3,0(r2)
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P1_INP0_TYPE*)tmp )[0]);
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];

			for(int i =0; i < edge->num_of_inp_token; ++i){
   18318:	8c400044 	addi	r17,r17,1
   1831c:	003fed06 	br	182d4 <_gp+0xffff5ebc>
				proc_1_inp_1[i] = ( (P1_INP1_TYPE*)tmp )[0];
			}
			/*for(int i =0; i< sizeof(proc_1_inp_1); i++){
				printf("proc_1_inp_1[i]: %d\n",proc_1_inp_1[i]);
			}*/
			printf("processor number %d reads data from %d ,which is %x\n",edge->proc_dest,edge->proc_src,( (P1_INP1_TYPE*)tmp )[0]);
   18320:	99c00017 	ldw	r7,0(r19)
   18324:	8180008b 	ldhu	r6,2(r16)
   18328:	8140010b 	ldhu	r5,4(r16)
   1832c:	010000b4 	movhi	r4,2
   18330:	2128a704 	addi	r4,r4,-23908
   18334:	00193d40 	call	193d4 <printf>
   18338:	9037883a 	mov	sp,r18
		}
	}
}
   1833c:	e6fffb04 	addi	sp,fp,-20
   18340:	dfc00617 	ldw	ra,24(sp)
   18344:	df000517 	ldw	fp,20(sp)
   18348:	dd000417 	ldw	r20,16(sp)
   1834c:	dcc00317 	ldw	r19,12(sp)
   18350:	dc800217 	ldw	r18,8(sp)
   18354:	dc400117 	ldw	r17,4(sp)
   18358:	dc000017 	ldw	r16,0(sp)
   1835c:	dec00704 	addi	sp,sp,28
   18360:	f800283a 	ret

00018364 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   18364:	defffb04 	addi	sp,sp,-20
   18368:	dcc00315 	stw	r19,12(sp)
   1836c:	dc800215 	stw	r18,8(sp)
   18370:	dc400115 	stw	r17,4(sp)
   18374:	dfc00415 	stw	ra,16(sp)
   18378:	dc000015 	stw	r16,0(sp)
   1837c:	2023883a 	mov	r17,r4
   18380:	2825883a 	mov	r18,r5
   18384:	3027883a 	mov	r19,r6

	//printf("circular buffer size: %d\n",ring_buffer_num_items((edge->buffer)));
	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
   18388:	88c00317 	ldw	r3,12(r17)
   1838c:	89000183 	ldbu	r4,6(r17)
   18390:	01400604 	movi	r5,24
   18394:	18802043 	ldbu	r2,129(r3)
   18398:	1c002003 	ldbu	r16,128(r3)
   1839c:	1421c83a 	sub	r16,r2,r16
   183a0:	84001fcc 	andi	r16,r16,127
   183a4:	00190e40 	call	190e4 <__mulsi3>
   183a8:	8080030e 	bge	r16,r2,183b8 <read_data+0x54>
		//alt_putstr("waiting for receiving data:\n");
		receive_poll();
   183ac:	0018e300 	call	18e30 <receive_poll>

		//alt_putstr("read from FIFO:\n");
		receive_packet();
   183b0:	0018d000 	call	18d00 <receive_packet>
   183b4:	003ff406 	br	18388 <_gp+0xffff5f70>
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
   183b8:	99803fcc 	andi	r6,r19,255
   183bc:	917fffcc 	andi	r5,r18,65535
   183c0:	8809883a 	mov	r4,r17
}
   183c4:	dfc00417 	ldw	ra,16(sp)
   183c8:	dcc00317 	ldw	r19,12(sp)
   183cc:	dc800217 	ldw	r18,8(sp)
   183d0:	dc400117 	ldw	r17,4(sp)
   183d4:	dc000017 	ldw	r16,0(sp)
   183d8:	dec00504 	addi	sp,sp,20

		//alt_putstr("read from FIFO:\n");
		receive_packet();
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
   183dc:	00181901 	jmpi	18190 <read_buff>

000183e0 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array){
   183e0:	defff604 	addi	sp,sp,-40
   183e4:	dc000815 	stw	r16,32(sp)
   183e8:	dfc00915 	stw	ra,36(sp)
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   183ec:	20c00203 	ldbu	r3,8(r4)
	}
	//printf("circular buffer size(after read data): %d\n",ring_buffer_num_items((edge->buffer)));
	read_buff(edge, proc_num, input_num);
}

void serializing_send(struct Edge *edge, unsigned char *array){
   183f0:	2021883a 	mov	r16,r4
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   183f4:	0005883a 	mov	r2,zero
   183f8:	10c0070e 	bge	r2,r3,18418 <serializing_send+0x38>
		send_array[i] = array[i];
   183fc:	d9800204 	addi	r6,sp,8
   18400:	3089883a 	add	r4,r6,r2
   18404:	288d883a 	add	r6,r5,r2
   18408:	31800003 	ldbu	r6,0(r6)
}

void serializing_send(struct Edge *edge, unsigned char *array){
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   1840c:	10800044 	addi	r2,r2,1
		send_array[i] = array[i];
   18410:	21800005 	stb	r6,0(r4)
   18414:	003ff806 	br	183f8 <_gp+0xffff5fe0>
		//printf("in serialized data function: array[i]: %d\n",array[i]);
	}

	if(edge->external == 1){
   18418:	80800403 	ldbu	r2,16(r16)
   1841c:	10000a26 	beq	r2,zero,18448 <serializing_send+0x68>
		//printf("external\n");
		//alt_putstr("write to FIFO\n");
		/*for(int i = 0; i < 24; ++i)
			printf("send_array: %d\t",send_array[i]);*/
		send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   18420:	d8800204 	addi	r2,sp,8
   18424:	81c0010b 	ldhu	r7,4(r16)
   18428:	8180008b 	ldhu	r6,2(r16)
   1842c:	81400043 	ldbu	r5,1(r16)
   18430:	81000003 	ldbu	r4,0(r16)
   18434:	d8800115 	stw	r2,4(sp)
   18438:	00800804 	movi	r2,32
   1843c:	d8800015 	stw	r2,0(sp)
   18440:	0018af80 	call	18af8 <send_packet>
   18444:	00000406 	br	18458 <serializing_send+0x78>
	}
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
   18448:	81000317 	ldw	r4,12(r16)
   1844c:	01800604 	movi	r6,24
   18450:	d9400204 	addi	r5,sp,8
   18454:	0018ee00 	call	18ee0 <ring_buffer_queue_arr>
	}
	printf("processor number %d sends data to %d ,which is %x\n",edge->proc_src,edge->proc_dest,( (int*)send_array )[0]);
   18458:	d9c00217 	ldw	r7,8(sp)
   1845c:	8180010b 	ldhu	r6,4(r16)
   18460:	8140008b 	ldhu	r5,2(r16)
   18464:	010000b4 	movhi	r4,2
   18468:	2128b504 	addi	r4,r4,-23852
   1846c:	00193d40 	call	193d4 <printf>

}
   18470:	dfc00917 	ldw	ra,36(sp)
   18474:	dc000817 	ldw	r16,32(sp)
   18478:	dec00a04 	addi	sp,sp,40
   1847c:	f800283a 	ret

00018480 <send_data>:

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   18480:	defffc04 	addi	sp,sp,-16
   18484:	dc000015 	stw	r16,0(sp)
   18488:	dfc00315 	stw	ra,12(sp)
   1848c:	dc800215 	stw	r18,8(sp)
   18490:	dc400115 	stw	r17,4(sp)

	if(proc_num == 0){
   18494:	297fffcc 	andi	r5,r5,65535
	}
	printf("processor number %d sends data to %d ,which is %x\n",edge->proc_src,edge->proc_dest,( (int*)send_array )[0]);

}

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   18498:	2021883a 	mov	r16,r4

	if(proc_num == 0){
   1849c:	28000e1e 	bne	r5,zero,184d8 <send_data+0x58>
		if(output_num == 0){
   184a0:	31803fcc 	andi	r6,r6,255
   184a4:	3000291e 	bne	r6,zero,1854c <send_data+0xcc>
   184a8:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_0_outarg_0[i]));
   184ac:	d4a04404 	addi	r18,gp,-32496

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 0){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   184b0:	808001c3 	ldbu	r2,7(r16)
   184b4:	8880250e 	bge	r17,r2,1854c <send_data+0xcc>
				serializing_send(edge, ((unsigned char*)proc_0_outarg_0[i]));
   184b8:	8c45883a 	add	r2,r17,r17
   184bc:	1085883a 	add	r2,r2,r2
   184c0:	1485883a 	add	r2,r2,r18
   184c4:	11400017 	ldw	r5,0(r2)
   184c8:	8009883a 	mov	r4,r16

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 0){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   184cc:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_0_outarg_0[i]));
   184d0:	00183e00 	call	183e0 <serializing_send>
   184d4:	003ff606 	br	184b0 <_gp+0xffff6098>
			}
		}
	}

	if(proc_num == 1){
   184d8:	00800044 	movi	r2,1
   184dc:	28801b1e 	bne	r5,r2,1854c <send_data+0xcc>
		if(output_num == 0){
   184e0:	31803fcc 	andi	r6,r6,255
   184e4:	30000c1e 	bne	r6,zero,18518 <send_data+0x98>
   184e8:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
   184ec:	d4a05304 	addi	r18,gp,-32436
		}
	}

	if(proc_num == 1){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   184f0:	808001c3 	ldbu	r2,7(r16)
   184f4:	8880150e 	bge	r17,r2,1854c <send_data+0xcc>
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
   184f8:	8c45883a 	add	r2,r17,r17
   184fc:	1085883a 	add	r2,r2,r2
   18500:	1485883a 	add	r2,r2,r18
   18504:	11400017 	ldw	r5,0(r2)
   18508:	8009883a 	mov	r4,r16
		}
	}

	if(proc_num == 1){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   1850c:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
   18510:	00183e00 	call	183e0 <serializing_send>
   18514:	003ff606 	br	184f0 <_gp+0xffff60d8>
			}
		}
		if(output_num == 1){
   18518:	31400c1e 	bne	r6,r5,1854c <send_data+0xcc>
   1851c:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_1[i]));
   18520:	d4a04a04 	addi	r18,gp,-32472
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
			}
		}
		if(output_num == 1){
			for(int i =0; i < edge->num_of_out_token; ++i){
   18524:	808001c3 	ldbu	r2,7(r16)
   18528:	8880080e 	bge	r17,r2,1854c <send_data+0xcc>
				serializing_send(edge, ((unsigned char*)proc_1_outarg_1[i]));
   1852c:	8c45883a 	add	r2,r17,r17
   18530:	1085883a 	add	r2,r2,r2
   18534:	1485883a 	add	r2,r2,r18
   18538:	11400017 	ldw	r5,0(r2)
   1853c:	8009883a 	mov	r4,r16
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
			}
		}
		if(output_num == 1){
			for(int i =0; i < edge->num_of_out_token; ++i){
   18540:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_1_outarg_1[i]));
   18544:	00183e00 	call	183e0 <serializing_send>
   18548:	003ff606 	br	18524 <_gp+0xffff610c>
			}
		}
	}
}
   1854c:	dfc00317 	ldw	ra,12(sp)
   18550:	dc800217 	ldw	r18,8(sp)
   18554:	dc400117 	ldw	r17,4(sp)
   18558:	dc000017 	ldw	r16,0(sp)
   1855c:	dec00404 	addi	sp,sp,16
   18560:	f800283a 	ret

00018564 <proc_args_init>:

void proc_args_init(){
   18564:	defffb04 	addi	sp,sp,-20
   18568:	dc000015 	stw	r16,0(sp)
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
   1856c:	04000104 	movi	r16,4
   18570:	8009883a 	mov	r4,r16
			}
		}
	}
}

void proc_args_init(){
   18574:	dfc00415 	stw	ra,16(sp)
   18578:	dcc00315 	stw	r19,12(sp)
   1857c:	dc800215 	stw	r18,8(sp)
   18580:	dc400115 	stw	r17,4(sp)
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
   18584:	001910c0 	call	1910c <malloc>
	proc_0_out_0 = (P0_OUT0_TYPE*)malloc(P0_OUT0_NUM_OF_TOKEN*sizeof(P0_OUT0_TYPE));
   18588:	8009883a 	mov	r4,r16
	}
}

void proc_args_init(){
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
   1858c:	1023883a 	mov	r17,r2
   18590:	d0a04315 	stw	r2,-32500(gp)
	proc_0_out_0 = (P0_OUT0_TYPE*)malloc(P0_OUT0_NUM_OF_TOKEN*sizeof(P0_OUT0_TYPE));
   18594:	001910c0 	call	1910c <malloc>
   18598:	d0a04c15 	stw	r2,-32464(gp)

	// pointers to elements for proc 0
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
    proc_0_outarg_0[0] = &proc_0_out_0[0];
   1859c:	d0a04415 	stw	r2,-32496(gp)

    // top level pointers to be passed for proc 0
    proc_0_inps[0] = proc_0_inparg_0;
   185a0:	d0a05204 	addi	r2,gp,-32440
    proc_0_outs[0] = proc_0_outarg_0;


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
   185a4:	8009883a 	mov	r4,r16
	// pointers to elements for proc 0
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
    proc_0_outarg_0[0] = &proc_0_out_0[0];

    // top level pointers to be passed for proc 0
    proc_0_inps[0] = proc_0_inparg_0;
   185a8:	d0a05415 	stw	r2,-32432(gp)
    proc_0_outs[0] = proc_0_outarg_0;
   185ac:	d0a04404 	addi	r2,gp,-32496
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
	proc_0_out_0 = (P0_OUT0_TYPE*)malloc(P0_OUT0_NUM_OF_TOKEN*sizeof(P0_OUT0_TYPE));

	// pointers to elements for proc 0
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
   185b0:	d4605215 	stw	r17,-32440(gp)
    proc_0_outarg_0[0] = &proc_0_out_0[0];

    // top level pointers to be passed for proc 0
    proc_0_inps[0] = proc_0_inparg_0;
    proc_0_outs[0] = proc_0_outarg_0;
   185b4:	d0a04815 	stw	r2,-32480(gp)


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
   185b8:	001910c0 	call	1910c <malloc>
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
   185bc:	8009883a 	mov	r4,r16
    proc_0_inps[0] = proc_0_inparg_0;
    proc_0_outs[0] = proc_0_outarg_0;


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
   185c0:	1027883a 	mov	r19,r2
   185c4:	d0a05115 	stw	r2,-32444(gp)
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
   185c8:	001910c0 	call	1910c <malloc>
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
   185cc:	8009883a 	mov	r4,r16
    proc_0_outs[0] = proc_0_outarg_0;


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
   185d0:	1025883a 	mov	r18,r2
   185d4:	d0a05015 	stw	r2,-32448(gp)
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
   185d8:	001910c0 	call	1910c <malloc>
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));
   185dc:	8009883a 	mov	r4,r16


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
   185e0:	1023883a 	mov	r17,r2
   185e4:	d0a04b15 	stw	r2,-32468(gp)
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));
   185e8:	001910c0 	call	1910c <malloc>
   185ec:	d0a04915 	stw	r2,-32476(gp)

	// pointers to elements for proc 1
    proc_1_inparg_0[0] = &proc_1_inp_0[0];
    proc_1_inparg_1[0] = &proc_1_inp_1[0];
    proc_1_outarg_0[0] = &proc_1_out_0[0];
    proc_1_outarg_1[0] = &proc_1_out_1[0];
   185f0:	d0a04a15 	stw	r2,-32472(gp)

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
   185f4:	d0e04204 	addi	r3,gp,-32504
   185f8:	d0a04e04 	addi	r2,gp,-32456
   185fc:	10c00015 	stw	r3,0(r2)
    proc_1_inps[1] = proc_1_inparg_1;
   18600:	d0e04504 	addi	r3,gp,-32492
   18604:	10c00115 	stw	r3,4(r2)
    proc_1_outs[0] = proc_1_outarg_0;
   18608:	d0a04604 	addi	r2,gp,-32488
   1860c:	d0e05304 	addi	r3,gp,-32436
   18610:	10c00015 	stw	r3,0(r2)
    proc_1_outs[1] = proc_1_outarg_1;
   18614:	d0e04a04 	addi	r3,gp,-32472
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));

	// pointers to elements for proc 1
    proc_1_inparg_0[0] = &proc_1_inp_0[0];
   18618:	d4e04215 	stw	r19,-32504(gp)
    proc_1_inparg_1[0] = &proc_1_inp_1[0];
   1861c:	d4a04515 	stw	r18,-32492(gp)
    proc_1_outarg_0[0] = &proc_1_out_0[0];
   18620:	d4605315 	stw	r17,-32436(gp)

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
    proc_1_outs[1] = proc_1_outarg_1;
   18624:	10c00115 	stw	r3,4(r2)


}
   18628:	dfc00417 	ldw	ra,16(sp)
   1862c:	dcc00317 	ldw	r19,12(sp)
   18630:	dc800217 	ldw	r18,8(sp)
   18634:	dc400117 	ldw	r17,4(sp)
   18638:	dc000017 	ldw	r16,0(sp)
   1863c:	dec00504 	addi	sp,sp,20
   18640:	f800283a 	ret

00018644 <cleanUp>:

void cleanUp(){
	// clean up proc 0
	free(proc_0_inp_0);
   18644:	d1204317 	ldw	r4,-32500(gp)
    proc_1_outs[1] = proc_1_outarg_1;


}

void cleanUp(){
   18648:	deffff04 	addi	sp,sp,-4
   1864c:	dfc00015 	stw	ra,0(sp)
	// clean up proc 0
	free(proc_0_inp_0);
   18650:	00191200 	call	19120 <free>
	free(proc_0_out_0);
   18654:	d1204c17 	ldw	r4,-32464(gp)
   18658:	00191200 	call	19120 <free>

	// clean up proc 1
	free(proc_1_inp_0);
   1865c:	d1205117 	ldw	r4,-32444(gp)
   18660:	00191200 	call	19120 <free>
	free(proc_1_inp_1);
   18664:	d1205017 	ldw	r4,-32448(gp)
   18668:	00191200 	call	19120 <free>
	free(proc_1_out_0);
   1866c:	d1204b17 	ldw	r4,-32468(gp)
   18670:	00191200 	call	19120 <free>
	free(proc_1_out_1);
   18674:	d1204917 	ldw	r4,-32476(gp)
}
   18678:	dfc00017 	ldw	ra,0(sp)
   1867c:	dec00104 	addi	sp,sp,4

	// clean up proc 1
	free(proc_1_inp_0);
	free(proc_1_inp_1);
	free(proc_1_out_0);
	free(proc_1_out_1);
   18680:	00191201 	jmpi	19120 <free>

00018684 <start_FIFO>:
}

void start_FIFO(){
   18684:	defffd04 	addi	sp,sp,-12
   18688:	dc400115 	stw	r17,4(sp)
   1868c:	dc000015 	stw	r16,0(sp)


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   18690:	044002c4 	movi	r17,11
   18694:	04000084 	movi	r16,2
   18698:	880f883a 	mov	r7,r17
   1869c:	800d883a 	mov	r6,r16
   186a0:	000b883a 	mov	r5,zero
   186a4:	01240814 	movui	r4,36896
	free(proc_1_inp_1);
	free(proc_1_out_0);
	free(proc_1_out_1);
}

void start_FIFO(){
   186a8:	dfc00215 	stw	ra,8(sp)


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   186ac:	001a0240 	call	1a024 <altera_avalon_fifo_init>
   186b0:	880f883a 	mov	r7,r17
   186b4:	800d883a 	mov	r6,r16
   186b8:	000b883a 	mov	r5,zero
   186bc:	01240014 	movui	r4,36864
	//alt_putstr("source status:\n");
	//print_status(FIFO_SOURCE_0_IN_CSR_BASE);

	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_0_IN_CSR_BASE);
}
   186c0:	dfc00217 	ldw	ra,8(sp)
   186c4:	dc400117 	ldw	r17,4(sp)
   186c8:	dc000017 	ldw	r16,0(sp)
   186cc:	dec00304 	addi	sp,sp,12


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   186d0:	001a0241 	jmpi	1a024 <altera_avalon_fifo_init>

000186d4 <main>:
	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_0_IN_CSR_BASE);
}

int main()
{
   186d4:	defff204 	addi	sp,sp,-56
	char p0_initial_token[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   186d8:	01800604 	movi	r6,24
   186dc:	014000b4 	movhi	r5,2
   186e0:	d989883a 	add	r4,sp,r6
   186e4:	2968c1c4 	addi	r5,r5,-23801
	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_0_IN_CSR_BASE);
}

int main()
{
   186e8:	dfc00d15 	stw	ra,52(sp)
   186ec:	dc000c15 	stw	r16,48(sp)
	char p0_initial_token[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
   186f0:	00191340 	call	19134 <memcpy>
	char p1_initial_token[24] = {24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1};
   186f4:	014000b4 	movhi	r5,2
   186f8:	01800604 	movi	r6,24
   186fc:	2968c7c4 	addi	r5,r5,-23777
   18700:	d809883a 	mov	r4,sp
   18704:	00191340 	call	19134 <memcpy>

	start_FIFO();
   18708:	00186840 	call	18684 <start_FIFO>
	proc_args_init();
   1870c:	00185640 	call	18564 <proc_args_init>
	init_structures();
   18710:	00189680 	call	18968 <init_structures>

	ring_buffer_queue_arr(&buff_p5_p0,p0_initial_token,24);
   18714:	01800604 	movi	r6,24
   18718:	010000b4 	movhi	r4,2
   1871c:	d98b883a 	add	r5,sp,r6
   18720:	21298184 	addi	r4,r4,-23034
   18724:	0018ee00 	call	18ee0 <ring_buffer_queue_arr>
	ring_buffer_queue_arr(&buff_p4_p1,p1_initial_token,24);
   18728:	010000b4 	movhi	r4,2
   1872c:	01800604 	movi	r6,24
   18730:	d80b883a 	mov	r5,sp
   18734:	21296104 	addi	r4,r4,-23164
   18738:	0018ee00 	call	18ee0 <ring_buffer_queue_arr>
   1873c:	04000144 	movi	r16,5

	for(int k = 0; k < 5; k++){

	  for(int i = 0; i < P0_NUM_OF_INPS; ++i){
		  //alt_putstr("before get edge(for receive)\n");
		  struct Edge *edge = get_edge(0,i,0/*it means input edges*/);
   18740:	000d883a 	mov	r6,zero
   18744:	000b883a 	mov	r5,zero
   18748:	0009883a 	mov	r4,zero
   1874c:	00188340 	call	18834 <get_edge>
		  printf("edge node dest: %d\n",edge->node_dest);
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  //alt_putstr("before read_data\n");
		  read_data(edge,0/*which process*/, i/*which input*/);
   18750:	1009883a 	mov	r4,r2
   18754:	000d883a 	mov	r6,zero
   18758:	000b883a 	mov	r5,zero
   1875c:	00183640 	call	18364 <read_data>
		  //alt_putstr("after read_data\n");
	  }

	  //alt_putstr("before call proc_0\n");
	  proc_0(proc_0_inps, proc_0_outs);
   18760:	d1604804 	addi	r5,gp,-32480
   18764:	d1205404 	addi	r4,gp,-32432
   18768:	001805c0 	call	1805c <proc_0>


	  for(int i = 0; i <P0_NUM_OF_OUTS; ++i){

		  //alt_putstr("before get edge(for send)\n");
		  struct Edge *edge = get_edge(0,i,1/*it means output edges*/);
   1876c:	01800044 	movi	r6,1
   18770:	000b883a 	mov	r5,zero
   18774:	0009883a 	mov	r4,zero
   18778:	00188340 	call	18834 <get_edge>
		  printf("edge node dest: %d\n",  edge->node_dest);
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  //alt_putstr("before send_data\n");
		  send_data(edge,0/*which process*/, i/*which output*/);
   1877c:	1009883a 	mov	r4,r2
   18780:	000d883a 	mov	r6,zero
   18784:	000b883a 	mov	r5,zero
   18788:	00184800 	call	18480 <send_data>


	  for(int i = 0; i <P1_NUM_OF_INPS; ++i){
		  /* This is only for current node */
		  //alt_putstr("before get edge(for receive)\n");
		  struct Edge *edge = get_edge(1,i,0/*it means input edges*/);
   1878c:	000d883a 	mov	r6,zero
   18790:	000b883a 	mov	r5,zero
   18794:	01000044 	movi	r4,1
   18798:	00188340 	call	18834 <get_edge>
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  /* This is only for current node */
		  //alt_putstr("before read_data\n");
		  read_data(edge,1/*which process*/, i/*which input*/);
   1879c:	1009883a 	mov	r4,r2
   187a0:	000d883a 	mov	r6,zero
   187a4:	01400044 	movi	r5,1
   187a8:	00183640 	call	18364 <read_data>


	  for(int i = 0; i <P1_NUM_OF_INPS; ++i){
		  /* This is only for current node */
		  //alt_putstr("before get edge(for receive)\n");
		  struct Edge *edge = get_edge(1,i,0/*it means input edges*/);
   187ac:	01400044 	movi	r5,1
   187b0:	2809883a 	mov	r4,r5
   187b4:	000d883a 	mov	r6,zero
   187b8:	00188340 	call	18834 <get_edge>
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  /* This is only for current node */
		  //alt_putstr("before read_data\n");
		  read_data(edge,1/*which process*/, i/*which input*/);
   187bc:	01800044 	movi	r6,1
   187c0:	300b883a 	mov	r5,r6
   187c4:	1009883a 	mov	r4,r2
   187c8:	00183640 	call	18364 <read_data>
		  //alt_putstr("after read_data\n");
	  }

	  //alt_putstr("before call proc_1\n");
	  proc_1(proc_1_inps, proc_1_outs);
   187cc:	d1604604 	addi	r5,gp,-32488
   187d0:	d1204e04 	addi	r4,gp,-32456
   187d4:	001807c0 	call	1807c <proc_1>

	  for(int i = 0; i <P1_NUM_OF_OUTS; ++i){

		  //alt_putstr("before get edge(for send)\n");
		  /* This is only for current node */
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
   187d8:	01800044 	movi	r6,1
   187dc:	3009883a 	mov	r4,r6
   187e0:	000b883a 	mov	r5,zero
   187e4:	00188340 	call	18834 <get_edge>
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  /* This is only for current node */
		  //alt_putstr("before send_data\n");
		  send_data(edge,1/*which process*/, i/*which output*/);
   187e8:	1009883a 	mov	r4,r2
   187ec:	000d883a 	mov	r6,zero
   187f0:	01400044 	movi	r5,1
   187f4:	00184800 	call	18480 <send_data>

	  for(int i = 0; i <P1_NUM_OF_OUTS; ++i){

		  //alt_putstr("before get edge(for send)\n");
		  /* This is only for current node */
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
   187f8:	01800044 	movi	r6,1
   187fc:	300b883a 	mov	r5,r6
   18800:	3009883a 	mov	r4,r6
   18804:	00188340 	call	18834 <get_edge>
		  printf("edge proc source: %d\n",edge->proc_src);
		  printf("edge proc source: %d\n",edge->proc_dest);*/

		  /* This is only for current node */
		  //alt_putstr("before send_data\n");
		  send_data(edge,1/*which process*/, i/*which output*/);
   18808:	01800044 	movi	r6,1
   1880c:	1009883a 	mov	r4,r2
   18810:	300b883a 	mov	r5,r6
   18814:	00184800 	call	18480 <send_data>
		  //alt_putstr("after send_data\n");
	  }
	  usleep(4000000000);
   18818:	013b9af4 	movhi	r4,61035
   1881c:	210a0004 	addi	r4,r4,10240
   18820:	843fffc4 	addi	r16,r16,-1
   18824:	0019ef00 	call	19ef0 <usleep>

	ring_buffer_queue_arr(&buff_p5_p0,p0_initial_token,24);
	ring_buffer_queue_arr(&buff_p4_p1,p1_initial_token,24);


	for(int k = 0; k < 5; k++){
   18828:	803fc51e 	bne	r16,zero,18740 <_gp+0xffff6328>
		  send_data(edge,1/*which process*/, i/*which output*/);
		  //alt_putstr("after send_data\n");
	  }
	  usleep(4000000000);
	}
	  cleanUp();
   1882c:	00186440 	call	18644 <cleanUp>
   18830:	003fff06 	br	18830 <_gp+0xffff6418>

00018834 <get_edge>:
/****************** Structure ******************/

/* This is only for current node */
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   18834:	31803fcc 	andi	r6,r6,255
   18838:	30000f1e 	bne	r6,zero,18878 <get_edge+0x44>
        if (proc_num == 0) {
   1883c:	21003fcc 	andi	r4,r4,255
   18840:	2000051e 	bne	r4,zero,18858 <get_edge+0x24>
            if (port_num == 0) {
   18844:	29403fcc 	andi	r5,r5,255
   18848:	28001f1e 	bne	r5,zero,188c8 <get_edge+0x94>
                return &edge_p5_p0;
   1884c:	008000b4 	movhi	r2,2
   18850:	10a9e604 	addi	r2,r2,-22632
   18854:	f800283a 	ret
            }
        }
        if (proc_num == 1) {
   18858:	00800044 	movi	r2,1
   1885c:	20801a1e 	bne	r4,r2,188c8 <get_edge+0x94>
            if (port_num == 0) {
   18860:	29403fcc 	andi	r5,r5,255
   18864:	28001226 	beq	r5,zero,188b0 <get_edge+0x7c>
                return &edge_p0_p1;
            }
            if (port_num == 1) {
   18868:	2900171e 	bne	r5,r4,188c8 <get_edge+0x94>
                return &edge_p4_p1;
   1886c:	008000b4 	movhi	r2,2
   18870:	10a9eb04 	addi	r2,r2,-22612
   18874:	f800283a 	ret
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   18878:	00800044 	movi	r2,1
   1887c:	3080121e 	bne	r6,r2,188c8 <get_edge+0x94>
        if (proc_num == 0) {
   18880:	21003fcc 	andi	r4,r4,255
   18884:	2000031e 	bne	r4,zero,18894 <get_edge+0x60>
            if (port_num == 0) {
   18888:	29403fcc 	andi	r5,r5,255
   1888c:	28000e1e 	bne	r5,zero,188c8 <get_edge+0x94>
   18890:	00000706 	br	188b0 <get_edge+0x7c>
                return &edge_p0_p1;
            }
        }
        if (proc_num == 1) {
   18894:	21800c1e 	bne	r4,r6,188c8 <get_edge+0x94>
            if (port_num == 0) {
   18898:	29403fcc 	andi	r5,r5,255
   1889c:	28000726 	beq	r5,zero,188bc <get_edge+0x88>
                return &edge_p1_p2;
            }
            if (port_num == 1) {
   188a0:	2900091e 	bne	r5,r4,188c8 <get_edge+0x94>
                return &edge_p1_p3;
   188a4:	008000b4 	movhi	r2,2
   188a8:	10a9c304 	addi	r2,r2,-22772
   188ac:	f800283a 	ret
                return &edge_p5_p0;
            }
        }
        if (proc_num == 1) {
            if (port_num == 0) {
                return &edge_p0_p1;
   188b0:	008000b4 	movhi	r2,2
   188b4:	10a9e104 	addi	r2,r2,-22652
   188b8:	f800283a 	ret
                return &edge_p0_p1;
            }
        }
        if (proc_num == 1) {
            if (port_num == 0) {
                return &edge_p1_p2;
   188bc:	008000b4 	movhi	r2,2
   188c0:	10a9f004 	addi	r2,r2,-22592
   188c4:	f800283a 	ret
                return &edge_p1_p3;
            }
        }
    }

    return 0;
   188c8:	0005883a 	mov	r2,zero
}
   188cc:	f800283a 	ret

000188d0 <get_buffer>:

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   188d0:	00c000b4 	movhi	r3,2
   188d4:	18e9c884 	addi	r3,r3,-22750
    for (int i = 0; i < 5; i++) {
   188d8:	0005883a 	mov	r2,zero
        if (edges[i].proc_src == proc_src) {
   188dc:	213fffcc 	andi	r4,r4,65535
            if (edges[i].proc_dest == proc_dest) {
   188e0:	297fffcc 	andi	r5,r5,65535
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 5; i++) {
   188e4:	01800144 	movi	r6,5
        if (edges[i].proc_src == proc_src) {
   188e8:	19c0000b 	ldhu	r7,0(r3)
   188ec:	39000e1e 	bne	r7,r4,18928 <get_buffer+0x58>
            if (edges[i].proc_dest == proc_dest) {
   188f0:	19c0008b 	ldhu	r7,2(r3)
   188f4:	39400c1e 	bne	r7,r5,18928 <get_buffer+0x58>
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   188f8:	deffff04 	addi	sp,sp,-4
    for (int i = 0; i < 5; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   188fc:	01400504 	movi	r5,20
   18900:	1009883a 	mov	r4,r2
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   18904:	dfc00015 	stw	ra,0(sp)
    for (int i = 0; i < 5; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   18908:	00190e40 	call	190e4 <__mulsi3>
   1890c:	00c000b4 	movhi	r3,2
   18910:	18e9cb04 	addi	r3,r3,-22740
   18914:	10c5883a 	add	r2,r2,r3
   18918:	10800017 	ldw	r2,0(r2)
            }
        }
    }
    return 0;
}
   1891c:	dfc00017 	ldw	ra,0(sp)
   18920:	dec00104 	addi	sp,sp,4
   18924:	f800283a 	ret
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 5; i++) {
   18928:	10800044 	addi	r2,r2,1
   1892c:	18c00504 	addi	r3,r3,20
   18930:	11bfed1e 	bne	r2,r6,188e8 <_gp+0xffff64d0>
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
            }
        }
    }
    return 0;
   18934:	0005883a 	mov	r2,zero
   18938:	f800283a 	ret

0001893c <init_buffer>:
}

void init_buffer(){
   1893c:	deff9d04 	addi	sp,sp,-396
	ring_buffer_t buff_p5_p0;
	ring_buffer_init(&buff_p5_p0);
   18940:	d9004104 	addi	r4,sp,260
        }
    }
    return 0;
}

void init_buffer(){
   18944:	dfc06215 	stw	ra,392(sp)
	ring_buffer_t buff_p5_p0;
	ring_buffer_init(&buff_p5_p0);
   18948:	0018e940 	call	18e94 <ring_buffer_init>

	ring_buffer_t buff_p0_p1;
	ring_buffer_init(&buff_p0_p1);
   1894c:	d9002084 	addi	r4,sp,130
   18950:	0018e940 	call	18e94 <ring_buffer_init>

	ring_buffer_t buff_p4_p1;
	ring_buffer_init(&buff_p4_p1);
   18954:	d809883a 	mov	r4,sp
   18958:	0018e940 	call	18e94 <ring_buffer_init>
}
   1895c:	dfc06217 	ldw	ra,392(sp)
   18960:	dec06304 	addi	sp,sp,396
   18964:	f800283a 	ret

00018968 <init_structures>:

/* This is only for current node */
void init_structures(){
   18968:	defff904 	addi	sp,sp,-28
   1896c:	dfc00615 	stw	ra,24(sp)
   18970:	dd400515 	stw	r21,20(sp)
   18974:	dd000415 	stw	r20,16(sp)
   18978:	dcc00315 	stw	r19,12(sp)
   1897c:	dc800215 	stw	r18,8(sp)
   18980:	dc400115 	stw	r17,4(sp)
   18984:	dc000015 	stw	r16,0(sp)
	init_buffer();
   18988:	001893c0 	call	1893c <init_buffer>

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   1898c:	014000b4 	movhi	r5,2
   18990:	2969e604 	addi	r5,r5,-22632
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
   18994:	00800144 	movi	r2,5
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;

	edges[0] = edge_p5_p0;
   18998:	044000b4 	movhi	r17,2
   1899c:	04800504 	movi	r18,20
   189a0:	8c69c804 	addi	r17,r17,-22752
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
   189a4:	2880008d 	sth	r2,2(r5)
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   189a8:	008000b4 	movhi	r2,2
	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
   189ac:	04000044 	movi	r16,1
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
   189b0:	04c00104 	movi	r19,4
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   189b4:	05400084 	movi	r21,2
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;

	edges[0] = edge_p5_p0;
   189b8:	900d883a 	mov	r6,r18
   189bc:	8809883a 	mov	r4,r17
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   189c0:	10a98184 	addi	r2,r2,-23034
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   189c4:	2d400005 	stb	r21,0(r5)
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
   189c8:	2c000185 	stb	r16,6(r5)
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
   189cc:	2cc00205 	stb	r19,8(r5)
	edge_p5_p0.external = 1;
   189d0:	2c000405 	stb	r16,16(r5)
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
   189d4:	28000045 	stb	zero,1(r5)
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
   189d8:	2800010d 	sth	zero,4(r5)
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   189dc:	28800315 	stw	r2,12(r5)

	edges[0] = edge_p5_p0;
   189e0:	00191340 	call	19134 <memcpy>


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   189e4:	014000b4 	movhi	r5,2
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
	edge_p0_p1.buffer = &buff_p0_p1;
   189e8:	008000b4 	movhi	r2,2

	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   189ec:	2969e104 	addi	r5,r5,-22652
	edge_p0_p1.node_dest = 0;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
   189f0:	05000044 	movi	r20,1
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
	edge_p0_p1.buffer = &buff_p0_p1;

	edges[1] = edge_p0_p1;
   189f4:	900d883a 	mov	r6,r18
   189f8:	8c89883a 	add	r4,r17,r18
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
	edge_p0_p1.buffer = &buff_p0_p1;
   189fc:	10a9a204 	addi	r2,r2,-22904

	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
	edge_p0_p1.node_dest = 0;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
   18a00:	2d00010d 	sth	r20,4(r5)
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
   18a04:	2d000185 	stb	r20,6(r5)
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
   18a08:	2c0001c5 	stb	r16,7(r5)
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
   18a0c:	2cc00205 	stb	r19,8(r5)

	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   18a10:	28000005 	stb	zero,0(r5)
	edge_p0_p1.node_dest = 0;
   18a14:	28000045 	stb	zero,1(r5)
	edge_p0_p1.proc_src = 0;
   18a18:	2800008d 	sth	zero,2(r5)
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
   18a1c:	28000405 	stb	zero,16(r5)
	edge_p0_p1.buffer = &buff_p0_p1;
   18a20:	28800315 	stw	r2,12(r5)

	edges[1] = edge_p0_p1;
   18a24:	00191340 	call	19134 <memcpy>


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   18a28:	014000b4 	movhi	r5,2
   18a2c:	2969eb04 	addi	r5,r5,-22612
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
   18a30:	00800104 	movi	r2,4
   18a34:	2880008d 	sth	r2,2(r5)
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
   18a38:	28800205 	stb	r2,8(r5)
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18a3c:	008000b4 	movhi	r2,2

	edges[2] = edge_p4_p1;
   18a40:	900d883a 	mov	r6,r18
   18a44:	89000a04 	addi	r4,r17,40
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18a48:	10a96104 	addi	r2,r2,-23164

	edges[1] = edge_p0_p1;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   18a4c:	2d400005 	stb	r21,0(r5)
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
   18a50:	2d00010d 	sth	r20,4(r5)
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
   18a54:	2c000185 	stb	r16,6(r5)
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
	edge_p4_p1.external = 1;
   18a58:	2c000405 	stb	r16,16(r5)
	edges[1] = edge_p0_p1;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
	edge_p4_p1.node_dest = 0;
   18a5c:	28000045 	stb	zero,1(r5)
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18a60:	28800315 	stw	r2,12(r5)

	edges[2] = edge_p4_p1;
   18a64:	00191340 	call	19134 <memcpy>


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   18a68:	014000b4 	movhi	r5,2
   18a6c:	2969f004 	addi	r5,r5,-22592
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.size_of_token_type = sizeof(P1_OUT0_TYPE);
	edge_p1_p2.num_of_out_token = P1_OUT0_NUM_OF_TOKEN;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   18a70:	900d883a 	mov	r6,r18
   18a74:	89000f04 	addi	r4,r17,60

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   18a78:	00800084 	movi	r2,2
	edges[2] = edge_p4_p1;


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
   18a7c:	2c000045 	stb	r16,1(r5)
	edge_p1_p2.proc_src = 1;
   18a80:	2d00008d 	sth	r20,2(r5)
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.size_of_token_type = sizeof(P1_OUT0_TYPE);
   18a84:	2cc00205 	stb	r19,8(r5)
	edge_p1_p2.num_of_out_token = P1_OUT0_NUM_OF_TOKEN;
   18a88:	2c0001c5 	stb	r16,7(r5)
	edge_p1_p2.external = 1;
   18a8c:	2c000405 	stb	r16,16(r5)

	edges[2] = edge_p4_p1;


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   18a90:	28000005 	stb	zero,0(r5)
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   18a94:	2880010d 	sth	r2,4(r5)
	edge_p1_p2.size_of_token_type = sizeof(P1_OUT0_TYPE);
	edge_p1_p2.num_of_out_token = P1_OUT0_NUM_OF_TOKEN;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   18a98:	00191340 	call	19134 <memcpy>


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   18a9c:	014000b4 	movhi	r5,2
   18aa0:	2969c304 	addi	r5,r5,-22772
	edge_p1_p3.node_dest = 3;
   18aa4:	008000c4 	movi	r2,3
   18aa8:	28800045 	stb	r2,1(r5)
	edge_p1_p3.proc_dest = 3;
	edge_p1_p3.size_of_token_type = sizeof(P1_OUT1_TYPE);
	edge_p1_p3.num_of_out_token = P1_OUT1_NUM_OF_TOKEN;
	edge_p1_p3.external = 1;

	edges[4] = edge_p1_p3;
   18aac:	900d883a 	mov	r6,r18

	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
	edge_p1_p3.node_dest = 3;
	edge_p1_p3.proc_src = 1;
	edge_p1_p3.proc_dest = 3;
   18ab0:	008000c4 	movi	r2,3
	edge_p1_p3.size_of_token_type = sizeof(P1_OUT1_TYPE);
	edge_p1_p3.num_of_out_token = P1_OUT1_NUM_OF_TOKEN;
	edge_p1_p3.external = 1;

	edges[4] = edge_p1_p3;
   18ab4:	89001404 	addi	r4,r17,80

	edges[3] = edge_p1_p2;


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   18ab8:	28000005 	stb	zero,0(r5)
	edge_p1_p3.node_dest = 3;
	edge_p1_p3.proc_src = 1;
   18abc:	2d00008d 	sth	r20,2(r5)
	edge_p1_p3.proc_dest = 3;
   18ac0:	2880010d 	sth	r2,4(r5)
	edge_p1_p3.size_of_token_type = sizeof(P1_OUT1_TYPE);
   18ac4:	2cc00205 	stb	r19,8(r5)
	edge_p1_p3.num_of_out_token = P1_OUT1_NUM_OF_TOKEN;
   18ac8:	2c0001c5 	stb	r16,7(r5)
	edge_p1_p3.external = 1;
   18acc:	2c000405 	stb	r16,16(r5)

	edges[4] = edge_p1_p3;
   18ad0:	00191340 	call	19134 <memcpy>
}
   18ad4:	dfc00617 	ldw	ra,24(sp)
   18ad8:	dd400517 	ldw	r21,20(sp)
   18adc:	dd000417 	ldw	r20,16(sp)
   18ae0:	dcc00317 	ldw	r19,12(sp)
   18ae4:	dc800217 	ldw	r18,8(sp)
   18ae8:	dc400117 	ldw	r17,4(sp)
   18aec:	dc000017 	ldw	r16,0(sp)
   18af0:	dec00704 	addi	sp,sp,28
   18af4:	f800283a 	ret

00018af8 <send_packet>:

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18af8:	defff904 	addi	sp,sp,-28
   18afc:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   18b00:	25403fcc 	andi	r21,r4,255

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b04:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b08:	d8800703 	ldbu	r2,28(sp)

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b0c:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b10:	a80c923a 	slli	r6,r21,8
   18b14:	29403fcc 	andi	r5,r5,255
   18b18:	1004943a 	slli	r2,r2,16
   18b1c:	314ab03a 	or	r5,r6,r5
   18b20:	a00c943a 	slli	r6,r20,16

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b24:	dcc00315 	stw	r19,12(sp)
   18b28:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b2c:	9cffffcc 	andi	r19,r19,65535

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b30:	dc800215 	stw	r18,8(sp)
   18b34:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b38:	04a40014 	movui	r18,36864
   18b3c:	04641214 	movui	r17,36936
   18b40:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b44:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b48:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b4c:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b50:	298cb03a 	or	r6,r5,r6
   18b54:	8809883a 	mov	r4,r17
   18b58:	900b883a 	mov	r5,r18

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b5c:	dfc00615 	stw	ra,24(sp)
   18b60:	dc000015 	stw	r16,0(sp)
   18b64:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b68:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b6c:	ace6b03a 	or	r19,r21,r19
   18b70:	a1803fcc 	andi	r6,r20,255
   18b74:	998cb03a 	or	r6,r19,r6
   18b78:	900b883a 	mov	r5,r18
   18b7c:	8809883a 	mov	r4,r17
   18b80:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>
   18b84:	80800043 	ldbu	r2,1(r16)
   18b88:	81000003 	ldbu	r4,0(r16)
   18b8c:	818000c3 	ldbu	r6,3(r16)
   18b90:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b94:	900b883a 	mov	r5,r18
   18b98:	300c963a 	slli	r6,r6,24
   18b9c:	1106b03a 	or	r3,r2,r4
   18ba0:	80800083 	ldbu	r2,2(r16)
   18ba4:	8809883a 	mov	r4,r17
   18ba8:	1004943a 	slli	r2,r2,16
   18bac:	10c4b03a 	or	r2,r2,r3
   18bb0:	308cb03a 	or	r6,r6,r2
   18bb4:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>
   18bb8:	80800143 	ldbu	r2,5(r16)
   18bbc:	81000103 	ldbu	r4,4(r16)
   18bc0:	818001c3 	ldbu	r6,7(r16)
   18bc4:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18bc8:	900b883a 	mov	r5,r18
   18bcc:	300c963a 	slli	r6,r6,24
   18bd0:	1106b03a 	or	r3,r2,r4
   18bd4:	80800183 	ldbu	r2,6(r16)
   18bd8:	8809883a 	mov	r4,r17
   18bdc:	1004943a 	slli	r2,r2,16
   18be0:	10c4b03a 	or	r2,r2,r3
   18be4:	308cb03a 	or	r6,r6,r2
   18be8:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>
   18bec:	80800243 	ldbu	r2,9(r16)
   18bf0:	81000203 	ldbu	r4,8(r16)
   18bf4:	818002c3 	ldbu	r6,11(r16)
   18bf8:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18bfc:	900b883a 	mov	r5,r18
   18c00:	300c963a 	slli	r6,r6,24
   18c04:	1106b03a 	or	r3,r2,r4
   18c08:	80800283 	ldbu	r2,10(r16)
   18c0c:	8809883a 	mov	r4,r17
   18c10:	1004943a 	slli	r2,r2,16
   18c14:	10c4b03a 	or	r2,r2,r3
   18c18:	308cb03a 	or	r6,r6,r2
   18c1c:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>
   18c20:	80800343 	ldbu	r2,13(r16)
   18c24:	81000303 	ldbu	r4,12(r16)
   18c28:	818003c3 	ldbu	r6,15(r16)
   18c2c:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18c30:	900b883a 	mov	r5,r18
   18c34:	300c963a 	slli	r6,r6,24
   18c38:	1106b03a 	or	r3,r2,r4
   18c3c:	80800383 	ldbu	r2,14(r16)
   18c40:	8809883a 	mov	r4,r17
   18c44:	1004943a 	slli	r2,r2,16
   18c48:	10c4b03a 	or	r2,r2,r3
   18c4c:	308cb03a 	or	r6,r6,r2
   18c50:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>
   18c54:	80800443 	ldbu	r2,17(r16)
   18c58:	81000403 	ldbu	r4,16(r16)
   18c5c:	818004c3 	ldbu	r6,19(r16)
   18c60:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18c64:	900b883a 	mov	r5,r18
   18c68:	300c963a 	slli	r6,r6,24
   18c6c:	1106b03a 	or	r3,r2,r4
   18c70:	80800483 	ldbu	r2,18(r16)
   18c74:	8809883a 	mov	r4,r17
   18c78:	1004943a 	slli	r2,r2,16
   18c7c:	10c4b03a 	or	r2,r2,r3
   18c80:	308cb03a 	or	r6,r6,r2
   18c84:	001a0bc0 	call	1a0bc <altera_avalon_fifo_write_fifo>
   18c88:	80800543 	ldbu	r2,21(r16)
   18c8c:	81000503 	ldbu	r4,20(r16)
   18c90:	818005c3 	ldbu	r6,23(r16)
   18c94:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18c98:	900b883a 	mov	r5,r18
   18c9c:	300c963a 	slli	r6,r6,24
   18ca0:	1106b03a 	or	r3,r2,r4
   18ca4:	80800583 	ldbu	r2,22(r16)
   18ca8:	8809883a 	mov	r4,r17
   18cac:	1004943a 	slli	r2,r2,16
   18cb0:	10c4b03a 	or	r2,r2,r3
   18cb4:	308cb03a 	or	r6,r6,r2

}
   18cb8:	dfc00617 	ldw	ra,24(sp)
   18cbc:	dd400517 	ldw	r21,20(sp)
   18cc0:	dd000417 	ldw	r20,16(sp)
   18cc4:	dcc00317 	ldw	r19,12(sp)
   18cc8:	dc800217 	ldw	r18,8(sp)
   18ccc:	dc400117 	ldw	r17,4(sp)
   18cd0:	dc000017 	ldw	r16,0(sp)
   18cd4:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18cd8:	001a0bc1 	jmpi	1a0bc <altera_avalon_fifo_write_fifo>

00018cdc <read_payload>:
}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
   18cdc:	2004d23a 	srli	r2,r4,8
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
   18ce0:	314b883a 	add	r5,r6,r5
   18ce4:	29000005 	stb	r4,0(r5)
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   18ce8:	28800045 	stb	r2,1(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
   18cec:	2004d43a 	srli	r2,r4,16
	
	*(payload + 2 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   18cf0:	2008d63a 	srli	r4,r4,24
	
	*(payload + 1 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   18cf4:	28800085 	stb	r2,2(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   18cf8:	290000c5 	stb	r4,3(r5)
   18cfc:	f800283a 	ret

00018d00 <receive_packet>:
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   18d00:	defff504 	addi	sp,sp,-44
   18d04:	dc400715 	stw	r17,28(sp)
   18d08:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d0c:	04640814 	movui	r17,36896
   18d10:	04241014 	movui	r16,36928
   18d14:	880b883a 	mov	r5,r17
   18d18:	8009883a 	mov	r4,r16
	
	*(payload + 3 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   18d1c:	dfc00a15 	stw	ra,40(sp)
   18d20:	dcc00915 	stw	r19,36(sp)
   18d24:	dc800815 	stw	r18,32(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d28:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	packet_size = temp;
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   18d2c:	1004d63a 	srli	r2,r2,24
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d30:	880b883a 	mov	r5,r17
   18d34:	8009883a 	mov	r4,r16
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   18d38:	1026923a 	slli	r19,r2,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d3c:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
   18d40:	1025883a 	mov	r18,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d44:	880b883a 	mov	r5,r17
   18d48:	8009883a 	mov	r4,r16


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   18d4c:	10803fcc 	andi	r2,r2,255
   18d50:	98a6b03a 	or	r19,r19,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d54:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   18d58:	d80d883a 	mov	r6,sp
   18d5c:	1009883a 	mov	r4,r2
   18d60:	000b883a 	mov	r5,zero
   18d64:	0018cdc0 	call	18cdc <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d68:	880b883a 	mov	r5,r17
   18d6c:	8009883a 	mov	r4,r16
   18d70:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   18d74:	d80d883a 	mov	r6,sp
   18d78:	1009883a 	mov	r4,r2
   18d7c:	01400104 	movi	r5,4
   18d80:	0018cdc0 	call	18cdc <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d84:	880b883a 	mov	r5,r17
   18d88:	8009883a 	mov	r4,r16
   18d8c:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   18d90:	d80d883a 	mov	r6,sp
   18d94:	1009883a 	mov	r4,r2
   18d98:	01400204 	movi	r5,8
   18d9c:	0018cdc0 	call	18cdc <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18da0:	880b883a 	mov	r5,r17
   18da4:	8009883a 	mov	r4,r16
   18da8:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   18dac:	d80d883a 	mov	r6,sp
   18db0:	1009883a 	mov	r4,r2
   18db4:	01400304 	movi	r5,12
   18db8:	0018cdc0 	call	18cdc <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18dbc:	880b883a 	mov	r5,r17
   18dc0:	8009883a 	mov	r4,r16
   18dc4:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   18dc8:	d80d883a 	mov	r6,sp
   18dcc:	1009883a 	mov	r4,r2
   18dd0:	01400404 	movi	r5,16
   18dd4:	0018cdc0 	call	18cdc <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18dd8:	880b883a 	mov	r5,r17
   18ddc:	8009883a 	mov	r4,r16
   18de0:	001a1000 	call	1a100 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   18de4:	d80d883a 	mov	r6,sp
   18de8:	1009883a 	mov	r4,r2
   18dec:	01400504 	movi	r5,20
   18df0:	0018cdc0 	call	18cdc <read_payload>

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);
   18df4:	900ad23a 	srli	r5,r18,8
   18df8:	993fffcc 	andi	r4,r19,65535
   18dfc:	297fffcc 	andi	r5,r5,65535
   18e00:	00188d00 	call	188d0 <get_buffer>

	ring_buffer_queue_arr(buffer,payload,24);
   18e04:	01800604 	movi	r6,24
   18e08:	d80b883a 	mov	r5,sp
   18e0c:	1009883a 	mov	r4,r2
   18e10:	0018ee00 	call	18ee0 <ring_buffer_queue_arr>
}
   18e14:	dfc00a17 	ldw	ra,40(sp)
   18e18:	dcc00917 	ldw	r19,36(sp)
   18e1c:	dc800817 	ldw	r18,32(sp)
   18e20:	dc400717 	ldw	r17,28(sp)
   18e24:	dc000617 	ldw	r16,24(sp)
   18e28:	dec00b04 	addi	sp,sp,44
   18e2c:	f800283a 	ret

00018e30 <receive_poll>:

void receive_poll(){
   18e30:	deffff04 	addi	sp,sp,-4
   18e34:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   18e38:	01400fc4 	movi	r5,63
   18e3c:	01240814 	movui	r4,36896
   18e40:	0019f780 	call	19f78 <altera_avalon_fifo_read_status>
}

void receive_poll(){
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    while(status & 0x02){
   18e44:	1080008c 	andi	r2,r2,2
   18e48:	103ffb1e 	bne	r2,zero,18e38 <_gp+0xffff6a20>
  	  status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
    }
}
   18e4c:	dfc00017 	ldw	ra,0(sp)
   18e50:	dec00104 	addi	sp,sp,4
   18e54:	f800283a 	ret

00018e58 <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   18e58:	20c02043 	ldbu	r3,129(r4)
   18e5c:	20802003 	ldbu	r2,128(r4)
   18e60:	1885003a 	cmpeq	r2,r3,r2
}
   18e64:	f800283a 	ret

00018e68 <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   18e68:	20802043 	ldbu	r2,129(r4)
   18e6c:	20c02003 	ldbu	r3,128(r4)
   18e70:	10c5c83a 	sub	r2,r2,r3
   18e74:	10801fcc 	andi	r2,r2,127
   18e78:	10801fe0 	cmpeqi	r2,r2,127
}
   18e7c:	f800283a 	ret

00018e80 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   18e80:	20802043 	ldbu	r2,129(r4)
   18e84:	20c02003 	ldbu	r3,128(r4)
   18e88:	10c5c83a 	sub	r2,r2,r3
}
   18e8c:	10801fcc 	andi	r2,r2,127
   18e90:	f800283a 	ret

00018e94 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   18e94:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   18e98:	20002045 	stb	zero,129(r4)
   18e9c:	f800283a 	ret

00018ea0 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   18ea0:	20802043 	ldbu	r2,129(r4)
   18ea4:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   18ea8:	02001fc4 	movi	r8,127
   18eac:	11803fcc 	andi	r6,r2,255
   18eb0:	30cfc83a 	sub	r7,r6,r3
   18eb4:	39c01fcc 	andi	r7,r7,127
   18eb8:	3a00031e 	bne	r7,r8,18ec8 <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   18ebc:	18c00044 	addi	r3,r3,1
   18ec0:	1a06703a 	and	r3,r3,r8
   18ec4:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   18ec8:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   18ecc:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   18ed0:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   18ed4:	10801fcc 	andi	r2,r2,127
   18ed8:	20802045 	stb	r2,129(r4)
   18edc:	f800283a 	ret

00018ee0 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   18ee0:	defffc04 	addi	sp,sp,-16
   18ee4:	31803fcc 	andi	r6,r6,255
   18ee8:	dc800215 	stw	r18,8(sp)
   18eec:	dc400115 	stw	r17,4(sp)
   18ef0:	dc000015 	stw	r16,0(sp)
   18ef4:	dfc00315 	stw	ra,12(sp)
   18ef8:	2025883a 	mov	r18,r4
   18efc:	2821883a 	mov	r16,r5
   18f00:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   18f04:	84400526 	beq	r16,r17,18f1c <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   18f08:	81400007 	ldb	r5,0(r16)
   18f0c:	9009883a 	mov	r4,r18
   18f10:	84000044 	addi	r16,r16,1
   18f14:	0018ea00 	call	18ea0 <ring_buffer_queue>
   18f18:	003ffa06 	br	18f04 <_gp+0xffff6aec>
  }
}
   18f1c:	dfc00317 	ldw	ra,12(sp)
   18f20:	dc800217 	ldw	r18,8(sp)
   18f24:	dc400117 	ldw	r17,4(sp)
   18f28:	dc000017 	ldw	r16,0(sp)
   18f2c:	dec00404 	addi	sp,sp,16
   18f30:	f800283a 	ret

00018f34 <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   18f34:	20c02043 	ldbu	r3,129(r4)
   18f38:	20802003 	ldbu	r2,128(r4)
   18f3c:	18800926 	beq	r3,r2,18f64 <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   18f40:	2085883a 	add	r2,r4,r2
   18f44:	10800003 	ldbu	r2,0(r2)
   18f48:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   18f4c:	20802003 	ldbu	r2,128(r4)
   18f50:	10800044 	addi	r2,r2,1
   18f54:	10801fcc 	andi	r2,r2,127
   18f58:	20802005 	stb	r2,128(r4)
  return 1;
   18f5c:	00800044 	movi	r2,1
   18f60:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   18f64:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   18f68:	f800283a 	ret

00018f6c <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   18f6c:	20c02043 	ldbu	r3,129(r4)
   18f70:	20802003 	ldbu	r2,128(r4)
   18f74:	18801526 	beq	r3,r2,18fcc <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   18f78:	defffa04 	addi	sp,sp,-24
   18f7c:	dcc00315 	stw	r19,12(sp)
   18f80:	dc800215 	stw	r18,8(sp)
   18f84:	dc400115 	stw	r17,4(sp)
   18f88:	dc000015 	stw	r16,0(sp)
   18f8c:	dfc00515 	stw	ra,20(sp)
   18f90:	dd000415 	stw	r20,16(sp)
   18f94:	2827883a 	mov	r19,r5
   18f98:	2023883a 	mov	r17,r4
   18f9c:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   18fa0:	0021883a 	mov	r16,zero
   18fa4:	9c0b883a 	add	r5,r19,r16
   18fa8:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   18fac:	84800926 	beq	r16,r18,18fd4 <ring_buffer_dequeue_arr+0x68>
   18fb0:	8809883a 	mov	r4,r17
   18fb4:	0018f340 	call	18f34 <ring_buffer_dequeue>
   18fb8:	10803fcc 	andi	r2,r2,255
   18fbc:	84000044 	addi	r16,r16,1
   18fc0:	103ff81e 	bne	r2,zero,18fa4 <_gp+0xffff6b8c>
   18fc4:	a005883a 	mov	r2,r20
   18fc8:	00000306 	br	18fd8 <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   18fcc:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   18fd0:	f800283a 	ret
   18fd4:	8005883a 	mov	r2,r16
   18fd8:	dfc00517 	ldw	ra,20(sp)
   18fdc:	dd000417 	ldw	r20,16(sp)
   18fe0:	dcc00317 	ldw	r19,12(sp)
   18fe4:	dc800217 	ldw	r18,8(sp)
   18fe8:	dc400117 	ldw	r17,4(sp)
   18fec:	dc000017 	ldw	r16,0(sp)
   18ff0:	dec00604 	addi	sp,sp,24
   18ff4:	f800283a 	ret

00018ff8 <ring_buffer_pop>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   18ff8:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
   18ffc:	21402043 	ldbu	r5,129(r4)
   19000:	10c03fcc 	andi	r3,r2,255
   19004:	28c00526 	beq	r5,r3,1901c <ring_buffer_pop+0x24>
    /* No items */
    return 0;
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   19008:	10800044 	addi	r2,r2,1
   1900c:	10801fcc 	andi	r2,r2,127
   19010:	20802005 	stb	r2,128(r4)
  return 1;
   19014:	00800044 	movi	r2,1
   19018:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   1901c:	0005883a 	mov	r2,zero
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   19020:	f800283a 	ret

00019024 <ring_buffer_pop_arr>:

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   19024:	20c02043 	ldbu	r3,129(r4)
   19028:	20802003 	ldbu	r2,128(r4)
   1902c:	18801426 	beq	r3,r2,19080 <ring_buffer_pop_arr+0x5c>

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
   19030:	defffb04 	addi	sp,sp,-20
   19034:	dcc00315 	stw	r19,12(sp)
   19038:	dc800215 	stw	r18,8(sp)
   1903c:	dc400115 	stw	r17,4(sp)
   19040:	dc000015 	stw	r16,0(sp)
   19044:	dfc00415 	stw	ra,16(sp)
   19048:	2821883a 	mov	r16,r5
   1904c:	2023883a 	mov	r17,r4
   19050:	0025883a 	mov	r18,zero
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
  }
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
   19054:	2cc03fcc 	andi	r19,r5,255
   19058:	90803fcc 	andi	r2,r18,255
   1905c:	14c00a26 	beq	r2,r19,19088 <ring_buffer_pop_arr+0x64>
   19060:	8809883a 	mov	r4,r17
   19064:	0018ff80 	call	18ff8 <ring_buffer_pop>
   19068:	10803fcc 	andi	r2,r2,255
   1906c:	10000226 	beq	r2,zero,19078 <ring_buffer_pop_arr+0x54>
    cnt++;
   19070:	94800044 	addi	r18,r18,1
   19074:	003ff806 	br	19058 <_gp+0xffff6c40>
   19078:	9005883a 	mov	r2,r18
   1907c:	00000306 	br	1908c <ring_buffer_pop_arr+0x68>
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   19080:	0005883a 	mov	r2,zero
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
    cnt++;
  }
  return cnt;
}
   19084:	f800283a 	ret
   19088:	8005883a 	mov	r2,r16
   1908c:	dfc00417 	ldw	ra,16(sp)
   19090:	dcc00317 	ldw	r19,12(sp)
   19094:	dc800217 	ldw	r18,8(sp)
   19098:	dc400117 	ldw	r17,4(sp)
   1909c:	dc000017 	ldw	r16,0(sp)
   190a0:	dec00504 	addi	sp,sp,20
   190a4:	f800283a 	ret

000190a8 <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   190a8:	20802003 	ldbu	r2,128(r4)



ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   190ac:	20c02043 	ldbu	r3,129(r4)
   190b0:	31c03fcc 	andi	r7,r6,255
   190b4:	1887c83a 	sub	r3,r3,r2
   190b8:	18c01fcc 	andi	r3,r3,127
   190bc:	38c0072e 	bgeu	r7,r3,190dc <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   190c0:	3085883a 	add	r2,r6,r2
   190c4:	10801fcc 	andi	r2,r2,127
   190c8:	2089883a 	add	r4,r4,r2
   190cc:	20800003 	ldbu	r2,0(r4)
   190d0:	28800005 	stb	r2,0(r5)
  return 1;
   190d4:	00800044 	movi	r2,1
   190d8:	f800283a 	ret


ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   190dc:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   190e0:	f800283a 	ret

000190e4 <__mulsi3>:
   190e4:	0005883a 	mov	r2,zero
   190e8:	20000726 	beq	r4,zero,19108 <__mulsi3+0x24>
   190ec:	20c0004c 	andi	r3,r4,1
   190f0:	2008d07a 	srli	r4,r4,1
   190f4:	18000126 	beq	r3,zero,190fc <__mulsi3+0x18>
   190f8:	1145883a 	add	r2,r2,r5
   190fc:	294b883a 	add	r5,r5,r5
   19100:	203ffa1e 	bne	r4,zero,190ec <_gp+0xffff6cd4>
   19104:	f800283a 	ret
   19108:	f800283a 	ret

0001910c <malloc>:
   1910c:	008000b4 	movhi	r2,2
   19110:	10a90704 	addi	r2,r2,-23524
   19114:	200b883a 	mov	r5,r4
   19118:	11000017 	ldw	r4,0(r2)
   1911c:	00192401 	jmpi	19240 <_malloc_r>

00019120 <free>:
   19120:	008000b4 	movhi	r2,2
   19124:	10a90704 	addi	r2,r2,-23524
   19128:	200b883a 	mov	r5,r4
   1912c:	11000017 	ldw	r4,0(r2)
   19130:	001915c1 	jmpi	1915c <_free_r>

00019134 <memcpy>:
   19134:	2005883a 	mov	r2,r4
   19138:	2007883a 	mov	r3,r4
   1913c:	218d883a 	add	r6,r4,r6
   19140:	19800526 	beq	r3,r6,19158 <memcpy+0x24>
   19144:	29000003 	ldbu	r4,0(r5)
   19148:	18c00044 	addi	r3,r3,1
   1914c:	29400044 	addi	r5,r5,1
   19150:	193fffc5 	stb	r4,-1(r3)
   19154:	003ffa06 	br	19140 <_gp+0xffff6d28>
   19158:	f800283a 	ret

0001915c <_free_r>:
   1915c:	28003726 	beq	r5,zero,1923c <_free_r+0xe0>
   19160:	28ffff17 	ldw	r3,-4(r5)
   19164:	28bfff04 	addi	r2,r5,-4
   19168:	1800010e 	bge	r3,zero,19170 <_free_r+0x14>
   1916c:	10c5883a 	add	r2,r2,r3
   19170:	014000b4 	movhi	r5,2
   19174:	29695c04 	addi	r5,r5,-23184
   19178:	28c00017 	ldw	r3,0(r5)
   1917c:	280d883a 	mov	r6,r5
   19180:	1800031e 	bne	r3,zero,19190 <_free_r+0x34>
   19184:	10000115 	stw	zero,4(r2)
   19188:	28800015 	stw	r2,0(r5)
   1918c:	f800283a 	ret
   19190:	10c00c2e 	bgeu	r2,r3,191c4 <_free_r+0x68>
   19194:	11000017 	ldw	r4,0(r2)
   19198:	110b883a 	add	r5,r2,r4
   1919c:	1940041e 	bne	r3,r5,191b0 <_free_r+0x54>
   191a0:	19400017 	ldw	r5,0(r3)
   191a4:	18c00117 	ldw	r3,4(r3)
   191a8:	2909883a 	add	r4,r5,r4
   191ac:	11000015 	stw	r4,0(r2)
   191b0:	10c00115 	stw	r3,4(r2)
   191b4:	30800015 	stw	r2,0(r6)
   191b8:	f800283a 	ret
   191bc:	11400336 	bltu	r2,r5,191cc <_free_r+0x70>
   191c0:	2807883a 	mov	r3,r5
   191c4:	19400117 	ldw	r5,4(r3)
   191c8:	283ffc1e 	bne	r5,zero,191bc <_gp+0xffff6da4>
   191cc:	19c00017 	ldw	r7,0(r3)
   191d0:	19cd883a 	add	r6,r3,r7
   191d4:	30800a1e 	bne	r6,r2,19200 <_free_r+0xa4>
   191d8:	10800017 	ldw	r2,0(r2)
   191dc:	3885883a 	add	r2,r7,r2
   191e0:	18800015 	stw	r2,0(r3)
   191e4:	1889883a 	add	r4,r3,r2
   191e8:	2900141e 	bne	r5,r4,1923c <_free_r+0xe0>
   191ec:	29000017 	ldw	r4,0(r5)
   191f0:	2085883a 	add	r2,r4,r2
   191f4:	18800015 	stw	r2,0(r3)
   191f8:	28800117 	ldw	r2,4(r5)
   191fc:	00000e06 	br	19238 <_free_r+0xdc>
   19200:	1180032e 	bgeu	r2,r6,19210 <_free_r+0xb4>
   19204:	00800304 	movi	r2,12
   19208:	20800015 	stw	r2,0(r4)
   1920c:	f800283a 	ret
   19210:	11000017 	ldw	r4,0(r2)
   19214:	110d883a 	add	r6,r2,r4
   19218:	2980061e 	bne	r5,r6,19234 <_free_r+0xd8>
   1921c:	29800017 	ldw	r6,0(r5)
   19220:	3109883a 	add	r4,r6,r4
   19224:	11000015 	stw	r4,0(r2)
   19228:	29000117 	ldw	r4,4(r5)
   1922c:	11000115 	stw	r4,4(r2)
   19230:	00000106 	br	19238 <_free_r+0xdc>
   19234:	11400115 	stw	r5,4(r2)
   19238:	18800115 	stw	r2,4(r3)
   1923c:	f800283a 	ret

00019240 <_malloc_r>:
   19240:	defffb04 	addi	sp,sp,-20
   19244:	00bfff04 	movi	r2,-4
   19248:	dc400115 	stw	r17,4(sp)
   1924c:	2c4000c4 	addi	r17,r5,3
   19250:	88a2703a 	and	r17,r17,r2
   19254:	dc800215 	stw	r18,8(sp)
   19258:	dfc00415 	stw	ra,16(sp)
   1925c:	dcc00315 	stw	r19,12(sp)
   19260:	dc000015 	stw	r16,0(sp)
   19264:	8c400204 	addi	r17,r17,8
   19268:	00800304 	movi	r2,12
   1926c:	2025883a 	mov	r18,r4
   19270:	8880022e 	bgeu	r17,r2,1927c <_malloc_r+0x3c>
   19274:	1023883a 	mov	r17,r2
   19278:	00000506 	br	19290 <_malloc_r+0x50>
   1927c:	8800040e 	bge	r17,zero,19290 <_malloc_r+0x50>
   19280:	00800304 	movi	r2,12
   19284:	90800015 	stw	r2,0(r18)
   19288:	0005883a 	mov	r2,zero
   1928c:	00003b06 	br	1937c <_malloc_r+0x13c>
   19290:	897ffb36 	bltu	r17,r5,19280 <_gp+0xffff6e68>
   19294:	008000b4 	movhi	r2,2
   19298:	10a95c04 	addi	r2,r2,-23184
   1929c:	10c00017 	ldw	r3,0(r2)
   192a0:	1009883a 	mov	r4,r2
   192a4:	1821883a 	mov	r16,r3
   192a8:	80000926 	beq	r16,zero,192d0 <_malloc_r+0x90>
   192ac:	80800017 	ldw	r2,0(r16)
   192b0:	1445c83a 	sub	r2,r2,r17
   192b4:	10001516 	blt	r2,zero,1930c <_malloc_r+0xcc>
   192b8:	014002c4 	movi	r5,11
   192bc:	28800d2e 	bgeu	r5,r2,192f4 <_malloc_r+0xb4>
   192c0:	80800015 	stw	r2,0(r16)
   192c4:	80a1883a 	add	r16,r16,r2
   192c8:	84400015 	stw	r17,0(r16)
   192cc:	8000221e 	bne	r16,zero,19358 <_malloc_r+0x118>
   192d0:	040000b4 	movhi	r16,2
   192d4:	84295b04 	addi	r16,r16,-23188
   192d8:	80800017 	ldw	r2,0(r16)
   192dc:	10000e1e 	bne	r2,zero,19318 <_malloc_r+0xd8>
   192e0:	000b883a 	mov	r5,zero
   192e4:	9009883a 	mov	r4,r18
   192e8:	00194b40 	call	194b4 <_sbrk_r>
   192ec:	80800015 	stw	r2,0(r16)
   192f0:	00000906 	br	19318 <_malloc_r+0xd8>
   192f4:	80800117 	ldw	r2,4(r16)
   192f8:	1c00021e 	bne	r3,r16,19304 <_malloc_r+0xc4>
   192fc:	20800015 	stw	r2,0(r4)
   19300:	00001506 	br	19358 <_malloc_r+0x118>
   19304:	18800115 	stw	r2,4(r3)
   19308:	00001306 	br	19358 <_malloc_r+0x118>
   1930c:	8007883a 	mov	r3,r16
   19310:	84000117 	ldw	r16,4(r16)
   19314:	003fe406 	br	192a8 <_gp+0xffff6e90>
   19318:	880b883a 	mov	r5,r17
   1931c:	9009883a 	mov	r4,r18
   19320:	00194b40 	call	194b4 <_sbrk_r>
   19324:	04ffffc4 	movi	r19,-1
   19328:	14ffd526 	beq	r2,r19,19280 <_gp+0xffff6e68>
   1932c:	140000c4 	addi	r16,r2,3
   19330:	00ffff04 	movi	r3,-4
   19334:	80e0703a 	and	r16,r16,r3
   19338:	1400021e 	bne	r2,r16,19344 <_malloc_r+0x104>
   1933c:	84400015 	stw	r17,0(r16)
   19340:	00000506 	br	19358 <_malloc_r+0x118>
   19344:	808bc83a 	sub	r5,r16,r2
   19348:	9009883a 	mov	r4,r18
   1934c:	00194b40 	call	194b4 <_sbrk_r>
   19350:	14fffa1e 	bne	r2,r19,1933c <_gp+0xffff6f24>
   19354:	003fca06 	br	19280 <_gp+0xffff6e68>
   19358:	810002c4 	addi	r4,r16,11
   1935c:	00bffe04 	movi	r2,-8
   19360:	80c00104 	addi	r3,r16,4
   19364:	2084703a 	and	r2,r4,r2
   19368:	10c7c83a 	sub	r3,r2,r3
   1936c:	18000326 	beq	r3,zero,1937c <_malloc_r+0x13c>
   19370:	80e1883a 	add	r16,r16,r3
   19374:	00c7c83a 	sub	r3,zero,r3
   19378:	80c00015 	stw	r3,0(r16)
   1937c:	dfc00417 	ldw	ra,16(sp)
   19380:	dcc00317 	ldw	r19,12(sp)
   19384:	dc800217 	ldw	r18,8(sp)
   19388:	dc400117 	ldw	r17,4(sp)
   1938c:	dc000017 	ldw	r16,0(sp)
   19390:	dec00504 	addi	sp,sp,20
   19394:	f800283a 	ret

00019398 <_printf_r>:
   19398:	defffd04 	addi	sp,sp,-12
   1939c:	dfc00015 	stw	ra,0(sp)
   193a0:	d9800115 	stw	r6,4(sp)
   193a4:	d9c00215 	stw	r7,8(sp)
   193a8:	20c00217 	ldw	r3,8(r4)
   193ac:	018000b4 	movhi	r6,2
   193b0:	31a6b504 	addi	r6,r6,-25900
   193b4:	19800115 	stw	r6,4(r3)
   193b8:	280d883a 	mov	r6,r5
   193bc:	21400217 	ldw	r5,8(r4)
   193c0:	d9c00104 	addi	r7,sp,4
   193c4:	001958c0 	call	1958c <___vfprintf_internal_r>
   193c8:	dfc00017 	ldw	ra,0(sp)
   193cc:	dec00304 	addi	sp,sp,12
   193d0:	f800283a 	ret

000193d4 <printf>:
   193d4:	defffc04 	addi	sp,sp,-16
   193d8:	dfc00015 	stw	ra,0(sp)
   193dc:	d9400115 	stw	r5,4(sp)
   193e0:	d9800215 	stw	r6,8(sp)
   193e4:	d9c00315 	stw	r7,12(sp)
   193e8:	008000b4 	movhi	r2,2
   193ec:	10a90704 	addi	r2,r2,-23524
   193f0:	10800017 	ldw	r2,0(r2)
   193f4:	014000b4 	movhi	r5,2
   193f8:	2966b504 	addi	r5,r5,-25900
   193fc:	10c00217 	ldw	r3,8(r2)
   19400:	d9800104 	addi	r6,sp,4
   19404:	19400115 	stw	r5,4(r3)
   19408:	200b883a 	mov	r5,r4
   1940c:	11000217 	ldw	r4,8(r2)
   19410:	0019ab80 	call	19ab8 <__vfprintf_internal>
   19414:	dfc00017 	ldw	ra,0(sp)
   19418:	dec00404 	addi	sp,sp,16
   1941c:	f800283a 	ret

00019420 <_puts_r>:
   19420:	defffd04 	addi	sp,sp,-12
   19424:	dc000015 	stw	r16,0(sp)
   19428:	2021883a 	mov	r16,r4
   1942c:	2809883a 	mov	r4,r5
   19430:	dfc00215 	stw	ra,8(sp)
   19434:	dc400115 	stw	r17,4(sp)
   19438:	2823883a 	mov	r17,r5
   1943c:	00195040 	call	19504 <strlen>
   19440:	81400217 	ldw	r5,8(r16)
   19444:	010000b4 	movhi	r4,2
   19448:	2126b504 	addi	r4,r4,-25900
   1944c:	29000115 	stw	r4,4(r5)
   19450:	100f883a 	mov	r7,r2
   19454:	880d883a 	mov	r6,r17
   19458:	8009883a 	mov	r4,r16
   1945c:	0019ad40 	call	19ad4 <__sfvwrite_small_dev>
   19460:	00ffffc4 	movi	r3,-1
   19464:	10c00926 	beq	r2,r3,1948c <_puts_r+0x6c>
   19468:	81400217 	ldw	r5,8(r16)
   1946c:	018000b4 	movhi	r6,2
   19470:	01c00044 	movi	r7,1
   19474:	28800117 	ldw	r2,4(r5)
   19478:	31a8a604 	addi	r6,r6,-23912
   1947c:	8009883a 	mov	r4,r16
   19480:	103ee83a 	callr	r2
   19484:	10bfffe0 	cmpeqi	r2,r2,-1
   19488:	0085c83a 	sub	r2,zero,r2
   1948c:	dfc00217 	ldw	ra,8(sp)
   19490:	dc400117 	ldw	r17,4(sp)
   19494:	dc000017 	ldw	r16,0(sp)
   19498:	dec00304 	addi	sp,sp,12
   1949c:	f800283a 	ret

000194a0 <puts>:
   194a0:	008000b4 	movhi	r2,2
   194a4:	10a90704 	addi	r2,r2,-23524
   194a8:	200b883a 	mov	r5,r4
   194ac:	11000017 	ldw	r4,0(r2)
   194b0:	00194201 	jmpi	19420 <_puts_r>

000194b4 <_sbrk_r>:
   194b4:	defffd04 	addi	sp,sp,-12
   194b8:	dc000015 	stw	r16,0(sp)
   194bc:	040000b4 	movhi	r16,2
   194c0:	dc400115 	stw	r17,4(sp)
   194c4:	84295d04 	addi	r16,r16,-23180
   194c8:	2023883a 	mov	r17,r4
   194cc:	2809883a 	mov	r4,r5
   194d0:	dfc00215 	stw	ra,8(sp)
   194d4:	80000015 	stw	zero,0(r16)
   194d8:	0019ea40 	call	19ea4 <sbrk>
   194dc:	00ffffc4 	movi	r3,-1
   194e0:	10c0031e 	bne	r2,r3,194f0 <_sbrk_r+0x3c>
   194e4:	80c00017 	ldw	r3,0(r16)
   194e8:	18000126 	beq	r3,zero,194f0 <_sbrk_r+0x3c>
   194ec:	88c00015 	stw	r3,0(r17)
   194f0:	dfc00217 	ldw	ra,8(sp)
   194f4:	dc400117 	ldw	r17,4(sp)
   194f8:	dc000017 	ldw	r16,0(sp)
   194fc:	dec00304 	addi	sp,sp,12
   19500:	f800283a 	ret

00019504 <strlen>:
   19504:	2005883a 	mov	r2,r4
   19508:	10c00007 	ldb	r3,0(r2)
   1950c:	18000226 	beq	r3,zero,19518 <strlen+0x14>
   19510:	10800044 	addi	r2,r2,1
   19514:	003ffc06 	br	19508 <_gp+0xffff70f0>
   19518:	1105c83a 	sub	r2,r2,r4
   1951c:	f800283a 	ret

00019520 <print_repeat>:
   19520:	defffb04 	addi	sp,sp,-20
   19524:	dc800315 	stw	r18,12(sp)
   19528:	dc400215 	stw	r17,8(sp)
   1952c:	dc000115 	stw	r16,4(sp)
   19530:	dfc00415 	stw	ra,16(sp)
   19534:	2025883a 	mov	r18,r4
   19538:	2823883a 	mov	r17,r5
   1953c:	d9800005 	stb	r6,0(sp)
   19540:	3821883a 	mov	r16,r7
   19544:	04000a0e 	bge	zero,r16,19570 <print_repeat+0x50>
   19548:	88800117 	ldw	r2,4(r17)
   1954c:	01c00044 	movi	r7,1
   19550:	d80d883a 	mov	r6,sp
   19554:	880b883a 	mov	r5,r17
   19558:	9009883a 	mov	r4,r18
   1955c:	103ee83a 	callr	r2
   19560:	843fffc4 	addi	r16,r16,-1
   19564:	103ff726 	beq	r2,zero,19544 <_gp+0xffff712c>
   19568:	00bfffc4 	movi	r2,-1
   1956c:	00000106 	br	19574 <print_repeat+0x54>
   19570:	0005883a 	mov	r2,zero
   19574:	dfc00417 	ldw	ra,16(sp)
   19578:	dc800317 	ldw	r18,12(sp)
   1957c:	dc400217 	ldw	r17,8(sp)
   19580:	dc000117 	ldw	r16,4(sp)
   19584:	dec00504 	addi	sp,sp,20
   19588:	f800283a 	ret

0001958c <___vfprintf_internal_r>:
   1958c:	deffe504 	addi	sp,sp,-108
   19590:	d8c00804 	addi	r3,sp,32
   19594:	ddc01815 	stw	r23,96(sp)
   19598:	dd801715 	stw	r22,92(sp)
   1959c:	dd401615 	stw	r21,88(sp)
   195a0:	dd001515 	stw	r20,84(sp)
   195a4:	dcc01415 	stw	r19,80(sp)
   195a8:	dc801315 	stw	r18,76(sp)
   195ac:	dc401215 	stw	r17,72(sp)
   195b0:	dc001115 	stw	r16,68(sp)
   195b4:	dfc01a15 	stw	ra,104(sp)
   195b8:	df001915 	stw	fp,100(sp)
   195bc:	2029883a 	mov	r20,r4
   195c0:	2823883a 	mov	r17,r5
   195c4:	382d883a 	mov	r22,r7
   195c8:	d9800f15 	stw	r6,60(sp)
   195cc:	0021883a 	mov	r16,zero
   195d0:	d8000e15 	stw	zero,56(sp)
   195d4:	d8000a15 	stw	zero,40(sp)
   195d8:	002b883a 	mov	r21,zero
   195dc:	0027883a 	mov	r19,zero
   195e0:	0025883a 	mov	r18,zero
   195e4:	d8000c15 	stw	zero,48(sp)
   195e8:	d8000b15 	stw	zero,44(sp)
   195ec:	002f883a 	mov	r23,zero
   195f0:	d8c00915 	stw	r3,36(sp)
   195f4:	d8c00f17 	ldw	r3,60(sp)
   195f8:	19000003 	ldbu	r4,0(r3)
   195fc:	20803fcc 	andi	r2,r4,255
   19600:	1080201c 	xori	r2,r2,128
   19604:	10bfe004 	addi	r2,r2,-128
   19608:	10011e26 	beq	r2,zero,19a84 <___vfprintf_internal_r+0x4f8>
   1960c:	00c00044 	movi	r3,1
   19610:	b8c01426 	beq	r23,r3,19664 <___vfprintf_internal_r+0xd8>
   19614:	1dc00216 	blt	r3,r23,19620 <___vfprintf_internal_r+0x94>
   19618:	b8000626 	beq	r23,zero,19634 <___vfprintf_internal_r+0xa8>
   1961c:	00011506 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19620:	01400084 	movi	r5,2
   19624:	b9401d26 	beq	r23,r5,1969c <___vfprintf_internal_r+0x110>
   19628:	014000c4 	movi	r5,3
   1962c:	b9402b26 	beq	r23,r5,196dc <___vfprintf_internal_r+0x150>
   19630:	00011006 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19634:	01400944 	movi	r5,37
   19638:	1140fc26 	beq	r2,r5,19a2c <___vfprintf_internal_r+0x4a0>
   1963c:	88800117 	ldw	r2,4(r17)
   19640:	d9000005 	stb	r4,0(sp)
   19644:	01c00044 	movi	r7,1
   19648:	d80d883a 	mov	r6,sp
   1964c:	880b883a 	mov	r5,r17
   19650:	a009883a 	mov	r4,r20
   19654:	103ee83a 	callr	r2
   19658:	1000d81e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   1965c:	84000044 	addi	r16,r16,1
   19660:	00010406 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19664:	01400c04 	movi	r5,48
   19668:	1140fa26 	beq	r2,r5,19a54 <___vfprintf_internal_r+0x4c8>
   1966c:	01400944 	movi	r5,37
   19670:	11400a1e 	bne	r2,r5,1969c <___vfprintf_internal_r+0x110>
   19674:	d8800005 	stb	r2,0(sp)
   19678:	88800117 	ldw	r2,4(r17)
   1967c:	b80f883a 	mov	r7,r23
   19680:	d80d883a 	mov	r6,sp
   19684:	880b883a 	mov	r5,r17
   19688:	a009883a 	mov	r4,r20
   1968c:	103ee83a 	callr	r2
   19690:	1000ca1e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   19694:	84000044 	addi	r16,r16,1
   19698:	0000f506 	br	19a70 <___vfprintf_internal_r+0x4e4>
   1969c:	25fff404 	addi	r23,r4,-48
   196a0:	bdc03fcc 	andi	r23,r23,255
   196a4:	00c00244 	movi	r3,9
   196a8:	1dc00936 	bltu	r3,r23,196d0 <___vfprintf_internal_r+0x144>
   196ac:	00bfffc4 	movi	r2,-1
   196b0:	90800426 	beq	r18,r2,196c4 <___vfprintf_internal_r+0x138>
   196b4:	01400284 	movi	r5,10
   196b8:	9009883a 	mov	r4,r18
   196bc:	00190e40 	call	190e4 <__mulsi3>
   196c0:	00000106 	br	196c8 <___vfprintf_internal_r+0x13c>
   196c4:	0005883a 	mov	r2,zero
   196c8:	b8a5883a 	add	r18,r23,r2
   196cc:	0000e206 	br	19a58 <___vfprintf_internal_r+0x4cc>
   196d0:	01400b84 	movi	r5,46
   196d4:	1140e426 	beq	r2,r5,19a68 <___vfprintf_internal_r+0x4dc>
   196d8:	05c00084 	movi	r23,2
   196dc:	213ff404 	addi	r4,r4,-48
   196e0:	27003fcc 	andi	fp,r4,255
   196e4:	00c00244 	movi	r3,9
   196e8:	1f000936 	bltu	r3,fp,19710 <___vfprintf_internal_r+0x184>
   196ec:	00bfffc4 	movi	r2,-1
   196f0:	98800426 	beq	r19,r2,19704 <___vfprintf_internal_r+0x178>
   196f4:	01400284 	movi	r5,10
   196f8:	9809883a 	mov	r4,r19
   196fc:	00190e40 	call	190e4 <__mulsi3>
   19700:	00000106 	br	19708 <___vfprintf_internal_r+0x17c>
   19704:	0005883a 	mov	r2,zero
   19708:	e0a7883a 	add	r19,fp,r2
   1970c:	0000d906 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19710:	00c01b04 	movi	r3,108
   19714:	10c0d226 	beq	r2,r3,19a60 <___vfprintf_internal_r+0x4d4>
   19718:	013fffc4 	movi	r4,-1
   1971c:	99000226 	beq	r19,r4,19728 <___vfprintf_internal_r+0x19c>
   19720:	d8000b15 	stw	zero,44(sp)
   19724:	00000106 	br	1972c <___vfprintf_internal_r+0x1a0>
   19728:	04c00044 	movi	r19,1
   1972c:	01001a44 	movi	r4,105
   19730:	11001626 	beq	r2,r4,1978c <___vfprintf_internal_r+0x200>
   19734:	20800916 	blt	r4,r2,1975c <___vfprintf_internal_r+0x1d0>
   19738:	010018c4 	movi	r4,99
   1973c:	11008826 	beq	r2,r4,19960 <___vfprintf_internal_r+0x3d4>
   19740:	01001904 	movi	r4,100
   19744:	11001126 	beq	r2,r4,1978c <___vfprintf_internal_r+0x200>
   19748:	01001604 	movi	r4,88
   1974c:	1100c81e 	bne	r2,r4,19a70 <___vfprintf_internal_r+0x4e4>
   19750:	00c00044 	movi	r3,1
   19754:	d8c00e15 	stw	r3,56(sp)
   19758:	00001506 	br	197b0 <___vfprintf_internal_r+0x224>
   1975c:	01001cc4 	movi	r4,115
   19760:	11009826 	beq	r2,r4,199c4 <___vfprintf_internal_r+0x438>
   19764:	20800416 	blt	r4,r2,19778 <___vfprintf_internal_r+0x1ec>
   19768:	01001bc4 	movi	r4,111
   1976c:	1100c01e 	bne	r2,r4,19a70 <___vfprintf_internal_r+0x4e4>
   19770:	05400204 	movi	r21,8
   19774:	00000f06 	br	197b4 <___vfprintf_internal_r+0x228>
   19778:	01001d44 	movi	r4,117
   1977c:	11000d26 	beq	r2,r4,197b4 <___vfprintf_internal_r+0x228>
   19780:	01001e04 	movi	r4,120
   19784:	11000a26 	beq	r2,r4,197b0 <___vfprintf_internal_r+0x224>
   19788:	0000b906 	br	19a70 <___vfprintf_internal_r+0x4e4>
   1978c:	d8c00a17 	ldw	r3,40(sp)
   19790:	b7000104 	addi	fp,r22,4
   19794:	18000726 	beq	r3,zero,197b4 <___vfprintf_internal_r+0x228>
   19798:	df000d15 	stw	fp,52(sp)
   1979c:	b5c00017 	ldw	r23,0(r22)
   197a0:	b800080e 	bge	r23,zero,197c4 <___vfprintf_internal_r+0x238>
   197a4:	05efc83a 	sub	r23,zero,r23
   197a8:	02400044 	movi	r9,1
   197ac:	00000606 	br	197c8 <___vfprintf_internal_r+0x23c>
   197b0:	05400404 	movi	r21,16
   197b4:	b0c00104 	addi	r3,r22,4
   197b8:	d8c00d15 	stw	r3,52(sp)
   197bc:	b5c00017 	ldw	r23,0(r22)
   197c0:	d8000a15 	stw	zero,40(sp)
   197c4:	0013883a 	mov	r9,zero
   197c8:	d839883a 	mov	fp,sp
   197cc:	b8001726 	beq	r23,zero,1982c <___vfprintf_internal_r+0x2a0>
   197d0:	a80b883a 	mov	r5,r21
   197d4:	b809883a 	mov	r4,r23
   197d8:	da401015 	stw	r9,64(sp)
   197dc:	0019cdc0 	call	19cdc <__udivsi3>
   197e0:	a80b883a 	mov	r5,r21
   197e4:	1009883a 	mov	r4,r2
   197e8:	102d883a 	mov	r22,r2
   197ec:	00190e40 	call	190e4 <__mulsi3>
   197f0:	b885c83a 	sub	r2,r23,r2
   197f4:	00c00244 	movi	r3,9
   197f8:	da401017 	ldw	r9,64(sp)
   197fc:	18800216 	blt	r3,r2,19808 <___vfprintf_internal_r+0x27c>
   19800:	10800c04 	addi	r2,r2,48
   19804:	00000506 	br	1981c <___vfprintf_internal_r+0x290>
   19808:	d8c00e17 	ldw	r3,56(sp)
   1980c:	18000226 	beq	r3,zero,19818 <___vfprintf_internal_r+0x28c>
   19810:	10800dc4 	addi	r2,r2,55
   19814:	00000106 	br	1981c <___vfprintf_internal_r+0x290>
   19818:	108015c4 	addi	r2,r2,87
   1981c:	e0800005 	stb	r2,0(fp)
   19820:	b02f883a 	mov	r23,r22
   19824:	e7000044 	addi	fp,fp,1
   19828:	003fe806 	br	197cc <_gp+0xffff73b4>
   1982c:	e6efc83a 	sub	r23,fp,sp
   19830:	9dc5c83a 	sub	r2,r19,r23
   19834:	0080090e 	bge	zero,r2,1985c <___vfprintf_internal_r+0x2d0>
   19838:	e085883a 	add	r2,fp,r2
   1983c:	01400c04 	movi	r5,48
   19840:	d8c00917 	ldw	r3,36(sp)
   19844:	e009883a 	mov	r4,fp
   19848:	e0c0032e 	bgeu	fp,r3,19858 <___vfprintf_internal_r+0x2cc>
   1984c:	e7000044 	addi	fp,fp,1
   19850:	21400005 	stb	r5,0(r4)
   19854:	e0bffa1e 	bne	fp,r2,19840 <_gp+0xffff7428>
   19858:	e6efc83a 	sub	r23,fp,sp
   1985c:	d8c00b17 	ldw	r3,44(sp)
   19860:	4dd1883a 	add	r8,r9,r23
   19864:	922dc83a 	sub	r22,r18,r8
   19868:	18001626 	beq	r3,zero,198c4 <___vfprintf_internal_r+0x338>
   1986c:	48000a26 	beq	r9,zero,19898 <___vfprintf_internal_r+0x30c>
   19870:	00800b44 	movi	r2,45
   19874:	d8800805 	stb	r2,32(sp)
   19878:	88800117 	ldw	r2,4(r17)
   1987c:	01c00044 	movi	r7,1
   19880:	d9800804 	addi	r6,sp,32
   19884:	880b883a 	mov	r5,r17
   19888:	a009883a 	mov	r4,r20
   1988c:	103ee83a 	callr	r2
   19890:	10004a1e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   19894:	84000044 	addi	r16,r16,1
   19898:	0580070e 	bge	zero,r22,198b8 <___vfprintf_internal_r+0x32c>
   1989c:	b00f883a 	mov	r7,r22
   198a0:	01800c04 	movi	r6,48
   198a4:	880b883a 	mov	r5,r17
   198a8:	a009883a 	mov	r4,r20
   198ac:	00195200 	call	19520 <print_repeat>
   198b0:	1000421e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   198b4:	85a1883a 	add	r16,r16,r22
   198b8:	e02d883a 	mov	r22,fp
   198bc:	bf2fc83a 	sub	r23,r23,fp
   198c0:	00002006 	br	19944 <___vfprintf_internal_r+0x3b8>
   198c4:	0580090e 	bge	zero,r22,198ec <___vfprintf_internal_r+0x360>
   198c8:	b00f883a 	mov	r7,r22
   198cc:	01800804 	movi	r6,32
   198d0:	880b883a 	mov	r5,r17
   198d4:	a009883a 	mov	r4,r20
   198d8:	da401015 	stw	r9,64(sp)
   198dc:	00195200 	call	19520 <print_repeat>
   198e0:	da401017 	ldw	r9,64(sp)
   198e4:	1000351e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   198e8:	85a1883a 	add	r16,r16,r22
   198ec:	483ff226 	beq	r9,zero,198b8 <_gp+0xffff74a0>
   198f0:	00800b44 	movi	r2,45
   198f4:	d8800805 	stb	r2,32(sp)
   198f8:	88800117 	ldw	r2,4(r17)
   198fc:	01c00044 	movi	r7,1
   19900:	d9800804 	addi	r6,sp,32
   19904:	880b883a 	mov	r5,r17
   19908:	a009883a 	mov	r4,r20
   1990c:	103ee83a 	callr	r2
   19910:	10002a1e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   19914:	84000044 	addi	r16,r16,1
   19918:	003fe706 	br	198b8 <_gp+0xffff74a0>
   1991c:	b5bfffc4 	addi	r22,r22,-1
   19920:	b0800003 	ldbu	r2,0(r22)
   19924:	01c00044 	movi	r7,1
   19928:	d9800804 	addi	r6,sp,32
   1992c:	d8800805 	stb	r2,32(sp)
   19930:	88800117 	ldw	r2,4(r17)
   19934:	880b883a 	mov	r5,r17
   19938:	a009883a 	mov	r4,r20
   1993c:	103ee83a 	callr	r2
   19940:	10001e1e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   19944:	8585c83a 	sub	r2,r16,r22
   19948:	b5c9883a 	add	r4,r22,r23
   1994c:	e085883a 	add	r2,fp,r2
   19950:	013ff216 	blt	zero,r4,1991c <_gp+0xffff7504>
   19954:	1021883a 	mov	r16,r2
   19958:	dd800d17 	ldw	r22,52(sp)
   1995c:	00004406 	br	19a70 <___vfprintf_internal_r+0x4e4>
   19960:	00800044 	movi	r2,1
   19964:	1480080e 	bge	r2,r18,19988 <___vfprintf_internal_r+0x3fc>
   19968:	95ffffc4 	addi	r23,r18,-1
   1996c:	b80f883a 	mov	r7,r23
   19970:	01800804 	movi	r6,32
   19974:	880b883a 	mov	r5,r17
   19978:	a009883a 	mov	r4,r20
   1997c:	00195200 	call	19520 <print_repeat>
   19980:	10000e1e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   19984:	85e1883a 	add	r16,r16,r23
   19988:	b0800017 	ldw	r2,0(r22)
   1998c:	01c00044 	movi	r7,1
   19990:	d80d883a 	mov	r6,sp
   19994:	d8800005 	stb	r2,0(sp)
   19998:	88800117 	ldw	r2,4(r17)
   1999c:	880b883a 	mov	r5,r17
   199a0:	a009883a 	mov	r4,r20
   199a4:	b5c00104 	addi	r23,r22,4
   199a8:	103ee83a 	callr	r2
   199ac:	1000031e 	bne	r2,zero,199bc <___vfprintf_internal_r+0x430>
   199b0:	84000044 	addi	r16,r16,1
   199b4:	b82d883a 	mov	r22,r23
   199b8:	00002d06 	br	19a70 <___vfprintf_internal_r+0x4e4>
   199bc:	00bfffc4 	movi	r2,-1
   199c0:	00003106 	br	19a88 <___vfprintf_internal_r+0x4fc>
   199c4:	b5c00017 	ldw	r23,0(r22)
   199c8:	b7000104 	addi	fp,r22,4
   199cc:	b809883a 	mov	r4,r23
   199d0:	00195040 	call	19504 <strlen>
   199d4:	9091c83a 	sub	r8,r18,r2
   199d8:	102d883a 	mov	r22,r2
   199dc:	0200090e 	bge	zero,r8,19a04 <___vfprintf_internal_r+0x478>
   199e0:	400f883a 	mov	r7,r8
   199e4:	01800804 	movi	r6,32
   199e8:	880b883a 	mov	r5,r17
   199ec:	a009883a 	mov	r4,r20
   199f0:	da001015 	stw	r8,64(sp)
   199f4:	00195200 	call	19520 <print_repeat>
   199f8:	da001017 	ldw	r8,64(sp)
   199fc:	103fef1e 	bne	r2,zero,199bc <_gp+0xffff75a4>
   19a00:	8221883a 	add	r16,r16,r8
   19a04:	88800117 	ldw	r2,4(r17)
   19a08:	b00f883a 	mov	r7,r22
   19a0c:	b80d883a 	mov	r6,r23
   19a10:	880b883a 	mov	r5,r17
   19a14:	a009883a 	mov	r4,r20
   19a18:	103ee83a 	callr	r2
   19a1c:	103fe71e 	bne	r2,zero,199bc <_gp+0xffff75a4>
   19a20:	85a1883a 	add	r16,r16,r22
   19a24:	e02d883a 	mov	r22,fp
   19a28:	00001106 	br	19a70 <___vfprintf_internal_r+0x4e4>
   19a2c:	00c00044 	movi	r3,1
   19a30:	04ffffc4 	movi	r19,-1
   19a34:	d8000e15 	stw	zero,56(sp)
   19a38:	d8c00a15 	stw	r3,40(sp)
   19a3c:	05400284 	movi	r21,10
   19a40:	9825883a 	mov	r18,r19
   19a44:	d8000c15 	stw	zero,48(sp)
   19a48:	d8000b15 	stw	zero,44(sp)
   19a4c:	182f883a 	mov	r23,r3
   19a50:	00000806 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19a54:	ddc00b15 	stw	r23,44(sp)
   19a58:	05c00084 	movi	r23,2
   19a5c:	00000506 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19a60:	00c00044 	movi	r3,1
   19a64:	d8c00c15 	stw	r3,48(sp)
   19a68:	05c000c4 	movi	r23,3
   19a6c:	00000106 	br	19a74 <___vfprintf_internal_r+0x4e8>
   19a70:	002f883a 	mov	r23,zero
   19a74:	d8c00f17 	ldw	r3,60(sp)
   19a78:	18c00044 	addi	r3,r3,1
   19a7c:	d8c00f15 	stw	r3,60(sp)
   19a80:	003edc06 	br	195f4 <_gp+0xffff71dc>
   19a84:	8005883a 	mov	r2,r16
   19a88:	dfc01a17 	ldw	ra,104(sp)
   19a8c:	df001917 	ldw	fp,100(sp)
   19a90:	ddc01817 	ldw	r23,96(sp)
   19a94:	dd801717 	ldw	r22,92(sp)
   19a98:	dd401617 	ldw	r21,88(sp)
   19a9c:	dd001517 	ldw	r20,84(sp)
   19aa0:	dcc01417 	ldw	r19,80(sp)
   19aa4:	dc801317 	ldw	r18,76(sp)
   19aa8:	dc401217 	ldw	r17,72(sp)
   19aac:	dc001117 	ldw	r16,68(sp)
   19ab0:	dec01b04 	addi	sp,sp,108
   19ab4:	f800283a 	ret

00019ab8 <__vfprintf_internal>:
   19ab8:	008000b4 	movhi	r2,2
   19abc:	10a90704 	addi	r2,r2,-23524
   19ac0:	300f883a 	mov	r7,r6
   19ac4:	280d883a 	mov	r6,r5
   19ac8:	200b883a 	mov	r5,r4
   19acc:	11000017 	ldw	r4,0(r2)
   19ad0:	001958c1 	jmpi	1958c <___vfprintf_internal_r>

00019ad4 <__sfvwrite_small_dev>:
   19ad4:	2880000b 	ldhu	r2,0(r5)
   19ad8:	1080020c 	andi	r2,r2,8
   19adc:	10002126 	beq	r2,zero,19b64 <__sfvwrite_small_dev+0x90>
   19ae0:	2880008f 	ldh	r2,2(r5)
   19ae4:	defffa04 	addi	sp,sp,-24
   19ae8:	dc000015 	stw	r16,0(sp)
   19aec:	dfc00515 	stw	ra,20(sp)
   19af0:	dd000415 	stw	r20,16(sp)
   19af4:	dcc00315 	stw	r19,12(sp)
   19af8:	dc800215 	stw	r18,8(sp)
   19afc:	dc400115 	stw	r17,4(sp)
   19b00:	2821883a 	mov	r16,r5
   19b04:	10001216 	blt	r2,zero,19b50 <__sfvwrite_small_dev+0x7c>
   19b08:	2027883a 	mov	r19,r4
   19b0c:	3025883a 	mov	r18,r6
   19b10:	3823883a 	mov	r17,r7
   19b14:	05010004 	movi	r20,1024
   19b18:	04400b0e 	bge	zero,r17,19b48 <__sfvwrite_small_dev+0x74>
   19b1c:	880f883a 	mov	r7,r17
   19b20:	a440010e 	bge	r20,r17,19b28 <__sfvwrite_small_dev+0x54>
   19b24:	01c10004 	movi	r7,1024
   19b28:	8140008f 	ldh	r5,2(r16)
   19b2c:	900d883a 	mov	r6,r18
   19b30:	9809883a 	mov	r4,r19
   19b34:	0019b8c0 	call	19b8c <_write_r>
   19b38:	0080050e 	bge	zero,r2,19b50 <__sfvwrite_small_dev+0x7c>
   19b3c:	88a3c83a 	sub	r17,r17,r2
   19b40:	90a5883a 	add	r18,r18,r2
   19b44:	003ff406 	br	19b18 <_gp+0xffff7700>
   19b48:	0005883a 	mov	r2,zero
   19b4c:	00000706 	br	19b6c <__sfvwrite_small_dev+0x98>
   19b50:	8080000b 	ldhu	r2,0(r16)
   19b54:	10801014 	ori	r2,r2,64
   19b58:	8080000d 	sth	r2,0(r16)
   19b5c:	00bfffc4 	movi	r2,-1
   19b60:	00000206 	br	19b6c <__sfvwrite_small_dev+0x98>
   19b64:	00bfffc4 	movi	r2,-1
   19b68:	f800283a 	ret
   19b6c:	dfc00517 	ldw	ra,20(sp)
   19b70:	dd000417 	ldw	r20,16(sp)
   19b74:	dcc00317 	ldw	r19,12(sp)
   19b78:	dc800217 	ldw	r18,8(sp)
   19b7c:	dc400117 	ldw	r17,4(sp)
   19b80:	dc000017 	ldw	r16,0(sp)
   19b84:	dec00604 	addi	sp,sp,24
   19b88:	f800283a 	ret

00019b8c <_write_r>:
   19b8c:	defffd04 	addi	sp,sp,-12
   19b90:	dc000015 	stw	r16,0(sp)
   19b94:	040000b4 	movhi	r16,2
   19b98:	dc400115 	stw	r17,4(sp)
   19b9c:	84295d04 	addi	r16,r16,-23180
   19ba0:	2023883a 	mov	r17,r4
   19ba4:	2809883a 	mov	r4,r5
   19ba8:	300b883a 	mov	r5,r6
   19bac:	380d883a 	mov	r6,r7
   19bb0:	dfc00215 	stw	ra,8(sp)
   19bb4:	80000015 	stw	zero,0(r16)
   19bb8:	0019ef40 	call	19ef4 <write>
   19bbc:	00ffffc4 	movi	r3,-1
   19bc0:	10c0031e 	bne	r2,r3,19bd0 <_write_r+0x44>
   19bc4:	80c00017 	ldw	r3,0(r16)
   19bc8:	18000126 	beq	r3,zero,19bd0 <_write_r+0x44>
   19bcc:	88c00015 	stw	r3,0(r17)
   19bd0:	dfc00217 	ldw	ra,8(sp)
   19bd4:	dc400117 	ldw	r17,4(sp)
   19bd8:	dc000017 	ldw	r16,0(sp)
   19bdc:	dec00304 	addi	sp,sp,12
   19be0:	f800283a 	ret

00019be4 <__divsi3>:
   19be4:	20001b16 	blt	r4,zero,19c54 <__divsi3+0x70>
   19be8:	000f883a 	mov	r7,zero
   19bec:	28001616 	blt	r5,zero,19c48 <__divsi3+0x64>
   19bf0:	200d883a 	mov	r6,r4
   19bf4:	29001a2e 	bgeu	r5,r4,19c60 <__divsi3+0x7c>
   19bf8:	00800804 	movi	r2,32
   19bfc:	00c00044 	movi	r3,1
   19c00:	00000106 	br	19c08 <__divsi3+0x24>
   19c04:	10000d26 	beq	r2,zero,19c3c <__divsi3+0x58>
   19c08:	294b883a 	add	r5,r5,r5
   19c0c:	10bfffc4 	addi	r2,r2,-1
   19c10:	18c7883a 	add	r3,r3,r3
   19c14:	293ffb36 	bltu	r5,r4,19c04 <_gp+0xffff77ec>
   19c18:	0005883a 	mov	r2,zero
   19c1c:	18000726 	beq	r3,zero,19c3c <__divsi3+0x58>
   19c20:	0005883a 	mov	r2,zero
   19c24:	31400236 	bltu	r6,r5,19c30 <__divsi3+0x4c>
   19c28:	314dc83a 	sub	r6,r6,r5
   19c2c:	10c4b03a 	or	r2,r2,r3
   19c30:	1806d07a 	srli	r3,r3,1
   19c34:	280ad07a 	srli	r5,r5,1
   19c38:	183ffa1e 	bne	r3,zero,19c24 <_gp+0xffff780c>
   19c3c:	38000126 	beq	r7,zero,19c44 <__divsi3+0x60>
   19c40:	0085c83a 	sub	r2,zero,r2
   19c44:	f800283a 	ret
   19c48:	014bc83a 	sub	r5,zero,r5
   19c4c:	39c0005c 	xori	r7,r7,1
   19c50:	003fe706 	br	19bf0 <_gp+0xffff77d8>
   19c54:	0109c83a 	sub	r4,zero,r4
   19c58:	01c00044 	movi	r7,1
   19c5c:	003fe306 	br	19bec <_gp+0xffff77d4>
   19c60:	00c00044 	movi	r3,1
   19c64:	003fee06 	br	19c20 <_gp+0xffff7808>

00019c68 <__modsi3>:
   19c68:	20001716 	blt	r4,zero,19cc8 <__modsi3+0x60>
   19c6c:	000f883a 	mov	r7,zero
   19c70:	2005883a 	mov	r2,r4
   19c74:	28001216 	blt	r5,zero,19cc0 <__modsi3+0x58>
   19c78:	2900162e 	bgeu	r5,r4,19cd4 <__modsi3+0x6c>
   19c7c:	01800804 	movi	r6,32
   19c80:	00c00044 	movi	r3,1
   19c84:	00000106 	br	19c8c <__modsi3+0x24>
   19c88:	30000a26 	beq	r6,zero,19cb4 <__modsi3+0x4c>
   19c8c:	294b883a 	add	r5,r5,r5
   19c90:	31bfffc4 	addi	r6,r6,-1
   19c94:	18c7883a 	add	r3,r3,r3
   19c98:	293ffb36 	bltu	r5,r4,19c88 <_gp+0xffff7870>
   19c9c:	18000526 	beq	r3,zero,19cb4 <__modsi3+0x4c>
   19ca0:	1806d07a 	srli	r3,r3,1
   19ca4:	11400136 	bltu	r2,r5,19cac <__modsi3+0x44>
   19ca8:	1145c83a 	sub	r2,r2,r5
   19cac:	280ad07a 	srli	r5,r5,1
   19cb0:	183ffb1e 	bne	r3,zero,19ca0 <_gp+0xffff7888>
   19cb4:	38000126 	beq	r7,zero,19cbc <__modsi3+0x54>
   19cb8:	0085c83a 	sub	r2,zero,r2
   19cbc:	f800283a 	ret
   19cc0:	014bc83a 	sub	r5,zero,r5
   19cc4:	003fec06 	br	19c78 <_gp+0xffff7860>
   19cc8:	0109c83a 	sub	r4,zero,r4
   19ccc:	01c00044 	movi	r7,1
   19cd0:	003fe706 	br	19c70 <_gp+0xffff7858>
   19cd4:	00c00044 	movi	r3,1
   19cd8:	003ff106 	br	19ca0 <_gp+0xffff7888>

00019cdc <__udivsi3>:
   19cdc:	200d883a 	mov	r6,r4
   19ce0:	2900152e 	bgeu	r5,r4,19d38 <__udivsi3+0x5c>
   19ce4:	28001416 	blt	r5,zero,19d38 <__udivsi3+0x5c>
   19ce8:	00800804 	movi	r2,32
   19cec:	00c00044 	movi	r3,1
   19cf0:	00000206 	br	19cfc <__udivsi3+0x20>
   19cf4:	10000e26 	beq	r2,zero,19d30 <__udivsi3+0x54>
   19cf8:	28000516 	blt	r5,zero,19d10 <__udivsi3+0x34>
   19cfc:	294b883a 	add	r5,r5,r5
   19d00:	10bfffc4 	addi	r2,r2,-1
   19d04:	18c7883a 	add	r3,r3,r3
   19d08:	293ffa36 	bltu	r5,r4,19cf4 <_gp+0xffff78dc>
   19d0c:	18000826 	beq	r3,zero,19d30 <__udivsi3+0x54>
   19d10:	0005883a 	mov	r2,zero
   19d14:	31400236 	bltu	r6,r5,19d20 <__udivsi3+0x44>
   19d18:	314dc83a 	sub	r6,r6,r5
   19d1c:	10c4b03a 	or	r2,r2,r3
   19d20:	1806d07a 	srli	r3,r3,1
   19d24:	280ad07a 	srli	r5,r5,1
   19d28:	183ffa1e 	bne	r3,zero,19d14 <_gp+0xffff78fc>
   19d2c:	f800283a 	ret
   19d30:	0005883a 	mov	r2,zero
   19d34:	f800283a 	ret
   19d38:	00c00044 	movi	r3,1
   19d3c:	003ff406 	br	19d10 <_gp+0xffff78f8>

00019d40 <__umodsi3>:
   19d40:	2005883a 	mov	r2,r4
   19d44:	2900122e 	bgeu	r5,r4,19d90 <__umodsi3+0x50>
   19d48:	28001116 	blt	r5,zero,19d90 <__umodsi3+0x50>
   19d4c:	01800804 	movi	r6,32
   19d50:	00c00044 	movi	r3,1
   19d54:	00000206 	br	19d60 <__umodsi3+0x20>
   19d58:	30000c26 	beq	r6,zero,19d8c <__umodsi3+0x4c>
   19d5c:	28000516 	blt	r5,zero,19d74 <__umodsi3+0x34>
   19d60:	294b883a 	add	r5,r5,r5
   19d64:	31bfffc4 	addi	r6,r6,-1
   19d68:	18c7883a 	add	r3,r3,r3
   19d6c:	293ffa36 	bltu	r5,r4,19d58 <_gp+0xffff7940>
   19d70:	18000626 	beq	r3,zero,19d8c <__umodsi3+0x4c>
   19d74:	1806d07a 	srli	r3,r3,1
   19d78:	11400136 	bltu	r2,r5,19d80 <__umodsi3+0x40>
   19d7c:	1145c83a 	sub	r2,r2,r5
   19d80:	280ad07a 	srli	r5,r5,1
   19d84:	183ffb1e 	bne	r3,zero,19d74 <_gp+0xffff795c>
   19d88:	f800283a 	ret
   19d8c:	f800283a 	ret
   19d90:	00c00044 	movi	r3,1
   19d94:	003ff706 	br	19d74 <_gp+0xffff795c>

00019d98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19d98:	deffff04 	addi	sp,sp,-4
   19d9c:	010000b4 	movhi	r4,2
   19da0:	014000b4 	movhi	r5,2
   19da4:	dfc00015 	stw	ra,0(sp)
   19da8:	2128ce04 	addi	r4,r4,-23752
   19dac:	29690b04 	addi	r5,r5,-23508

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19db0:	2140061e 	bne	r4,r5,19dcc <alt_load+0x34>
   19db4:	010000b4 	movhi	r4,2
   19db8:	014000b4 	movhi	r5,2
   19dbc:	21200804 	addi	r4,r4,-32736
   19dc0:	29600804 	addi	r5,r5,-32736
   19dc4:	2140121e 	bne	r4,r5,19e10 <alt_load+0x78>
   19dc8:	00000b06 	br	19df8 <alt_load+0x60>
   19dcc:	00c000b4 	movhi	r3,2
   19dd0:	18e90b04 	addi	r3,r3,-23508
   19dd4:	1907c83a 	sub	r3,r3,r4
   19dd8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19ddc:	10fff526 	beq	r2,r3,19db4 <_gp+0xffff799c>
    {
      *to++ = *from++;
   19de0:	114f883a 	add	r7,r2,r5
   19de4:	39c00017 	ldw	r7,0(r7)
   19de8:	110d883a 	add	r6,r2,r4
   19dec:	10800104 	addi	r2,r2,4
   19df0:	31c00015 	stw	r7,0(r6)
   19df4:	003ff906 	br	19ddc <_gp+0xffff79c4>
   19df8:	010000b4 	movhi	r4,2
   19dfc:	014000b4 	movhi	r5,2
   19e00:	21288504 	addi	r4,r4,-24044
   19e04:	29688504 	addi	r5,r5,-24044

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19e08:	2140101e 	bne	r4,r5,19e4c <alt_load+0xb4>
   19e0c:	00000b06 	br	19e3c <alt_load+0xa4>
   19e10:	00c000b4 	movhi	r3,2
   19e14:	18e00804 	addi	r3,r3,-32736
   19e18:	1907c83a 	sub	r3,r3,r4
   19e1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19e20:	10fff526 	beq	r2,r3,19df8 <_gp+0xffff79e0>
    {
      *to++ = *from++;
   19e24:	114f883a 	add	r7,r2,r5
   19e28:	39c00017 	ldw	r7,0(r7)
   19e2c:	110d883a 	add	r6,r2,r4
   19e30:	10800104 	addi	r2,r2,4
   19e34:	31c00015 	stw	r7,0(r6)
   19e38:	003ff906 	br	19e20 <_gp+0xffff7a08>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   19e3c:	001a2040 	call	1a204 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   19e40:	dfc00017 	ldw	ra,0(sp)
   19e44:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   19e48:	001a2081 	jmpi	1a208 <alt_icache_flush_all>
   19e4c:	00c000b4 	movhi	r3,2
   19e50:	18e8ce04 	addi	r3,r3,-23752
   19e54:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19e58:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19e5c:	18bff726 	beq	r3,r2,19e3c <_gp+0xffff7a24>
    {
      *to++ = *from++;
   19e60:	114f883a 	add	r7,r2,r5
   19e64:	39c00017 	ldw	r7,0(r7)
   19e68:	110d883a 	add	r6,r2,r4
   19e6c:	10800104 	addi	r2,r2,4
   19e70:	31c00015 	stw	r7,0(r6)
   19e74:	003ff906 	br	19e5c <_gp+0xffff7a44>

00019e78 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19e78:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19e7c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19e80:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19e84:	0019f540 	call	19f54 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   19e88:	0019f740 	call	19f74 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   19e8c:	d1a05817 	ldw	r6,-32416(gp)
   19e90:	d1605917 	ldw	r5,-32412(gp)
   19e94:	d1205a17 	ldw	r4,-32408(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   19e98:	dfc00017 	ldw	ra,0(sp)
   19e9c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   19ea0:	00186d41 	jmpi	186d4 <main>

00019ea4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ea4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ea8:	00bfff84 	movi	r2,-2
   19eac:	2884703a 	and	r2,r5,r2
   19eb0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19eb4:	d0a00217 	ldw	r2,-32760(gp)
   19eb8:	00ffff04 	movi	r3,-4
   19ebc:	108000c4 	addi	r2,r2,3
   19ec0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19ec4:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19ec8:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19ecc:	1109883a 	add	r4,r2,r4
   19ed0:	18f80004 	addi	r3,r3,-8192
   19ed4:	1900032e 	bgeu	r3,r4,19ee4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ed8:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   19edc:	00bfffc4 	movi	r2,-1
   19ee0:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   19ee4:	d1200215 	stw	r4,-32760(gp)
   19ee8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   19eec:	f800283a 	ret

00019ef0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   19ef0:	001a17c1 	jmpi	1a17c <alt_busy_sleep>

00019ef4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   19ef4:	00800044 	movi	r2,1
   19ef8:	20800226 	beq	r4,r2,19f04 <write+0x10>
   19efc:	00800084 	movi	r2,2
   19f00:	2080041e 	bne	r4,r2,19f14 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   19f04:	010000b4 	movhi	r4,2
   19f08:	000f883a 	mov	r7,zero
   19f0c:	21290904 	addi	r4,r4,-23516
   19f10:	001a1481 	jmpi	1a148 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   19f14:	d0a00417 	ldw	r2,-32752(gp)
   19f18:	10000926 	beq	r2,zero,19f40 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   19f1c:	deffff04 	addi	sp,sp,-4
   19f20:	dfc00015 	stw	ra,0(sp)
   19f24:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   19f28:	00c01444 	movi	r3,81
   19f2c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19f30:	00bfffc4 	movi	r2,-1
   19f34:	dfc00017 	ldw	ra,0(sp)
   19f38:	dec00104 	addi	sp,sp,4
   19f3c:	f800283a 	ret
   19f40:	d0a05704 	addi	r2,gp,-32420
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   19f44:	00c01444 	movi	r3,81
   19f48:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19f4c:	00bfffc4 	movi	r2,-1
   19f50:	f800283a 	ret

00019f54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   19f54:	deffff04 	addi	sp,sp,-4
   19f58:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_0, nios2_0);
   19f5c:	001a20c0 	call	1a20c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   19f60:	00800044 	movi	r2,1
   19f64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   19f68:	dfc00017 	ldw	ra,0(sp)
   19f6c:	dec00104 	addi	sp,sp,4
   19f70:	f800283a 	ret

00019f74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   19f74:	f800283a 	ret

00019f78 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   19f78:	20800137 	ldwio	r2,4(r4)
}
   19f7c:	1144703a 	and	r2,r2,r5
   19f80:	f800283a 	ret

00019f84 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   19f84:	20800337 	ldwio	r2,12(r4)
}
   19f88:	1144703a 	and	r2,r2,r5
   19f8c:	f800283a 	ret

00019f90 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   19f90:	20800437 	ldwio	r2,16(r4)
   19f94:	f800283a 	ret

00019f98 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   19f98:	20800537 	ldwio	r2,20(r4)
   19f9c:	f800283a 	ret

00019fa0 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   19fa0:	20800237 	ldwio	r2,8(r4)
}
   19fa4:	1144703a 	and	r2,r2,r5
   19fa8:	f800283a 	ret

00019fac <altera_avalon_fifo_read_level>:
   19fac:	20800037 	ldwio	r2,0(r4)
   19fb0:	f800283a 	ret

00019fb4 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   19fb4:	21000204 	addi	r4,r4,8
   19fb8:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   19fbc:	20800037 	ldwio	r2,0(r4)
   19fc0:	114a703a 	and	r5,r2,r5
   19fc4:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   19fc8:	0085c83a 	sub	r2,zero,r2
   19fcc:	f800283a 	ret

00019fd0 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   19fd0:	21000304 	addi	r4,r4,12
   19fd4:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   19fd8:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   19fdc:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   19fe0:	28c00126 	beq	r5,r3,19fe8 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   19fe4:	00bfff84 	movi	r2,-2
}
   19fe8:	f800283a 	ret

00019fec <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   19fec:	21000404 	addi	r4,r4,16
   19ff0:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   19ff4:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   19ff8:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   19ffc:	28c00126 	beq	r5,r3,1a004 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a000:	00bfff44 	movi	r2,-3
}
   1a004:	f800283a 	ret

0001a008 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   1a008:	21000504 	addi	r4,r4,20
   1a00c:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1a010:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   1a014:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1a018:	28c00126 	beq	r5,r3,1a020 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a01c:	00bfff44 	movi	r2,-3
}
   1a020:	f800283a 	ret

0001a024 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a024:	defffb04 	addi	sp,sp,-20
   1a028:	dcc00315 	stw	r19,12(sp)
   1a02c:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a030:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a034:	dc800215 	stw	r18,8(sp)
   1a038:	dc400115 	stw	r17,4(sp)
   1a03c:	dc000015 	stw	r16,0(sp)
   1a040:	dfc00415 	stw	ra,16(sp)
   1a044:	2021883a 	mov	r16,r4
   1a048:	3023883a 	mov	r17,r6
   1a04c:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a050:	0019fb40 	call	19fb4 <altera_avalon_fifo_clear_event>
   1a054:	10000f1e 	bne	r2,zero,1a094 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   1a058:	980b883a 	mov	r5,r19
   1a05c:	8009883a 	mov	r4,r16
   1a060:	0019fd00 	call	19fd0 <altera_avalon_fifo_write_ienable>
   1a064:	10000d1e 	bne	r2,zero,1a09c <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   1a068:	900b883a 	mov	r5,r18
   1a06c:	8009883a 	mov	r4,r16
   1a070:	0019fec0 	call	19fec <altera_avalon_fifo_write_almostfull>
   1a074:	10000226 	beq	r2,zero,1a080 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a078:	00bfff44 	movi	r2,-3
   1a07c:	00000806 	br	1a0a0 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   1a080:	880b883a 	mov	r5,r17
   1a084:	8009883a 	mov	r4,r16
   1a088:	001a0080 	call	1a008 <altera_avalon_fifo_write_almostempty>
   1a08c:	10000426 	beq	r2,zero,1a0a0 <altera_avalon_fifo_init+0x7c>
   1a090:	003ff906 	br	1a078 <_gp+0xffff7c60>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a094:	00bfffc4 	movi	r2,-1
   1a098:	00000106 	br	1a0a0 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a09c:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   1a0a0:	dfc00417 	ldw	ra,16(sp)
   1a0a4:	dcc00317 	ldw	r19,12(sp)
   1a0a8:	dc800217 	ldw	r18,8(sp)
   1a0ac:	dc400117 	ldw	r17,4(sp)
   1a0b0:	dc000017 	ldw	r16,0(sp)
   1a0b4:	dec00504 	addi	sp,sp,20
   1a0b8:	f800283a 	ret

0001a0bc <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a0bc:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1a0c0:	1080004c 	andi	r2,r2,1
   1a0c4:	1000021e 	bne	r2,zero,1a0d0 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   1a0c8:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   1a0cc:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1a0d0:	00bfff04 	movi	r2,-4
    }
}
   1a0d4:	f800283a 	ret

0001a0d8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   1a0d8:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a0dc:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1a0e0:	1080008c 	andi	r2,r2,2
   1a0e4:	1000041e 	bne	r2,zero,1a0f8 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1a0e8:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1a0ec:	20c00037 	ldwio	r3,0(r4)
   1a0f0:	30c00015 	stw	r3,0(r6)
   1a0f4:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   1a0f8:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   1a0fc:	f800283a 	ret

0001a100 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a100:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1a104:	1080008c 	andi	r2,r2,2
   1a108:	1000021e 	bne	r2,zero,1a114 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1a10c:	20800037 	ldwio	r2,0(r4)
   1a110:	f800283a 	ret
    }
    return 0;
   1a114:	0005883a 	mov	r2,zero
}
   1a118:	f800283a 	ret

0001a11c <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a11c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1a120:	1080004c 	andi	r2,r2,1
   1a124:	1000021e 	bne	r2,zero,1a130 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   1a128:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   1a12c:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1a130:	00bfff04 	movi	r2,-4
    }
}
   1a134:	f800283a 	ret

0001a138 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   1a138:	20800137 	ldwio	r2,4(r4)
   1a13c:	f800283a 	ret

0001a140 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   1a140:	20800037 	ldwio	r2,0(r4)
   1a144:	f800283a 	ret

0001a148 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1a148:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1a14c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1a150:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1a154:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1a158:	2980072e 	bgeu	r5,r6,1a178 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1a15c:	38c00037 	ldwio	r3,0(r7)
   1a160:	18ffffec 	andhi	r3,r3,65535
   1a164:	183ffc26 	beq	r3,zero,1a158 <_gp+0xffff7d40>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1a168:	28c00007 	ldb	r3,0(r5)
   1a16c:	20c00035 	stwio	r3,0(r4)
   1a170:	29400044 	addi	r5,r5,1
   1a174:	003ff806 	br	1a158 <_gp+0xffff7d40>

  return count;
}
   1a178:	f800283a 	ret

0001a17c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1a17c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1a180:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1a184:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1a188:	dc000015 	stw	r16,0(sp)
   1a18c:	dfc00115 	stw	ra,4(sp)
   1a190:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1a194:	0019cdc0 	call	19cdc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1a198:	10001026 	beq	r2,zero,1a1dc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1a19c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1a1a0:	013999b4 	movhi	r4,58982
   1a1a4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1a1a8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1a1ac:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1a1b0:	297fffc4 	addi	r5,r5,-1
   1a1b4:	283ffe1e 	bne	r5,zero,1a1b0 <_gp+0xffff7d98>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1a1b8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1a1bc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1a1c0:	18bffb16 	blt	r3,r2,1a1b0 <_gp+0xffff7d98>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1a1c4:	01400144 	movi	r5,5
   1a1c8:	8009883a 	mov	r4,r16
   1a1cc:	00190e40 	call	190e4 <__mulsi3>
   1a1d0:	10bfffc4 	addi	r2,r2,-1
   1a1d4:	103ffe1e 	bne	r2,zero,1a1d0 <_gp+0xffff7db8>
   1a1d8:	00000506 	br	1a1f0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1a1dc:	01400144 	movi	r5,5
   1a1e0:	8009883a 	mov	r4,r16
   1a1e4:	00190e40 	call	190e4 <__mulsi3>
   1a1e8:	10bfffc4 	addi	r2,r2,-1
   1a1ec:	00bffe16 	blt	zero,r2,1a1e8 <_gp+0xffff7dd0>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   1a1f0:	0005883a 	mov	r2,zero
   1a1f4:	dfc00117 	ldw	ra,4(sp)
   1a1f8:	dc000017 	ldw	r16,0(sp)
   1a1fc:	dec00204 	addi	sp,sp,8
   1a200:	f800283a 	ret

0001a204 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a204:	f800283a 	ret

0001a208 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a208:	f800283a 	ret

0001a20c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1a20c:	000170fa 	wrctl	ienable,zero
   1a210:	f800283a 	ret
