
node0_v2.elf:     file format elf32-littlenios2
node0_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00018020

Program Header:
    LOAD off    0x00001000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00018020 paddr 0x00018020 align 2**12
         filesz 0x00002270 memsz 0x00002270 flags r-x
    LOAD off    0x00003290 vaddr 0x0001a290 paddr 0x0001a384 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003478 vaddr 0x0001a478 paddr 0x0001a478 align 2**12
         filesz 0x00000000 memsz 0x000002cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00018000  00018000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00018020  00018020  00003384  2**0
                  CONTENTS
  2 .text         000021cc  00018020  00018020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  0001a1ec  0001a1ec  000031ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  0001a290  0001a384  00003290  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002cc  0001a478  0001a478  00003478  2**2
                  ALLOC, SMALL_DATA
  6 .data_mem_0   00000000  0001a744  0001a744  00003384  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000400  00000000  00000000  000033a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000079e6  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024a7  00000000  00000000  0000b18e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000029c9  00000000  00000000  0000d635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009e4  00000000  00000000  00010000  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ade  00000000  00000000  000109e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002a1e  00000000  00000000  000124c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00014ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000398  00000000  00000000  00014ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016f32  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  00016f35  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016f3c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016f3d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00016f3e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00016f49  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00016f54  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00016f5f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000052  00000000  00000000  00016f6a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000dbc2  00000000  00000000  00016fbc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000f2066  00000000  00000000  00024b7e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00018000 l    d  .entry	00000000 .entry
00018020 l    d  .exceptions	00000000 .exceptions
00018020 l    d  .text	00000000 .text
0001a1ec l    d  .rodata	00000000 .rodata
0001a290 l    d  .rwdata	00000000 .rwdata
0001a478 l    d  .bss	00000000 .bss
0001a744 l    d  .data_mem_0	00000000 .data_mem_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../node0_v2_bsp//obj/HAL/src/crt0.o
00018058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 code_0.c
00000000 l    df *ABS*	00000000 packet_transaction_util.c
00000000 l    df *ABS*	00000000 ringbuffer_util.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019584 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0001a290 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001a378 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00019edc g     F .text	0000002c alt_main
0001a67c g     O .bss	00000014 edge_p1_p3
00019484 g     F .text	00000080 _puts_r
0001a04c g     F .text	0000001c altera_avalon_fifo_write_almostfull
0001a384 g       *ABS*	00000000 __flash_rwdata_start
0001a47c g     O .bss	00000004 proc_1_inparg_0
0001805c g     F .text	00000020 proc_0
0001a744 g       *ABS*	00000000 __alt_heap_start
0001a480 g     O .bss	00000004 proc_0_inp_0
00019438 g     F .text	0000004c printf
0001a690 g     O .bss	00000064 edges
0001a484 g     O .bss	00000004 proc_0_outarg_0
0001a084 g     F .text	00000098 altera_avalon_fifo_init
0001a11c g     F .text	0000001c altera_avalon_fifo_write_fifo
00018fb0 g     F .text	0000008c ring_buffer_dequeue_arr
0001a1e4 g     F .text	00000008 altera_nios2_gen2_irq_init
00018000 g       *ABS*	00000000 __alt_mem_data_mem_0
00018f78 g     F .text	00000038 ring_buffer_dequeue
00018000 g     F .entry	0000000c __reset
0001a1a0 g     F .text	00000008 altera_avalon_fifo_read_backpressure
00018020 g       *ABS*	00000000 __flash_exceptions_start
0001a4d0 g     O .bss	00000004 errno
0001a4e0 g     O .bss	00000014 test_arr
00018ed8 g     F .text	0000000c ring_buffer_init
0001a6f4 g     O .bss	00000014 edge_p0_p1
0001a4d8 g     O .bss	00000004 alt_argv
00022370 g       *ABS*	00000000 _gp
0001a488 g     O .bss	00000004 proc_1_inparg_1
0001a014 g     F .text	0000001c altera_avalon_fifo_clear_event
0001903c g     F .text	0000002c ring_buffer_pop
00019178 g     F .text	00000028 memcpy
0001a4f4 g     O .bss	00000082 buff_p4_p1
00019504 g     F .text	00000014 puts
0001a48c g     O .bss	00000008 proc_1_outs
00018874 g     F .text	0000009c get_edge
00019150 g     F .text	00000014 malloc
000193fc g     F .text	0000003c _printf_r
00018ec4 g     F .text	00000014 ring_buffer_num_items
00019d40 g     F .text	00000064 .hidden __udivsi3
0001a708 g     O .bss	00000014 edge_p5_p0
0001a71c g     O .bss	00000014 edge_p4_p1
00019068 g     F .text	00000084 ring_buffer_pop_arr
00019518 g     F .text	00000050 _sbrk_r
0001a576 g     O .bss	00000082 buff_p5_p0
00018e9c g     F .text	00000010 ring_buffer_is_empty
000186d8 g     F .text	00000050 start_FIFO
00018eac g     F .text	00000018 ring_buffer_is_full
00018698 g     F .text	00000040 cleanUp
0001a370 g     O .rwdata	00000004 _global_impure_ptr
0001a744 g       *ABS*	00000000 __bss_end
0001897c g     F .text	0000002c init_buffer
0001a494 g     O .bss	00000004 proc_0_outs
00018e70 g     F .text	0000002c receive_poll
0001a498 g     O .bss	00000004 proc_1_out_1
0001a49c g     O .bss	00000004 proc_1_outarg_1
0001a1dc g     F .text	00000004 alt_dcache_flush_all
0001a030 g     F .text	0000001c altera_avalon_fifo_write_ienable
0001a384 g       *ABS*	00000000 __ram_rwdata_end
00019ff8 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00019f54 g     F .text	00000060 write
0001a4a0 g     O .bss	00000004 proc_1_out_0
0001a290 g       *ABS*	00000000 __ram_rodata_end
0001a37c g     O .rwdata	00000004 jtag_uart_0
00019da4 g     F .text	00000058 .hidden __umodsi3
00018910 g     F .text	0000006c get_buffer
0001a4a4 g     O .bss	00000004 proc_0_out_0
0001a744 g       *ABS*	00000000 end
0001a000 g     F .text	0000000c altera_avalon_fifo_read_event
0001e000 g       *ABS*	00000000 __alt_stack_pointer
0001a1a8 g     F .text	00000034 altera_avalon_jtag_uart_write
0001a4a8 g     O .bss	00000004 input_fifo_wrclk_irq_event
0001a160 g     F .text	0000001c altera_avalon_fifo_read_fifo
000195f0 g     F .text	0000052c ___vfprintf_internal_r
000191c0 g     F .text	000000e4 _free_r
00018b38 g     F .text	000001e4 send_packet
00018020 g     F .text	0000003c _start
0001a5f8 g     O .bss	00000082 buff_p0_p1
00019fd4 g     F .text	00000004 alt_sys_init
0001a4ac g     O .bss	00000008 proc_1_inps
0001807c g     F .text	0000003c proc_1
00018ee4 g     F .text	00000040 ring_buffer_queue
000183c8 g     F .text	0000009c serializing_send
00019128 g     F .text	00000028 .hidden __mulsi3
0001a290 g       *ABS*	00000000 __ram_rwdata_start
0001a1ec g       *ABS*	00000000 __ram_rodata_start
00018344 g     F .text	00000084 read_data
0001a744 g       *ABS*	00000000 __alt_stack_base
000180b8 g     F .text	000000d0 print_status
00019fd8 g     F .text	0000000c altera_avalon_fifo_read_status
0001a478 g     O .bss	00000004 counter
0001a198 g     F .text	00000008 altera_avalon_fifo_read_other_info
0001a4b4 g     O .bss	00000004 proc_1_inp_1
0001a4b8 g     O .bss	00000004 proc_1_inp_0
00019f08 g     F .text	0000004c sbrk
00019b38 g     F .text	000000b8 __sfvwrite_small_dev
0001a4bc g     O .bss	00000004 proc_0_inparg_0
0001a478 g       *ABS*	00000000 __bss_start
0001a4c0 g     O .bss	00000004 proc_1_outarg_0
000191a0 g     F .text	00000020 memset
00018728 g     F .text	0000014c main
0001a730 g     O .bss	00000014 edge_p1_p2
0001a4d4 g     O .bss	00000004 alt_envp
0001a00c g     F .text	00000008 altera_avalon_fifo_read_level
0001a4c4 g     O .bss	00000004 proc_0_inps
0001e000 g       *ABS*	00000000 __alt_heap_limit
000192a4 g     F .text	00000158 _malloc_r
0001a380 g     O .rwdata	00000004 alt_errno
000189a8 g     F .text	00000190 init_structures
000190ec g     F .text	0000003c ring_buffer_peek
00019c48 g     F .text	00000084 .hidden __divsi3
0001a1ec g       *ABS*	00000000 __flash_rodata_start
00019fb4 g     F .text	00000020 alt_irq_init
00018188 g     F .text	000001bc read_buff
00019bf0 g     F .text	00000058 _write_r
0001a374 g     O .rwdata	00000004 _impure_ptr
0001a4dc g     O .bss	00000004 alt_argc
00018464 g     F .text	000000e4 send_data
00018020 g       *ABS*	00000000 __ram_exceptions_start
00018548 g     F .text	00000150 proc_args_init
00018d40 g     F .text	00000130 receive_packet
0001a17c g     F .text	0000001c altera_avalon_fifo_write_other_info
00018d1c g     F .text	00000024 read_payload
0001a384 g       *ABS*	00000000 _edata
0001a744 g       *ABS*	00000000 _end
00018020 g       *ABS*	00000000 __ram_exceptions_end
00019ccc g     F .text	00000074 .hidden __modsi3
00019fe4 g     F .text	0000000c altera_avalon_fifo_read_ienable
0001e000 g       *ABS*	00000000 __alt_data_end
00018f24 g     F .text	00000054 ring_buffer_queue_arr
0001800c g       .entry	00000000 _exit
00019ff0 g     F .text	00000008 altera_avalon_fifo_read_almostfull
00019568 g     F .text	0000001c strlen
0001a138 g     F .text	00000028 altera_avalon_read_fifo
0001a4c8 g     O .bss	00000004 __malloc_sbrk_start
0001a1e0 g     F .text	00000004 alt_icache_flush_all
0001a4cc g     O .bss	00000004 __malloc_free_list
00019b1c g     F .text	0000001c __vfprintf_internal
0001a068 g     F .text	0000001c altera_avalon_fifo_write_almostempty
00019dfc g     F .text	000000e0 alt_load
00019164 g     F .text	00000014 free



Disassembly of section .entry:

00018000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   18000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   18004:	08600814 	ori	at,at,32800
    jmp r1
   18008:	0800683a 	jmp	at

0001800c <_exit>:
	...

Disassembly of section .text:

00018020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   18020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   18024:	def80014 	ori	sp,sp,57344
    movhi gp, %hi(_gp)
   18028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1802c:	d688dc14 	ori	gp,gp,9072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   18030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   18034:	10a91e14 	ori	r2,r2,42104

    movhi r3, %hi(__bss_end)
   18038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1803c:	18e9d114 	ori	r3,r3,42820

    beq r2, r3, 1f
   18040:	10c00326 	beq	r2,r3,18050 <_start+0x30>

0:
    stw zero, (r2)
   18044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   18048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1804c:	10fffd36 	bltu	r2,r3,18044 <_gp+0xffff5cd4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   18050:	0019dfc0 	call	19dfc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   18054:	0019edc0 	call	19edc <alt_main>

00018058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   18058:	003fff06 	br	18058 <_gp+0xffff5ce8>

0001805c <proc_0>:


void proc_0(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];
   1805c:	28800017 	ldw	r2,0(r5)

	*out1 = *num1 + 1;
   18060:	10c00017 	ldw	r3,0(r2)
void** proc_1_outs[P1_NUM_OF_OUTS];


void proc_0(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P0_INP0_TYPE*)inpargs[0][0];
   18064:	20800017 	ldw	r2,0(r4)
	int* out1 = (P0_OUT0_TYPE*)outargs[0][0];

	*out1 = *num1 + 1;
   18068:	10800017 	ldw	r2,0(r2)
   1806c:	10800017 	ldw	r2,0(r2)
   18070:	10800044 	addi	r2,r2,1
   18074:	18800015 	stw	r2,0(r3)
   18078:	f800283a 	ret

0001807c <proc_1>:
}

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
   1807c:	20800117 	ldw	r2,4(r4)
   18080:	11800017 	ldw	r6,0(r2)
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];
   18084:	28800117 	ldw	r2,4(r5)
   18088:	10c00017 	ldw	r3,0(r2)

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
   1808c:	28800017 	ldw	r2,0(r5)
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];

	*out1 = *num1 + 1;
   18090:	11400017 	ldw	r5,0(r2)
	*out1 = *num1 + 1;
}

void proc_1(void ***inpargs, void ***outargs){
	//extracting tokens
	int* num1 = (P1_INP0_TYPE*)inpargs[0][0];
   18094:	20800017 	ldw	r2,0(r4)
	int* num2 = (P1_INP1_TYPE*)inpargs[1][0];
	int* out1 = (P1_OUT0_TYPE*)outargs[0][0];
	int* out2 = (P1_OUT1_TYPE*)outargs[1][0];

	*out1 = *num1 + 1;
   18098:	10800017 	ldw	r2,0(r2)
   1809c:	10800017 	ldw	r2,0(r2)
   180a0:	10800044 	addi	r2,r2,1
   180a4:	28800015 	stw	r2,0(r5)
	*out2 = *num2 + 1;
   180a8:	30800017 	ldw	r2,0(r6)
   180ac:	10800044 	addi	r2,r2,1
   180b0:	18800015 	stw	r2,0(r3)
   180b4:	f800283a 	ret

000180b8 <print_status>:
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   180b8:	defffd04 	addi	sp,sp,-12
   180bc:	dc000015 	stw	r16,0(sp)
   180c0:	2021883a 	mov	r16,r4
  printf("--------------------------------------\n");
   180c4:	010000b4 	movhi	r4,2
   180c8:	21287b04 	addi	r4,r4,-24084
  return return_code;
}

void print_status(alt_u32 control_base_address)

{
   180cc:	dfc00215 	stw	ra,8(sp)
   180d0:	dc400115 	stw	r17,4(sp)
  printf("--------------------------------------\n");
   180d4:	00195040 	call	19504 <puts>
  printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   180d8:	8009883a 	mov	r4,r16
   180dc:	001a00c0 	call	1a00c <altera_avalon_fifo_read_level>
   180e0:	010000b4 	movhi	r4,2
   180e4:	100b883a 	mov	r5,r2
   180e8:	21288504 	addi	r4,r4,-24044
   180ec:	00194380 	call	19438 <printf>
  printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   180f0:	04400fc4 	movi	r17,63
   180f4:	880b883a 	mov	r5,r17
   180f8:	8009883a 	mov	r4,r16
   180fc:	0019fd80 	call	19fd8 <altera_avalon_fifo_read_status>
   18100:	010000b4 	movhi	r4,2
   18104:	100b883a 	mov	r5,r2
   18108:	21288804 	addi	r4,r4,-24032
   1810c:	00194380 	call	19438 <printf>
    ALTERA_AVALON_FIFO_STATUS_ALL) );
  printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   18110:	880b883a 	mov	r5,r17
   18114:	8009883a 	mov	r4,r16
   18118:	001a0000 	call	1a000 <altera_avalon_fifo_read_event>
   1811c:	010000b4 	movhi	r4,2
   18120:	100b883a 	mov	r5,r2
   18124:	21288c04 	addi	r4,r4,-24016
   18128:	00194380 	call	19438 <printf>
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   1812c:	880b883a 	mov	r5,r17
   18130:	8009883a 	mov	r4,r16
   18134:	0019fe40 	call	19fe4 <altera_avalon_fifo_read_ienable>
   18138:	010000b4 	movhi	r4,2
   1813c:	100b883a 	mov	r5,r2
   18140:	21288f04 	addi	r4,r4,-24004
   18144:	00194380 	call	19438 <printf>
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
   18148:	8009883a 	mov	r4,r16
   1814c:	0019ff80 	call	19ff8 <altera_avalon_fifo_read_almostempty>
   18150:	010000b4 	movhi	r4,2
   18154:	100b883a 	mov	r5,r2
   18158:	21289304 	addi	r4,r4,-23988
   1815c:	00194380 	call	19438 <printf>
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   18160:	8009883a 	mov	r4,r16
   18164:	0019ff00 	call	19ff0 <altera_avalon_fifo_read_almostfull>
   18168:	010000b4 	movhi	r4,2
   1816c:	100b883a 	mov	r5,r2
   18170:	21289804 	addi	r4,r4,-23968
    altera_avalon_fifo_read_almostfull(control_base_address));
}
   18174:	dfc00217 	ldw	ra,8(sp)
   18178:	dc400117 	ldw	r17,4(sp)
   1817c:	dc000017 	ldw	r16,0(sp)
   18180:	dec00304 	addi	sp,sp,12
    ALTERA_AVALON_FIFO_EVENT_ALL) );
  printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
    ALTERA_AVALON_FIFO_IENABLE_ALL) );
  printf("ALMOSTEMPTY = %u\n",
    altera_avalon_fifo_read_almostempty(control_base_address) );
  printf("ALMOSTFULL = %u\n\n",
   18184:	00194381 	jmpi	19438 <printf>

00018188 <read_buff>:
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   18188:	defff904 	addi	sp,sp,-28
   1818c:	df000515 	stw	fp,20(sp)
   18190:	dc000015 	stw	r16,0(sp)
   18194:	dfc00615 	stw	ra,24(sp)
   18198:	dd000415 	stw	r20,16(sp)
   1819c:	dcc00315 	stw	r19,12(sp)
   181a0:	dc800215 	stw	r18,8(sp)
   181a4:	dc400115 	stw	r17,4(sp)
	if(proc_num == 0){
   181a8:	297fffcc 	andi	r5,r5,65535
  printf("ALMOSTFULL = %u\n\n",
    altera_avalon_fifo_read_almostfull(control_base_address));
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   181ac:	df000504 	addi	fp,sp,20
   181b0:	2021883a 	mov	r16,r4
	if(proc_num == 0){
   181b4:	28001d1e 	bne	r5,zero,1822c <read_buff+0xa4>
		if(input_num == 0){
   181b8:	31803fcc 	andi	r6,r6,255
   181bc:	3000571e 	bne	r6,zero,1831c <read_buff+0x194>
			uint8_t tmp[edge->size_of_token_type];
   181c0:	20800203 	ldbu	r2,8(r4)
}


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 0){
		if(input_num == 0){
   181c4:	d829883a 	mov	r20,sp
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   181c8:	0023883a 	mov	r17,zero


void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   181cc:	108000c4 	addi	r2,r2,3
   181d0:	10807f0c 	andi	r2,r2,508
   181d4:	d8b7c83a 	sub	sp,sp,r2
   181d8:	d827883a 	mov	r19,sp
			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   181dc:	04800604 	movi	r18,24

void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   181e0:	80800183 	ldbu	r2,6(r16)
   181e4:	88804c0e 	bge	r17,r2,18318 <read_buff+0x190>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   181e8:	81800203 	ldbu	r6,8(r16)
   181ec:	81000317 	ldw	r4,12(r16)
   181f0:	980b883a 	mov	r5,r19
   181f4:	0018fb00 	call	18fb0 <ring_buffer_dequeue_arr>
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   181f8:	81400203 	ldbu	r5,8(r16)
   181fc:	81000317 	ldw	r4,12(r16)
   18200:	914bc83a 	sub	r5,r18,r5
   18204:	29403fcc 	andi	r5,r5,255
   18208:	00190680 	call	19068 <ring_buffer_pop_arr>
				proc_0_inp_0[i] = ( (P0_INP0_TYPE*)tmp )[0];
   1820c:	d1204417 	ldw	r4,-32496(gp)
   18210:	8c45883a 	add	r2,r17,r17
   18214:	98c00017 	ldw	r3,0(r19)
   18218:	1085883a 	add	r2,r2,r2
   1821c:	2085883a 	add	r2,r4,r2
   18220:	10c00015 	stw	r3,0(r2)

void read_buff(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
	if(proc_num == 0){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   18224:	8c400044 	addi	r17,r17,1
   18228:	003fed06 	br	181e0 <_gp+0xffff5e70>
				proc_0_inp_0[i] = ( (P0_INP0_TYPE*)tmp )[0];
			}
		}
	}

	if(proc_num == 1){
   1822c:	00800044 	movi	r2,1
   18230:	28803a1e 	bne	r5,r2,1831c <read_buff+0x194>
		if(input_num == 0){
   18234:	31803fcc 	andi	r6,r6,255
   18238:	30001b1e 	bne	r6,zero,182a8 <read_buff+0x120>
			uint8_t tmp[edge->size_of_token_type];
   1823c:	20800203 	ldbu	r2,8(r4)
			}
		}
	}

	if(proc_num == 1){
		if(input_num == 0){
   18240:	d829883a 	mov	r20,sp
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   18244:	0023883a 	mov	r17,zero
		}
	}

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
   18248:	108000c4 	addi	r2,r2,3
   1824c:	10807f0c 	andi	r2,r2,508
   18250:	d8b7c83a 	sub	sp,sp,r2
   18254:	d827883a 	mov	r19,sp
			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   18258:	04800604 	movi	r18,24
	}

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   1825c:	80800183 	ldbu	r2,6(r16)
   18260:	88802d0e 	bge	r17,r2,18318 <read_buff+0x190>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   18264:	81800203 	ldbu	r6,8(r16)
   18268:	81000317 	ldw	r4,12(r16)
   1826c:	980b883a 	mov	r5,r19
   18270:	0018fb00 	call	18fb0 <ring_buffer_dequeue_arr>
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   18274:	81400203 	ldbu	r5,8(r16)
   18278:	81000317 	ldw	r4,12(r16)
   1827c:	914bc83a 	sub	r5,r18,r5
   18280:	29403fcc 	andi	r5,r5,255
   18284:	00190680 	call	19068 <ring_buffer_pop_arr>
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
   18288:	d1205217 	ldw	r4,-32440(gp)
   1828c:	8c45883a 	add	r2,r17,r17
   18290:	98c00017 	ldw	r3,0(r19)
   18294:	1085883a 	add	r2,r2,r2
   18298:	2085883a 	add	r2,r4,r2
   1829c:	10c00015 	stw	r3,0(r2)
	}

	if(proc_num == 1){
		if(input_num == 0){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   182a0:	8c400044 	addi	r17,r17,1
   182a4:	003fed06 	br	1825c <_gp+0xffff5eec>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
			}
		}
		if(input_num == 1){
   182a8:	31401c1e 	bne	r6,r5,1831c <read_buff+0x194>
			uint8_t tmp[edge->size_of_token_type];
   182ac:	20800203 	ldbu	r2,8(r4)
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
			}
		}
		if(input_num == 1){
   182b0:	d829883a 	mov	r20,sp
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   182b4:	0023883a 	mov	r17,zero
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
			}
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];
   182b8:	108000c4 	addi	r2,r2,3
   182bc:	10807f0c 	andi	r2,r2,508
   182c0:	d8b7c83a 	sub	sp,sp,r2
   182c4:	d827883a 	mov	r19,sp
			for(int i =0; i < edge->num_of_inp_token; ++i){
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   182c8:	04800604 	movi	r18,24
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
			}
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   182cc:	80800183 	ldbu	r2,6(r16)
   182d0:	8880110e 	bge	r17,r2,18318 <read_buff+0x190>
				ring_buffer_dequeue_arr(edge->buffer,tmp,edge->size_of_token_type);
   182d4:	81800203 	ldbu	r6,8(r16)
   182d8:	81000317 	ldw	r4,12(r16)
   182dc:	980b883a 	mov	r5,r19
   182e0:	0018fb00 	call	18fb0 <ring_buffer_dequeue_arr>
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
   182e4:	81400203 	ldbu	r5,8(r16)
   182e8:	81000317 	ldw	r4,12(r16)
   182ec:	914bc83a 	sub	r5,r18,r5
   182f0:	29403fcc 	andi	r5,r5,255
   182f4:	00190680 	call	19068 <ring_buffer_pop_arr>
				proc_1_inp_1[i] = ( (P1_INP1_TYPE*)tmp )[0];
   182f8:	d1205117 	ldw	r4,-32444(gp)
   182fc:	8c45883a 	add	r2,r17,r17
   18300:	98c00017 	ldw	r3,0(r19)
   18304:	1085883a 	add	r2,r2,r2
   18308:	2085883a 	add	r2,r4,r2
   1830c:	10c00015 	stw	r3,0(r2)
				proc_1_inp_0[i] = ( (P1_INP0_TYPE*)tmp )[0];
			}
		}
		if(input_num == 1){
			uint8_t tmp[edge->size_of_token_type];
			for(int i =0; i < edge->num_of_inp_token; ++i){
   18310:	8c400044 	addi	r17,r17,1
   18314:	003fed06 	br	182cc <_gp+0xffff5f5c>
   18318:	a037883a 	mov	sp,r20
				ring_buffer_pop_arr(edge->buffer,(24 - edge->size_of_token_type));
				proc_1_inp_1[i] = ( (P1_INP1_TYPE*)tmp )[0];
			}
		}
	}
}
   1831c:	e6fffb04 	addi	sp,fp,-20
   18320:	dfc00617 	ldw	ra,24(sp)
   18324:	df000517 	ldw	fp,20(sp)
   18328:	dd000417 	ldw	r20,16(sp)
   1832c:	dcc00317 	ldw	r19,12(sp)
   18330:	dc800217 	ldw	r18,8(sp)
   18334:	dc400117 	ldw	r17,4(sp)
   18338:	dc000017 	ldw	r16,0(sp)
   1833c:	dec00704 	addi	sp,sp,28
   18340:	f800283a 	ret

00018344 <read_data>:

void read_data(struct Edge *edge, alt_u16 proc_num, uint8_t input_num){
   18344:	defffb04 	addi	sp,sp,-20
   18348:	dcc00315 	stw	r19,12(sp)
   1834c:	dc800215 	stw	r18,8(sp)
   18350:	dc400115 	stw	r17,4(sp)
   18354:	dfc00415 	stw	ra,16(sp)
   18358:	dc000015 	stw	r16,0(sp)
   1835c:	2023883a 	mov	r17,r4
   18360:	2825883a 	mov	r18,r5
   18364:	3027883a 	mov	r19,r6

	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
   18368:	88c00317 	ldw	r3,12(r17)
   1836c:	89000183 	ldbu	r4,6(r17)
   18370:	01400604 	movi	r5,24
   18374:	18802043 	ldbu	r2,129(r3)
   18378:	1c002003 	ldbu	r16,128(r3)
   1837c:	1421c83a 	sub	r16,r2,r16
   18380:	84001fcc 	andi	r16,r16,127
   18384:	00191280 	call	19128 <__mulsi3>
   18388:	8080050e 	bge	r16,r2,183a0 <read_data+0x5c>
		if(receive_poll())
   1838c:	0018e700 	call	18e70 <receive_poll>
   18390:	10803fcc 	andi	r2,r2,255
   18394:	103ff426 	beq	r2,zero,18368 <_gp+0xffff5ff8>
			receive_packet();
   18398:	0018d400 	call	18d40 <receive_packet>
   1839c:	003ff206 	br	18368 <_gp+0xffff5ff8>
	}
	read_buff(edge, proc_num, input_num);
   183a0:	99803fcc 	andi	r6,r19,255
   183a4:	917fffcc 	andi	r5,r18,65535
   183a8:	8809883a 	mov	r4,r17
}
   183ac:	dfc00417 	ldw	ra,16(sp)
   183b0:	dcc00317 	ldw	r19,12(sp)
   183b4:	dc800217 	ldw	r18,8(sp)
   183b8:	dc400117 	ldw	r17,4(sp)
   183bc:	dc000017 	ldw	r16,0(sp)
   183c0:	dec00504 	addi	sp,sp,20

	while(ring_buffer_num_items((edge->buffer)) < (edge->num_of_inp_token * 24)){
		if(receive_poll())
			receive_packet();
	}
	read_buff(edge, proc_num, input_num);
   183c4:	00181881 	jmpi	18188 <read_buff>

000183c8 <serializing_send>:
}

void serializing_send(struct Edge *edge, unsigned char *array){
   183c8:	defff704 	addi	sp,sp,-36
   183cc:	dfc00815 	stw	ra,32(sp)
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   183d0:	20c00203 	ldbu	r3,8(r4)
   183d4:	0005883a 	mov	r2,zero
   183d8:	10c0070e 	bge	r2,r3,183f8 <serializing_send+0x30>
		send_array[i] = array[i];
   183dc:	d9c00204 	addi	r7,sp,8
   183e0:	388d883a 	add	r6,r7,r2
   183e4:	288f883a 	add	r7,r5,r2
   183e8:	39c00003 	ldbu	r7,0(r7)
}

void serializing_send(struct Edge *edge, unsigned char *array){
	unsigned char send_array[24];

	for(int i = 0; i < edge->size_of_token_type; ++i){
   183ec:	10800044 	addi	r2,r2,1
		send_array[i] = array[i];
   183f0:	31c00005 	stb	r7,0(r6)
   183f4:	003ff806 	br	183d8 <_gp+0xffff6068>
	}

	if(edge->external == 1){
   183f8:	20800403 	ldbu	r2,16(r4)
   183fc:	10000a26 	beq	r2,zero,18428 <serializing_send+0x60>
		send_packet(edge->node_src, edge->node_dest, edge->proc_src, edge->proc_dest, 32, send_array);
   18400:	21c0010b 	ldhu	r7,4(r4)
   18404:	2180008b 	ldhu	r6,2(r4)
   18408:	21400043 	ldbu	r5,1(r4)
   1840c:	d8800204 	addi	r2,sp,8
   18410:	21000003 	ldbu	r4,0(r4)
   18414:	d8800115 	stw	r2,4(sp)
   18418:	00800804 	movi	r2,32
   1841c:	d8800015 	stw	r2,0(sp)
   18420:	0018b380 	call	18b38 <send_packet>
   18424:	00000406 	br	18438 <serializing_send+0x70>
	}
	else{
		ring_buffer_queue_arr(edge->buffer,send_array,24);
   18428:	21000317 	ldw	r4,12(r4)
   1842c:	01800604 	movi	r6,24
   18430:	d9400204 	addi	r5,sp,8
   18434:	0018f240 	call	18f24 <ring_buffer_queue_arr>
	}
	//alt_printf("processor number %x sends data to %x ,which is %x\n",edge->proc_src,edge->proc_dest,( (int*)send_array )[0]);
	test_arr[counter] = ( (int*)send_array )[0];
   18438:	d0a04217 	ldw	r2,-32504(gp)
   1843c:	00c000b4 	movhi	r3,2
   18440:	18e93804 	addi	r3,r3,-23328
   18444:	1085883a 	add	r2,r2,r2
   18448:	1085883a 	add	r2,r2,r2
   1844c:	1885883a 	add	r2,r3,r2
   18450:	d8c00217 	ldw	r3,8(sp)
   18454:	10c00015 	stw	r3,0(r2)
}
   18458:	dfc00817 	ldw	ra,32(sp)
   1845c:	dec00904 	addi	sp,sp,36
   18460:	f800283a 	ret

00018464 <send_data>:

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   18464:	defffc04 	addi	sp,sp,-16
   18468:	dc000015 	stw	r16,0(sp)
   1846c:	dfc00315 	stw	ra,12(sp)
   18470:	dc800215 	stw	r18,8(sp)
   18474:	dc400115 	stw	r17,4(sp)

	if(proc_num == 0){
   18478:	297fffcc 	andi	r5,r5,65535
	}
	//alt_printf("processor number %x sends data to %x ,which is %x\n",edge->proc_src,edge->proc_dest,( (int*)send_array )[0]);
	test_arr[counter] = ( (int*)send_array )[0];
}

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){
   1847c:	2021883a 	mov	r16,r4

	if(proc_num == 0){
   18480:	28000e1e 	bne	r5,zero,184bc <send_data+0x58>
		if(output_num == 0){
   18484:	31803fcc 	andi	r6,r6,255
   18488:	3000291e 	bne	r6,zero,18530 <send_data+0xcc>
   1848c:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_0_outarg_0[i]));
   18490:	d4a04504 	addi	r18,gp,-32492

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 0){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   18494:	808001c3 	ldbu	r2,7(r16)
   18498:	8880250e 	bge	r17,r2,18530 <send_data+0xcc>
				serializing_send(edge, ((unsigned char*)proc_0_outarg_0[i]));
   1849c:	8c45883a 	add	r2,r17,r17
   184a0:	1085883a 	add	r2,r2,r2
   184a4:	1485883a 	add	r2,r2,r18
   184a8:	11400017 	ldw	r5,0(r2)
   184ac:	8009883a 	mov	r4,r16

void send_data(struct Edge *edge, alt_u16 proc_num, uint8_t output_num){

	if(proc_num == 0){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   184b0:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_0_outarg_0[i]));
   184b4:	00183c80 	call	183c8 <serializing_send>
   184b8:	003ff606 	br	18494 <_gp+0xffff6124>
			}
		}
	}

	if(proc_num == 1){
   184bc:	00800044 	movi	r2,1
   184c0:	28801b1e 	bne	r5,r2,18530 <send_data+0xcc>
		if(output_num == 0){
   184c4:	31803fcc 	andi	r6,r6,255
   184c8:	30000c1e 	bne	r6,zero,184fc <send_data+0x98>
   184cc:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
   184d0:	d4a05404 	addi	r18,gp,-32432
		}
	}

	if(proc_num == 1){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   184d4:	808001c3 	ldbu	r2,7(r16)
   184d8:	8880150e 	bge	r17,r2,18530 <send_data+0xcc>
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
   184dc:	8c45883a 	add	r2,r17,r17
   184e0:	1085883a 	add	r2,r2,r2
   184e4:	1485883a 	add	r2,r2,r18
   184e8:	11400017 	ldw	r5,0(r2)
   184ec:	8009883a 	mov	r4,r16
		}
	}

	if(proc_num == 1){
		if(output_num == 0){
			for(int i =0; i < edge->num_of_out_token; ++i){
   184f0:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
   184f4:	00183c80 	call	183c8 <serializing_send>
   184f8:	003ff606 	br	184d4 <_gp+0xffff6164>
			}
		}
		if(output_num == 1){
   184fc:	31400c1e 	bne	r6,r5,18530 <send_data+0xcc>
   18500:	0023883a 	mov	r17,zero
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_1[i]));
   18504:	d4a04b04 	addi	r18,gp,-32468
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
			}
		}
		if(output_num == 1){
			for(int i =0; i < edge->num_of_out_token; ++i){
   18508:	808001c3 	ldbu	r2,7(r16)
   1850c:	8880080e 	bge	r17,r2,18530 <send_data+0xcc>
				serializing_send(edge, ((unsigned char*)proc_1_outarg_1[i]));
   18510:	8c45883a 	add	r2,r17,r17
   18514:	1085883a 	add	r2,r2,r2
   18518:	1485883a 	add	r2,r2,r18
   1851c:	11400017 	ldw	r5,0(r2)
   18520:	8009883a 	mov	r4,r16
			for(int i =0; i < edge->num_of_out_token; ++i){
				serializing_send(edge, ((unsigned char*)proc_1_outarg_0[i]));
			}
		}
		if(output_num == 1){
			for(int i =0; i < edge->num_of_out_token; ++i){
   18524:	8c400044 	addi	r17,r17,1
				serializing_send(edge, ((unsigned char*)proc_1_outarg_1[i]));
   18528:	00183c80 	call	183c8 <serializing_send>
   1852c:	003ff606 	br	18508 <_gp+0xffff6198>
			}
		}
	}
}
   18530:	dfc00317 	ldw	ra,12(sp)
   18534:	dc800217 	ldw	r18,8(sp)
   18538:	dc400117 	ldw	r17,4(sp)
   1853c:	dc000017 	ldw	r16,0(sp)
   18540:	dec00404 	addi	sp,sp,16
   18544:	f800283a 	ret

00018548 <proc_args_init>:

void proc_args_init(){
   18548:	deffef04 	addi	sp,sp,-68
   1854c:	dc000c15 	stw	r16,48(sp)
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
   18550:	04000104 	movi	r16,4
   18554:	8009883a 	mov	r4,r16
			}
		}
	}
}

void proc_args_init(){
   18558:	dfc01015 	stw	ra,64(sp)
   1855c:	dcc00f15 	stw	r19,60(sp)
   18560:	dc800e15 	stw	r18,56(sp)
   18564:	dc400d15 	stw	r17,52(sp)
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
   18568:	00191500 	call	19150 <malloc>
	proc_0_out_0 = (P0_OUT0_TYPE*)malloc(P0_OUT0_NUM_OF_TOKEN*sizeof(P0_OUT0_TYPE));
   1856c:	8009883a 	mov	r4,r16
	}
}

void proc_args_init(){
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
   18570:	1023883a 	mov	r17,r2
   18574:	d0a04415 	stw	r2,-32496(gp)
	proc_0_out_0 = (P0_OUT0_TYPE*)malloc(P0_OUT0_NUM_OF_TOKEN*sizeof(P0_OUT0_TYPE));
   18578:	00191500 	call	19150 <malloc>
   1857c:	d0a04d15 	stw	r2,-32460(gp)

	// pointers to elements for proc 0
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
    proc_0_outarg_0[0] = &proc_0_out_0[0];
   18580:	d0a04515 	stw	r2,-32492(gp)

    // top level pointers to be passed for proc 0
    proc_0_inps[0] = proc_0_inparg_0;
   18584:	d0a05304 	addi	r2,gp,-32436
    proc_0_outs[0] = proc_0_outarg_0;


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
   18588:	8009883a 	mov	r4,r16
	// pointers to elements for proc 0
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
    proc_0_outarg_0[0] = &proc_0_out_0[0];

    // top level pointers to be passed for proc 0
    proc_0_inps[0] = proc_0_inparg_0;
   1858c:	d0a05515 	stw	r2,-32428(gp)
    proc_0_outs[0] = proc_0_outarg_0;
   18590:	d0a04504 	addi	r2,gp,-32492
	// space allocation for input and output for proc 0
	proc_0_inp_0 = (P0_INP0_TYPE*)malloc(P0_INP0_NUM_OF_TOKEN*sizeof(P0_INP0_TYPE));
	proc_0_out_0 = (P0_OUT0_TYPE*)malloc(P0_OUT0_NUM_OF_TOKEN*sizeof(P0_OUT0_TYPE));

	// pointers to elements for proc 0
    proc_0_inparg_0[0] = &proc_0_inp_0[0];
   18594:	d4605315 	stw	r17,-32436(gp)
    proc_0_outarg_0[0] = &proc_0_out_0[0];

    // top level pointers to be passed for proc 0
    proc_0_inps[0] = proc_0_inparg_0;
    proc_0_outs[0] = proc_0_outarg_0;
   18598:	d0a04915 	stw	r2,-32476(gp)


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
   1859c:	00191500 	call	19150 <malloc>
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
   185a0:	8009883a 	mov	r4,r16
    proc_0_inps[0] = proc_0_inparg_0;
    proc_0_outs[0] = proc_0_outarg_0;


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
   185a4:	1027883a 	mov	r19,r2
   185a8:	d0a05215 	stw	r2,-32440(gp)
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
   185ac:	00191500 	call	19150 <malloc>
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
   185b0:	8009883a 	mov	r4,r16
    proc_0_outs[0] = proc_0_outarg_0;


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
   185b4:	1025883a 	mov	r18,r2
   185b8:	d0a05115 	stw	r2,-32444(gp)
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
   185bc:	00191500 	call	19150 <malloc>
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));
   185c0:	8009883a 	mov	r4,r16


	// space allocation for input and output for proc 1
	proc_1_inp_0 = (P1_INP0_TYPE*)malloc(P1_INP0_NUM_OF_TOKEN*sizeof(P1_INP0_TYPE));
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
   185c4:	1023883a 	mov	r17,r2
   185c8:	d0a04c15 	stw	r2,-32464(gp)
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));
   185cc:	00191500 	call	19150 <malloc>
   185d0:	d0a04a15 	stw	r2,-32472(gp)

	// pointers to elements for proc 1
    proc_1_inparg_0[0] = &proc_1_inp_0[0];
    proc_1_inparg_1[0] = &proc_1_inp_1[0];
    proc_1_outarg_0[0] = &proc_1_out_0[0];
    proc_1_outarg_1[0] = &proc_1_out_1[0];
   185d4:	d0a04b15 	stw	r2,-32468(gp)

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
   185d8:	d0e04304 	addi	r3,gp,-32500
   185dc:	d0a04f04 	addi	r2,gp,-32452
   185e0:	10c00015 	stw	r3,0(r2)
    proc_1_inps[1] = proc_1_inparg_1;
   185e4:	d0e04604 	addi	r3,gp,-32488
   185e8:	10c00115 	stw	r3,4(r2)
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));

	// pointers to elements for proc 1
    proc_1_inparg_0[0] = &proc_1_inp_0[0];
    proc_1_inparg_1[0] = &proc_1_inp_1[0];
    proc_1_outarg_0[0] = &proc_1_out_0[0];
   185ec:	d4605415 	stw	r17,-32432(gp)
    proc_1_outarg_1[0] = &proc_1_out_1[0];

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
   185f0:	d0a04704 	addi	r2,gp,-32484
    proc_1_outs[1] = proc_1_outarg_1;

	char p0_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   185f4:	04400604 	movi	r17,24
    proc_1_outarg_1[0] = &proc_1_out_1[0];

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
   185f8:	d0e05404 	addi	r3,gp,-32432
    proc_1_outs[1] = proc_1_outarg_1;

	char p0_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   185fc:	880d883a 	mov	r6,r17
   18600:	dc49883a 	add	r4,sp,r17
    proc_1_outarg_1[0] = &proc_1_out_1[0];

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
   18604:	10c00015 	stw	r3,0(r2)
    proc_1_outs[1] = proc_1_outarg_1;

	char p0_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   18608:	000b883a 	mov	r5,zero

    // top level pointers to be passed for proc 1
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
    proc_1_outs[1] = proc_1_outarg_1;
   1860c:	d0e04b04 	addi	r3,gp,-32468
   18610:	10c00115 	stw	r3,4(r2)
	proc_1_inp_1 = (P1_INP1_TYPE*)malloc(P1_INP1_NUM_OF_TOKEN*sizeof(P1_INP1_TYPE));
	proc_1_out_0 = (P1_OUT0_TYPE*)malloc(P1_OUT0_NUM_OF_TOKEN*sizeof(P1_OUT0_TYPE));
	proc_1_out_1 = (P1_OUT1_TYPE*)malloc(P1_OUT1_NUM_OF_TOKEN*sizeof(P1_OUT1_TYPE));

	// pointers to elements for proc 1
    proc_1_inparg_0[0] = &proc_1_inp_0[0];
   18614:	d4e04315 	stw	r19,-32500(gp)
    proc_1_inparg_1[0] = &proc_1_inp_1[0];
   18618:	d4a04615 	stw	r18,-32488(gp)
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
    proc_1_outs[1] = proc_1_outarg_1;

	char p0_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   1861c:	00191a00 	call	191a0 <memset>
   18620:	04000044 	movi	r16,1
	char p1_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   18624:	880d883a 	mov	r6,r17
   18628:	d809883a 	mov	r4,sp
   1862c:	000b883a 	mov	r5,zero
    proc_1_inps[0] = proc_1_inparg_0;
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
    proc_1_outs[1] = proc_1_outarg_1;

	char p0_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   18630:	dc000605 	stb	r16,24(sp)
   18634:	dc000645 	stb	r16,25(sp)
   18638:	dc000685 	stb	r16,26(sp)
   1863c:	dc0006c5 	stb	r16,27(sp)
	char p1_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   18640:	00191a00 	call	191a0 <memset>

	ring_buffer_queue_arr(&buff_p5_p0,p0_initial_token,24);
   18644:	010000b4 	movhi	r4,2
   18648:	880d883a 	mov	r6,r17
   1864c:	dc4b883a 	add	r5,sp,r17
   18650:	21295d84 	addi	r4,r4,-23178
    proc_1_inps[1] = proc_1_inparg_1;
    proc_1_outs[0] = proc_1_outarg_0;
    proc_1_outs[1] = proc_1_outarg_1;

	char p0_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char p1_initial_token[24] = {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   18654:	dc000005 	stb	r16,0(sp)
   18658:	dc000045 	stb	r16,1(sp)
   1865c:	dc000085 	stb	r16,2(sp)
   18660:	dc0000c5 	stb	r16,3(sp)

	ring_buffer_queue_arr(&buff_p5_p0,p0_initial_token,24);
   18664:	0018f240 	call	18f24 <ring_buffer_queue_arr>
	ring_buffer_queue_arr(&buff_p4_p1,p1_initial_token,24);
   18668:	010000b4 	movhi	r4,2
   1866c:	880d883a 	mov	r6,r17
   18670:	d80b883a 	mov	r5,sp
   18674:	21293d04 	addi	r4,r4,-23308
   18678:	0018f240 	call	18f24 <ring_buffer_queue_arr>


}
   1867c:	dfc01017 	ldw	ra,64(sp)
   18680:	dcc00f17 	ldw	r19,60(sp)
   18684:	dc800e17 	ldw	r18,56(sp)
   18688:	dc400d17 	ldw	r17,52(sp)
   1868c:	dc000c17 	ldw	r16,48(sp)
   18690:	dec01104 	addi	sp,sp,68
   18694:	f800283a 	ret

00018698 <cleanUp>:

void cleanUp(){
	// clean up proc 0
	free(proc_0_inp_0);
   18698:	d1204417 	ldw	r4,-32496(gp)
	ring_buffer_queue_arr(&buff_p4_p1,p1_initial_token,24);


}

void cleanUp(){
   1869c:	deffff04 	addi	sp,sp,-4
   186a0:	dfc00015 	stw	ra,0(sp)
	// clean up proc 0
	free(proc_0_inp_0);
   186a4:	00191640 	call	19164 <free>
	free(proc_0_out_0);
   186a8:	d1204d17 	ldw	r4,-32460(gp)
   186ac:	00191640 	call	19164 <free>

	// clean up proc 1
	free(proc_1_inp_0);
   186b0:	d1205217 	ldw	r4,-32440(gp)
   186b4:	00191640 	call	19164 <free>
	free(proc_1_inp_1);
   186b8:	d1205117 	ldw	r4,-32444(gp)
   186bc:	00191640 	call	19164 <free>
	free(proc_1_out_0);
   186c0:	d1204c17 	ldw	r4,-32464(gp)
   186c4:	00191640 	call	19164 <free>
	free(proc_1_out_1);
   186c8:	d1204a17 	ldw	r4,-32472(gp)
}
   186cc:	dfc00017 	ldw	ra,0(sp)
   186d0:	dec00104 	addi	sp,sp,4

	// clean up proc 1
	free(proc_1_inp_0);
	free(proc_1_inp_1);
	free(proc_1_out_0);
	free(proc_1_out_1);
   186d4:	00191641 	jmpi	19164 <free>

000186d8 <start_FIFO>:
}

void start_FIFO(){
   186d8:	defffd04 	addi	sp,sp,-12
   186dc:	dc400115 	stw	r17,4(sp)
   186e0:	dc000015 	stw	r16,0(sp)


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   186e4:	044002c4 	movi	r17,11
   186e8:	04000084 	movi	r16,2
   186ec:	880f883a 	mov	r7,r17
   186f0:	800d883a 	mov	r6,r16
   186f4:	000b883a 	mov	r5,zero
   186f8:	01240814 	movui	r4,36896
	free(proc_1_inp_1);
	free(proc_1_out_0);
	free(proc_1_out_1);
}

void start_FIFO(){
   186fc:	dfc00215 	stw	ra,8(sp)


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   18700:	001a0840 	call	1a084 <altera_avalon_fifo_init>
   18704:	880f883a 	mov	r7,r17
   18708:	800d883a 	mov	r6,r16
   1870c:	000b883a 	mov	r5,zero
   18710:	01240014 	movui	r4,36864
	//alt_putstr("source status:\n");
	//print_status(FIFO_SOURCE_0_IN_CSR_BASE);

	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_0_IN_CSR_BASE);
}
   18714:	dfc00217 	ldw	ra,8(sp)
   18718:	dc400117 	ldw	r17,4(sp)
   1871c:	dc000017 	ldw	r16,0(sp)
   18720:	dec00304 	addi	sp,sp,12


static int init_input_fifo_wrclk_control(alt_u32 control_base_address)
{
  int return_code = ALTERA_AVALON_FIFO_OK;
  return_code = altera_avalon_fifo_init(control_base_address,
   18724:	001a0841 	jmpi	1a084 <altera_avalon_fifo_init>

00018728 <main>:
	//alt_putstr("sink status:\n");
	//print_status(FIFO_SINK_0_IN_CSR_BASE);
}

int main()
{
   18728:	defffc04 	addi	sp,sp,-16
   1872c:	dfc00315 	stw	ra,12(sp)
   18730:	dc000015 	stw	r16,0(sp)
   18734:	dc800215 	stw	r18,8(sp)
   18738:	dc400115 	stw	r17,4(sp)

	start_FIFO();
	proc_args_init();
	init_structures();
   1873c:	04000144 	movi	r16,5
}

int main()
{

	start_FIFO();
   18740:	00186d80 	call	186d8 <start_FIFO>
	proc_args_init();
   18744:	00185480 	call	18548 <proc_args_init>
	init_structures();
   18748:	00189a80 	call	189a8 <init_structures>


	for(int k = 0; k < 5; ++k){
	//	alt_putstr("NODE 0 ---------------------------------------------------------\n");
	  for(int i = 0; i < P0_NUM_OF_INPS; ++i){
		  struct Edge *edge = get_edge(0,i,0/*it means input edges*/);
   1874c:	000d883a 	mov	r6,zero
   18750:	000b883a 	mov	r5,zero
   18754:	0009883a 	mov	r4,zero
   18758:	00188740 	call	18874 <get_edge>
		  //printf("k = %d\t before read data from processor 0\n",k);
		  read_data(edge,0/*which process*/, i/*which input*/);
   1875c:	1009883a 	mov	r4,r2
   18760:	000d883a 	mov	r6,zero
   18764:	000b883a 	mov	r5,zero
   18768:	00183440 	call	18344 <read_data>
		  //printf("k = %d\t after read data from processor 0\n",k);
	  }
	  proc_0(proc_0_inps, proc_0_outs);
   1876c:	d1604904 	addi	r5,gp,-32476
   18770:	d1205504 	addi	r4,gp,-32428
   18774:	001805c0 	call	1805c <proc_0>

	  for(int i = 0; i <P0_NUM_OF_OUTS; ++i){
		  struct Edge *edge = get_edge(0,i,1/*it means output edges*/);
   18778:	01800044 	movi	r6,1
   1877c:	000b883a 	mov	r5,zero
   18780:	0009883a 	mov	r4,zero
   18784:	00188740 	call	18874 <get_edge>
		  send_data(edge,0/*which process*/, i/*which output*/);
   18788:	1009883a 	mov	r4,r2
   1878c:	000d883a 	mov	r6,zero
   18790:	000b883a 	mov	r5,zero
   18794:	00184640 	call	18464 <send_data>
	  }


	  for(int i = 0; i <P1_NUM_OF_INPS; ++i){
		  struct Edge *edge = get_edge(1,i,0/*it means input edges*/);
   18798:	000d883a 	mov	r6,zero
   1879c:	000b883a 	mov	r5,zero
   187a0:	01000044 	movi	r4,1
   187a4:	00188740 	call	18874 <get_edge>

		  //printf("k = %d\t before read data from processor 1\n",k);
		  read_data(edge,1/*which process*/, i/*which input*/);
   187a8:	1009883a 	mov	r4,r2
   187ac:	000d883a 	mov	r6,zero
   187b0:	01400044 	movi	r5,1
   187b4:	00183440 	call	18344 <read_data>
		  send_data(edge,0/*which process*/, i/*which output*/);
	  }


	  for(int i = 0; i <P1_NUM_OF_INPS; ++i){
		  struct Edge *edge = get_edge(1,i,0/*it means input edges*/);
   187b8:	01400044 	movi	r5,1
   187bc:	2809883a 	mov	r4,r5
   187c0:	000d883a 	mov	r6,zero
   187c4:	00188740 	call	18874 <get_edge>

		  //printf("k = %d\t before read data from processor 1\n",k);
		  read_data(edge,1/*which process*/, i/*which input*/);
   187c8:	01800044 	movi	r6,1
   187cc:	300b883a 	mov	r5,r6
   187d0:	1009883a 	mov	r4,r2
   187d4:	00183440 	call	18344 <read_data>
		  //printf("k = %d\t after read data from processor 1\n",k);
	  }
	  proc_1(proc_1_inps, proc_1_outs);
   187d8:	d1604704 	addi	r5,gp,-32484
   187dc:	d1204f04 	addi	r4,gp,-32452
   187e0:	001807c0 	call	1807c <proc_1>

	  for(int i = 0; i <P1_NUM_OF_OUTS; ++i){
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
   187e4:	01800044 	movi	r6,1
   187e8:	3009883a 	mov	r4,r6
   187ec:	000b883a 	mov	r5,zero
   187f0:	00188740 	call	18874 <get_edge>
		  send_data(edge,1/*which process*/, i/*which output*/);
   187f4:	1009883a 	mov	r4,r2
   187f8:	000d883a 	mov	r6,zero
   187fc:	01400044 	movi	r5,1
   18800:	00184640 	call	18464 <send_data>
		  //printf("k = %d\t after read data from processor 1\n",k);
	  }
	  proc_1(proc_1_inps, proc_1_outs);

	  for(int i = 0; i <P1_NUM_OF_OUTS; ++i){
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
   18804:	01800044 	movi	r6,1
   18808:	300b883a 	mov	r5,r6
   1880c:	3009883a 	mov	r4,r6
   18810:	00188740 	call	18874 <get_edge>
		  send_data(edge,1/*which process*/, i/*which output*/);
   18814:	01800044 	movi	r6,1
   18818:	300b883a 	mov	r5,r6
   1881c:	1009883a 	mov	r4,r2
   18820:	843fffc4 	addi	r16,r16,-1
   18824:	00184640 	call	18464 <send_data>
	proc_args_init();
	init_structures();



	for(int k = 0; k < 5; ++k){
   18828:	803fc81e 	bne	r16,zero,1874c <_gp+0xffff63dc>
	  }
	}

	for(int k = 0; k < 5; k++){
		printf("test\n");
		printf("test_arr[%d] = %x\n",k,test_arr[k]);
   1882c:	048000b4 	movhi	r18,2
   18830:	94a93804 	addi	r18,r18,-23328
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
		  send_data(edge,1/*which process*/, i/*which output*/);
	  }
	}

	for(int k = 0; k < 5; k++){
   18834:	04400144 	movi	r17,5
		printf("test\n");
   18838:	010000b4 	movhi	r4,2
   1883c:	21289d04 	addi	r4,r4,-23948
   18840:	00195040 	call	19504 <puts>
		printf("test_arr[%d] = %x\n",k,test_arr[k]);
   18844:	8405883a 	add	r2,r16,r16
   18848:	1085883a 	add	r2,r2,r2
   1884c:	1485883a 	add	r2,r2,r18
   18850:	11800017 	ldw	r6,0(r2)
   18854:	010000b4 	movhi	r4,2
   18858:	800b883a 	mov	r5,r16
   1885c:	21289f04 	addi	r4,r4,-23940
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
		  send_data(edge,1/*which process*/, i/*which output*/);
	  }
	}

	for(int k = 0; k < 5; k++){
   18860:	84000044 	addi	r16,r16,1
		printf("test\n");
		printf("test_arr[%d] = %x\n",k,test_arr[k]);
   18864:	00194380 	call	19438 <printf>
		  struct Edge *edge = get_edge(1,i,1/*it means output edges*/);
		  send_data(edge,1/*which process*/, i/*which output*/);
	  }
	}

	for(int k = 0; k < 5; k++){
   18868:	847ff31e 	bne	r16,r17,18838 <_gp+0xffff64c8>
		printf("test\n");
		printf("test_arr[%d] = %x\n",k,test_arr[k]);
	}
	cleanUp();
   1886c:	00186980 	call	18698 <cleanUp>
   18870:	003fff06 	br	18870 <_gp+0xffff6500>

00018874 <get_edge>:
/****************** Structure ******************/

/* This is only for current node */
struct Edge* get_edge(uint8_t proc_num, uint8_t port_num, uint8_t inout)
{
    if (inout == 0  /*it is input edge*/) {
   18874:	31803fcc 	andi	r6,r6,255
   18878:	30000f1e 	bne	r6,zero,188b8 <get_edge+0x44>
        if (proc_num == 0) {
   1887c:	21003fcc 	andi	r4,r4,255
   18880:	2000051e 	bne	r4,zero,18898 <get_edge+0x24>
            if (port_num == 0) {
   18884:	29403fcc 	andi	r5,r5,255
   18888:	28001f1e 	bne	r5,zero,18908 <get_edge+0x94>
                return &edge_p5_p0;
   1888c:	008000b4 	movhi	r2,2
   18890:	10a9c204 	addi	r2,r2,-22776
   18894:	f800283a 	ret
            }
        }
        if (proc_num == 1) {
   18898:	00800044 	movi	r2,1
   1889c:	20801a1e 	bne	r4,r2,18908 <get_edge+0x94>
            if (port_num == 0) {
   188a0:	29403fcc 	andi	r5,r5,255
   188a4:	28001226 	beq	r5,zero,188f0 <get_edge+0x7c>
                return &edge_p0_p1;
            }
            if (port_num == 1) {
   188a8:	2900171e 	bne	r5,r4,18908 <get_edge+0x94>
                return &edge_p4_p1;
   188ac:	008000b4 	movhi	r2,2
   188b0:	10a9c704 	addi	r2,r2,-22756
   188b4:	f800283a 	ret
            }
        }
    }

    if (inout == 1  /*it is output edge*/) {
   188b8:	00800044 	movi	r2,1
   188bc:	3080121e 	bne	r6,r2,18908 <get_edge+0x94>
        if (proc_num == 0) {
   188c0:	21003fcc 	andi	r4,r4,255
   188c4:	2000031e 	bne	r4,zero,188d4 <get_edge+0x60>
            if (port_num == 0) {
   188c8:	29403fcc 	andi	r5,r5,255
   188cc:	28000e1e 	bne	r5,zero,18908 <get_edge+0x94>
   188d0:	00000706 	br	188f0 <get_edge+0x7c>
                return &edge_p0_p1;
            }
        }
        if (proc_num == 1) {
   188d4:	21800c1e 	bne	r4,r6,18908 <get_edge+0x94>
            if (port_num == 0) {
   188d8:	29403fcc 	andi	r5,r5,255
   188dc:	28000726 	beq	r5,zero,188fc <get_edge+0x88>
                return &edge_p1_p2;
            }
            if (port_num == 1) {
   188e0:	2900091e 	bne	r5,r4,18908 <get_edge+0x94>
                return &edge_p1_p3;
   188e4:	008000b4 	movhi	r2,2
   188e8:	10a99f04 	addi	r2,r2,-22916
   188ec:	f800283a 	ret
                return &edge_p5_p0;
            }
        }
        if (proc_num == 1) {
            if (port_num == 0) {
                return &edge_p0_p1;
   188f0:	008000b4 	movhi	r2,2
   188f4:	10a9bd04 	addi	r2,r2,-22796
   188f8:	f800283a 	ret
                return &edge_p0_p1;
            }
        }
        if (proc_num == 1) {
            if (port_num == 0) {
                return &edge_p1_p2;
   188fc:	008000b4 	movhi	r2,2
   18900:	10a9cc04 	addi	r2,r2,-22736
   18904:	f800283a 	ret
                return &edge_p1_p3;
            }
        }
    }

    return 0;
   18908:	0005883a 	mov	r2,zero
}
   1890c:	f800283a 	ret

00018910 <get_buffer>:

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   18910:	00c000b4 	movhi	r3,2
   18914:	18e9a484 	addi	r3,r3,-22894
    for (int i = 0; i < 5; i++) {
   18918:	0005883a 	mov	r2,zero
        if (edges[i].proc_src == proc_src) {
   1891c:	213fffcc 	andi	r4,r4,65535
            if (edges[i].proc_dest == proc_dest) {
   18920:	297fffcc 	andi	r5,r5,65535
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 5; i++) {
   18924:	01800144 	movi	r6,5
        if (edges[i].proc_src == proc_src) {
   18928:	19c0000b 	ldhu	r7,0(r3)
   1892c:	39000e1e 	bne	r7,r4,18968 <get_buffer+0x58>
            if (edges[i].proc_dest == proc_dest) {
   18930:	19c0008b 	ldhu	r7,2(r3)
   18934:	39400c1e 	bne	r7,r5,18968 <get_buffer+0x58>
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   18938:	deffff04 	addi	sp,sp,-4
    for (int i = 0; i < 5; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   1893c:	01400504 	movi	r5,20
   18940:	1009883a 	mov	r4,r2
    return 0;
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
   18944:	dfc00015 	stw	ra,0(sp)
    for (int i = 0; i < 5; i++) {
        if (edges[i].proc_src == proc_src) {
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
   18948:	00191280 	call	19128 <__mulsi3>
   1894c:	00c000b4 	movhi	r3,2
   18950:	18e9a704 	addi	r3,r3,-22884
   18954:	10c5883a 	add	r2,r2,r3
   18958:	10800017 	ldw	r2,0(r2)
            }
        }
    }
    return 0;
}
   1895c:	dfc00017 	ldw	ra,0(sp)
   18960:	dec00104 	addi	sp,sp,4
   18964:	f800283a 	ret
}

/* This is only for current node */
ring_buffer_t* get_buffer(alt_u16 proc_src, alt_u16 proc_dest)
{
    for (int i = 0; i < 5; i++) {
   18968:	10800044 	addi	r2,r2,1
   1896c:	18c00504 	addi	r3,r3,20
   18970:	11bfed1e 	bne	r2,r6,18928 <_gp+0xffff65b8>
            if (edges[i].proc_dest == proc_dest) {
                return edges[i].buffer;
            }
        }
    }
    return 0;
   18974:	0005883a 	mov	r2,zero
   18978:	f800283a 	ret

0001897c <init_buffer>:
}

void init_buffer(){
   1897c:	deff9d04 	addi	sp,sp,-396
	ring_buffer_t buff_p5_p0;
	ring_buffer_init(&buff_p5_p0);
   18980:	d9004104 	addi	r4,sp,260
        }
    }
    return 0;
}

void init_buffer(){
   18984:	dfc06215 	stw	ra,392(sp)
	ring_buffer_t buff_p5_p0;
	ring_buffer_init(&buff_p5_p0);
   18988:	0018ed80 	call	18ed8 <ring_buffer_init>

	ring_buffer_t buff_p0_p1;
	ring_buffer_init(&buff_p0_p1);
   1898c:	d9002084 	addi	r4,sp,130
   18990:	0018ed80 	call	18ed8 <ring_buffer_init>

	ring_buffer_t buff_p4_p1;
	ring_buffer_init(&buff_p4_p1);
   18994:	d809883a 	mov	r4,sp
   18998:	0018ed80 	call	18ed8 <ring_buffer_init>
}
   1899c:	dfc06217 	ldw	ra,392(sp)
   189a0:	dec06304 	addi	sp,sp,396
   189a4:	f800283a 	ret

000189a8 <init_structures>:

/* This is only for current node */
void init_structures(){
   189a8:	defff904 	addi	sp,sp,-28
   189ac:	dfc00615 	stw	ra,24(sp)
   189b0:	dd400515 	stw	r21,20(sp)
   189b4:	dd000415 	stw	r20,16(sp)
   189b8:	dcc00315 	stw	r19,12(sp)
   189bc:	dc800215 	stw	r18,8(sp)
   189c0:	dc400115 	stw	r17,4(sp)
   189c4:	dc000015 	stw	r16,0(sp)
	init_buffer();
   189c8:	001897c0 	call	1897c <init_buffer>

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   189cc:	014000b4 	movhi	r5,2
   189d0:	2969c204 	addi	r5,r5,-22776
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
   189d4:	00800144 	movi	r2,5
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;

	edges[0] = edge_p5_p0;
   189d8:	044000b4 	movhi	r17,2
   189dc:	04800504 	movi	r18,20
   189e0:	8c69a404 	addi	r17,r17,-22896
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
   189e4:	2880008d 	sth	r2,2(r5)
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   189e8:	008000b4 	movhi	r2,2
	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
   189ec:	04000044 	movi	r16,1
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
   189f0:	04c00104 	movi	r19,4
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   189f4:	05400084 	movi	r21,2
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;

	edges[0] = edge_p5_p0;
   189f8:	900d883a 	mov	r6,r18
   189fc:	8809883a 	mov	r4,r17
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   18a00:	10a95d84 	addi	r2,r2,-23178
/* This is only for current node */
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
   18a04:	2d400005 	stb	r21,0(r5)
	edge_p5_p0.node_dest = 0;
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
   18a08:	2c000185 	stb	r16,6(r5)
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
   18a0c:	2cc00205 	stb	r19,8(r5)
	edge_p5_p0.external = 1;
   18a10:	2c000405 	stb	r16,16(r5)
void init_structures(){
	init_buffer();

	//Edge p5 to p0
	edge_p5_p0.node_src = 2;
	edge_p5_p0.node_dest = 0;
   18a14:	28000045 	stb	zero,1(r5)
	edge_p5_p0.proc_src = 5;
	edge_p5_p0.proc_dest = 0;
   18a18:	2800010d 	sth	zero,4(r5)
	edge_p5_p0.num_of_inp_token = P0_INP0_NUM_OF_TOKEN;
	edge_p5_p0.size_of_token_type = sizeof(P0_INP0_TYPE);
	edge_p5_p0.external = 1;
	edge_p5_p0.buffer = &buff_p5_p0;
   18a1c:	28800315 	stw	r2,12(r5)

	edges[0] = edge_p5_p0;
   18a20:	00191780 	call	19178 <memcpy>


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   18a24:	014000b4 	movhi	r5,2
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
	edge_p0_p1.buffer = &buff_p0_p1;
   18a28:	008000b4 	movhi	r2,2

	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   18a2c:	2969bd04 	addi	r5,r5,-22796
	edge_p0_p1.node_dest = 0;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
   18a30:	05000044 	movi	r20,1
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
	edge_p0_p1.buffer = &buff_p0_p1;

	edges[1] = edge_p0_p1;
   18a34:	900d883a 	mov	r6,r18
   18a38:	8c89883a 	add	r4,r17,r18
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
	edge_p0_p1.buffer = &buff_p0_p1;
   18a3c:	10a97e04 	addi	r2,r2,-23048

	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
	edge_p0_p1.node_dest = 0;
	edge_p0_p1.proc_src = 0;
	edge_p0_p1.proc_dest = 1;
   18a40:	2d00010d 	sth	r20,4(r5)
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
   18a44:	2d000185 	stb	r20,6(r5)
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
   18a48:	2c0001c5 	stb	r16,7(r5)
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
   18a4c:	2cc00205 	stb	r19,8(r5)

	edges[0] = edge_p5_p0;


	//Edge p0 to p1
	edge_p0_p1.node_src = 0;
   18a50:	28000005 	stb	zero,0(r5)
	edge_p0_p1.node_dest = 0;
   18a54:	28000045 	stb	zero,1(r5)
	edge_p0_p1.proc_src = 0;
   18a58:	2800008d 	sth	zero,2(r5)
	edge_p0_p1.proc_dest = 1;
	edge_p0_p1.num_of_inp_token = P1_INP0_NUM_OF_TOKEN;
	edge_p0_p1.num_of_out_token = P0_OUT0_NUM_OF_TOKEN;
	edge_p0_p1.size_of_token_type = sizeof(P1_INP0_TYPE);
	edge_p0_p1.external = 0;
   18a5c:	28000405 	stb	zero,16(r5)
	edge_p0_p1.buffer = &buff_p0_p1;
   18a60:	28800315 	stw	r2,12(r5)

	edges[1] = edge_p0_p1;
   18a64:	00191780 	call	19178 <memcpy>


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   18a68:	014000b4 	movhi	r5,2
   18a6c:	2969c704 	addi	r5,r5,-22756
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
   18a70:	00800104 	movi	r2,4
   18a74:	2880008d 	sth	r2,2(r5)
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
   18a78:	28800205 	stb	r2,8(r5)
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18a7c:	008000b4 	movhi	r2,2

	edges[2] = edge_p4_p1;
   18a80:	900d883a 	mov	r6,r18
   18a84:	89000a04 	addi	r4,r17,40
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18a88:	10a93d04 	addi	r2,r2,-23308

	edges[1] = edge_p0_p1;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
   18a8c:	2d400005 	stb	r21,0(r5)
	edge_p4_p1.node_dest = 0;
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
   18a90:	2d00010d 	sth	r20,4(r5)
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
   18a94:	2c000185 	stb	r16,6(r5)
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
	edge_p4_p1.external = 1;
   18a98:	2c000405 	stb	r16,16(r5)
	edges[1] = edge_p0_p1;


	//Edge p4 to p1
	edge_p4_p1.node_src = 2;
	edge_p4_p1.node_dest = 0;
   18a9c:	28000045 	stb	zero,1(r5)
	edge_p4_p1.proc_src = 4;
	edge_p4_p1.proc_dest = 1;
	edge_p4_p1.num_of_inp_token = P1_INP1_NUM_OF_TOKEN;
	edge_p4_p1.size_of_token_type = sizeof(P1_INP1_TYPE);
	edge_p4_p1.external = 1;
	edge_p4_p1.buffer = &buff_p4_p1;
   18aa0:	28800315 	stw	r2,12(r5)

	edges[2] = edge_p4_p1;
   18aa4:	00191780 	call	19178 <memcpy>


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   18aa8:	014000b4 	movhi	r5,2
   18aac:	2969cc04 	addi	r5,r5,-22736
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.size_of_token_type = sizeof(P1_OUT0_TYPE);
	edge_p1_p2.num_of_out_token = P1_OUT0_NUM_OF_TOKEN;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   18ab0:	900d883a 	mov	r6,r18
   18ab4:	89000f04 	addi	r4,r17,60

	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   18ab8:	00800084 	movi	r2,2
	edges[2] = edge_p4_p1;


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
	edge_p1_p2.node_dest = 1;
   18abc:	2c000045 	stb	r16,1(r5)
	edge_p1_p2.proc_src = 1;
   18ac0:	2d00008d 	sth	r20,2(r5)
	edge_p1_p2.proc_dest = 2;
	edge_p1_p2.size_of_token_type = sizeof(P1_OUT0_TYPE);
   18ac4:	2cc00205 	stb	r19,8(r5)
	edge_p1_p2.num_of_out_token = P1_OUT0_NUM_OF_TOKEN;
   18ac8:	2c0001c5 	stb	r16,7(r5)
	edge_p1_p2.external = 1;
   18acc:	2c000405 	stb	r16,16(r5)

	edges[2] = edge_p4_p1;


	//Edge p1 to p2
	edge_p1_p2.node_src = 0;
   18ad0:	28000005 	stb	zero,0(r5)
	edge_p1_p2.node_dest = 1;
	edge_p1_p2.proc_src = 1;
	edge_p1_p2.proc_dest = 2;
   18ad4:	2880010d 	sth	r2,4(r5)
	edge_p1_p2.size_of_token_type = sizeof(P1_OUT0_TYPE);
	edge_p1_p2.num_of_out_token = P1_OUT0_NUM_OF_TOKEN;
	edge_p1_p2.external = 1;

	edges[3] = edge_p1_p2;
   18ad8:	00191780 	call	19178 <memcpy>


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   18adc:	014000b4 	movhi	r5,2
   18ae0:	29699f04 	addi	r5,r5,-22916
	edge_p1_p3.node_dest = 3;
   18ae4:	008000c4 	movi	r2,3
   18ae8:	28800045 	stb	r2,1(r5)
	edge_p1_p3.proc_dest = 3;
	edge_p1_p3.size_of_token_type = sizeof(P1_OUT1_TYPE);
	edge_p1_p3.num_of_out_token = P1_OUT1_NUM_OF_TOKEN;
	edge_p1_p3.external = 1;

	edges[4] = edge_p1_p3;
   18aec:	900d883a 	mov	r6,r18

	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
	edge_p1_p3.node_dest = 3;
	edge_p1_p3.proc_src = 1;
	edge_p1_p3.proc_dest = 3;
   18af0:	008000c4 	movi	r2,3
	edge_p1_p3.size_of_token_type = sizeof(P1_OUT1_TYPE);
	edge_p1_p3.num_of_out_token = P1_OUT1_NUM_OF_TOKEN;
	edge_p1_p3.external = 1;

	edges[4] = edge_p1_p3;
   18af4:	89001404 	addi	r4,r17,80

	edges[3] = edge_p1_p2;


	//Edge p1 to p3
	edge_p1_p3.node_src = 0;
   18af8:	28000005 	stb	zero,0(r5)
	edge_p1_p3.node_dest = 3;
	edge_p1_p3.proc_src = 1;
   18afc:	2d00008d 	sth	r20,2(r5)
	edge_p1_p3.proc_dest = 3;
   18b00:	2880010d 	sth	r2,4(r5)
	edge_p1_p3.size_of_token_type = sizeof(P1_OUT1_TYPE);
   18b04:	2cc00205 	stb	r19,8(r5)
	edge_p1_p3.num_of_out_token = P1_OUT1_NUM_OF_TOKEN;
   18b08:	2c0001c5 	stb	r16,7(r5)
	edge_p1_p3.external = 1;
   18b0c:	2c000405 	stb	r16,16(r5)

	edges[4] = edge_p1_p3;
   18b10:	00191780 	call	19178 <memcpy>
}
   18b14:	dfc00617 	ldw	ra,24(sp)
   18b18:	dd400517 	ldw	r21,20(sp)
   18b1c:	dd000417 	ldw	r20,16(sp)
   18b20:	dcc00317 	ldw	r19,12(sp)
   18b24:	dc800217 	ldw	r18,8(sp)
   18b28:	dc400117 	ldw	r17,4(sp)
   18b2c:	dc000017 	ldw	r16,0(sp)
   18b30:	dec00704 	addi	sp,sp,28
   18b34:	f800283a 	ret

00018b38 <send_packet>:

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b38:	defff904 	addi	sp,sp,-28
   18b3c:	dd400515 	stw	r21,20(sp)
    src_low = proc_src;
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
   18b40:	25403fcc 	andi	r21,r4,255

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b44:	dd000415 	stw	r20,16(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b48:	d8800703 	ldbu	r2,28(sp)

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b4c:	3029883a 	mov	r20,r6
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b50:	a80c923a 	slli	r6,r21,8
   18b54:	29403fcc 	andi	r5,r5,255
   18b58:	1004943a 	slli	r2,r2,16
   18b5c:	314ab03a 	or	r5,r6,r5
   18b60:	a00c943a 	slli	r6,r20,16

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b64:	dcc00315 	stw	r19,12(sp)
   18b68:	3827883a 	mov	r19,r7

    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b6c:	9cffffcc 	andi	r19,r19,65535

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b70:	dc800215 	stw	r18,8(sp)
   18b74:	dc400115 	stw	r17,4(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b78:	04a40014 	movui	r18,36864
   18b7c:	04641214 	movui	r17,36936
   18b80:	288ab03a 	or	r5,r5,r2

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b84:	a82a963a 	slli	r21,r21,24
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b88:	31bfc02c 	andhi	r6,r6,65280

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b8c:	9826923a 	slli	r19,r19,8
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18b90:	298cb03a 	or	r6,r5,r6
   18b94:	8809883a 	mov	r4,r17
   18b98:	900b883a 	mov	r5,r18

	edges[4] = edge_p1_p3;
}

void send_packet(unsigned char node_src, unsigned char node_dest,
alt_u16 proc_src, alt_u16 proc_dest, unsigned char packsize, unsigned char *payload){
   18b9c:	dfc00615 	stw	ra,24(sp)
   18ba0:	dc000015 	stw	r16,0(sp)
   18ba4:	dc000817 	ldw	r16,32(sp)
    proc_src >>= 8;
    src_high = proc_src;


    temp = src_high<<24 | ((packsize)<<16) | ((node_src)<<8) | (node_dest);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18ba8:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>

    temp = node_src<<24 | proc_dest<<8 | src_low;
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18bac:	ace6b03a 	or	r19,r21,r19
   18bb0:	a1803fcc 	andi	r6,r20,255
   18bb4:	998cb03a 	or	r6,r19,r6
   18bb8:	900b883a 	mov	r5,r18
   18bbc:	8809883a 	mov	r4,r17
   18bc0:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>
   18bc4:	80800043 	ldbu	r2,1(r16)
   18bc8:	81000003 	ldbu	r4,0(r16)
   18bcc:	818000c3 	ldbu	r6,3(r16)
   18bd0:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 3))<<24) | ((*(payload + 2))<<16) | ((*(payload + 1))<<8) | (*payload);
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18bd4:	900b883a 	mov	r5,r18
   18bd8:	300c963a 	slli	r6,r6,24
   18bdc:	1106b03a 	or	r3,r2,r4
   18be0:	80800083 	ldbu	r2,2(r16)
   18be4:	8809883a 	mov	r4,r17
   18be8:	1004943a 	slli	r2,r2,16
   18bec:	10c4b03a 	or	r2,r2,r3
   18bf0:	308cb03a 	or	r6,r6,r2
   18bf4:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>
   18bf8:	80800143 	ldbu	r2,5(r16)
   18bfc:	81000103 	ldbu	r4,4(r16)
   18c00:	818001c3 	ldbu	r6,7(r16)
   18c04:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 7))<<24) | ((*(payload + 6))<<16) | ((*(payload + 5))<<8) | ((*(payload + 4)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18c08:	900b883a 	mov	r5,r18
   18c0c:	300c963a 	slli	r6,r6,24
   18c10:	1106b03a 	or	r3,r2,r4
   18c14:	80800183 	ldbu	r2,6(r16)
   18c18:	8809883a 	mov	r4,r17
   18c1c:	1004943a 	slli	r2,r2,16
   18c20:	10c4b03a 	or	r2,r2,r3
   18c24:	308cb03a 	or	r6,r6,r2
   18c28:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>
   18c2c:	80800243 	ldbu	r2,9(r16)
   18c30:	81000203 	ldbu	r4,8(r16)
   18c34:	818002c3 	ldbu	r6,11(r16)
   18c38:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 11))<<24) | ((*(payload + 10))<<16) | ((*(payload + 9))<<8) | ((*(payload + 8)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18c3c:	900b883a 	mov	r5,r18
   18c40:	300c963a 	slli	r6,r6,24
   18c44:	1106b03a 	or	r3,r2,r4
   18c48:	80800283 	ldbu	r2,10(r16)
   18c4c:	8809883a 	mov	r4,r17
   18c50:	1004943a 	slli	r2,r2,16
   18c54:	10c4b03a 	or	r2,r2,r3
   18c58:	308cb03a 	or	r6,r6,r2
   18c5c:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>
   18c60:	80800343 	ldbu	r2,13(r16)
   18c64:	81000303 	ldbu	r4,12(r16)
   18c68:	818003c3 	ldbu	r6,15(r16)
   18c6c:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 15))<<24) | ((*(payload + 14))<<16) | ((*(payload + 13))<<8) | ((*(payload + 12)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18c70:	900b883a 	mov	r5,r18
   18c74:	300c963a 	slli	r6,r6,24
   18c78:	1106b03a 	or	r3,r2,r4
   18c7c:	80800383 	ldbu	r2,14(r16)
   18c80:	8809883a 	mov	r4,r17
   18c84:	1004943a 	slli	r2,r2,16
   18c88:	10c4b03a 	or	r2,r2,r3
   18c8c:	308cb03a 	or	r6,r6,r2
   18c90:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>
   18c94:	80800443 	ldbu	r2,17(r16)
   18c98:	81000403 	ldbu	r4,16(r16)
   18c9c:	818004c3 	ldbu	r6,19(r16)
   18ca0:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18ca4:	900b883a 	mov	r5,r18
   18ca8:	300c963a 	slli	r6,r6,24
   18cac:	1106b03a 	or	r3,r2,r4
   18cb0:	80800483 	ldbu	r2,18(r16)
   18cb4:	8809883a 	mov	r4,r17
   18cb8:	1004943a 	slli	r2,r2,16
   18cbc:	10c4b03a 	or	r2,r2,r3
   18cc0:	308cb03a 	or	r6,r6,r2
   18cc4:	001a11c0 	call	1a11c <altera_avalon_fifo_write_fifo>
   18cc8:	80800543 	ldbu	r2,21(r16)
   18ccc:	81000503 	ldbu	r4,20(r16)
   18cd0:	818005c3 	ldbu	r6,23(r16)
   18cd4:	1004923a 	slli	r2,r2,8

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18cd8:	900b883a 	mov	r5,r18
   18cdc:	300c963a 	slli	r6,r6,24
   18ce0:	1106b03a 	or	r3,r2,r4
   18ce4:	80800583 	ldbu	r2,22(r16)
   18ce8:	8809883a 	mov	r4,r17
   18cec:	1004943a 	slli	r2,r2,16
   18cf0:	10c4b03a 	or	r2,r2,r3
   18cf4:	308cb03a 	or	r6,r6,r2

}
   18cf8:	dfc00617 	ldw	ra,24(sp)
   18cfc:	dd400517 	ldw	r21,20(sp)
   18d00:	dd000417 	ldw	r20,16(sp)
   18d04:	dcc00317 	ldw	r19,12(sp)
   18d08:	dc800217 	ldw	r18,8(sp)
   18d0c:	dc400117 	ldw	r17,4(sp)
   18d10:	dc000017 	ldw	r16,0(sp)
   18d14:	dec00704 	addi	sp,sp,28

    temp = ((*(payload + 19))<<24) | ((*(payload + 18))<<16) | ((*(payload + 17))<<8) | ((*(payload + 16)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

    temp = ((*(payload + 23))<<24) | ((*(payload + 22))<<16) | ((*(payload + 21))<<8) | ((*(payload + 20)));
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);
   18d18:	001a11c1 	jmpi	1a11c <altera_avalon_fifo_write_fifo>

00018d1c <read_payload>:
}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
   18d1c:	2004d23a 	srli	r2,r4,8
    altera_avalon_fifo_write_fifo(FIFO_SOURCE_BASE, FIFO_SOURCE_CSR, temp);

}

void read_payload(unsigned int temp, unsigned int byte_coef, unsigned char *payload){
	*(payload + 0 + byte_coef) = temp;
   18d20:	314b883a 	add	r5,r6,r5
   18d24:	29000005 	stb	r4,0(r5)
	//printf("payload[%d] = %d\n",byte_coef,*(payload + 0 + byte_coef));
	temp >>= 8;
	
	*(payload + 1 + byte_coef) = temp;
   18d28:	28800045 	stb	r2,1(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
   18d2c:	2004d43a 	srli	r2,r4,16
	
	*(payload + 2 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   18d30:	2008d63a 	srli	r4,r4,24
	
	*(payload + 1 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 1),*(payload + 1 + byte_coef));
	temp >>= 8;
	
	*(payload + 2 + byte_coef) = temp;
   18d34:	28800085 	stb	r2,2(r5)
	//printf("payload[%d] = %d\n",(byte_coef + 2),*(payload + 2 + byte_coef));
	temp >>= 8;
	
	*(payload + 3 + byte_coef) = temp;
   18d38:	290000c5 	stb	r4,3(r5)
   18d3c:	f800283a 	ret

00018d40 <receive_packet>:
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   18d40:	defff504 	addi	sp,sp,-44
   18d44:	dc400715 	stw	r17,28(sp)
   18d48:	dc000615 	stw	r16,24(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d4c:	04640814 	movui	r17,36896
   18d50:	04241014 	movui	r16,36928
   18d54:	880b883a 	mov	r5,r17
   18d58:	8009883a 	mov	r4,r16
	
	*(payload + 3 + byte_coef) = temp;
	//printf("payload[%d] = %d\n",(byte_coef + 3),*(payload + 3 + byte_coef));
}

void receive_packet(){
   18d5c:	dfc00a15 	stw	ra,40(sp)
   18d60:	dcc00915 	stw	r19,36(sp)
   18d64:	dc800815 	stw	r18,32(sp)
	unsigned char payload[24];

	alt_u16 dst_proc, src_proc;

	//first four bytes
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d68:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	packet_size = temp;
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
   18d6c:	1004d63a 	srli	r2,r2,24
	src_proc <<= 8;


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d70:	880b883a 	mov	r5,r17
   18d74:	8009883a 	mov	r4,r16
	//printf("packet_size = %d\n",packet_size);
	temp >>= 8;

	src_high = temp;
	src_proc = src_high;
	src_proc <<= 8;
   18d78:	1026923a 	slli	r19,r2,8


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d7c:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
   18d80:	1025883a 	mov	r18,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d84:	880b883a 	mov	r5,r17
   18d88:	8009883a 	mov	r4,r16


	//second four bytes are are for node number and source
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
	src_low = temp;
	src_proc |= src_low;
   18d8c:	10803fcc 	andi	r2,r2,255
   18d90:	98a6b03a 	or	r19,r19,r2


	//since now, recieve the payload

	//1st four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18d94:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	read_payload(temp,0,payload);
   18d98:	d80d883a 	mov	r6,sp
   18d9c:	1009883a 	mov	r4,r2
   18da0:	000b883a 	mov	r5,zero
   18da4:	0018d1c0 	call	18d1c <read_payload>

	//2nd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18da8:	880b883a 	mov	r5,r17
   18dac:	8009883a 	mov	r4,r16
   18db0:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	read_payload(temp,4,payload);
   18db4:	d80d883a 	mov	r6,sp
   18db8:	1009883a 	mov	r4,r2
   18dbc:	01400104 	movi	r5,4
   18dc0:	0018d1c0 	call	18d1c <read_payload>

	//3rd four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18dc4:	880b883a 	mov	r5,r17
   18dc8:	8009883a 	mov	r4,r16
   18dcc:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	read_payload(temp,8,payload);
   18dd0:	d80d883a 	mov	r6,sp
   18dd4:	1009883a 	mov	r4,r2
   18dd8:	01400204 	movi	r5,8
   18ddc:	0018d1c0 	call	18d1c <read_payload>

	//4th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18de0:	880b883a 	mov	r5,r17
   18de4:	8009883a 	mov	r4,r16
   18de8:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	read_payload(temp,12,payload);
   18dec:	d80d883a 	mov	r6,sp
   18df0:	1009883a 	mov	r4,r2
   18df4:	01400304 	movi	r5,12
   18df8:	0018d1c0 	call	18d1c <read_payload>

	//5th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18dfc:	880b883a 	mov	r5,r17
   18e00:	8009883a 	mov	r4,r16
   18e04:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	read_payload(temp,16,payload);
   18e08:	d80d883a 	mov	r6,sp
   18e0c:	1009883a 	mov	r4,r2
   18e10:	01400404 	movi	r5,16
   18e14:	0018d1c0 	call	18d1c <read_payload>

	//6th four bytes of payload 
	temp = altera_avalon_fifo_read_fifo(FIFO_SINK_BASE, FIFO_SINK_CSR);
   18e18:	880b883a 	mov	r5,r17
   18e1c:	8009883a 	mov	r4,r16
   18e20:	001a1600 	call	1a160 <altera_avalon_fifo_read_fifo>
	read_payload(temp,20,payload);	
   18e24:	d80d883a 	mov	r6,sp
   18e28:	1009883a 	mov	r4,r2
   18e2c:	01400504 	movi	r5,20
   18e30:	0018d1c0 	call	18d1c <read_payload>

	//get bufer
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);
   18e34:	900ad23a 	srli	r5,r18,8
   18e38:	993fffcc 	andi	r4,r19,65535
   18e3c:	297fffcc 	andi	r5,r5,65535
   18e40:	00189100 	call	18910 <get_buffer>

	ring_buffer_queue_arr(buffer,payload,24);
   18e44:	01800604 	movi	r6,24
   18e48:	d80b883a 	mov	r5,sp
   18e4c:	1009883a 	mov	r4,r2
   18e50:	0018f240 	call	18f24 <ring_buffer_queue_arr>
}
   18e54:	dfc00a17 	ldw	ra,40(sp)
   18e58:	dcc00917 	ldw	r19,36(sp)
   18e5c:	dc800817 	ldw	r18,32(sp)
   18e60:	dc400717 	ldw	r17,28(sp)
   18e64:	dc000617 	ldw	r16,24(sp)
   18e68:	dec00b04 	addi	sp,sp,44
   18e6c:	f800283a 	ret

00018e70 <receive_poll>:

bool receive_poll(){
   18e70:	deffff04 	addi	sp,sp,-4
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   18e74:	01400fc4 	movi	r5,63
   18e78:	01240814 	movui	r4,36896
	ring_buffer_t *buffer = get_buffer(src_proc, dst_proc);

	ring_buffer_queue_arr(buffer,payload,24);
}

bool receive_poll(){
   18e7c:	dfc00015 	stw	ra,0(sp)
	int status;
	status = altera_avalon_fifo_read_status(FIFO_SINK_CSR,FIFO_STATUS);
   18e80:	0019fd80 	call	19fd8 <altera_avalon_fifo_read_status>
   18e84:	1004d07a 	srli	r2,r2,1
   18e88:	1080005c 	xori	r2,r2,1
    }*/
	if(status & 0x02)
		return false;
	else
		return true;
}
   18e8c:	1080004c 	andi	r2,r2,1
   18e90:	dfc00017 	ldw	ra,0(sp)
   18e94:	dec00104 	addi	sp,sp,4
   18e98:	f800283a 	ret

00018e9c <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   18e9c:	20c02043 	ldbu	r3,129(r4)
   18ea0:	20802003 	ldbu	r2,128(r4)
   18ea4:	1885003a 	cmpeq	r2,r3,r2
}
   18ea8:	f800283a 	ret

00018eac <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   18eac:	20802043 	ldbu	r2,129(r4)
   18eb0:	20c02003 	ldbu	r3,128(r4)
   18eb4:	10c5c83a 	sub	r2,r2,r3
   18eb8:	10801fcc 	andi	r2,r2,127
   18ebc:	10801fe0 	cmpeqi	r2,r2,127
}
   18ec0:	f800283a 	ret

00018ec4 <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   18ec4:	20802043 	ldbu	r2,129(r4)
   18ec8:	20c02003 	ldbu	r3,128(r4)
   18ecc:	10c5c83a 	sub	r2,r2,r3
}
   18ed0:	10801fcc 	andi	r2,r2,127
   18ed4:	f800283a 	ret

00018ed8 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
  buffer->tail_index = 0;
   18ed8:	20002005 	stb	zero,128(r4)
  buffer->head_index = 0;
   18edc:	20002045 	stb	zero,129(r4)
   18ee0:	f800283a 	ret

00018ee4 <ring_buffer_queue>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
   18ee4:	20802043 	ldbu	r2,129(r4)
   18ee8:	20c02003 	ldbu	r3,128(r4)
}

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
   18eec:	02001fc4 	movi	r8,127
   18ef0:	11803fcc 	andi	r6,r2,255
   18ef4:	30cfc83a 	sub	r7,r6,r3
   18ef8:	39c01fcc 	andi	r7,r7,127
   18efc:	3a00031e 	bne	r7,r8,18f0c <ring_buffer_queue+0x28>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   18f00:	18c00044 	addi	r3,r3,1
   18f04:	1a06703a 	and	r3,r3,r8
   18f08:	20c02005 	stb	r3,128(r4)
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   18f0c:	218d883a 	add	r6,r4,r6
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   18f10:	10800044 	addi	r2,r2,1
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
   18f14:	31400005 	stb	r5,0(r6)
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
   18f18:	10801fcc 	andi	r2,r2,127
   18f1c:	20802045 	stb	r2,129(r4)
   18f20:	f800283a 	ret

00018f24 <ring_buffer_queue_arr>:
}

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
   18f24:	defffc04 	addi	sp,sp,-16
   18f28:	31803fcc 	andi	r6,r6,255
   18f2c:	dc800215 	stw	r18,8(sp)
   18f30:	dc400115 	stw	r17,4(sp)
   18f34:	dc000015 	stw	r16,0(sp)
   18f38:	dfc00315 	stw	ra,12(sp)
   18f3c:	2025883a 	mov	r18,r4
   18f40:	2821883a 	mov	r16,r5
   18f44:	29a3883a 	add	r17,r5,r6
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
   18f48:	84400526 	beq	r16,r17,18f60 <ring_buffer_queue_arr+0x3c>
    ring_buffer_queue(buffer, data[i]);
   18f4c:	81400007 	ldb	r5,0(r16)
   18f50:	9009883a 	mov	r4,r18
   18f54:	84000044 	addi	r16,r16,1
   18f58:	0018ee40 	call	18ee4 <ring_buffer_queue>
   18f5c:	003ffa06 	br	18f48 <_gp+0xffff6bd8>
  }
}
   18f60:	dfc00317 	ldw	ra,12(sp)
   18f64:	dc800217 	ldw	r18,8(sp)
   18f68:	dc400117 	ldw	r17,4(sp)
   18f6c:	dc000017 	ldw	r16,0(sp)
   18f70:	dec00404 	addi	sp,sp,16
   18f74:	f800283a 	ret

00018f78 <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
   18f78:	20c02043 	ldbu	r3,129(r4)
   18f7c:	20802003 	ldbu	r2,128(r4)
   18f80:	18800926 	beq	r3,r2,18fa8 <ring_buffer_dequeue+0x30>
    /* No items */
    return 0;
  }

  *data = buffer->buffer[buffer->tail_index];
   18f84:	2085883a 	add	r2,r4,r2
   18f88:	10800003 	ldbu	r2,0(r2)
   18f8c:	28800005 	stb	r2,0(r5)
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   18f90:	20802003 	ldbu	r2,128(r4)
   18f94:	10800044 	addi	r2,r2,1
   18f98:	10801fcc 	andi	r2,r2,127
   18f9c:	20802005 	stb	r2,128(r4)
  return 1;
   18fa0:	00800044 	movi	r2,1
   18fa4:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   18fa8:	0005883a 	mov	r2,zero
  }

  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   18fac:	f800283a 	ret

00018fb0 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   18fb0:	20c02043 	ldbu	r3,129(r4)
   18fb4:	20802003 	ldbu	r2,128(r4)
   18fb8:	18801526 	beq	r3,r2,19010 <ring_buffer_dequeue_arr+0x60>
  *data = buffer->buffer[buffer->tail_index];
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
   18fbc:	defffa04 	addi	sp,sp,-24
   18fc0:	dcc00315 	stw	r19,12(sp)
   18fc4:	dc800215 	stw	r18,8(sp)
   18fc8:	dc400115 	stw	r17,4(sp)
   18fcc:	dc000015 	stw	r16,0(sp)
   18fd0:	dfc00515 	stw	ra,20(sp)
   18fd4:	dd000415 	stw	r20,16(sp)
   18fd8:	2827883a 	mov	r19,r5
   18fdc:	2023883a 	mov	r17,r4
   18fe0:	34803fcc 	andi	r18,r6,255
  if(ring_buffer_is_empty(buffer)) {
   18fe4:	0021883a 	mov	r16,zero
   18fe8:	9c0b883a 	add	r5,r19,r16
   18fec:	8029883a 	mov	r20,r16
    return 0;
  }

  char *data_ptr = data;
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
   18ff0:	84800926 	beq	r16,r18,19018 <ring_buffer_dequeue_arr+0x68>
   18ff4:	8809883a 	mov	r4,r17
   18ff8:	0018f780 	call	18f78 <ring_buffer_dequeue>
   18ffc:	10803fcc 	andi	r2,r2,255
   19000:	84000044 	addi	r16,r16,1
   19004:	103ff81e 	bne	r2,zero,18fe8 <_gp+0xffff6c78>
   19008:	a005883a 	mov	r2,r20
   1900c:	00000306 	br	1901c <ring_buffer_dequeue_arr+0x6c>
}

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   19010:	0005883a 	mov	r2,zero
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
    cnt++;
    data_ptr++;
  }
  return cnt;
}
   19014:	f800283a 	ret
   19018:	8005883a 	mov	r2,r16
   1901c:	dfc00517 	ldw	ra,20(sp)
   19020:	dd000417 	ldw	r20,16(sp)
   19024:	dcc00317 	ldw	r19,12(sp)
   19028:	dc800217 	ldw	r18,8(sp)
   1902c:	dc400117 	ldw	r17,4(sp)
   19030:	dc000017 	ldw	r16,0(sp)
   19034:	dec00604 	addi	sp,sp,24
   19038:	f800283a 	ret

0001903c <ring_buffer_pop>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
  return (buffer->head_index == buffer->tail_index);
   1903c:	20802003 	ldbu	r2,128(r4)

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
   19040:	21402043 	ldbu	r5,129(r4)
   19044:	10c03fcc 	andi	r3,r2,255
   19048:	28c00526 	beq	r5,r3,19060 <ring_buffer_pop+0x24>
    /* No items */
    return 0;
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
   1904c:	10800044 	addi	r2,r2,1
   19050:	10801fcc 	andi	r2,r2,127
   19054:	20802005 	stb	r2,128(r4)
  return 1;
   19058:	00800044 	movi	r2,1
   1905c:	f800283a 	ret
}

ring_buffer_size_t ring_buffer_pop(ring_buffer_t *buffer) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   19060:	0005883a 	mov	r2,zero
  }

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}
   19064:	f800283a 	ret

00019068 <ring_buffer_pop_arr>:

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
   19068:	20c02043 	ldbu	r3,129(r4)
   1906c:	20802003 	ldbu	r2,128(r4)
   19070:	18801426 	beq	r3,r2,190c4 <ring_buffer_pop_arr+0x5c>

  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
  return 1;
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
   19074:	defffb04 	addi	sp,sp,-20
   19078:	dcc00315 	stw	r19,12(sp)
   1907c:	dc800215 	stw	r18,8(sp)
   19080:	dc400115 	stw	r17,4(sp)
   19084:	dc000015 	stw	r16,0(sp)
   19088:	dfc00415 	stw	ra,16(sp)
   1908c:	2821883a 	mov	r16,r5
   19090:	2023883a 	mov	r17,r4
   19094:	0025883a 	mov	r18,zero
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
  }
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
   19098:	2cc03fcc 	andi	r19,r5,255
   1909c:	90803fcc 	andi	r2,r18,255
   190a0:	14c00a26 	beq	r2,r19,190cc <ring_buffer_pop_arr+0x64>
   190a4:	8809883a 	mov	r4,r17
   190a8:	001903c0 	call	1903c <ring_buffer_pop>
   190ac:	10803fcc 	andi	r2,r2,255
   190b0:	10000226 	beq	r2,zero,190bc <ring_buffer_pop_arr+0x54>
    cnt++;
   190b4:	94800044 	addi	r18,r18,1
   190b8:	003ff806 	br	1909c <_gp+0xffff6d2c>
   190bc:	9005883a 	mov	r2,r18
   190c0:	00000306 	br	190d0 <ring_buffer_pop_arr+0x68>
}

ring_buffer_size_t ring_buffer_pop_arr(ring_buffer_t *buffer, ring_buffer_size_t len) {
  if(ring_buffer_is_empty(buffer)) {
    /* No items */
    return 0;
   190c4:	0005883a 	mov	r2,zero
  ring_buffer_size_t cnt = 0;
  while((cnt < len) && ring_buffer_pop(buffer)) {
    cnt++;
  }
  return cnt;
}
   190c8:	f800283a 	ret
   190cc:	8005883a 	mov	r2,r16
   190d0:	dfc00417 	ldw	ra,16(sp)
   190d4:	dcc00317 	ldw	r19,12(sp)
   190d8:	dc800217 	ldw	r18,8(sp)
   190dc:	dc400117 	ldw	r17,4(sp)
   190e0:	dc000017 	ldw	r16,0(sp)
   190e4:	dec00504 	addi	sp,sp,20
   190e8:	f800283a 	ret

000190ec <ring_buffer_peek>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
   190ec:	20802003 	ldbu	r2,128(r4)



ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
   190f0:	20c02043 	ldbu	r3,129(r4)
   190f4:	31c03fcc 	andi	r7,r6,255
   190f8:	1887c83a 	sub	r3,r3,r2
   190fc:	18c01fcc 	andi	r3,r3,127
   19100:	38c0072e 	bgeu	r7,r3,19120 <ring_buffer_peek+0x34>
    return 0;
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
   19104:	3085883a 	add	r2,r6,r2
   19108:	10801fcc 	andi	r2,r2,127
   1910c:	2089883a 	add	r4,r4,r2
   19110:	20800003 	ldbu	r2,0(r4)
   19114:	28800005 	stb	r2,0(r5)
  return 1;
   19118:	00800044 	movi	r2,1
   1911c:	f800283a 	ret


ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, char *data, ring_buffer_size_t index) {
  if(index >= ring_buffer_num_items(buffer)) {
    /* No items at index */
    return 0;
   19120:	0005883a 	mov	r2,zero

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
  *data = buffer->buffer[data_index];
  return 1;
}
   19124:	f800283a 	ret

00019128 <__mulsi3>:
   19128:	0005883a 	mov	r2,zero
   1912c:	20000726 	beq	r4,zero,1914c <__mulsi3+0x24>
   19130:	20c0004c 	andi	r3,r4,1
   19134:	2008d07a 	srli	r4,r4,1
   19138:	18000126 	beq	r3,zero,19140 <__mulsi3+0x18>
   1913c:	1145883a 	add	r2,r2,r5
   19140:	294b883a 	add	r5,r5,r5
   19144:	203ffa1e 	bne	r4,zero,19130 <_gp+0xffff6dc0>
   19148:	f800283a 	ret
   1914c:	f800283a 	ret

00019150 <malloc>:
   19150:	008000b4 	movhi	r2,2
   19154:	10a8dd04 	addi	r2,r2,-23692
   19158:	200b883a 	mov	r5,r4
   1915c:	11000017 	ldw	r4,0(r2)
   19160:	00192a41 	jmpi	192a4 <_malloc_r>

00019164 <free>:
   19164:	008000b4 	movhi	r2,2
   19168:	10a8dd04 	addi	r2,r2,-23692
   1916c:	200b883a 	mov	r5,r4
   19170:	11000017 	ldw	r4,0(r2)
   19174:	00191c01 	jmpi	191c0 <_free_r>

00019178 <memcpy>:
   19178:	2005883a 	mov	r2,r4
   1917c:	2007883a 	mov	r3,r4
   19180:	218d883a 	add	r6,r4,r6
   19184:	19800526 	beq	r3,r6,1919c <memcpy+0x24>
   19188:	29000003 	ldbu	r4,0(r5)
   1918c:	18c00044 	addi	r3,r3,1
   19190:	29400044 	addi	r5,r5,1
   19194:	193fffc5 	stb	r4,-1(r3)
   19198:	003ffa06 	br	19184 <_gp+0xffff6e14>
   1919c:	f800283a 	ret

000191a0 <memset>:
   191a0:	2005883a 	mov	r2,r4
   191a4:	2007883a 	mov	r3,r4
   191a8:	218d883a 	add	r6,r4,r6
   191ac:	19800326 	beq	r3,r6,191bc <memset+0x1c>
   191b0:	19400005 	stb	r5,0(r3)
   191b4:	18c00044 	addi	r3,r3,1
   191b8:	003ffc06 	br	191ac <_gp+0xffff6e3c>
   191bc:	f800283a 	ret

000191c0 <_free_r>:
   191c0:	28003726 	beq	r5,zero,192a0 <_free_r+0xe0>
   191c4:	28ffff17 	ldw	r3,-4(r5)
   191c8:	28bfff04 	addi	r2,r5,-4
   191cc:	1800010e 	bge	r3,zero,191d4 <_free_r+0x14>
   191d0:	10c5883a 	add	r2,r2,r3
   191d4:	014000b4 	movhi	r5,2
   191d8:	29693304 	addi	r5,r5,-23348
   191dc:	28c00017 	ldw	r3,0(r5)
   191e0:	280d883a 	mov	r6,r5
   191e4:	1800031e 	bne	r3,zero,191f4 <_free_r+0x34>
   191e8:	10000115 	stw	zero,4(r2)
   191ec:	28800015 	stw	r2,0(r5)
   191f0:	f800283a 	ret
   191f4:	10c00c2e 	bgeu	r2,r3,19228 <_free_r+0x68>
   191f8:	11000017 	ldw	r4,0(r2)
   191fc:	110b883a 	add	r5,r2,r4
   19200:	1940041e 	bne	r3,r5,19214 <_free_r+0x54>
   19204:	19400017 	ldw	r5,0(r3)
   19208:	18c00117 	ldw	r3,4(r3)
   1920c:	2909883a 	add	r4,r5,r4
   19210:	11000015 	stw	r4,0(r2)
   19214:	10c00115 	stw	r3,4(r2)
   19218:	30800015 	stw	r2,0(r6)
   1921c:	f800283a 	ret
   19220:	11400336 	bltu	r2,r5,19230 <_free_r+0x70>
   19224:	2807883a 	mov	r3,r5
   19228:	19400117 	ldw	r5,4(r3)
   1922c:	283ffc1e 	bne	r5,zero,19220 <_gp+0xffff6eb0>
   19230:	19c00017 	ldw	r7,0(r3)
   19234:	19cd883a 	add	r6,r3,r7
   19238:	30800a1e 	bne	r6,r2,19264 <_free_r+0xa4>
   1923c:	10800017 	ldw	r2,0(r2)
   19240:	3885883a 	add	r2,r7,r2
   19244:	18800015 	stw	r2,0(r3)
   19248:	1889883a 	add	r4,r3,r2
   1924c:	2900141e 	bne	r5,r4,192a0 <_free_r+0xe0>
   19250:	29000017 	ldw	r4,0(r5)
   19254:	2085883a 	add	r2,r4,r2
   19258:	18800015 	stw	r2,0(r3)
   1925c:	28800117 	ldw	r2,4(r5)
   19260:	00000e06 	br	1929c <_free_r+0xdc>
   19264:	1180032e 	bgeu	r2,r6,19274 <_free_r+0xb4>
   19268:	00800304 	movi	r2,12
   1926c:	20800015 	stw	r2,0(r4)
   19270:	f800283a 	ret
   19274:	11000017 	ldw	r4,0(r2)
   19278:	110d883a 	add	r6,r2,r4
   1927c:	2980061e 	bne	r5,r6,19298 <_free_r+0xd8>
   19280:	29800017 	ldw	r6,0(r5)
   19284:	3109883a 	add	r4,r6,r4
   19288:	11000015 	stw	r4,0(r2)
   1928c:	29000117 	ldw	r4,4(r5)
   19290:	11000115 	stw	r4,4(r2)
   19294:	00000106 	br	1929c <_free_r+0xdc>
   19298:	11400115 	stw	r5,4(r2)
   1929c:	18800115 	stw	r2,4(r3)
   192a0:	f800283a 	ret

000192a4 <_malloc_r>:
   192a4:	defffb04 	addi	sp,sp,-20
   192a8:	00bfff04 	movi	r2,-4
   192ac:	dc400115 	stw	r17,4(sp)
   192b0:	2c4000c4 	addi	r17,r5,3
   192b4:	88a2703a 	and	r17,r17,r2
   192b8:	dc800215 	stw	r18,8(sp)
   192bc:	dfc00415 	stw	ra,16(sp)
   192c0:	dcc00315 	stw	r19,12(sp)
   192c4:	dc000015 	stw	r16,0(sp)
   192c8:	8c400204 	addi	r17,r17,8
   192cc:	00800304 	movi	r2,12
   192d0:	2025883a 	mov	r18,r4
   192d4:	8880022e 	bgeu	r17,r2,192e0 <_malloc_r+0x3c>
   192d8:	1023883a 	mov	r17,r2
   192dc:	00000506 	br	192f4 <_malloc_r+0x50>
   192e0:	8800040e 	bge	r17,zero,192f4 <_malloc_r+0x50>
   192e4:	00800304 	movi	r2,12
   192e8:	90800015 	stw	r2,0(r18)
   192ec:	0005883a 	mov	r2,zero
   192f0:	00003b06 	br	193e0 <_malloc_r+0x13c>
   192f4:	897ffb36 	bltu	r17,r5,192e4 <_gp+0xffff6f74>
   192f8:	008000b4 	movhi	r2,2
   192fc:	10a93304 	addi	r2,r2,-23348
   19300:	10c00017 	ldw	r3,0(r2)
   19304:	1009883a 	mov	r4,r2
   19308:	1821883a 	mov	r16,r3
   1930c:	80000926 	beq	r16,zero,19334 <_malloc_r+0x90>
   19310:	80800017 	ldw	r2,0(r16)
   19314:	1445c83a 	sub	r2,r2,r17
   19318:	10001516 	blt	r2,zero,19370 <_malloc_r+0xcc>
   1931c:	014002c4 	movi	r5,11
   19320:	28800d2e 	bgeu	r5,r2,19358 <_malloc_r+0xb4>
   19324:	80800015 	stw	r2,0(r16)
   19328:	80a1883a 	add	r16,r16,r2
   1932c:	84400015 	stw	r17,0(r16)
   19330:	8000221e 	bne	r16,zero,193bc <_malloc_r+0x118>
   19334:	040000b4 	movhi	r16,2
   19338:	84293204 	addi	r16,r16,-23352
   1933c:	80800017 	ldw	r2,0(r16)
   19340:	10000e1e 	bne	r2,zero,1937c <_malloc_r+0xd8>
   19344:	000b883a 	mov	r5,zero
   19348:	9009883a 	mov	r4,r18
   1934c:	00195180 	call	19518 <_sbrk_r>
   19350:	80800015 	stw	r2,0(r16)
   19354:	00000906 	br	1937c <_malloc_r+0xd8>
   19358:	80800117 	ldw	r2,4(r16)
   1935c:	1c00021e 	bne	r3,r16,19368 <_malloc_r+0xc4>
   19360:	20800015 	stw	r2,0(r4)
   19364:	00001506 	br	193bc <_malloc_r+0x118>
   19368:	18800115 	stw	r2,4(r3)
   1936c:	00001306 	br	193bc <_malloc_r+0x118>
   19370:	8007883a 	mov	r3,r16
   19374:	84000117 	ldw	r16,4(r16)
   19378:	003fe406 	br	1930c <_gp+0xffff6f9c>
   1937c:	880b883a 	mov	r5,r17
   19380:	9009883a 	mov	r4,r18
   19384:	00195180 	call	19518 <_sbrk_r>
   19388:	04ffffc4 	movi	r19,-1
   1938c:	14ffd526 	beq	r2,r19,192e4 <_gp+0xffff6f74>
   19390:	140000c4 	addi	r16,r2,3
   19394:	00ffff04 	movi	r3,-4
   19398:	80e0703a 	and	r16,r16,r3
   1939c:	1400021e 	bne	r2,r16,193a8 <_malloc_r+0x104>
   193a0:	84400015 	stw	r17,0(r16)
   193a4:	00000506 	br	193bc <_malloc_r+0x118>
   193a8:	808bc83a 	sub	r5,r16,r2
   193ac:	9009883a 	mov	r4,r18
   193b0:	00195180 	call	19518 <_sbrk_r>
   193b4:	14fffa1e 	bne	r2,r19,193a0 <_gp+0xffff7030>
   193b8:	003fca06 	br	192e4 <_gp+0xffff6f74>
   193bc:	810002c4 	addi	r4,r16,11
   193c0:	00bffe04 	movi	r2,-8
   193c4:	80c00104 	addi	r3,r16,4
   193c8:	2084703a 	and	r2,r4,r2
   193cc:	10c7c83a 	sub	r3,r2,r3
   193d0:	18000326 	beq	r3,zero,193e0 <_malloc_r+0x13c>
   193d4:	80e1883a 	add	r16,r16,r3
   193d8:	00c7c83a 	sub	r3,zero,r3
   193dc:	80c00015 	stw	r3,0(r16)
   193e0:	dfc00417 	ldw	ra,16(sp)
   193e4:	dcc00317 	ldw	r19,12(sp)
   193e8:	dc800217 	ldw	r18,8(sp)
   193ec:	dc400117 	ldw	r17,4(sp)
   193f0:	dc000017 	ldw	r16,0(sp)
   193f4:	dec00504 	addi	sp,sp,20
   193f8:	f800283a 	ret

000193fc <_printf_r>:
   193fc:	defffd04 	addi	sp,sp,-12
   19400:	dfc00015 	stw	ra,0(sp)
   19404:	d9800115 	stw	r6,4(sp)
   19408:	d9c00215 	stw	r7,8(sp)
   1940c:	20c00217 	ldw	r3,8(r4)
   19410:	018000b4 	movhi	r6,2
   19414:	31a6ce04 	addi	r6,r6,-25800
   19418:	19800115 	stw	r6,4(r3)
   1941c:	280d883a 	mov	r6,r5
   19420:	21400217 	ldw	r5,8(r4)
   19424:	d9c00104 	addi	r7,sp,4
   19428:	00195f00 	call	195f0 <___vfprintf_internal_r>
   1942c:	dfc00017 	ldw	ra,0(sp)
   19430:	dec00304 	addi	sp,sp,12
   19434:	f800283a 	ret

00019438 <printf>:
   19438:	defffc04 	addi	sp,sp,-16
   1943c:	dfc00015 	stw	ra,0(sp)
   19440:	d9400115 	stw	r5,4(sp)
   19444:	d9800215 	stw	r6,8(sp)
   19448:	d9c00315 	stw	r7,12(sp)
   1944c:	008000b4 	movhi	r2,2
   19450:	10a8dd04 	addi	r2,r2,-23692
   19454:	10800017 	ldw	r2,0(r2)
   19458:	014000b4 	movhi	r5,2
   1945c:	2966ce04 	addi	r5,r5,-25800
   19460:	10c00217 	ldw	r3,8(r2)
   19464:	d9800104 	addi	r6,sp,4
   19468:	19400115 	stw	r5,4(r3)
   1946c:	200b883a 	mov	r5,r4
   19470:	11000217 	ldw	r4,8(r2)
   19474:	0019b1c0 	call	19b1c <__vfprintf_internal>
   19478:	dfc00017 	ldw	ra,0(sp)
   1947c:	dec00404 	addi	sp,sp,16
   19480:	f800283a 	ret

00019484 <_puts_r>:
   19484:	defffd04 	addi	sp,sp,-12
   19488:	dc000015 	stw	r16,0(sp)
   1948c:	2021883a 	mov	r16,r4
   19490:	2809883a 	mov	r4,r5
   19494:	dfc00215 	stw	ra,8(sp)
   19498:	dc400115 	stw	r17,4(sp)
   1949c:	2823883a 	mov	r17,r5
   194a0:	00195680 	call	19568 <strlen>
   194a4:	81400217 	ldw	r5,8(r16)
   194a8:	010000b4 	movhi	r4,2
   194ac:	2126ce04 	addi	r4,r4,-25800
   194b0:	29000115 	stw	r4,4(r5)
   194b4:	100f883a 	mov	r7,r2
   194b8:	880d883a 	mov	r6,r17
   194bc:	8009883a 	mov	r4,r16
   194c0:	0019b380 	call	19b38 <__sfvwrite_small_dev>
   194c4:	00ffffc4 	movi	r3,-1
   194c8:	10c00926 	beq	r2,r3,194f0 <_puts_r+0x6c>
   194cc:	81400217 	ldw	r5,8(r16)
   194d0:	018000b4 	movhi	r6,2
   194d4:	01c00044 	movi	r7,1
   194d8:	28800117 	ldw	r2,4(r5)
   194dc:	31a89c04 	addi	r6,r6,-23952
   194e0:	8009883a 	mov	r4,r16
   194e4:	103ee83a 	callr	r2
   194e8:	10bfffe0 	cmpeqi	r2,r2,-1
   194ec:	0085c83a 	sub	r2,zero,r2
   194f0:	dfc00217 	ldw	ra,8(sp)
   194f4:	dc400117 	ldw	r17,4(sp)
   194f8:	dc000017 	ldw	r16,0(sp)
   194fc:	dec00304 	addi	sp,sp,12
   19500:	f800283a 	ret

00019504 <puts>:
   19504:	008000b4 	movhi	r2,2
   19508:	10a8dd04 	addi	r2,r2,-23692
   1950c:	200b883a 	mov	r5,r4
   19510:	11000017 	ldw	r4,0(r2)
   19514:	00194841 	jmpi	19484 <_puts_r>

00019518 <_sbrk_r>:
   19518:	defffd04 	addi	sp,sp,-12
   1951c:	dc000015 	stw	r16,0(sp)
   19520:	040000b4 	movhi	r16,2
   19524:	dc400115 	stw	r17,4(sp)
   19528:	84293404 	addi	r16,r16,-23344
   1952c:	2023883a 	mov	r17,r4
   19530:	2809883a 	mov	r4,r5
   19534:	dfc00215 	stw	ra,8(sp)
   19538:	80000015 	stw	zero,0(r16)
   1953c:	0019f080 	call	19f08 <sbrk>
   19540:	00ffffc4 	movi	r3,-1
   19544:	10c0031e 	bne	r2,r3,19554 <_sbrk_r+0x3c>
   19548:	80c00017 	ldw	r3,0(r16)
   1954c:	18000126 	beq	r3,zero,19554 <_sbrk_r+0x3c>
   19550:	88c00015 	stw	r3,0(r17)
   19554:	dfc00217 	ldw	ra,8(sp)
   19558:	dc400117 	ldw	r17,4(sp)
   1955c:	dc000017 	ldw	r16,0(sp)
   19560:	dec00304 	addi	sp,sp,12
   19564:	f800283a 	ret

00019568 <strlen>:
   19568:	2005883a 	mov	r2,r4
   1956c:	10c00007 	ldb	r3,0(r2)
   19570:	18000226 	beq	r3,zero,1957c <strlen+0x14>
   19574:	10800044 	addi	r2,r2,1
   19578:	003ffc06 	br	1956c <_gp+0xffff71fc>
   1957c:	1105c83a 	sub	r2,r2,r4
   19580:	f800283a 	ret

00019584 <print_repeat>:
   19584:	defffb04 	addi	sp,sp,-20
   19588:	dc800315 	stw	r18,12(sp)
   1958c:	dc400215 	stw	r17,8(sp)
   19590:	dc000115 	stw	r16,4(sp)
   19594:	dfc00415 	stw	ra,16(sp)
   19598:	2025883a 	mov	r18,r4
   1959c:	2823883a 	mov	r17,r5
   195a0:	d9800005 	stb	r6,0(sp)
   195a4:	3821883a 	mov	r16,r7
   195a8:	04000a0e 	bge	zero,r16,195d4 <print_repeat+0x50>
   195ac:	88800117 	ldw	r2,4(r17)
   195b0:	01c00044 	movi	r7,1
   195b4:	d80d883a 	mov	r6,sp
   195b8:	880b883a 	mov	r5,r17
   195bc:	9009883a 	mov	r4,r18
   195c0:	103ee83a 	callr	r2
   195c4:	843fffc4 	addi	r16,r16,-1
   195c8:	103ff726 	beq	r2,zero,195a8 <_gp+0xffff7238>
   195cc:	00bfffc4 	movi	r2,-1
   195d0:	00000106 	br	195d8 <print_repeat+0x54>
   195d4:	0005883a 	mov	r2,zero
   195d8:	dfc00417 	ldw	ra,16(sp)
   195dc:	dc800317 	ldw	r18,12(sp)
   195e0:	dc400217 	ldw	r17,8(sp)
   195e4:	dc000117 	ldw	r16,4(sp)
   195e8:	dec00504 	addi	sp,sp,20
   195ec:	f800283a 	ret

000195f0 <___vfprintf_internal_r>:
   195f0:	deffe504 	addi	sp,sp,-108
   195f4:	d8c00804 	addi	r3,sp,32
   195f8:	ddc01815 	stw	r23,96(sp)
   195fc:	dd801715 	stw	r22,92(sp)
   19600:	dd401615 	stw	r21,88(sp)
   19604:	dd001515 	stw	r20,84(sp)
   19608:	dcc01415 	stw	r19,80(sp)
   1960c:	dc801315 	stw	r18,76(sp)
   19610:	dc401215 	stw	r17,72(sp)
   19614:	dc001115 	stw	r16,68(sp)
   19618:	dfc01a15 	stw	ra,104(sp)
   1961c:	df001915 	stw	fp,100(sp)
   19620:	2029883a 	mov	r20,r4
   19624:	2823883a 	mov	r17,r5
   19628:	382d883a 	mov	r22,r7
   1962c:	d9800f15 	stw	r6,60(sp)
   19630:	0021883a 	mov	r16,zero
   19634:	d8000e15 	stw	zero,56(sp)
   19638:	d8000a15 	stw	zero,40(sp)
   1963c:	002b883a 	mov	r21,zero
   19640:	0027883a 	mov	r19,zero
   19644:	0025883a 	mov	r18,zero
   19648:	d8000c15 	stw	zero,48(sp)
   1964c:	d8000b15 	stw	zero,44(sp)
   19650:	002f883a 	mov	r23,zero
   19654:	d8c00915 	stw	r3,36(sp)
   19658:	d8c00f17 	ldw	r3,60(sp)
   1965c:	19000003 	ldbu	r4,0(r3)
   19660:	20803fcc 	andi	r2,r4,255
   19664:	1080201c 	xori	r2,r2,128
   19668:	10bfe004 	addi	r2,r2,-128
   1966c:	10011e26 	beq	r2,zero,19ae8 <___vfprintf_internal_r+0x4f8>
   19670:	00c00044 	movi	r3,1
   19674:	b8c01426 	beq	r23,r3,196c8 <___vfprintf_internal_r+0xd8>
   19678:	1dc00216 	blt	r3,r23,19684 <___vfprintf_internal_r+0x94>
   1967c:	b8000626 	beq	r23,zero,19698 <___vfprintf_internal_r+0xa8>
   19680:	00011506 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   19684:	01400084 	movi	r5,2
   19688:	b9401d26 	beq	r23,r5,19700 <___vfprintf_internal_r+0x110>
   1968c:	014000c4 	movi	r5,3
   19690:	b9402b26 	beq	r23,r5,19740 <___vfprintf_internal_r+0x150>
   19694:	00011006 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   19698:	01400944 	movi	r5,37
   1969c:	1140fc26 	beq	r2,r5,19a90 <___vfprintf_internal_r+0x4a0>
   196a0:	88800117 	ldw	r2,4(r17)
   196a4:	d9000005 	stb	r4,0(sp)
   196a8:	01c00044 	movi	r7,1
   196ac:	d80d883a 	mov	r6,sp
   196b0:	880b883a 	mov	r5,r17
   196b4:	a009883a 	mov	r4,r20
   196b8:	103ee83a 	callr	r2
   196bc:	1000d81e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   196c0:	84000044 	addi	r16,r16,1
   196c4:	00010406 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   196c8:	01400c04 	movi	r5,48
   196cc:	1140fa26 	beq	r2,r5,19ab8 <___vfprintf_internal_r+0x4c8>
   196d0:	01400944 	movi	r5,37
   196d4:	11400a1e 	bne	r2,r5,19700 <___vfprintf_internal_r+0x110>
   196d8:	d8800005 	stb	r2,0(sp)
   196dc:	88800117 	ldw	r2,4(r17)
   196e0:	b80f883a 	mov	r7,r23
   196e4:	d80d883a 	mov	r6,sp
   196e8:	880b883a 	mov	r5,r17
   196ec:	a009883a 	mov	r4,r20
   196f0:	103ee83a 	callr	r2
   196f4:	1000ca1e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   196f8:	84000044 	addi	r16,r16,1
   196fc:	0000f506 	br	19ad4 <___vfprintf_internal_r+0x4e4>
   19700:	25fff404 	addi	r23,r4,-48
   19704:	bdc03fcc 	andi	r23,r23,255
   19708:	00c00244 	movi	r3,9
   1970c:	1dc00936 	bltu	r3,r23,19734 <___vfprintf_internal_r+0x144>
   19710:	00bfffc4 	movi	r2,-1
   19714:	90800426 	beq	r18,r2,19728 <___vfprintf_internal_r+0x138>
   19718:	01400284 	movi	r5,10
   1971c:	9009883a 	mov	r4,r18
   19720:	00191280 	call	19128 <__mulsi3>
   19724:	00000106 	br	1972c <___vfprintf_internal_r+0x13c>
   19728:	0005883a 	mov	r2,zero
   1972c:	b8a5883a 	add	r18,r23,r2
   19730:	0000e206 	br	19abc <___vfprintf_internal_r+0x4cc>
   19734:	01400b84 	movi	r5,46
   19738:	1140e426 	beq	r2,r5,19acc <___vfprintf_internal_r+0x4dc>
   1973c:	05c00084 	movi	r23,2
   19740:	213ff404 	addi	r4,r4,-48
   19744:	27003fcc 	andi	fp,r4,255
   19748:	00c00244 	movi	r3,9
   1974c:	1f000936 	bltu	r3,fp,19774 <___vfprintf_internal_r+0x184>
   19750:	00bfffc4 	movi	r2,-1
   19754:	98800426 	beq	r19,r2,19768 <___vfprintf_internal_r+0x178>
   19758:	01400284 	movi	r5,10
   1975c:	9809883a 	mov	r4,r19
   19760:	00191280 	call	19128 <__mulsi3>
   19764:	00000106 	br	1976c <___vfprintf_internal_r+0x17c>
   19768:	0005883a 	mov	r2,zero
   1976c:	e0a7883a 	add	r19,fp,r2
   19770:	0000d906 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   19774:	00c01b04 	movi	r3,108
   19778:	10c0d226 	beq	r2,r3,19ac4 <___vfprintf_internal_r+0x4d4>
   1977c:	013fffc4 	movi	r4,-1
   19780:	99000226 	beq	r19,r4,1978c <___vfprintf_internal_r+0x19c>
   19784:	d8000b15 	stw	zero,44(sp)
   19788:	00000106 	br	19790 <___vfprintf_internal_r+0x1a0>
   1978c:	04c00044 	movi	r19,1
   19790:	01001a44 	movi	r4,105
   19794:	11001626 	beq	r2,r4,197f0 <___vfprintf_internal_r+0x200>
   19798:	20800916 	blt	r4,r2,197c0 <___vfprintf_internal_r+0x1d0>
   1979c:	010018c4 	movi	r4,99
   197a0:	11008826 	beq	r2,r4,199c4 <___vfprintf_internal_r+0x3d4>
   197a4:	01001904 	movi	r4,100
   197a8:	11001126 	beq	r2,r4,197f0 <___vfprintf_internal_r+0x200>
   197ac:	01001604 	movi	r4,88
   197b0:	1100c81e 	bne	r2,r4,19ad4 <___vfprintf_internal_r+0x4e4>
   197b4:	00c00044 	movi	r3,1
   197b8:	d8c00e15 	stw	r3,56(sp)
   197bc:	00001506 	br	19814 <___vfprintf_internal_r+0x224>
   197c0:	01001cc4 	movi	r4,115
   197c4:	11009826 	beq	r2,r4,19a28 <___vfprintf_internal_r+0x438>
   197c8:	20800416 	blt	r4,r2,197dc <___vfprintf_internal_r+0x1ec>
   197cc:	01001bc4 	movi	r4,111
   197d0:	1100c01e 	bne	r2,r4,19ad4 <___vfprintf_internal_r+0x4e4>
   197d4:	05400204 	movi	r21,8
   197d8:	00000f06 	br	19818 <___vfprintf_internal_r+0x228>
   197dc:	01001d44 	movi	r4,117
   197e0:	11000d26 	beq	r2,r4,19818 <___vfprintf_internal_r+0x228>
   197e4:	01001e04 	movi	r4,120
   197e8:	11000a26 	beq	r2,r4,19814 <___vfprintf_internal_r+0x224>
   197ec:	0000b906 	br	19ad4 <___vfprintf_internal_r+0x4e4>
   197f0:	d8c00a17 	ldw	r3,40(sp)
   197f4:	b7000104 	addi	fp,r22,4
   197f8:	18000726 	beq	r3,zero,19818 <___vfprintf_internal_r+0x228>
   197fc:	df000d15 	stw	fp,52(sp)
   19800:	b5c00017 	ldw	r23,0(r22)
   19804:	b800080e 	bge	r23,zero,19828 <___vfprintf_internal_r+0x238>
   19808:	05efc83a 	sub	r23,zero,r23
   1980c:	02400044 	movi	r9,1
   19810:	00000606 	br	1982c <___vfprintf_internal_r+0x23c>
   19814:	05400404 	movi	r21,16
   19818:	b0c00104 	addi	r3,r22,4
   1981c:	d8c00d15 	stw	r3,52(sp)
   19820:	b5c00017 	ldw	r23,0(r22)
   19824:	d8000a15 	stw	zero,40(sp)
   19828:	0013883a 	mov	r9,zero
   1982c:	d839883a 	mov	fp,sp
   19830:	b8001726 	beq	r23,zero,19890 <___vfprintf_internal_r+0x2a0>
   19834:	a80b883a 	mov	r5,r21
   19838:	b809883a 	mov	r4,r23
   1983c:	da401015 	stw	r9,64(sp)
   19840:	0019d400 	call	19d40 <__udivsi3>
   19844:	a80b883a 	mov	r5,r21
   19848:	1009883a 	mov	r4,r2
   1984c:	102d883a 	mov	r22,r2
   19850:	00191280 	call	19128 <__mulsi3>
   19854:	b885c83a 	sub	r2,r23,r2
   19858:	00c00244 	movi	r3,9
   1985c:	da401017 	ldw	r9,64(sp)
   19860:	18800216 	blt	r3,r2,1986c <___vfprintf_internal_r+0x27c>
   19864:	10800c04 	addi	r2,r2,48
   19868:	00000506 	br	19880 <___vfprintf_internal_r+0x290>
   1986c:	d8c00e17 	ldw	r3,56(sp)
   19870:	18000226 	beq	r3,zero,1987c <___vfprintf_internal_r+0x28c>
   19874:	10800dc4 	addi	r2,r2,55
   19878:	00000106 	br	19880 <___vfprintf_internal_r+0x290>
   1987c:	108015c4 	addi	r2,r2,87
   19880:	e0800005 	stb	r2,0(fp)
   19884:	b02f883a 	mov	r23,r22
   19888:	e7000044 	addi	fp,fp,1
   1988c:	003fe806 	br	19830 <_gp+0xffff74c0>
   19890:	e6efc83a 	sub	r23,fp,sp
   19894:	9dc5c83a 	sub	r2,r19,r23
   19898:	0080090e 	bge	zero,r2,198c0 <___vfprintf_internal_r+0x2d0>
   1989c:	e085883a 	add	r2,fp,r2
   198a0:	01400c04 	movi	r5,48
   198a4:	d8c00917 	ldw	r3,36(sp)
   198a8:	e009883a 	mov	r4,fp
   198ac:	e0c0032e 	bgeu	fp,r3,198bc <___vfprintf_internal_r+0x2cc>
   198b0:	e7000044 	addi	fp,fp,1
   198b4:	21400005 	stb	r5,0(r4)
   198b8:	e0bffa1e 	bne	fp,r2,198a4 <_gp+0xffff7534>
   198bc:	e6efc83a 	sub	r23,fp,sp
   198c0:	d8c00b17 	ldw	r3,44(sp)
   198c4:	4dd1883a 	add	r8,r9,r23
   198c8:	922dc83a 	sub	r22,r18,r8
   198cc:	18001626 	beq	r3,zero,19928 <___vfprintf_internal_r+0x338>
   198d0:	48000a26 	beq	r9,zero,198fc <___vfprintf_internal_r+0x30c>
   198d4:	00800b44 	movi	r2,45
   198d8:	d8800805 	stb	r2,32(sp)
   198dc:	88800117 	ldw	r2,4(r17)
   198e0:	01c00044 	movi	r7,1
   198e4:	d9800804 	addi	r6,sp,32
   198e8:	880b883a 	mov	r5,r17
   198ec:	a009883a 	mov	r4,r20
   198f0:	103ee83a 	callr	r2
   198f4:	10004a1e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   198f8:	84000044 	addi	r16,r16,1
   198fc:	0580070e 	bge	zero,r22,1991c <___vfprintf_internal_r+0x32c>
   19900:	b00f883a 	mov	r7,r22
   19904:	01800c04 	movi	r6,48
   19908:	880b883a 	mov	r5,r17
   1990c:	a009883a 	mov	r4,r20
   19910:	00195840 	call	19584 <print_repeat>
   19914:	1000421e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   19918:	85a1883a 	add	r16,r16,r22
   1991c:	e02d883a 	mov	r22,fp
   19920:	bf2fc83a 	sub	r23,r23,fp
   19924:	00002006 	br	199a8 <___vfprintf_internal_r+0x3b8>
   19928:	0580090e 	bge	zero,r22,19950 <___vfprintf_internal_r+0x360>
   1992c:	b00f883a 	mov	r7,r22
   19930:	01800804 	movi	r6,32
   19934:	880b883a 	mov	r5,r17
   19938:	a009883a 	mov	r4,r20
   1993c:	da401015 	stw	r9,64(sp)
   19940:	00195840 	call	19584 <print_repeat>
   19944:	da401017 	ldw	r9,64(sp)
   19948:	1000351e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   1994c:	85a1883a 	add	r16,r16,r22
   19950:	483ff226 	beq	r9,zero,1991c <_gp+0xffff75ac>
   19954:	00800b44 	movi	r2,45
   19958:	d8800805 	stb	r2,32(sp)
   1995c:	88800117 	ldw	r2,4(r17)
   19960:	01c00044 	movi	r7,1
   19964:	d9800804 	addi	r6,sp,32
   19968:	880b883a 	mov	r5,r17
   1996c:	a009883a 	mov	r4,r20
   19970:	103ee83a 	callr	r2
   19974:	10002a1e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   19978:	84000044 	addi	r16,r16,1
   1997c:	003fe706 	br	1991c <_gp+0xffff75ac>
   19980:	b5bfffc4 	addi	r22,r22,-1
   19984:	b0800003 	ldbu	r2,0(r22)
   19988:	01c00044 	movi	r7,1
   1998c:	d9800804 	addi	r6,sp,32
   19990:	d8800805 	stb	r2,32(sp)
   19994:	88800117 	ldw	r2,4(r17)
   19998:	880b883a 	mov	r5,r17
   1999c:	a009883a 	mov	r4,r20
   199a0:	103ee83a 	callr	r2
   199a4:	10001e1e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   199a8:	8585c83a 	sub	r2,r16,r22
   199ac:	b5c9883a 	add	r4,r22,r23
   199b0:	e085883a 	add	r2,fp,r2
   199b4:	013ff216 	blt	zero,r4,19980 <_gp+0xffff7610>
   199b8:	1021883a 	mov	r16,r2
   199bc:	dd800d17 	ldw	r22,52(sp)
   199c0:	00004406 	br	19ad4 <___vfprintf_internal_r+0x4e4>
   199c4:	00800044 	movi	r2,1
   199c8:	1480080e 	bge	r2,r18,199ec <___vfprintf_internal_r+0x3fc>
   199cc:	95ffffc4 	addi	r23,r18,-1
   199d0:	b80f883a 	mov	r7,r23
   199d4:	01800804 	movi	r6,32
   199d8:	880b883a 	mov	r5,r17
   199dc:	a009883a 	mov	r4,r20
   199e0:	00195840 	call	19584 <print_repeat>
   199e4:	10000e1e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   199e8:	85e1883a 	add	r16,r16,r23
   199ec:	b0800017 	ldw	r2,0(r22)
   199f0:	01c00044 	movi	r7,1
   199f4:	d80d883a 	mov	r6,sp
   199f8:	d8800005 	stb	r2,0(sp)
   199fc:	88800117 	ldw	r2,4(r17)
   19a00:	880b883a 	mov	r5,r17
   19a04:	a009883a 	mov	r4,r20
   19a08:	b5c00104 	addi	r23,r22,4
   19a0c:	103ee83a 	callr	r2
   19a10:	1000031e 	bne	r2,zero,19a20 <___vfprintf_internal_r+0x430>
   19a14:	84000044 	addi	r16,r16,1
   19a18:	b82d883a 	mov	r22,r23
   19a1c:	00002d06 	br	19ad4 <___vfprintf_internal_r+0x4e4>
   19a20:	00bfffc4 	movi	r2,-1
   19a24:	00003106 	br	19aec <___vfprintf_internal_r+0x4fc>
   19a28:	b5c00017 	ldw	r23,0(r22)
   19a2c:	b7000104 	addi	fp,r22,4
   19a30:	b809883a 	mov	r4,r23
   19a34:	00195680 	call	19568 <strlen>
   19a38:	9091c83a 	sub	r8,r18,r2
   19a3c:	102d883a 	mov	r22,r2
   19a40:	0200090e 	bge	zero,r8,19a68 <___vfprintf_internal_r+0x478>
   19a44:	400f883a 	mov	r7,r8
   19a48:	01800804 	movi	r6,32
   19a4c:	880b883a 	mov	r5,r17
   19a50:	a009883a 	mov	r4,r20
   19a54:	da001015 	stw	r8,64(sp)
   19a58:	00195840 	call	19584 <print_repeat>
   19a5c:	da001017 	ldw	r8,64(sp)
   19a60:	103fef1e 	bne	r2,zero,19a20 <_gp+0xffff76b0>
   19a64:	8221883a 	add	r16,r16,r8
   19a68:	88800117 	ldw	r2,4(r17)
   19a6c:	b00f883a 	mov	r7,r22
   19a70:	b80d883a 	mov	r6,r23
   19a74:	880b883a 	mov	r5,r17
   19a78:	a009883a 	mov	r4,r20
   19a7c:	103ee83a 	callr	r2
   19a80:	103fe71e 	bne	r2,zero,19a20 <_gp+0xffff76b0>
   19a84:	85a1883a 	add	r16,r16,r22
   19a88:	e02d883a 	mov	r22,fp
   19a8c:	00001106 	br	19ad4 <___vfprintf_internal_r+0x4e4>
   19a90:	00c00044 	movi	r3,1
   19a94:	04ffffc4 	movi	r19,-1
   19a98:	d8000e15 	stw	zero,56(sp)
   19a9c:	d8c00a15 	stw	r3,40(sp)
   19aa0:	05400284 	movi	r21,10
   19aa4:	9825883a 	mov	r18,r19
   19aa8:	d8000c15 	stw	zero,48(sp)
   19aac:	d8000b15 	stw	zero,44(sp)
   19ab0:	182f883a 	mov	r23,r3
   19ab4:	00000806 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   19ab8:	ddc00b15 	stw	r23,44(sp)
   19abc:	05c00084 	movi	r23,2
   19ac0:	00000506 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   19ac4:	00c00044 	movi	r3,1
   19ac8:	d8c00c15 	stw	r3,48(sp)
   19acc:	05c000c4 	movi	r23,3
   19ad0:	00000106 	br	19ad8 <___vfprintf_internal_r+0x4e8>
   19ad4:	002f883a 	mov	r23,zero
   19ad8:	d8c00f17 	ldw	r3,60(sp)
   19adc:	18c00044 	addi	r3,r3,1
   19ae0:	d8c00f15 	stw	r3,60(sp)
   19ae4:	003edc06 	br	19658 <_gp+0xffff72e8>
   19ae8:	8005883a 	mov	r2,r16
   19aec:	dfc01a17 	ldw	ra,104(sp)
   19af0:	df001917 	ldw	fp,100(sp)
   19af4:	ddc01817 	ldw	r23,96(sp)
   19af8:	dd801717 	ldw	r22,92(sp)
   19afc:	dd401617 	ldw	r21,88(sp)
   19b00:	dd001517 	ldw	r20,84(sp)
   19b04:	dcc01417 	ldw	r19,80(sp)
   19b08:	dc801317 	ldw	r18,76(sp)
   19b0c:	dc401217 	ldw	r17,72(sp)
   19b10:	dc001117 	ldw	r16,68(sp)
   19b14:	dec01b04 	addi	sp,sp,108
   19b18:	f800283a 	ret

00019b1c <__vfprintf_internal>:
   19b1c:	008000b4 	movhi	r2,2
   19b20:	10a8dd04 	addi	r2,r2,-23692
   19b24:	300f883a 	mov	r7,r6
   19b28:	280d883a 	mov	r6,r5
   19b2c:	200b883a 	mov	r5,r4
   19b30:	11000017 	ldw	r4,0(r2)
   19b34:	00195f01 	jmpi	195f0 <___vfprintf_internal_r>

00019b38 <__sfvwrite_small_dev>:
   19b38:	2880000b 	ldhu	r2,0(r5)
   19b3c:	1080020c 	andi	r2,r2,8
   19b40:	10002126 	beq	r2,zero,19bc8 <__sfvwrite_small_dev+0x90>
   19b44:	2880008f 	ldh	r2,2(r5)
   19b48:	defffa04 	addi	sp,sp,-24
   19b4c:	dc000015 	stw	r16,0(sp)
   19b50:	dfc00515 	stw	ra,20(sp)
   19b54:	dd000415 	stw	r20,16(sp)
   19b58:	dcc00315 	stw	r19,12(sp)
   19b5c:	dc800215 	stw	r18,8(sp)
   19b60:	dc400115 	stw	r17,4(sp)
   19b64:	2821883a 	mov	r16,r5
   19b68:	10001216 	blt	r2,zero,19bb4 <__sfvwrite_small_dev+0x7c>
   19b6c:	2027883a 	mov	r19,r4
   19b70:	3025883a 	mov	r18,r6
   19b74:	3823883a 	mov	r17,r7
   19b78:	05010004 	movi	r20,1024
   19b7c:	04400b0e 	bge	zero,r17,19bac <__sfvwrite_small_dev+0x74>
   19b80:	880f883a 	mov	r7,r17
   19b84:	a440010e 	bge	r20,r17,19b8c <__sfvwrite_small_dev+0x54>
   19b88:	01c10004 	movi	r7,1024
   19b8c:	8140008f 	ldh	r5,2(r16)
   19b90:	900d883a 	mov	r6,r18
   19b94:	9809883a 	mov	r4,r19
   19b98:	0019bf00 	call	19bf0 <_write_r>
   19b9c:	0080050e 	bge	zero,r2,19bb4 <__sfvwrite_small_dev+0x7c>
   19ba0:	88a3c83a 	sub	r17,r17,r2
   19ba4:	90a5883a 	add	r18,r18,r2
   19ba8:	003ff406 	br	19b7c <_gp+0xffff780c>
   19bac:	0005883a 	mov	r2,zero
   19bb0:	00000706 	br	19bd0 <__sfvwrite_small_dev+0x98>
   19bb4:	8080000b 	ldhu	r2,0(r16)
   19bb8:	10801014 	ori	r2,r2,64
   19bbc:	8080000d 	sth	r2,0(r16)
   19bc0:	00bfffc4 	movi	r2,-1
   19bc4:	00000206 	br	19bd0 <__sfvwrite_small_dev+0x98>
   19bc8:	00bfffc4 	movi	r2,-1
   19bcc:	f800283a 	ret
   19bd0:	dfc00517 	ldw	ra,20(sp)
   19bd4:	dd000417 	ldw	r20,16(sp)
   19bd8:	dcc00317 	ldw	r19,12(sp)
   19bdc:	dc800217 	ldw	r18,8(sp)
   19be0:	dc400117 	ldw	r17,4(sp)
   19be4:	dc000017 	ldw	r16,0(sp)
   19be8:	dec00604 	addi	sp,sp,24
   19bec:	f800283a 	ret

00019bf0 <_write_r>:
   19bf0:	defffd04 	addi	sp,sp,-12
   19bf4:	dc000015 	stw	r16,0(sp)
   19bf8:	040000b4 	movhi	r16,2
   19bfc:	dc400115 	stw	r17,4(sp)
   19c00:	84293404 	addi	r16,r16,-23344
   19c04:	2023883a 	mov	r17,r4
   19c08:	2809883a 	mov	r4,r5
   19c0c:	300b883a 	mov	r5,r6
   19c10:	380d883a 	mov	r6,r7
   19c14:	dfc00215 	stw	ra,8(sp)
   19c18:	80000015 	stw	zero,0(r16)
   19c1c:	0019f540 	call	19f54 <write>
   19c20:	00ffffc4 	movi	r3,-1
   19c24:	10c0031e 	bne	r2,r3,19c34 <_write_r+0x44>
   19c28:	80c00017 	ldw	r3,0(r16)
   19c2c:	18000126 	beq	r3,zero,19c34 <_write_r+0x44>
   19c30:	88c00015 	stw	r3,0(r17)
   19c34:	dfc00217 	ldw	ra,8(sp)
   19c38:	dc400117 	ldw	r17,4(sp)
   19c3c:	dc000017 	ldw	r16,0(sp)
   19c40:	dec00304 	addi	sp,sp,12
   19c44:	f800283a 	ret

00019c48 <__divsi3>:
   19c48:	20001b16 	blt	r4,zero,19cb8 <__divsi3+0x70>
   19c4c:	000f883a 	mov	r7,zero
   19c50:	28001616 	blt	r5,zero,19cac <__divsi3+0x64>
   19c54:	200d883a 	mov	r6,r4
   19c58:	29001a2e 	bgeu	r5,r4,19cc4 <__divsi3+0x7c>
   19c5c:	00800804 	movi	r2,32
   19c60:	00c00044 	movi	r3,1
   19c64:	00000106 	br	19c6c <__divsi3+0x24>
   19c68:	10000d26 	beq	r2,zero,19ca0 <__divsi3+0x58>
   19c6c:	294b883a 	add	r5,r5,r5
   19c70:	10bfffc4 	addi	r2,r2,-1
   19c74:	18c7883a 	add	r3,r3,r3
   19c78:	293ffb36 	bltu	r5,r4,19c68 <_gp+0xffff78f8>
   19c7c:	0005883a 	mov	r2,zero
   19c80:	18000726 	beq	r3,zero,19ca0 <__divsi3+0x58>
   19c84:	0005883a 	mov	r2,zero
   19c88:	31400236 	bltu	r6,r5,19c94 <__divsi3+0x4c>
   19c8c:	314dc83a 	sub	r6,r6,r5
   19c90:	10c4b03a 	or	r2,r2,r3
   19c94:	1806d07a 	srli	r3,r3,1
   19c98:	280ad07a 	srli	r5,r5,1
   19c9c:	183ffa1e 	bne	r3,zero,19c88 <_gp+0xffff7918>
   19ca0:	38000126 	beq	r7,zero,19ca8 <__divsi3+0x60>
   19ca4:	0085c83a 	sub	r2,zero,r2
   19ca8:	f800283a 	ret
   19cac:	014bc83a 	sub	r5,zero,r5
   19cb0:	39c0005c 	xori	r7,r7,1
   19cb4:	003fe706 	br	19c54 <_gp+0xffff78e4>
   19cb8:	0109c83a 	sub	r4,zero,r4
   19cbc:	01c00044 	movi	r7,1
   19cc0:	003fe306 	br	19c50 <_gp+0xffff78e0>
   19cc4:	00c00044 	movi	r3,1
   19cc8:	003fee06 	br	19c84 <_gp+0xffff7914>

00019ccc <__modsi3>:
   19ccc:	20001716 	blt	r4,zero,19d2c <__modsi3+0x60>
   19cd0:	000f883a 	mov	r7,zero
   19cd4:	2005883a 	mov	r2,r4
   19cd8:	28001216 	blt	r5,zero,19d24 <__modsi3+0x58>
   19cdc:	2900162e 	bgeu	r5,r4,19d38 <__modsi3+0x6c>
   19ce0:	01800804 	movi	r6,32
   19ce4:	00c00044 	movi	r3,1
   19ce8:	00000106 	br	19cf0 <__modsi3+0x24>
   19cec:	30000a26 	beq	r6,zero,19d18 <__modsi3+0x4c>
   19cf0:	294b883a 	add	r5,r5,r5
   19cf4:	31bfffc4 	addi	r6,r6,-1
   19cf8:	18c7883a 	add	r3,r3,r3
   19cfc:	293ffb36 	bltu	r5,r4,19cec <_gp+0xffff797c>
   19d00:	18000526 	beq	r3,zero,19d18 <__modsi3+0x4c>
   19d04:	1806d07a 	srli	r3,r3,1
   19d08:	11400136 	bltu	r2,r5,19d10 <__modsi3+0x44>
   19d0c:	1145c83a 	sub	r2,r2,r5
   19d10:	280ad07a 	srli	r5,r5,1
   19d14:	183ffb1e 	bne	r3,zero,19d04 <_gp+0xffff7994>
   19d18:	38000126 	beq	r7,zero,19d20 <__modsi3+0x54>
   19d1c:	0085c83a 	sub	r2,zero,r2
   19d20:	f800283a 	ret
   19d24:	014bc83a 	sub	r5,zero,r5
   19d28:	003fec06 	br	19cdc <_gp+0xffff796c>
   19d2c:	0109c83a 	sub	r4,zero,r4
   19d30:	01c00044 	movi	r7,1
   19d34:	003fe706 	br	19cd4 <_gp+0xffff7964>
   19d38:	00c00044 	movi	r3,1
   19d3c:	003ff106 	br	19d04 <_gp+0xffff7994>

00019d40 <__udivsi3>:
   19d40:	200d883a 	mov	r6,r4
   19d44:	2900152e 	bgeu	r5,r4,19d9c <__udivsi3+0x5c>
   19d48:	28001416 	blt	r5,zero,19d9c <__udivsi3+0x5c>
   19d4c:	00800804 	movi	r2,32
   19d50:	00c00044 	movi	r3,1
   19d54:	00000206 	br	19d60 <__udivsi3+0x20>
   19d58:	10000e26 	beq	r2,zero,19d94 <__udivsi3+0x54>
   19d5c:	28000516 	blt	r5,zero,19d74 <__udivsi3+0x34>
   19d60:	294b883a 	add	r5,r5,r5
   19d64:	10bfffc4 	addi	r2,r2,-1
   19d68:	18c7883a 	add	r3,r3,r3
   19d6c:	293ffa36 	bltu	r5,r4,19d58 <_gp+0xffff79e8>
   19d70:	18000826 	beq	r3,zero,19d94 <__udivsi3+0x54>
   19d74:	0005883a 	mov	r2,zero
   19d78:	31400236 	bltu	r6,r5,19d84 <__udivsi3+0x44>
   19d7c:	314dc83a 	sub	r6,r6,r5
   19d80:	10c4b03a 	or	r2,r2,r3
   19d84:	1806d07a 	srli	r3,r3,1
   19d88:	280ad07a 	srli	r5,r5,1
   19d8c:	183ffa1e 	bne	r3,zero,19d78 <_gp+0xffff7a08>
   19d90:	f800283a 	ret
   19d94:	0005883a 	mov	r2,zero
   19d98:	f800283a 	ret
   19d9c:	00c00044 	movi	r3,1
   19da0:	003ff406 	br	19d74 <_gp+0xffff7a04>

00019da4 <__umodsi3>:
   19da4:	2005883a 	mov	r2,r4
   19da8:	2900122e 	bgeu	r5,r4,19df4 <__umodsi3+0x50>
   19dac:	28001116 	blt	r5,zero,19df4 <__umodsi3+0x50>
   19db0:	01800804 	movi	r6,32
   19db4:	00c00044 	movi	r3,1
   19db8:	00000206 	br	19dc4 <__umodsi3+0x20>
   19dbc:	30000c26 	beq	r6,zero,19df0 <__umodsi3+0x4c>
   19dc0:	28000516 	blt	r5,zero,19dd8 <__umodsi3+0x34>
   19dc4:	294b883a 	add	r5,r5,r5
   19dc8:	31bfffc4 	addi	r6,r6,-1
   19dcc:	18c7883a 	add	r3,r3,r3
   19dd0:	293ffa36 	bltu	r5,r4,19dbc <_gp+0xffff7a4c>
   19dd4:	18000626 	beq	r3,zero,19df0 <__umodsi3+0x4c>
   19dd8:	1806d07a 	srli	r3,r3,1
   19ddc:	11400136 	bltu	r2,r5,19de4 <__umodsi3+0x40>
   19de0:	1145c83a 	sub	r2,r2,r5
   19de4:	280ad07a 	srli	r5,r5,1
   19de8:	183ffb1e 	bne	r3,zero,19dd8 <_gp+0xffff7a68>
   19dec:	f800283a 	ret
   19df0:	f800283a 	ret
   19df4:	00c00044 	movi	r3,1
   19df8:	003ff706 	br	19dd8 <_gp+0xffff7a68>

00019dfc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19dfc:	deffff04 	addi	sp,sp,-4
   19e00:	010000b4 	movhi	r4,2
   19e04:	014000b4 	movhi	r5,2
   19e08:	dfc00015 	stw	ra,0(sp)
   19e0c:	2128a404 	addi	r4,r4,-23920
   19e10:	2968e104 	addi	r5,r5,-23676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19e14:	2140061e 	bne	r4,r5,19e30 <alt_load+0x34>
   19e18:	010000b4 	movhi	r4,2
   19e1c:	014000b4 	movhi	r5,2
   19e20:	21200804 	addi	r4,r4,-32736
   19e24:	29600804 	addi	r5,r5,-32736
   19e28:	2140121e 	bne	r4,r5,19e74 <alt_load+0x78>
   19e2c:	00000b06 	br	19e5c <alt_load+0x60>
   19e30:	00c000b4 	movhi	r3,2
   19e34:	18e8e104 	addi	r3,r3,-23676
   19e38:	1907c83a 	sub	r3,r3,r4
   19e3c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19e40:	10fff526 	beq	r2,r3,19e18 <_gp+0xffff7aa8>
    {
      *to++ = *from++;
   19e44:	114f883a 	add	r7,r2,r5
   19e48:	39c00017 	ldw	r7,0(r7)
   19e4c:	110d883a 	add	r6,r2,r4
   19e50:	10800104 	addi	r2,r2,4
   19e54:	31c00015 	stw	r7,0(r6)
   19e58:	003ff906 	br	19e40 <_gp+0xffff7ad0>
   19e5c:	010000b4 	movhi	r4,2
   19e60:	014000b4 	movhi	r5,2
   19e64:	21287b04 	addi	r4,r4,-24084
   19e68:	29687b04 	addi	r5,r5,-24084

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19e6c:	2140101e 	bne	r4,r5,19eb0 <alt_load+0xb4>
   19e70:	00000b06 	br	19ea0 <alt_load+0xa4>
   19e74:	00c000b4 	movhi	r3,2
   19e78:	18e00804 	addi	r3,r3,-32736
   19e7c:	1907c83a 	sub	r3,r3,r4
   19e80:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19e84:	10fff526 	beq	r2,r3,19e5c <_gp+0xffff7aec>
    {
      *to++ = *from++;
   19e88:	114f883a 	add	r7,r2,r5
   19e8c:	39c00017 	ldw	r7,0(r7)
   19e90:	110d883a 	add	r6,r2,r4
   19e94:	10800104 	addi	r2,r2,4
   19e98:	31c00015 	stw	r7,0(r6)
   19e9c:	003ff906 	br	19e84 <_gp+0xffff7b14>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   19ea0:	001a1dc0 	call	1a1dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   19ea4:	dfc00017 	ldw	ra,0(sp)
   19ea8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   19eac:	001a1e01 	jmpi	1a1e0 <alt_icache_flush_all>
   19eb0:	00c000b4 	movhi	r3,2
   19eb4:	18e8a404 	addi	r3,r3,-23920
   19eb8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   19ebc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   19ec0:	18bff726 	beq	r3,r2,19ea0 <_gp+0xffff7b30>
    {
      *to++ = *from++;
   19ec4:	114f883a 	add	r7,r2,r5
   19ec8:	39c00017 	ldw	r7,0(r7)
   19ecc:	110d883a 	add	r6,r2,r4
   19ed0:	10800104 	addi	r2,r2,4
   19ed4:	31c00015 	stw	r7,0(r6)
   19ed8:	003ff906 	br	19ec0 <_gp+0xffff7b50>

00019edc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19edc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19ee0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19ee4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19ee8:	0019fb40 	call	19fb4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   19eec:	0019fd40 	call	19fd4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   19ef0:	d1a05917 	ldw	r6,-32412(gp)
   19ef4:	d1605a17 	ldw	r5,-32408(gp)
   19ef8:	d1205b17 	ldw	r4,-32404(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   19efc:	dfc00017 	ldw	ra,0(sp)
   19f00:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   19f04:	00187281 	jmpi	18728 <main>

00019f08 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f08:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f0c:	00bfff84 	movi	r2,-2
   19f10:	2884703a 	and	r2,r5,r2
   19f14:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19f18:	d0a00217 	ldw	r2,-32760(gp)
   19f1c:	00ffff04 	movi	r3,-4
   19f20:	108000c4 	addi	r2,r2,3
   19f24:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19f28:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19f2c:	d0a00215 	stw	r2,-32760(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19f30:	1109883a 	add	r4,r2,r4
   19f34:	18f80004 	addi	r3,r3,-8192
   19f38:	1900032e 	bgeu	r3,r4,19f48 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f3c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   19f40:	00bfffc4 	movi	r2,-1
   19f44:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   19f48:	d1200215 	stw	r4,-32760(gp)
   19f4c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   19f50:	f800283a 	ret

00019f54 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   19f54:	00800044 	movi	r2,1
   19f58:	20800226 	beq	r4,r2,19f64 <write+0x10>
   19f5c:	00800084 	movi	r2,2
   19f60:	2080041e 	bne	r4,r2,19f74 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   19f64:	010000b4 	movhi	r4,2
   19f68:	000f883a 	mov	r7,zero
   19f6c:	2128df04 	addi	r4,r4,-23684
   19f70:	001a1a81 	jmpi	1a1a8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   19f74:	d0a00417 	ldw	r2,-32752(gp)
   19f78:	10000926 	beq	r2,zero,19fa0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   19f7c:	deffff04 	addi	sp,sp,-4
   19f80:	dfc00015 	stw	ra,0(sp)
   19f84:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   19f88:	00c01444 	movi	r3,81
   19f8c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19f90:	00bfffc4 	movi	r2,-1
   19f94:	dfc00017 	ldw	ra,0(sp)
   19f98:	dec00104 	addi	sp,sp,4
   19f9c:	f800283a 	ret
   19fa0:	d0a05804 	addi	r2,gp,-32416
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   19fa4:	00c01444 	movi	r3,81
   19fa8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   19fac:	00bfffc4 	movi	r2,-1
   19fb0:	f800283a 	ret

00019fb4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   19fb4:	deffff04 	addi	sp,sp,-4
   19fb8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_0, nios2_0);
   19fbc:	001a1e40 	call	1a1e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   19fc0:	00800044 	movi	r2,1
   19fc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   19fc8:	dfc00017 	ldw	ra,0(sp)
   19fcc:	dec00104 	addi	sp,sp,4
   19fd0:	f800283a 	ret

00019fd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   19fd4:	f800283a 	ret

00019fd8 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   19fd8:	20800137 	ldwio	r2,4(r4)
}
   19fdc:	1144703a 	and	r2,r2,r5
   19fe0:	f800283a 	ret

00019fe4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   19fe4:	20800337 	ldwio	r2,12(r4)
}
   19fe8:	1144703a 	and	r2,r2,r5
   19fec:	f800283a 	ret

00019ff0 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
   19ff0:	20800437 	ldwio	r2,16(r4)
   19ff4:	f800283a 	ret

00019ff8 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
   19ff8:	20800537 	ldwio	r2,20(r4)
   19ffc:	f800283a 	ret

0001a000 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   1a000:	20800237 	ldwio	r2,8(r4)
}
   1a004:	1144703a 	and	r2,r2,r5
   1a008:	f800283a 	ret

0001a00c <altera_avalon_fifo_read_level>:
   1a00c:	20800037 	ldwio	r2,0(r4)
   1a010:	f800283a 	ret

0001a014 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   1a014:	21000204 	addi	r4,r4,8
   1a018:	21400035 	stwio	r5,0(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   1a01c:	20800037 	ldwio	r2,0(r4)
   1a020:	114a703a 	and	r5,r2,r5
   1a024:	2804c03a 	cmpne	r2,r5,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
   1a028:	0085c83a 	sub	r2,zero,r2
   1a02c:	f800283a 	ret

0001a030 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   1a030:	21000304 	addi	r4,r4,12
   1a034:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   1a038:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   1a03c:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   1a040:	28c00126 	beq	r5,r3,1a048 <altera_avalon_fifo_write_ienable+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a044:	00bfff84 	movi	r2,-2
}
   1a048:	f800283a 	ret

0001a04c <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   1a04c:	21000404 	addi	r4,r4,16
   1a050:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1a054:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   1a058:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1a05c:	28c00126 	beq	r5,r3,1a064 <altera_avalon_fifo_write_almostfull+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a060:	00bfff44 	movi	r2,-3
}
   1a064:	f800283a 	ret

0001a068 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   1a068:	21000504 	addi	r4,r4,20
   1a06c:	21400035 	stwio	r5,0(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1a070:	20c00037 	ldwio	r3,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   1a074:	0005883a 	mov	r2,zero
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1a078:	28c00126 	beq	r5,r3,1a080 <altera_avalon_fifo_write_almostempty+0x18>
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a07c:	00bfff44 	movi	r2,-3
}
   1a080:	f800283a 	ret

0001a084 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a084:	defffb04 	addi	sp,sp,-20
   1a088:	dcc00315 	stw	r19,12(sp)
   1a08c:	2827883a 	mov	r19,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a090:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a094:	dc800215 	stw	r18,8(sp)
   1a098:	dc400115 	stw	r17,4(sp)
   1a09c:	dc000015 	stw	r16,0(sp)
   1a0a0:	dfc00415 	stw	ra,16(sp)
   1a0a4:	2021883a 	mov	r16,r4
   1a0a8:	3023883a 	mov	r17,r6
   1a0ac:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a0b0:	001a0140 	call	1a014 <altera_avalon_fifo_clear_event>
   1a0b4:	10000f1e 	bne	r2,zero,1a0f4 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   1a0b8:	980b883a 	mov	r5,r19
   1a0bc:	8009883a 	mov	r4,r16
   1a0c0:	001a0300 	call	1a030 <altera_avalon_fifo_write_ienable>
   1a0c4:	10000d1e 	bne	r2,zero,1a0fc <altera_avalon_fifo_init+0x78>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   1a0c8:	900b883a 	mov	r5,r18
   1a0cc:	8009883a 	mov	r4,r16
   1a0d0:	001a04c0 	call	1a04c <altera_avalon_fifo_write_almostfull>
   1a0d4:	10000226 	beq	r2,zero,1a0e0 <altera_avalon_fifo_init+0x5c>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a0d8:	00bfff44 	movi	r2,-3
   1a0dc:	00000806 	br	1a100 <altera_avalon_fifo_init+0x7c>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   1a0e0:	880b883a 	mov	r5,r17
   1a0e4:	8009883a 	mov	r4,r16
   1a0e8:	001a0680 	call	1a068 <altera_avalon_fifo_write_almostempty>
   1a0ec:	10000426 	beq	r2,zero,1a100 <altera_avalon_fifo_init+0x7c>
   1a0f0:	003ff906 	br	1a0d8 <_gp+0xffff7d68>
int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a0f4:	00bfffc4 	movi	r2,-1
   1a0f8:	00000106 	br	1a100 <altera_avalon_fifo_init+0x7c>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a0fc:	00bfff84 	movi	r2,-2
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
   1a100:	dfc00417 	ldw	ra,16(sp)
   1a104:	dcc00317 	ldw	r19,12(sp)
   1a108:	dc800217 	ldw	r18,8(sp)
   1a10c:	dc400117 	ldw	r17,4(sp)
   1a110:	dc000017 	ldw	r16,0(sp)
   1a114:	dec00504 	addi	sp,sp,20
   1a118:	f800283a 	ret

0001a11c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a11c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1a120:	1080004c 	andi	r2,r2,1
   1a124:	1000021e 	bne	r2,zero,1a130 <altera_avalon_fifo_write_fifo+0x14>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   1a128:	21800035 	stwio	r6,0(r4)
        return ALTERA_AVALON_FIFO_OK;
   1a12c:	f800283a 	ret
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1a130:	00bfff04 	movi	r2,-4
    }
}
   1a134:	f800283a 	ret

0001a138 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
   1a138:	30000015 	stw	zero,0(r6)
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a13c:	28800137 	ldwio	r2,4(r5)
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1a140:	1080008c 	andi	r2,r2,2
   1a144:	1000041e 	bne	r2,zero,1a158 <altera_avalon_read_fifo+0x20>
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1a148:	28800037 	ldwio	r2,0(r5)
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1a14c:	20c00037 	ldwio	r3,0(r4)
   1a150:	30c00015 	stw	r3,0(r6)
   1a154:	f800283a 	ret
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
   1a158:	0005883a 	mov	r2,zero
        return_val = altera_avalon_fifo_read_level(ctrl_address);
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
    
    }
    return return_val;
}
   1a15c:	f800283a 	ret

0001a160 <altera_avalon_fifo_read_fifo>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a160:	28800137 	ldwio	r2,4(r5)
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1a164:	1080008c 	andi	r2,r2,2
   1a168:	1000021e 	bne	r2,zero,1a174 <altera_avalon_fifo_read_fifo+0x14>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1a16c:	20800037 	ldwio	r2,0(r4)
   1a170:	f800283a 	ret
    }
    return 0;
   1a174:	0005883a 	mov	r2,zero
}
   1a178:	f800283a 	ret

0001a17c <altera_avalon_fifo_write_other_info>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a17c:	28800137 	ldwio	r2,4(r5)

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1a180:	1080004c 	andi	r2,r2,1
   1a184:	1000021e 	bne	r2,zero,1a190 <altera_avalon_fifo_write_other_info+0x14>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   1a188:	21800135 	stwio	r6,4(r4)
	return ALTERA_AVALON_FIFO_OK;
   1a18c:	f800283a 	ret
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1a190:	00bfff04 	movi	r2,-4
    }
}
   1a194:	f800283a 	ret

0001a198 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
   1a198:	20800137 	ldwio	r2,4(r4)
   1a19c:	f800283a 	ret

0001a1a0 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
   1a1a0:	20800037 	ldwio	r2,0(r4)
   1a1a4:	f800283a 	ret

0001a1a8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1a1a8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1a1ac:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1a1b0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1a1b4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1a1b8:	2980072e 	bgeu	r5,r6,1a1d8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1a1bc:	38c00037 	ldwio	r3,0(r7)
   1a1c0:	18ffffec 	andhi	r3,r3,65535
   1a1c4:	183ffc26 	beq	r3,zero,1a1b8 <_gp+0xffff7e48>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1a1c8:	28c00007 	ldb	r3,0(r5)
   1a1cc:	20c00035 	stwio	r3,0(r4)
   1a1d0:	29400044 	addi	r5,r5,1
   1a1d4:	003ff806 	br	1a1b8 <_gp+0xffff7e48>

  return count;
}
   1a1d8:	f800283a 	ret

0001a1dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a1dc:	f800283a 	ret

0001a1e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a1e0:	f800283a 	ret

0001a1e4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1a1e4:	000170fa 	wrctl	ienable,zero
   1a1e8:	f800283a 	ret
