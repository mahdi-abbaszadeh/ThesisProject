
multiplePortRegister_HPS.elf:     file format elf32-littlenios2
multiplePortRegister_HPS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001bdc memsz 0x00001bdc flags r-x
    LOAD off    0x00002bfc vaddr 0x00011bfc paddr 0x00011ed0 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000031a4 vaddr 0x000121a4 paddr 0x000121a4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00002ed0  2**0
                  CONTENTS
  2 .text         00001b8c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00011bac  00011bac  00002bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00011bfc  00011ed0  00002bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000121a4  000121a4  000031a4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000121b4  000121b4  00002ed0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000490  00000000  00000000  00002ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006b34  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002232  00000000  00000000  00009ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000026cc  00000000  00000000  0000c0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008dc  00000000  00000000  0000e7bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015b9  00000000  00000000  0000f098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ee  00000000  00000000  00010651  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00011a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  00011a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000131f2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000131f5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013201  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013202  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00013203  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001320e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00013219  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000014  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY
 26 .jdi          000047d4  00000000  00000000  0001327d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00033f60  00000000  00000000  00017a51  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00011bac l    d  .rodata	00000000 .rodata
00011bfc l    d  .rwdata	00000000 .rwdata
000121a4 l    d  .bss	00000000 .bss
000121b4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../multiplePortRegister_HPS_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001023c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011bfc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00010adc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00010c34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010d70 l     F .text	00000034 alt_dev_reg
00011cdc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00011050 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011184 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000111b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000112b0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00011410 l     F .text	0000003c alt_get_errno
0001144c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00010bc8 g     F .text	0000006c alt_main
0001018c g     F .text	00000080 _puts_r
00011ed0 g       *ABS*	00000000 __flash_rwdata_start
00010140 g     F .text	0000004c printf
00011718 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000121a4 g     O .bss	00000004 errno
000121ac g     O .bss	00000004 alt_argv
00019eb0 g       *ABS*	00000000 _gp
00011d30 g     O .rwdata	00000180 alt_fd_list
0001173c g     F .text	00000090 alt_find_dev
00011394 g     F .text	0000007c alt_io_redirect
0001020c g     F .text	00000014 puts
00010ed0 g     F .text	000000ec altera_avalon_jtag_uart_read
00010104 g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000109f8 g     F .text	00000064 .hidden __udivsi3
00011ec8 g     O .rwdata	00000004 alt_max_fd
00011eb0 g     O .rwdata	00000004 _global_impure_ptr
000121b4 g       *ABS*	00000000 __bss_end
00011d08 g     O .rwdata	00000028 alt_dev_null
00011164 g     F .text	00000020 alt_dcache_flush_all
00011ed0 g       *ABS*	00000000 __ram_rwdata_end
00011ec0 g     O .rwdata	00000008 alt_dev_list
00010c70 g     F .text	00000100 write
00011bfc g       *ABS*	00000000 __ram_rodata_end
00010a5c g     F .text	00000058 .hidden __umodsi3
000121b4 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010fbc g     F .text	00000094 altera_avalon_jtag_uart_write
000102a8 g     F .text	0000052c ___vfprintf_internal_r
000119e8 g     F .text	00000190 __call_exitprocs
00010020 g     F .text	0000003c _start
00010ddc g     F .text	00000034 alt_sys_init
00010ab4 g     F .text	00000028 .hidden __mulsi3
00011bfc g       *ABS*	00000000 __ram_rwdata_start
00011bac g       *ABS*	00000000 __ram_rodata_start
00010e10 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000118d4 g     F .text	000000c4 alt_get_fd
000119b8 g     F .text	00000030 memcmp
000121b4 g       *ABS*	00000000 __alt_stack_base
000117cc g     F .text	00000108 alt_find_file
000111ec g     F .text	000000a4 alt_dev_llist_insert
000107f0 g     F .text	000000b8 __sfvwrite_small_dev
000121a4 g       *ABS*	00000000 __bss_start
0001005c g     F .text	000000a8 main
000121b0 g     O .bss	00000004 alt_envp
00010e70 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011ecc g     O .rwdata	00000004 alt_errno
00010900 g     F .text	00000084 .hidden __divsi3
00011bac g       *ABS*	00000000 __flash_rodata_start
00010da4 g     F .text	00000038 alt_irq_init
00011694 g     F .text	00000084 alt_release_fd
000108a8 g     F .text	00000058 _write_r
00011eb4 g     O .rwdata	00000004 _impure_ptr
000121a8 g     O .bss	00000004 alt_argc
00011eb8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011ed0 g       *ABS*	00000000 _edata
000121b4 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00011998 g     F .text	00000020 exit
00010984 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00011b78 g     F .text	00000034 _exit
00010220 g     F .text	0000001c strlen
00011538 g     F .text	0000015c open
00011290 g     F .text	00000020 alt_icache_flush_all
000107d4 g     F .text	0000001c __vfprintf_internal
0001108c g     F .text	000000d8 close
00010b44 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a7ac14 	ori	gp,gp,40624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10886914 	ori	r2,r2,8612

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c86d14 	ori	r3,r3,8628

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010b440 	call	10b44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010bc80 	call	10bc8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <main>:

#include <stdio.h>
#include "system.h"

int main()
{
   1005c:	defffc04 	addi	sp,sp,-16
   10060:	dfc00315 	stw	ra,12(sp)
   10064:	df000215 	stw	fp,8(sp)
   10068:	df000204 	addi	fp,sp,8
	/*int count = 0;
	int delay;*/
	unsigned short int* reg1 = (unsigned short int*)REG16_MULTIPLEPORT_AVALON_INTERFACE_0_AVALON_SLAVE_1_BASE;
   1006c:	008000b4 	movhi	r2,2
   10070:	10840284 	addi	r2,r2,4106
   10074:	e0bffe15 	stw	r2,-8(fp)
	unsigned short int* reg2 = (unsigned short int*)REG16_MULTIPLEPORT_AVALON_INTERFACE_0_AVALON_SLAVE_2_BASE;
   10078:	008000b4 	movhi	r2,2
   1007c:	10840204 	addi	r2,r2,4104
   10080:	e0bfff15 	stw	r2,-4(fp)

	printf("Hello from Nios II!\n");
   10084:	01000074 	movhi	r4,1
   10088:	2106eb04 	addi	r4,r4,7084
   1008c:	001020c0 	call	1020c <puts>
	*(reg1) = 85;
   10090:	e0bffe17 	ldw	r2,-8(fp)
   10094:	00c01544 	movi	r3,85
   10098:	10c0000d 	sth	r3,0(r2)
	printf("%x\n",*(reg1));
   1009c:	e0bffe17 	ldw	r2,-8(fp)
   100a0:	1080000b 	ldhu	r2,0(r2)
   100a4:	10bfffcc 	andi	r2,r2,65535
   100a8:	100b883a 	mov	r5,r2
   100ac:	01000074 	movhi	r4,1
   100b0:	2106f004 	addi	r4,r4,7104
   100b4:	00101400 	call	10140 <printf>
	*(reg2) = *(reg1) - 16;
   100b8:	e0bffe17 	ldw	r2,-8(fp)
   100bc:	1080000b 	ldhu	r2,0(r2)
   100c0:	10bffc04 	addi	r2,r2,-16
   100c4:	1007883a 	mov	r3,r2
   100c8:	e0bfff17 	ldw	r2,-4(fp)
   100cc:	10c0000d 	sth	r3,0(r2)
	printf("%x\n",*(reg2));
   100d0:	e0bfff17 	ldw	r2,-4(fp)
   100d4:	1080000b 	ldhu	r2,0(r2)
   100d8:	10bfffcc 	andi	r2,r2,65535
   100dc:	100b883a 	mov	r5,r2
   100e0:	01000074 	movhi	r4,1
   100e4:	2106f004 	addi	r4,r4,7104
   100e8:	00101400 	call	10140 <printf>
//				{
//					delay++;
//				}
//				count++;
//	}
  return 0;
   100ec:	0005883a 	mov	r2,zero
}
   100f0:	e037883a 	mov	sp,fp
   100f4:	dfc00117 	ldw	ra,4(sp)
   100f8:	df000017 	ldw	fp,0(sp)
   100fc:	dec00204 	addi	sp,sp,8
   10100:	f800283a 	ret

00010104 <_printf_r>:
   10104:	defffd04 	addi	sp,sp,-12
   10108:	dfc00015 	stw	ra,0(sp)
   1010c:	d9800115 	stw	r6,4(sp)
   10110:	d9c00215 	stw	r7,8(sp)
   10114:	20c00217 	ldw	r3,8(r4)
   10118:	01800074 	movhi	r6,1
   1011c:	3181fc04 	addi	r6,r6,2032
   10120:	19800115 	stw	r6,4(r3)
   10124:	280d883a 	mov	r6,r5
   10128:	21400217 	ldw	r5,8(r4)
   1012c:	d9c00104 	addi	r7,sp,4
   10130:	00102a80 	call	102a8 <___vfprintf_internal_r>
   10134:	dfc00017 	ldw	ra,0(sp)
   10138:	dec00304 	addi	sp,sp,12
   1013c:	f800283a 	ret

00010140 <printf>:
   10140:	defffc04 	addi	sp,sp,-16
   10144:	dfc00015 	stw	ra,0(sp)
   10148:	d9400115 	stw	r5,4(sp)
   1014c:	d9800215 	stw	r6,8(sp)
   10150:	d9c00315 	stw	r7,12(sp)
   10154:	00800074 	movhi	r2,1
   10158:	1087ad04 	addi	r2,r2,7860
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	01400074 	movhi	r5,1
   10164:	2941fc04 	addi	r5,r5,2032
   10168:	10c00217 	ldw	r3,8(r2)
   1016c:	d9800104 	addi	r6,sp,4
   10170:	19400115 	stw	r5,4(r3)
   10174:	200b883a 	mov	r5,r4
   10178:	11000217 	ldw	r4,8(r2)
   1017c:	00107d40 	call	107d4 <__vfprintf_internal>
   10180:	dfc00017 	ldw	ra,0(sp)
   10184:	dec00404 	addi	sp,sp,16
   10188:	f800283a 	ret

0001018c <_puts_r>:
   1018c:	defffd04 	addi	sp,sp,-12
   10190:	dc000015 	stw	r16,0(sp)
   10194:	2021883a 	mov	r16,r4
   10198:	2809883a 	mov	r4,r5
   1019c:	dfc00215 	stw	ra,8(sp)
   101a0:	dc400115 	stw	r17,4(sp)
   101a4:	2823883a 	mov	r17,r5
   101a8:	00102200 	call	10220 <strlen>
   101ac:	81400217 	ldw	r5,8(r16)
   101b0:	01000074 	movhi	r4,1
   101b4:	2101fc04 	addi	r4,r4,2032
   101b8:	29000115 	stw	r4,4(r5)
   101bc:	100f883a 	mov	r7,r2
   101c0:	880d883a 	mov	r6,r17
   101c4:	8009883a 	mov	r4,r16
   101c8:	00107f00 	call	107f0 <__sfvwrite_small_dev>
   101cc:	00ffffc4 	movi	r3,-1
   101d0:	10c00926 	beq	r2,r3,101f8 <_puts_r+0x6c>
   101d4:	81400217 	ldw	r5,8(r16)
   101d8:	01800074 	movhi	r6,1
   101dc:	01c00044 	movi	r7,1
   101e0:	28800117 	ldw	r2,4(r5)
   101e4:	3186f104 	addi	r6,r6,7108
   101e8:	8009883a 	mov	r4,r16
   101ec:	103ee83a 	callr	r2
   101f0:	10bfffe0 	cmpeqi	r2,r2,-1
   101f4:	0085c83a 	sub	r2,zero,r2
   101f8:	dfc00217 	ldw	ra,8(sp)
   101fc:	dc400117 	ldw	r17,4(sp)
   10200:	dc000017 	ldw	r16,0(sp)
   10204:	dec00304 	addi	sp,sp,12
   10208:	f800283a 	ret

0001020c <puts>:
   1020c:	00800074 	movhi	r2,1
   10210:	1087ad04 	addi	r2,r2,7860
   10214:	200b883a 	mov	r5,r4
   10218:	11000017 	ldw	r4,0(r2)
   1021c:	001018c1 	jmpi	1018c <_puts_r>

00010220 <strlen>:
   10220:	2005883a 	mov	r2,r4
   10224:	10c00007 	ldb	r3,0(r2)
   10228:	18000226 	beq	r3,zero,10234 <strlen+0x14>
   1022c:	10800044 	addi	r2,r2,1
   10230:	003ffc06 	br	10224 <__alt_data_end+0xffff0224>
   10234:	1105c83a 	sub	r2,r2,r4
   10238:	f800283a 	ret

0001023c <print_repeat>:
   1023c:	defffb04 	addi	sp,sp,-20
   10240:	dc800315 	stw	r18,12(sp)
   10244:	dc400215 	stw	r17,8(sp)
   10248:	dc000115 	stw	r16,4(sp)
   1024c:	dfc00415 	stw	ra,16(sp)
   10250:	2025883a 	mov	r18,r4
   10254:	2823883a 	mov	r17,r5
   10258:	d9800005 	stb	r6,0(sp)
   1025c:	3821883a 	mov	r16,r7
   10260:	04000a0e 	bge	zero,r16,1028c <print_repeat+0x50>
   10264:	88800117 	ldw	r2,4(r17)
   10268:	01c00044 	movi	r7,1
   1026c:	d80d883a 	mov	r6,sp
   10270:	880b883a 	mov	r5,r17
   10274:	9009883a 	mov	r4,r18
   10278:	103ee83a 	callr	r2
   1027c:	843fffc4 	addi	r16,r16,-1
   10280:	103ff726 	beq	r2,zero,10260 <__alt_data_end+0xffff0260>
   10284:	00bfffc4 	movi	r2,-1
   10288:	00000106 	br	10290 <print_repeat+0x54>
   1028c:	0005883a 	mov	r2,zero
   10290:	dfc00417 	ldw	ra,16(sp)
   10294:	dc800317 	ldw	r18,12(sp)
   10298:	dc400217 	ldw	r17,8(sp)
   1029c:	dc000117 	ldw	r16,4(sp)
   102a0:	dec00504 	addi	sp,sp,20
   102a4:	f800283a 	ret

000102a8 <___vfprintf_internal_r>:
   102a8:	deffe504 	addi	sp,sp,-108
   102ac:	d8c00804 	addi	r3,sp,32
   102b0:	ddc01815 	stw	r23,96(sp)
   102b4:	dd801715 	stw	r22,92(sp)
   102b8:	dd401615 	stw	r21,88(sp)
   102bc:	dd001515 	stw	r20,84(sp)
   102c0:	dcc01415 	stw	r19,80(sp)
   102c4:	dc801315 	stw	r18,76(sp)
   102c8:	dc401215 	stw	r17,72(sp)
   102cc:	dc001115 	stw	r16,68(sp)
   102d0:	dfc01a15 	stw	ra,104(sp)
   102d4:	df001915 	stw	fp,100(sp)
   102d8:	2029883a 	mov	r20,r4
   102dc:	2823883a 	mov	r17,r5
   102e0:	382d883a 	mov	r22,r7
   102e4:	d9800f15 	stw	r6,60(sp)
   102e8:	0021883a 	mov	r16,zero
   102ec:	d8000e15 	stw	zero,56(sp)
   102f0:	d8000a15 	stw	zero,40(sp)
   102f4:	002b883a 	mov	r21,zero
   102f8:	0027883a 	mov	r19,zero
   102fc:	0025883a 	mov	r18,zero
   10300:	d8000c15 	stw	zero,48(sp)
   10304:	d8000b15 	stw	zero,44(sp)
   10308:	002f883a 	mov	r23,zero
   1030c:	d8c00915 	stw	r3,36(sp)
   10310:	d8c00f17 	ldw	r3,60(sp)
   10314:	19000003 	ldbu	r4,0(r3)
   10318:	20803fcc 	andi	r2,r4,255
   1031c:	1080201c 	xori	r2,r2,128
   10320:	10bfe004 	addi	r2,r2,-128
   10324:	10011e26 	beq	r2,zero,107a0 <___vfprintf_internal_r+0x4f8>
   10328:	00c00044 	movi	r3,1
   1032c:	b8c01426 	beq	r23,r3,10380 <___vfprintf_internal_r+0xd8>
   10330:	1dc00216 	blt	r3,r23,1033c <___vfprintf_internal_r+0x94>
   10334:	b8000626 	beq	r23,zero,10350 <___vfprintf_internal_r+0xa8>
   10338:	00011506 	br	10790 <___vfprintf_internal_r+0x4e8>
   1033c:	01400084 	movi	r5,2
   10340:	b9401d26 	beq	r23,r5,103b8 <___vfprintf_internal_r+0x110>
   10344:	014000c4 	movi	r5,3
   10348:	b9402b26 	beq	r23,r5,103f8 <___vfprintf_internal_r+0x150>
   1034c:	00011006 	br	10790 <___vfprintf_internal_r+0x4e8>
   10350:	01400944 	movi	r5,37
   10354:	1140fc26 	beq	r2,r5,10748 <___vfprintf_internal_r+0x4a0>
   10358:	88800117 	ldw	r2,4(r17)
   1035c:	d9000005 	stb	r4,0(sp)
   10360:	01c00044 	movi	r7,1
   10364:	d80d883a 	mov	r6,sp
   10368:	880b883a 	mov	r5,r17
   1036c:	a009883a 	mov	r4,r20
   10370:	103ee83a 	callr	r2
   10374:	1000d81e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   10378:	84000044 	addi	r16,r16,1
   1037c:	00010406 	br	10790 <___vfprintf_internal_r+0x4e8>
   10380:	01400c04 	movi	r5,48
   10384:	1140fa26 	beq	r2,r5,10770 <___vfprintf_internal_r+0x4c8>
   10388:	01400944 	movi	r5,37
   1038c:	11400a1e 	bne	r2,r5,103b8 <___vfprintf_internal_r+0x110>
   10390:	d8800005 	stb	r2,0(sp)
   10394:	88800117 	ldw	r2,4(r17)
   10398:	b80f883a 	mov	r7,r23
   1039c:	d80d883a 	mov	r6,sp
   103a0:	880b883a 	mov	r5,r17
   103a4:	a009883a 	mov	r4,r20
   103a8:	103ee83a 	callr	r2
   103ac:	1000ca1e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   103b0:	84000044 	addi	r16,r16,1
   103b4:	0000f506 	br	1078c <___vfprintf_internal_r+0x4e4>
   103b8:	25fff404 	addi	r23,r4,-48
   103bc:	bdc03fcc 	andi	r23,r23,255
   103c0:	00c00244 	movi	r3,9
   103c4:	1dc00936 	bltu	r3,r23,103ec <___vfprintf_internal_r+0x144>
   103c8:	00bfffc4 	movi	r2,-1
   103cc:	90800426 	beq	r18,r2,103e0 <___vfprintf_internal_r+0x138>
   103d0:	01400284 	movi	r5,10
   103d4:	9009883a 	mov	r4,r18
   103d8:	0010ab40 	call	10ab4 <__mulsi3>
   103dc:	00000106 	br	103e4 <___vfprintf_internal_r+0x13c>
   103e0:	0005883a 	mov	r2,zero
   103e4:	b8a5883a 	add	r18,r23,r2
   103e8:	0000e206 	br	10774 <___vfprintf_internal_r+0x4cc>
   103ec:	01400b84 	movi	r5,46
   103f0:	1140e426 	beq	r2,r5,10784 <___vfprintf_internal_r+0x4dc>
   103f4:	05c00084 	movi	r23,2
   103f8:	213ff404 	addi	r4,r4,-48
   103fc:	27003fcc 	andi	fp,r4,255
   10400:	00c00244 	movi	r3,9
   10404:	1f000936 	bltu	r3,fp,1042c <___vfprintf_internal_r+0x184>
   10408:	00bfffc4 	movi	r2,-1
   1040c:	98800426 	beq	r19,r2,10420 <___vfprintf_internal_r+0x178>
   10410:	01400284 	movi	r5,10
   10414:	9809883a 	mov	r4,r19
   10418:	0010ab40 	call	10ab4 <__mulsi3>
   1041c:	00000106 	br	10424 <___vfprintf_internal_r+0x17c>
   10420:	0005883a 	mov	r2,zero
   10424:	e0a7883a 	add	r19,fp,r2
   10428:	0000d906 	br	10790 <___vfprintf_internal_r+0x4e8>
   1042c:	00c01b04 	movi	r3,108
   10430:	10c0d226 	beq	r2,r3,1077c <___vfprintf_internal_r+0x4d4>
   10434:	013fffc4 	movi	r4,-1
   10438:	99000226 	beq	r19,r4,10444 <___vfprintf_internal_r+0x19c>
   1043c:	d8000b15 	stw	zero,44(sp)
   10440:	00000106 	br	10448 <___vfprintf_internal_r+0x1a0>
   10444:	04c00044 	movi	r19,1
   10448:	01001a44 	movi	r4,105
   1044c:	11001626 	beq	r2,r4,104a8 <___vfprintf_internal_r+0x200>
   10450:	20800916 	blt	r4,r2,10478 <___vfprintf_internal_r+0x1d0>
   10454:	010018c4 	movi	r4,99
   10458:	11008826 	beq	r2,r4,1067c <___vfprintf_internal_r+0x3d4>
   1045c:	01001904 	movi	r4,100
   10460:	11001126 	beq	r2,r4,104a8 <___vfprintf_internal_r+0x200>
   10464:	01001604 	movi	r4,88
   10468:	1100c81e 	bne	r2,r4,1078c <___vfprintf_internal_r+0x4e4>
   1046c:	00c00044 	movi	r3,1
   10470:	d8c00e15 	stw	r3,56(sp)
   10474:	00001506 	br	104cc <___vfprintf_internal_r+0x224>
   10478:	01001cc4 	movi	r4,115
   1047c:	11009826 	beq	r2,r4,106e0 <___vfprintf_internal_r+0x438>
   10480:	20800416 	blt	r4,r2,10494 <___vfprintf_internal_r+0x1ec>
   10484:	01001bc4 	movi	r4,111
   10488:	1100c01e 	bne	r2,r4,1078c <___vfprintf_internal_r+0x4e4>
   1048c:	05400204 	movi	r21,8
   10490:	00000f06 	br	104d0 <___vfprintf_internal_r+0x228>
   10494:	01001d44 	movi	r4,117
   10498:	11000d26 	beq	r2,r4,104d0 <___vfprintf_internal_r+0x228>
   1049c:	01001e04 	movi	r4,120
   104a0:	11000a26 	beq	r2,r4,104cc <___vfprintf_internal_r+0x224>
   104a4:	0000b906 	br	1078c <___vfprintf_internal_r+0x4e4>
   104a8:	d8c00a17 	ldw	r3,40(sp)
   104ac:	b7000104 	addi	fp,r22,4
   104b0:	18000726 	beq	r3,zero,104d0 <___vfprintf_internal_r+0x228>
   104b4:	df000d15 	stw	fp,52(sp)
   104b8:	b5c00017 	ldw	r23,0(r22)
   104bc:	b800080e 	bge	r23,zero,104e0 <___vfprintf_internal_r+0x238>
   104c0:	05efc83a 	sub	r23,zero,r23
   104c4:	02400044 	movi	r9,1
   104c8:	00000606 	br	104e4 <___vfprintf_internal_r+0x23c>
   104cc:	05400404 	movi	r21,16
   104d0:	b0c00104 	addi	r3,r22,4
   104d4:	d8c00d15 	stw	r3,52(sp)
   104d8:	b5c00017 	ldw	r23,0(r22)
   104dc:	d8000a15 	stw	zero,40(sp)
   104e0:	0013883a 	mov	r9,zero
   104e4:	d839883a 	mov	fp,sp
   104e8:	b8001726 	beq	r23,zero,10548 <___vfprintf_internal_r+0x2a0>
   104ec:	a80b883a 	mov	r5,r21
   104f0:	b809883a 	mov	r4,r23
   104f4:	da401015 	stw	r9,64(sp)
   104f8:	00109f80 	call	109f8 <__udivsi3>
   104fc:	a80b883a 	mov	r5,r21
   10500:	1009883a 	mov	r4,r2
   10504:	102d883a 	mov	r22,r2
   10508:	0010ab40 	call	10ab4 <__mulsi3>
   1050c:	b885c83a 	sub	r2,r23,r2
   10510:	00c00244 	movi	r3,9
   10514:	da401017 	ldw	r9,64(sp)
   10518:	18800216 	blt	r3,r2,10524 <___vfprintf_internal_r+0x27c>
   1051c:	10800c04 	addi	r2,r2,48
   10520:	00000506 	br	10538 <___vfprintf_internal_r+0x290>
   10524:	d8c00e17 	ldw	r3,56(sp)
   10528:	18000226 	beq	r3,zero,10534 <___vfprintf_internal_r+0x28c>
   1052c:	10800dc4 	addi	r2,r2,55
   10530:	00000106 	br	10538 <___vfprintf_internal_r+0x290>
   10534:	108015c4 	addi	r2,r2,87
   10538:	e0800005 	stb	r2,0(fp)
   1053c:	b02f883a 	mov	r23,r22
   10540:	e7000044 	addi	fp,fp,1
   10544:	003fe806 	br	104e8 <__alt_data_end+0xffff04e8>
   10548:	e6efc83a 	sub	r23,fp,sp
   1054c:	9dc5c83a 	sub	r2,r19,r23
   10550:	0080090e 	bge	zero,r2,10578 <___vfprintf_internal_r+0x2d0>
   10554:	e085883a 	add	r2,fp,r2
   10558:	01400c04 	movi	r5,48
   1055c:	d8c00917 	ldw	r3,36(sp)
   10560:	e009883a 	mov	r4,fp
   10564:	e0c0032e 	bgeu	fp,r3,10574 <___vfprintf_internal_r+0x2cc>
   10568:	e7000044 	addi	fp,fp,1
   1056c:	21400005 	stb	r5,0(r4)
   10570:	e0bffa1e 	bne	fp,r2,1055c <__alt_data_end+0xffff055c>
   10574:	e6efc83a 	sub	r23,fp,sp
   10578:	d8c00b17 	ldw	r3,44(sp)
   1057c:	4dd1883a 	add	r8,r9,r23
   10580:	922dc83a 	sub	r22,r18,r8
   10584:	18001626 	beq	r3,zero,105e0 <___vfprintf_internal_r+0x338>
   10588:	48000a26 	beq	r9,zero,105b4 <___vfprintf_internal_r+0x30c>
   1058c:	00800b44 	movi	r2,45
   10590:	d8800805 	stb	r2,32(sp)
   10594:	88800117 	ldw	r2,4(r17)
   10598:	01c00044 	movi	r7,1
   1059c:	d9800804 	addi	r6,sp,32
   105a0:	880b883a 	mov	r5,r17
   105a4:	a009883a 	mov	r4,r20
   105a8:	103ee83a 	callr	r2
   105ac:	10004a1e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   105b0:	84000044 	addi	r16,r16,1
   105b4:	0580070e 	bge	zero,r22,105d4 <___vfprintf_internal_r+0x32c>
   105b8:	b00f883a 	mov	r7,r22
   105bc:	01800c04 	movi	r6,48
   105c0:	880b883a 	mov	r5,r17
   105c4:	a009883a 	mov	r4,r20
   105c8:	001023c0 	call	1023c <print_repeat>
   105cc:	1000421e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   105d0:	85a1883a 	add	r16,r16,r22
   105d4:	e02d883a 	mov	r22,fp
   105d8:	bf2fc83a 	sub	r23,r23,fp
   105dc:	00002006 	br	10660 <___vfprintf_internal_r+0x3b8>
   105e0:	0580090e 	bge	zero,r22,10608 <___vfprintf_internal_r+0x360>
   105e4:	b00f883a 	mov	r7,r22
   105e8:	01800804 	movi	r6,32
   105ec:	880b883a 	mov	r5,r17
   105f0:	a009883a 	mov	r4,r20
   105f4:	da401015 	stw	r9,64(sp)
   105f8:	001023c0 	call	1023c <print_repeat>
   105fc:	da401017 	ldw	r9,64(sp)
   10600:	1000351e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   10604:	85a1883a 	add	r16,r16,r22
   10608:	483ff226 	beq	r9,zero,105d4 <__alt_data_end+0xffff05d4>
   1060c:	00800b44 	movi	r2,45
   10610:	d8800805 	stb	r2,32(sp)
   10614:	88800117 	ldw	r2,4(r17)
   10618:	01c00044 	movi	r7,1
   1061c:	d9800804 	addi	r6,sp,32
   10620:	880b883a 	mov	r5,r17
   10624:	a009883a 	mov	r4,r20
   10628:	103ee83a 	callr	r2
   1062c:	10002a1e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   10630:	84000044 	addi	r16,r16,1
   10634:	003fe706 	br	105d4 <__alt_data_end+0xffff05d4>
   10638:	b5bfffc4 	addi	r22,r22,-1
   1063c:	b0800003 	ldbu	r2,0(r22)
   10640:	01c00044 	movi	r7,1
   10644:	d9800804 	addi	r6,sp,32
   10648:	d8800805 	stb	r2,32(sp)
   1064c:	88800117 	ldw	r2,4(r17)
   10650:	880b883a 	mov	r5,r17
   10654:	a009883a 	mov	r4,r20
   10658:	103ee83a 	callr	r2
   1065c:	10001e1e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   10660:	8585c83a 	sub	r2,r16,r22
   10664:	b5c9883a 	add	r4,r22,r23
   10668:	e085883a 	add	r2,fp,r2
   1066c:	013ff216 	blt	zero,r4,10638 <__alt_data_end+0xffff0638>
   10670:	1021883a 	mov	r16,r2
   10674:	dd800d17 	ldw	r22,52(sp)
   10678:	00004406 	br	1078c <___vfprintf_internal_r+0x4e4>
   1067c:	00800044 	movi	r2,1
   10680:	1480080e 	bge	r2,r18,106a4 <___vfprintf_internal_r+0x3fc>
   10684:	95ffffc4 	addi	r23,r18,-1
   10688:	b80f883a 	mov	r7,r23
   1068c:	01800804 	movi	r6,32
   10690:	880b883a 	mov	r5,r17
   10694:	a009883a 	mov	r4,r20
   10698:	001023c0 	call	1023c <print_repeat>
   1069c:	10000e1e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   106a0:	85e1883a 	add	r16,r16,r23
   106a4:	b0800017 	ldw	r2,0(r22)
   106a8:	01c00044 	movi	r7,1
   106ac:	d80d883a 	mov	r6,sp
   106b0:	d8800005 	stb	r2,0(sp)
   106b4:	88800117 	ldw	r2,4(r17)
   106b8:	880b883a 	mov	r5,r17
   106bc:	a009883a 	mov	r4,r20
   106c0:	b5c00104 	addi	r23,r22,4
   106c4:	103ee83a 	callr	r2
   106c8:	1000031e 	bne	r2,zero,106d8 <___vfprintf_internal_r+0x430>
   106cc:	84000044 	addi	r16,r16,1
   106d0:	b82d883a 	mov	r22,r23
   106d4:	00002d06 	br	1078c <___vfprintf_internal_r+0x4e4>
   106d8:	00bfffc4 	movi	r2,-1
   106dc:	00003106 	br	107a4 <___vfprintf_internal_r+0x4fc>
   106e0:	b5c00017 	ldw	r23,0(r22)
   106e4:	b7000104 	addi	fp,r22,4
   106e8:	b809883a 	mov	r4,r23
   106ec:	00102200 	call	10220 <strlen>
   106f0:	9091c83a 	sub	r8,r18,r2
   106f4:	102d883a 	mov	r22,r2
   106f8:	0200090e 	bge	zero,r8,10720 <___vfprintf_internal_r+0x478>
   106fc:	400f883a 	mov	r7,r8
   10700:	01800804 	movi	r6,32
   10704:	880b883a 	mov	r5,r17
   10708:	a009883a 	mov	r4,r20
   1070c:	da001015 	stw	r8,64(sp)
   10710:	001023c0 	call	1023c <print_repeat>
   10714:	da001017 	ldw	r8,64(sp)
   10718:	103fef1e 	bne	r2,zero,106d8 <__alt_data_end+0xffff06d8>
   1071c:	8221883a 	add	r16,r16,r8
   10720:	88800117 	ldw	r2,4(r17)
   10724:	b00f883a 	mov	r7,r22
   10728:	b80d883a 	mov	r6,r23
   1072c:	880b883a 	mov	r5,r17
   10730:	a009883a 	mov	r4,r20
   10734:	103ee83a 	callr	r2
   10738:	103fe71e 	bne	r2,zero,106d8 <__alt_data_end+0xffff06d8>
   1073c:	85a1883a 	add	r16,r16,r22
   10740:	e02d883a 	mov	r22,fp
   10744:	00001106 	br	1078c <___vfprintf_internal_r+0x4e4>
   10748:	00c00044 	movi	r3,1
   1074c:	04ffffc4 	movi	r19,-1
   10750:	d8000e15 	stw	zero,56(sp)
   10754:	d8c00a15 	stw	r3,40(sp)
   10758:	05400284 	movi	r21,10
   1075c:	9825883a 	mov	r18,r19
   10760:	d8000c15 	stw	zero,48(sp)
   10764:	d8000b15 	stw	zero,44(sp)
   10768:	182f883a 	mov	r23,r3
   1076c:	00000806 	br	10790 <___vfprintf_internal_r+0x4e8>
   10770:	ddc00b15 	stw	r23,44(sp)
   10774:	05c00084 	movi	r23,2
   10778:	00000506 	br	10790 <___vfprintf_internal_r+0x4e8>
   1077c:	00c00044 	movi	r3,1
   10780:	d8c00c15 	stw	r3,48(sp)
   10784:	05c000c4 	movi	r23,3
   10788:	00000106 	br	10790 <___vfprintf_internal_r+0x4e8>
   1078c:	002f883a 	mov	r23,zero
   10790:	d8c00f17 	ldw	r3,60(sp)
   10794:	18c00044 	addi	r3,r3,1
   10798:	d8c00f15 	stw	r3,60(sp)
   1079c:	003edc06 	br	10310 <__alt_data_end+0xffff0310>
   107a0:	8005883a 	mov	r2,r16
   107a4:	dfc01a17 	ldw	ra,104(sp)
   107a8:	df001917 	ldw	fp,100(sp)
   107ac:	ddc01817 	ldw	r23,96(sp)
   107b0:	dd801717 	ldw	r22,92(sp)
   107b4:	dd401617 	ldw	r21,88(sp)
   107b8:	dd001517 	ldw	r20,84(sp)
   107bc:	dcc01417 	ldw	r19,80(sp)
   107c0:	dc801317 	ldw	r18,76(sp)
   107c4:	dc401217 	ldw	r17,72(sp)
   107c8:	dc001117 	ldw	r16,68(sp)
   107cc:	dec01b04 	addi	sp,sp,108
   107d0:	f800283a 	ret

000107d4 <__vfprintf_internal>:
   107d4:	00800074 	movhi	r2,1
   107d8:	1087ad04 	addi	r2,r2,7860
   107dc:	300f883a 	mov	r7,r6
   107e0:	280d883a 	mov	r6,r5
   107e4:	200b883a 	mov	r5,r4
   107e8:	11000017 	ldw	r4,0(r2)
   107ec:	00102a81 	jmpi	102a8 <___vfprintf_internal_r>

000107f0 <__sfvwrite_small_dev>:
   107f0:	2880000b 	ldhu	r2,0(r5)
   107f4:	1080020c 	andi	r2,r2,8
   107f8:	10002126 	beq	r2,zero,10880 <__sfvwrite_small_dev+0x90>
   107fc:	2880008f 	ldh	r2,2(r5)
   10800:	defffa04 	addi	sp,sp,-24
   10804:	dc000015 	stw	r16,0(sp)
   10808:	dfc00515 	stw	ra,20(sp)
   1080c:	dd000415 	stw	r20,16(sp)
   10810:	dcc00315 	stw	r19,12(sp)
   10814:	dc800215 	stw	r18,8(sp)
   10818:	dc400115 	stw	r17,4(sp)
   1081c:	2821883a 	mov	r16,r5
   10820:	10001216 	blt	r2,zero,1086c <__sfvwrite_small_dev+0x7c>
   10824:	2027883a 	mov	r19,r4
   10828:	3025883a 	mov	r18,r6
   1082c:	3823883a 	mov	r17,r7
   10830:	05010004 	movi	r20,1024
   10834:	04400b0e 	bge	zero,r17,10864 <__sfvwrite_small_dev+0x74>
   10838:	880f883a 	mov	r7,r17
   1083c:	a440010e 	bge	r20,r17,10844 <__sfvwrite_small_dev+0x54>
   10840:	01c10004 	movi	r7,1024
   10844:	8140008f 	ldh	r5,2(r16)
   10848:	900d883a 	mov	r6,r18
   1084c:	9809883a 	mov	r4,r19
   10850:	00108a80 	call	108a8 <_write_r>
   10854:	0080050e 	bge	zero,r2,1086c <__sfvwrite_small_dev+0x7c>
   10858:	88a3c83a 	sub	r17,r17,r2
   1085c:	90a5883a 	add	r18,r18,r2
   10860:	003ff406 	br	10834 <__alt_data_end+0xffff0834>
   10864:	0005883a 	mov	r2,zero
   10868:	00000706 	br	10888 <__sfvwrite_small_dev+0x98>
   1086c:	8080000b 	ldhu	r2,0(r16)
   10870:	10801014 	ori	r2,r2,64
   10874:	8080000d 	sth	r2,0(r16)
   10878:	00bfffc4 	movi	r2,-1
   1087c:	00000206 	br	10888 <__sfvwrite_small_dev+0x98>
   10880:	00bfffc4 	movi	r2,-1
   10884:	f800283a 	ret
   10888:	dfc00517 	ldw	ra,20(sp)
   1088c:	dd000417 	ldw	r20,16(sp)
   10890:	dcc00317 	ldw	r19,12(sp)
   10894:	dc800217 	ldw	r18,8(sp)
   10898:	dc400117 	ldw	r17,4(sp)
   1089c:	dc000017 	ldw	r16,0(sp)
   108a0:	dec00604 	addi	sp,sp,24
   108a4:	f800283a 	ret

000108a8 <_write_r>:
   108a8:	defffd04 	addi	sp,sp,-12
   108ac:	dc000015 	stw	r16,0(sp)
   108b0:	04000074 	movhi	r16,1
   108b4:	dc400115 	stw	r17,4(sp)
   108b8:	84086904 	addi	r16,r16,8612
   108bc:	2023883a 	mov	r17,r4
   108c0:	2809883a 	mov	r4,r5
   108c4:	300b883a 	mov	r5,r6
   108c8:	380d883a 	mov	r6,r7
   108cc:	dfc00215 	stw	ra,8(sp)
   108d0:	80000015 	stw	zero,0(r16)
   108d4:	0010c700 	call	10c70 <write>
   108d8:	00ffffc4 	movi	r3,-1
   108dc:	10c0031e 	bne	r2,r3,108ec <_write_r+0x44>
   108e0:	80c00017 	ldw	r3,0(r16)
   108e4:	18000126 	beq	r3,zero,108ec <_write_r+0x44>
   108e8:	88c00015 	stw	r3,0(r17)
   108ec:	dfc00217 	ldw	ra,8(sp)
   108f0:	dc400117 	ldw	r17,4(sp)
   108f4:	dc000017 	ldw	r16,0(sp)
   108f8:	dec00304 	addi	sp,sp,12
   108fc:	f800283a 	ret

00010900 <__divsi3>:
   10900:	20001b16 	blt	r4,zero,10970 <__divsi3+0x70>
   10904:	000f883a 	mov	r7,zero
   10908:	28001616 	blt	r5,zero,10964 <__divsi3+0x64>
   1090c:	200d883a 	mov	r6,r4
   10910:	29001a2e 	bgeu	r5,r4,1097c <__divsi3+0x7c>
   10914:	00800804 	movi	r2,32
   10918:	00c00044 	movi	r3,1
   1091c:	00000106 	br	10924 <__divsi3+0x24>
   10920:	10000d26 	beq	r2,zero,10958 <__divsi3+0x58>
   10924:	294b883a 	add	r5,r5,r5
   10928:	10bfffc4 	addi	r2,r2,-1
   1092c:	18c7883a 	add	r3,r3,r3
   10930:	293ffb36 	bltu	r5,r4,10920 <__alt_data_end+0xffff0920>
   10934:	0005883a 	mov	r2,zero
   10938:	18000726 	beq	r3,zero,10958 <__divsi3+0x58>
   1093c:	0005883a 	mov	r2,zero
   10940:	31400236 	bltu	r6,r5,1094c <__divsi3+0x4c>
   10944:	314dc83a 	sub	r6,r6,r5
   10948:	10c4b03a 	or	r2,r2,r3
   1094c:	1806d07a 	srli	r3,r3,1
   10950:	280ad07a 	srli	r5,r5,1
   10954:	183ffa1e 	bne	r3,zero,10940 <__alt_data_end+0xffff0940>
   10958:	38000126 	beq	r7,zero,10960 <__divsi3+0x60>
   1095c:	0085c83a 	sub	r2,zero,r2
   10960:	f800283a 	ret
   10964:	014bc83a 	sub	r5,zero,r5
   10968:	39c0005c 	xori	r7,r7,1
   1096c:	003fe706 	br	1090c <__alt_data_end+0xffff090c>
   10970:	0109c83a 	sub	r4,zero,r4
   10974:	01c00044 	movi	r7,1
   10978:	003fe306 	br	10908 <__alt_data_end+0xffff0908>
   1097c:	00c00044 	movi	r3,1
   10980:	003fee06 	br	1093c <__alt_data_end+0xffff093c>

00010984 <__modsi3>:
   10984:	20001716 	blt	r4,zero,109e4 <__modsi3+0x60>
   10988:	000f883a 	mov	r7,zero
   1098c:	2005883a 	mov	r2,r4
   10990:	28001216 	blt	r5,zero,109dc <__modsi3+0x58>
   10994:	2900162e 	bgeu	r5,r4,109f0 <__modsi3+0x6c>
   10998:	01800804 	movi	r6,32
   1099c:	00c00044 	movi	r3,1
   109a0:	00000106 	br	109a8 <__modsi3+0x24>
   109a4:	30000a26 	beq	r6,zero,109d0 <__modsi3+0x4c>
   109a8:	294b883a 	add	r5,r5,r5
   109ac:	31bfffc4 	addi	r6,r6,-1
   109b0:	18c7883a 	add	r3,r3,r3
   109b4:	293ffb36 	bltu	r5,r4,109a4 <__alt_data_end+0xffff09a4>
   109b8:	18000526 	beq	r3,zero,109d0 <__modsi3+0x4c>
   109bc:	1806d07a 	srli	r3,r3,1
   109c0:	11400136 	bltu	r2,r5,109c8 <__modsi3+0x44>
   109c4:	1145c83a 	sub	r2,r2,r5
   109c8:	280ad07a 	srli	r5,r5,1
   109cc:	183ffb1e 	bne	r3,zero,109bc <__alt_data_end+0xffff09bc>
   109d0:	38000126 	beq	r7,zero,109d8 <__modsi3+0x54>
   109d4:	0085c83a 	sub	r2,zero,r2
   109d8:	f800283a 	ret
   109dc:	014bc83a 	sub	r5,zero,r5
   109e0:	003fec06 	br	10994 <__alt_data_end+0xffff0994>
   109e4:	0109c83a 	sub	r4,zero,r4
   109e8:	01c00044 	movi	r7,1
   109ec:	003fe706 	br	1098c <__alt_data_end+0xffff098c>
   109f0:	00c00044 	movi	r3,1
   109f4:	003ff106 	br	109bc <__alt_data_end+0xffff09bc>

000109f8 <__udivsi3>:
   109f8:	200d883a 	mov	r6,r4
   109fc:	2900152e 	bgeu	r5,r4,10a54 <__udivsi3+0x5c>
   10a00:	28001416 	blt	r5,zero,10a54 <__udivsi3+0x5c>
   10a04:	00800804 	movi	r2,32
   10a08:	00c00044 	movi	r3,1
   10a0c:	00000206 	br	10a18 <__udivsi3+0x20>
   10a10:	10000e26 	beq	r2,zero,10a4c <__udivsi3+0x54>
   10a14:	28000516 	blt	r5,zero,10a2c <__udivsi3+0x34>
   10a18:	294b883a 	add	r5,r5,r5
   10a1c:	10bfffc4 	addi	r2,r2,-1
   10a20:	18c7883a 	add	r3,r3,r3
   10a24:	293ffa36 	bltu	r5,r4,10a10 <__alt_data_end+0xffff0a10>
   10a28:	18000826 	beq	r3,zero,10a4c <__udivsi3+0x54>
   10a2c:	0005883a 	mov	r2,zero
   10a30:	31400236 	bltu	r6,r5,10a3c <__udivsi3+0x44>
   10a34:	314dc83a 	sub	r6,r6,r5
   10a38:	10c4b03a 	or	r2,r2,r3
   10a3c:	1806d07a 	srli	r3,r3,1
   10a40:	280ad07a 	srli	r5,r5,1
   10a44:	183ffa1e 	bne	r3,zero,10a30 <__alt_data_end+0xffff0a30>
   10a48:	f800283a 	ret
   10a4c:	0005883a 	mov	r2,zero
   10a50:	f800283a 	ret
   10a54:	00c00044 	movi	r3,1
   10a58:	003ff406 	br	10a2c <__alt_data_end+0xffff0a2c>

00010a5c <__umodsi3>:
   10a5c:	2005883a 	mov	r2,r4
   10a60:	2900122e 	bgeu	r5,r4,10aac <__umodsi3+0x50>
   10a64:	28001116 	blt	r5,zero,10aac <__umodsi3+0x50>
   10a68:	01800804 	movi	r6,32
   10a6c:	00c00044 	movi	r3,1
   10a70:	00000206 	br	10a7c <__umodsi3+0x20>
   10a74:	30000c26 	beq	r6,zero,10aa8 <__umodsi3+0x4c>
   10a78:	28000516 	blt	r5,zero,10a90 <__umodsi3+0x34>
   10a7c:	294b883a 	add	r5,r5,r5
   10a80:	31bfffc4 	addi	r6,r6,-1
   10a84:	18c7883a 	add	r3,r3,r3
   10a88:	293ffa36 	bltu	r5,r4,10a74 <__alt_data_end+0xffff0a74>
   10a8c:	18000626 	beq	r3,zero,10aa8 <__umodsi3+0x4c>
   10a90:	1806d07a 	srli	r3,r3,1
   10a94:	11400136 	bltu	r2,r5,10a9c <__umodsi3+0x40>
   10a98:	1145c83a 	sub	r2,r2,r5
   10a9c:	280ad07a 	srli	r5,r5,1
   10aa0:	183ffb1e 	bne	r3,zero,10a90 <__alt_data_end+0xffff0a90>
   10aa4:	f800283a 	ret
   10aa8:	f800283a 	ret
   10aac:	00c00044 	movi	r3,1
   10ab0:	003ff706 	br	10a90 <__alt_data_end+0xffff0a90>

00010ab4 <__mulsi3>:
   10ab4:	0005883a 	mov	r2,zero
   10ab8:	20000726 	beq	r4,zero,10ad8 <__mulsi3+0x24>
   10abc:	20c0004c 	andi	r3,r4,1
   10ac0:	2008d07a 	srli	r4,r4,1
   10ac4:	18000126 	beq	r3,zero,10acc <__mulsi3+0x18>
   10ac8:	1145883a 	add	r2,r2,r5
   10acc:	294b883a 	add	r5,r5,r5
   10ad0:	203ffa1e 	bne	r4,zero,10abc <__alt_data_end+0xffff0abc>
   10ad4:	f800283a 	ret
   10ad8:	f800283a 	ret

00010adc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10adc:	defffc04 	addi	sp,sp,-16
   10ae0:	df000315 	stw	fp,12(sp)
   10ae4:	df000304 	addi	fp,sp,12
   10ae8:	e13ffd15 	stw	r4,-12(fp)
   10aec:	e17ffe15 	stw	r5,-8(fp)
   10af0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10af4:	e0fffe17 	ldw	r3,-8(fp)
   10af8:	e0bffd17 	ldw	r2,-12(fp)
   10afc:	18800c26 	beq	r3,r2,10b30 <alt_load_section+0x54>
  {
    while( to != end )
   10b00:	00000806 	br	10b24 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10b04:	e0bffe17 	ldw	r2,-8(fp)
   10b08:	10c00104 	addi	r3,r2,4
   10b0c:	e0fffe15 	stw	r3,-8(fp)
   10b10:	e0fffd17 	ldw	r3,-12(fp)
   10b14:	19000104 	addi	r4,r3,4
   10b18:	e13ffd15 	stw	r4,-12(fp)
   10b1c:	18c00017 	ldw	r3,0(r3)
   10b20:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10b24:	e0fffe17 	ldw	r3,-8(fp)
   10b28:	e0bfff17 	ldw	r2,-4(fp)
   10b2c:	18bff51e 	bne	r3,r2,10b04 <__alt_data_end+0xffff0b04>
    {
      *to++ = *from++;
    }
  }
}
   10b30:	0001883a 	nop
   10b34:	e037883a 	mov	sp,fp
   10b38:	df000017 	ldw	fp,0(sp)
   10b3c:	dec00104 	addi	sp,sp,4
   10b40:	f800283a 	ret

00010b44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10b44:	defffe04 	addi	sp,sp,-8
   10b48:	dfc00115 	stw	ra,4(sp)
   10b4c:	df000015 	stw	fp,0(sp)
   10b50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10b54:	01800074 	movhi	r6,1
   10b58:	3187b404 	addi	r6,r6,7888
   10b5c:	01400074 	movhi	r5,1
   10b60:	2946ff04 	addi	r5,r5,7164
   10b64:	01000074 	movhi	r4,1
   10b68:	2107b404 	addi	r4,r4,7888
   10b6c:	0010adc0 	call	10adc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10b70:	01800074 	movhi	r6,1
   10b74:	31800804 	addi	r6,r6,32
   10b78:	01400074 	movhi	r5,1
   10b7c:	29400804 	addi	r5,r5,32
   10b80:	01000074 	movhi	r4,1
   10b84:	21000804 	addi	r4,r4,32
   10b88:	0010adc0 	call	10adc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10b8c:	01800074 	movhi	r6,1
   10b90:	3186ff04 	addi	r6,r6,7164
   10b94:	01400074 	movhi	r5,1
   10b98:	2946eb04 	addi	r5,r5,7084
   10b9c:	01000074 	movhi	r4,1
   10ba0:	2106eb04 	addi	r4,r4,7084
   10ba4:	0010adc0 	call	10adc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10ba8:	00111640 	call	11164 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10bac:	00112900 	call	11290 <alt_icache_flush_all>
}
   10bb0:	0001883a 	nop
   10bb4:	e037883a 	mov	sp,fp
   10bb8:	dfc00117 	ldw	ra,4(sp)
   10bbc:	df000017 	ldw	fp,0(sp)
   10bc0:	dec00204 	addi	sp,sp,8
   10bc4:	f800283a 	ret

00010bc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10bc8:	defffd04 	addi	sp,sp,-12
   10bcc:	dfc00215 	stw	ra,8(sp)
   10bd0:	df000115 	stw	fp,4(sp)
   10bd4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10bd8:	0009883a 	mov	r4,zero
   10bdc:	0010da40 	call	10da4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10be0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10be4:	0010ddc0 	call	10ddc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10be8:	01800074 	movhi	r6,1
   10bec:	3186f204 	addi	r6,r6,7112
   10bf0:	01400074 	movhi	r5,1
   10bf4:	2946f204 	addi	r5,r5,7112
   10bf8:	01000074 	movhi	r4,1
   10bfc:	2106f204 	addi	r4,r4,7112
   10c00:	00113940 	call	11394 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10c04:	d0a0be17 	ldw	r2,-32008(gp)
   10c08:	d0e0bf17 	ldw	r3,-32004(gp)
   10c0c:	d120c017 	ldw	r4,-32000(gp)
   10c10:	200d883a 	mov	r6,r4
   10c14:	180b883a 	mov	r5,r3
   10c18:	1009883a 	mov	r4,r2
   10c1c:	001005c0 	call	1005c <main>
   10c20:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10c24:	01000044 	movi	r4,1
   10c28:	001108c0 	call	1108c <close>
  exit (result);
   10c2c:	e13fff17 	ldw	r4,-4(fp)
   10c30:	00119980 	call	11998 <exit>

00010c34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c34:	defffe04 	addi	sp,sp,-8
   10c38:	dfc00115 	stw	ra,4(sp)
   10c3c:	df000015 	stw	fp,0(sp)
   10c40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10c44:	d0a00717 	ldw	r2,-32740(gp)
   10c48:	10000326 	beq	r2,zero,10c58 <alt_get_errno+0x24>
   10c4c:	d0a00717 	ldw	r2,-32740(gp)
   10c50:	103ee83a 	callr	r2
   10c54:	00000106 	br	10c5c <alt_get_errno+0x28>
   10c58:	d0a0bd04 	addi	r2,gp,-32012
}
   10c5c:	e037883a 	mov	sp,fp
   10c60:	dfc00117 	ldw	ra,4(sp)
   10c64:	df000017 	ldw	fp,0(sp)
   10c68:	dec00204 	addi	sp,sp,8
   10c6c:	f800283a 	ret

00010c70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10c70:	defff904 	addi	sp,sp,-28
   10c74:	dfc00615 	stw	ra,24(sp)
   10c78:	df000515 	stw	fp,20(sp)
   10c7c:	df000504 	addi	fp,sp,20
   10c80:	e13ffd15 	stw	r4,-12(fp)
   10c84:	e17ffe15 	stw	r5,-8(fp)
   10c88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10c8c:	e0bffd17 	ldw	r2,-12(fp)
   10c90:	10000816 	blt	r2,zero,10cb4 <write+0x44>
   10c94:	01400304 	movi	r5,12
   10c98:	e13ffd17 	ldw	r4,-12(fp)
   10c9c:	0010ab40 	call	10ab4 <__mulsi3>
   10ca0:	1007883a 	mov	r3,r2
   10ca4:	00800074 	movhi	r2,1
   10ca8:	10874c04 	addi	r2,r2,7472
   10cac:	1885883a 	add	r2,r3,r2
   10cb0:	00000106 	br	10cb8 <write+0x48>
   10cb4:	0005883a 	mov	r2,zero
   10cb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10cbc:	e0bffb17 	ldw	r2,-20(fp)
   10cc0:	10002126 	beq	r2,zero,10d48 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10cc4:	e0bffb17 	ldw	r2,-20(fp)
   10cc8:	10800217 	ldw	r2,8(r2)
   10ccc:	108000cc 	andi	r2,r2,3
   10cd0:	10001826 	beq	r2,zero,10d34 <write+0xc4>
   10cd4:	e0bffb17 	ldw	r2,-20(fp)
   10cd8:	10800017 	ldw	r2,0(r2)
   10cdc:	10800617 	ldw	r2,24(r2)
   10ce0:	10001426 	beq	r2,zero,10d34 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10ce4:	e0bffb17 	ldw	r2,-20(fp)
   10ce8:	10800017 	ldw	r2,0(r2)
   10cec:	10800617 	ldw	r2,24(r2)
   10cf0:	e0ffff17 	ldw	r3,-4(fp)
   10cf4:	180d883a 	mov	r6,r3
   10cf8:	e17ffe17 	ldw	r5,-8(fp)
   10cfc:	e13ffb17 	ldw	r4,-20(fp)
   10d00:	103ee83a 	callr	r2
   10d04:	e0bffc15 	stw	r2,-16(fp)
   10d08:	e0bffc17 	ldw	r2,-16(fp)
   10d0c:	1000070e 	bge	r2,zero,10d2c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10d10:	0010c340 	call	10c34 <alt_get_errno>
   10d14:	1007883a 	mov	r3,r2
   10d18:	e0bffc17 	ldw	r2,-16(fp)
   10d1c:	0085c83a 	sub	r2,zero,r2
   10d20:	18800015 	stw	r2,0(r3)
        return -1;
   10d24:	00bfffc4 	movi	r2,-1
   10d28:	00000c06 	br	10d5c <write+0xec>
      }
      return rval;
   10d2c:	e0bffc17 	ldw	r2,-16(fp)
   10d30:	00000a06 	br	10d5c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10d34:	0010c340 	call	10c34 <alt_get_errno>
   10d38:	1007883a 	mov	r3,r2
   10d3c:	00800344 	movi	r2,13
   10d40:	18800015 	stw	r2,0(r3)
   10d44:	00000406 	br	10d58 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10d48:	0010c340 	call	10c34 <alt_get_errno>
   10d4c:	1007883a 	mov	r3,r2
   10d50:	00801444 	movi	r2,81
   10d54:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10d58:	00bfffc4 	movi	r2,-1
}
   10d5c:	e037883a 	mov	sp,fp
   10d60:	dfc00117 	ldw	ra,4(sp)
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00204 	addi	sp,sp,8
   10d6c:	f800283a 	ret

00010d70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10d70:	defffd04 	addi	sp,sp,-12
   10d74:	dfc00215 	stw	ra,8(sp)
   10d78:	df000115 	stw	fp,4(sp)
   10d7c:	df000104 	addi	fp,sp,4
   10d80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10d84:	d1600404 	addi	r5,gp,-32752
   10d88:	e13fff17 	ldw	r4,-4(fp)
   10d8c:	00111ec0 	call	111ec <alt_dev_llist_insert>
}
   10d90:	e037883a 	mov	sp,fp
   10d94:	dfc00117 	ldw	ra,4(sp)
   10d98:	df000017 	ldw	fp,0(sp)
   10d9c:	dec00204 	addi	sp,sp,8
   10da0:	f800283a 	ret

00010da4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10da4:	defffd04 	addi	sp,sp,-12
   10da8:	dfc00215 	stw	ra,8(sp)
   10dac:	df000115 	stw	fp,4(sp)
   10db0:	df000104 	addi	fp,sp,4
   10db4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   10db8:	00117180 	call	11718 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10dbc:	00800044 	movi	r2,1
   10dc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10dc4:	0001883a 	nop
   10dc8:	e037883a 	mov	sp,fp
   10dcc:	dfc00117 	ldw	ra,4(sp)
   10dd0:	df000017 	ldw	fp,0(sp)
   10dd4:	dec00204 	addi	sp,sp,8
   10dd8:	f800283a 	ret

00010ddc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ddc:	defffe04 	addi	sp,sp,-8
   10de0:	dfc00115 	stw	ra,4(sp)
   10de4:	df000015 	stw	fp,0(sp)
   10de8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10dec:	01000074 	movhi	r4,1
   10df0:	21073704 	addi	r4,r4,7388
   10df4:	0010d700 	call	10d70 <alt_dev_reg>
}
   10df8:	0001883a 	nop
   10dfc:	e037883a 	mov	sp,fp
   10e00:	dfc00117 	ldw	ra,4(sp)
   10e04:	df000017 	ldw	fp,0(sp)
   10e08:	dec00204 	addi	sp,sp,8
   10e0c:	f800283a 	ret

00010e10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10e10:	defffa04 	addi	sp,sp,-24
   10e14:	dfc00515 	stw	ra,20(sp)
   10e18:	df000415 	stw	fp,16(sp)
   10e1c:	df000404 	addi	fp,sp,16
   10e20:	e13ffd15 	stw	r4,-12(fp)
   10e24:	e17ffe15 	stw	r5,-8(fp)
   10e28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10e2c:	e0bffd17 	ldw	r2,-12(fp)
   10e30:	10800017 	ldw	r2,0(r2)
   10e34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10e38:	e0bffc17 	ldw	r2,-16(fp)
   10e3c:	10c00a04 	addi	r3,r2,40
   10e40:	e0bffd17 	ldw	r2,-12(fp)
   10e44:	10800217 	ldw	r2,8(r2)
   10e48:	100f883a 	mov	r7,r2
   10e4c:	e1bfff17 	ldw	r6,-4(fp)
   10e50:	e17ffe17 	ldw	r5,-8(fp)
   10e54:	1809883a 	mov	r4,r3
   10e58:	0010ed00 	call	10ed0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10e5c:	e037883a 	mov	sp,fp
   10e60:	dfc00117 	ldw	ra,4(sp)
   10e64:	df000017 	ldw	fp,0(sp)
   10e68:	dec00204 	addi	sp,sp,8
   10e6c:	f800283a 	ret

00010e70 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10e70:	defffa04 	addi	sp,sp,-24
   10e74:	dfc00515 	stw	ra,20(sp)
   10e78:	df000415 	stw	fp,16(sp)
   10e7c:	df000404 	addi	fp,sp,16
   10e80:	e13ffd15 	stw	r4,-12(fp)
   10e84:	e17ffe15 	stw	r5,-8(fp)
   10e88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10e8c:	e0bffd17 	ldw	r2,-12(fp)
   10e90:	10800017 	ldw	r2,0(r2)
   10e94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	10c00a04 	addi	r3,r2,40
   10ea0:	e0bffd17 	ldw	r2,-12(fp)
   10ea4:	10800217 	ldw	r2,8(r2)
   10ea8:	100f883a 	mov	r7,r2
   10eac:	e1bfff17 	ldw	r6,-4(fp)
   10eb0:	e17ffe17 	ldw	r5,-8(fp)
   10eb4:	1809883a 	mov	r4,r3
   10eb8:	0010fbc0 	call	10fbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10ebc:	e037883a 	mov	sp,fp
   10ec0:	dfc00117 	ldw	ra,4(sp)
   10ec4:	df000017 	ldw	fp,0(sp)
   10ec8:	dec00204 	addi	sp,sp,8
   10ecc:	f800283a 	ret

00010ed0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   10ed0:	defff704 	addi	sp,sp,-36
   10ed4:	df000815 	stw	fp,32(sp)
   10ed8:	df000804 	addi	fp,sp,32
   10edc:	e13ffc15 	stw	r4,-16(fp)
   10ee0:	e17ffd15 	stw	r5,-12(fp)
   10ee4:	e1bffe15 	stw	r6,-8(fp)
   10ee8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10eec:	e0bffc17 	ldw	r2,-16(fp)
   10ef0:	10800017 	ldw	r2,0(r2)
   10ef4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   10ef8:	e0bffd17 	ldw	r2,-12(fp)
   10efc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	e0fffd17 	ldw	r3,-12(fp)
   10f08:	1885883a 	add	r2,r3,r2
   10f0c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   10f10:	00001206 	br	10f5c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10f14:	e0bff917 	ldw	r2,-28(fp)
   10f18:	10800037 	ldwio	r2,0(r2)
   10f1c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   10f20:	e0bffb17 	ldw	r2,-20(fp)
   10f24:	10a0000c 	andi	r2,r2,32768
   10f28:	10000626 	beq	r2,zero,10f44 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10f2c:	e0bff817 	ldw	r2,-32(fp)
   10f30:	10c00044 	addi	r3,r2,1
   10f34:	e0fff815 	stw	r3,-32(fp)
   10f38:	e0fffb17 	ldw	r3,-20(fp)
   10f3c:	10c00005 	stb	r3,0(r2)
   10f40:	00000606 	br	10f5c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   10f44:	e0fff817 	ldw	r3,-32(fp)
   10f48:	e0bffd17 	ldw	r2,-12(fp)
   10f4c:	1880071e 	bne	r3,r2,10f6c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   10f50:	e0bfff17 	ldw	r2,-4(fp)
   10f54:	1090000c 	andi	r2,r2,16384
   10f58:	1000061e 	bne	r2,zero,10f74 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   10f5c:	e0fff817 	ldw	r3,-32(fp)
   10f60:	e0bffa17 	ldw	r2,-24(fp)
   10f64:	18bfeb36 	bltu	r3,r2,10f14 <__alt_data_end+0xffff0f14>
   10f68:	00000306 	br	10f78 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   10f6c:	0001883a 	nop
   10f70:	00000106 	br	10f78 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   10f74:	0001883a 	nop
    
  }

  if (ptr != buffer)
   10f78:	e0fff817 	ldw	r3,-32(fp)
   10f7c:	e0bffd17 	ldw	r2,-12(fp)
   10f80:	18800426 	beq	r3,r2,10f94 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   10f84:	e0fff817 	ldw	r3,-32(fp)
   10f88:	e0bffd17 	ldw	r2,-12(fp)
   10f8c:	1885c83a 	sub	r2,r3,r2
   10f90:	00000606 	br	10fac <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   10f94:	e0bfff17 	ldw	r2,-4(fp)
   10f98:	1090000c 	andi	r2,r2,16384
   10f9c:	10000226 	beq	r2,zero,10fa8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   10fa0:	00bffd44 	movi	r2,-11
   10fa4:	00000106 	br	10fac <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   10fa8:	00bffec4 	movi	r2,-5
}
   10fac:	e037883a 	mov	sp,fp
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00104 	addi	sp,sp,4
   10fb8:	f800283a 	ret

00010fbc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10fbc:	defff904 	addi	sp,sp,-28
   10fc0:	df000615 	stw	fp,24(sp)
   10fc4:	df000604 	addi	fp,sp,24
   10fc8:	e13ffc15 	stw	r4,-16(fp)
   10fcc:	e17ffd15 	stw	r5,-12(fp)
   10fd0:	e1bffe15 	stw	r6,-8(fp)
   10fd4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10fd8:	e0bffc17 	ldw	r2,-16(fp)
   10fdc:	10800017 	ldw	r2,0(r2)
   10fe0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   10fe4:	e0bffe17 	ldw	r2,-8(fp)
   10fe8:	e0fffd17 	ldw	r3,-12(fp)
   10fec:	1885883a 	add	r2,r3,r2
   10ff0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   10ff4:	00000e06 	br	11030 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10ff8:	e0bffa17 	ldw	r2,-24(fp)
   10ffc:	10800104 	addi	r2,r2,4
   11000:	10800037 	ldwio	r2,0(r2)
   11004:	10bfffec 	andhi	r2,r2,65535
   11008:	10000926 	beq	r2,zero,11030 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1100c:	e0fffa17 	ldw	r3,-24(fp)
   11010:	e0bffd17 	ldw	r2,-12(fp)
   11014:	11000044 	addi	r4,r2,1
   11018:	e13ffd15 	stw	r4,-12(fp)
   1101c:	10800003 	ldbu	r2,0(r2)
   11020:	10803fcc 	andi	r2,r2,255
   11024:	1080201c 	xori	r2,r2,128
   11028:	10bfe004 	addi	r2,r2,-128
   1102c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11030:	e0fffd17 	ldw	r3,-12(fp)
   11034:	e0bffb17 	ldw	r2,-20(fp)
   11038:	18bfef36 	bltu	r3,r2,10ff8 <__alt_data_end+0xffff0ff8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   1103c:	e0bffe17 	ldw	r2,-8(fp)
}
   11040:	e037883a 	mov	sp,fp
   11044:	df000017 	ldw	fp,0(sp)
   11048:	dec00104 	addi	sp,sp,4
   1104c:	f800283a 	ret

00011050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11050:	defffe04 	addi	sp,sp,-8
   11054:	dfc00115 	stw	ra,4(sp)
   11058:	df000015 	stw	fp,0(sp)
   1105c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11060:	d0a00717 	ldw	r2,-32740(gp)
   11064:	10000326 	beq	r2,zero,11074 <alt_get_errno+0x24>
   11068:	d0a00717 	ldw	r2,-32740(gp)
   1106c:	103ee83a 	callr	r2
   11070:	00000106 	br	11078 <alt_get_errno+0x28>
   11074:	d0a0bd04 	addi	r2,gp,-32012
}
   11078:	e037883a 	mov	sp,fp
   1107c:	dfc00117 	ldw	ra,4(sp)
   11080:	df000017 	ldw	fp,0(sp)
   11084:	dec00204 	addi	sp,sp,8
   11088:	f800283a 	ret

0001108c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1108c:	defffb04 	addi	sp,sp,-20
   11090:	dfc00415 	stw	ra,16(sp)
   11094:	df000315 	stw	fp,12(sp)
   11098:	df000304 	addi	fp,sp,12
   1109c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   110a0:	e0bfff17 	ldw	r2,-4(fp)
   110a4:	10000816 	blt	r2,zero,110c8 <close+0x3c>
   110a8:	01400304 	movi	r5,12
   110ac:	e13fff17 	ldw	r4,-4(fp)
   110b0:	0010ab40 	call	10ab4 <__mulsi3>
   110b4:	1007883a 	mov	r3,r2
   110b8:	00800074 	movhi	r2,1
   110bc:	10874c04 	addi	r2,r2,7472
   110c0:	1885883a 	add	r2,r3,r2
   110c4:	00000106 	br	110cc <close+0x40>
   110c8:	0005883a 	mov	r2,zero
   110cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   110d0:	e0bffd17 	ldw	r2,-12(fp)
   110d4:	10001926 	beq	r2,zero,1113c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   110d8:	e0bffd17 	ldw	r2,-12(fp)
   110dc:	10800017 	ldw	r2,0(r2)
   110e0:	10800417 	ldw	r2,16(r2)
   110e4:	10000626 	beq	r2,zero,11100 <close+0x74>
   110e8:	e0bffd17 	ldw	r2,-12(fp)
   110ec:	10800017 	ldw	r2,0(r2)
   110f0:	10800417 	ldw	r2,16(r2)
   110f4:	e13ffd17 	ldw	r4,-12(fp)
   110f8:	103ee83a 	callr	r2
   110fc:	00000106 	br	11104 <close+0x78>
   11100:	0005883a 	mov	r2,zero
   11104:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11108:	e13fff17 	ldw	r4,-4(fp)
   1110c:	00116940 	call	11694 <alt_release_fd>
    if (rval < 0)
   11110:	e0bffe17 	ldw	r2,-8(fp)
   11114:	1000070e 	bge	r2,zero,11134 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11118:	00110500 	call	11050 <alt_get_errno>
   1111c:	1007883a 	mov	r3,r2
   11120:	e0bffe17 	ldw	r2,-8(fp)
   11124:	0085c83a 	sub	r2,zero,r2
   11128:	18800015 	stw	r2,0(r3)
      return -1;
   1112c:	00bfffc4 	movi	r2,-1
   11130:	00000706 	br	11150 <close+0xc4>
    }
    return 0;
   11134:	0005883a 	mov	r2,zero
   11138:	00000506 	br	11150 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1113c:	00110500 	call	11050 <alt_get_errno>
   11140:	1007883a 	mov	r3,r2
   11144:	00801444 	movi	r2,81
   11148:	18800015 	stw	r2,0(r3)
    return -1;
   1114c:	00bfffc4 	movi	r2,-1
  }
}
   11150:	e037883a 	mov	sp,fp
   11154:	dfc00117 	ldw	ra,4(sp)
   11158:	df000017 	ldw	fp,0(sp)
   1115c:	dec00204 	addi	sp,sp,8
   11160:	f800283a 	ret

00011164 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11164:	deffff04 	addi	sp,sp,-4
   11168:	df000015 	stw	fp,0(sp)
   1116c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11170:	0001883a 	nop
   11174:	e037883a 	mov	sp,fp
   11178:	df000017 	ldw	fp,0(sp)
   1117c:	dec00104 	addi	sp,sp,4
   11180:	f800283a 	ret

00011184 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11184:	defffc04 	addi	sp,sp,-16
   11188:	df000315 	stw	fp,12(sp)
   1118c:	df000304 	addi	fp,sp,12
   11190:	e13ffd15 	stw	r4,-12(fp)
   11194:	e17ffe15 	stw	r5,-8(fp)
   11198:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1119c:	e0bfff17 	ldw	r2,-4(fp)
}
   111a0:	e037883a 	mov	sp,fp
   111a4:	df000017 	ldw	fp,0(sp)
   111a8:	dec00104 	addi	sp,sp,4
   111ac:	f800283a 	ret

000111b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   111b0:	defffe04 	addi	sp,sp,-8
   111b4:	dfc00115 	stw	ra,4(sp)
   111b8:	df000015 	stw	fp,0(sp)
   111bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   111c0:	d0a00717 	ldw	r2,-32740(gp)
   111c4:	10000326 	beq	r2,zero,111d4 <alt_get_errno+0x24>
   111c8:	d0a00717 	ldw	r2,-32740(gp)
   111cc:	103ee83a 	callr	r2
   111d0:	00000106 	br	111d8 <alt_get_errno+0x28>
   111d4:	d0a0bd04 	addi	r2,gp,-32012
}
   111d8:	e037883a 	mov	sp,fp
   111dc:	dfc00117 	ldw	ra,4(sp)
   111e0:	df000017 	ldw	fp,0(sp)
   111e4:	dec00204 	addi	sp,sp,8
   111e8:	f800283a 	ret

000111ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   111ec:	defffa04 	addi	sp,sp,-24
   111f0:	dfc00515 	stw	ra,20(sp)
   111f4:	df000415 	stw	fp,16(sp)
   111f8:	df000404 	addi	fp,sp,16
   111fc:	e13ffe15 	stw	r4,-8(fp)
   11200:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11204:	e0bffe17 	ldw	r2,-8(fp)
   11208:	10000326 	beq	r2,zero,11218 <alt_dev_llist_insert+0x2c>
   1120c:	e0bffe17 	ldw	r2,-8(fp)
   11210:	10800217 	ldw	r2,8(r2)
   11214:	1000061e 	bne	r2,zero,11230 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11218:	00111b00 	call	111b0 <alt_get_errno>
   1121c:	1007883a 	mov	r3,r2
   11220:	00800584 	movi	r2,22
   11224:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11228:	00bffa84 	movi	r2,-22
   1122c:	00001306 	br	1127c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11230:	e0bffe17 	ldw	r2,-8(fp)
   11234:	e0ffff17 	ldw	r3,-4(fp)
   11238:	e0fffc15 	stw	r3,-16(fp)
   1123c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11240:	e0bffd17 	ldw	r2,-12(fp)
   11244:	e0fffc17 	ldw	r3,-16(fp)
   11248:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1124c:	e0bffc17 	ldw	r2,-16(fp)
   11250:	10c00017 	ldw	r3,0(r2)
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1125c:	e0bffc17 	ldw	r2,-16(fp)
   11260:	10800017 	ldw	r2,0(r2)
   11264:	e0fffd17 	ldw	r3,-12(fp)
   11268:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1126c:	e0bffc17 	ldw	r2,-16(fp)
   11270:	e0fffd17 	ldw	r3,-12(fp)
   11274:	10c00015 	stw	r3,0(r2)

  return 0;  
   11278:	0005883a 	mov	r2,zero
}
   1127c:	e037883a 	mov	sp,fp
   11280:	dfc00117 	ldw	ra,4(sp)
   11284:	df000017 	ldw	fp,0(sp)
   11288:	dec00204 	addi	sp,sp,8
   1128c:	f800283a 	ret

00011290 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11290:	deffff04 	addi	sp,sp,-4
   11294:	df000015 	stw	fp,0(sp)
   11298:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1129c:	0001883a 	nop
   112a0:	e037883a 	mov	sp,fp
   112a4:	df000017 	ldw	fp,0(sp)
   112a8:	dec00104 	addi	sp,sp,4
   112ac:	f800283a 	ret

000112b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   112b0:	defff804 	addi	sp,sp,-32
   112b4:	dfc00715 	stw	ra,28(sp)
   112b8:	df000615 	stw	fp,24(sp)
   112bc:	dc000515 	stw	r16,20(sp)
   112c0:	df000604 	addi	fp,sp,24
   112c4:	e13ffb15 	stw	r4,-20(fp)
   112c8:	e17ffc15 	stw	r5,-16(fp)
   112cc:	e1bffd15 	stw	r6,-12(fp)
   112d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   112d4:	e1bffe17 	ldw	r6,-8(fp)
   112d8:	e17ffd17 	ldw	r5,-12(fp)
   112dc:	e13ffc17 	ldw	r4,-16(fp)
   112e0:	00115380 	call	11538 <open>
   112e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   112e8:	e0bffa17 	ldw	r2,-24(fp)
   112ec:	10002216 	blt	r2,zero,11378 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   112f0:	04000074 	movhi	r16,1
   112f4:	84074c04 	addi	r16,r16,7472
   112f8:	e0bffa17 	ldw	r2,-24(fp)
   112fc:	01400304 	movi	r5,12
   11300:	1009883a 	mov	r4,r2
   11304:	0010ab40 	call	10ab4 <__mulsi3>
   11308:	8085883a 	add	r2,r16,r2
   1130c:	10c00017 	ldw	r3,0(r2)
   11310:	e0bffb17 	ldw	r2,-20(fp)
   11314:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11318:	04000074 	movhi	r16,1
   1131c:	84074c04 	addi	r16,r16,7472
   11320:	e0bffa17 	ldw	r2,-24(fp)
   11324:	01400304 	movi	r5,12
   11328:	1009883a 	mov	r4,r2
   1132c:	0010ab40 	call	10ab4 <__mulsi3>
   11330:	8085883a 	add	r2,r16,r2
   11334:	10800104 	addi	r2,r2,4
   11338:	10c00017 	ldw	r3,0(r2)
   1133c:	e0bffb17 	ldw	r2,-20(fp)
   11340:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11344:	04000074 	movhi	r16,1
   11348:	84074c04 	addi	r16,r16,7472
   1134c:	e0bffa17 	ldw	r2,-24(fp)
   11350:	01400304 	movi	r5,12
   11354:	1009883a 	mov	r4,r2
   11358:	0010ab40 	call	10ab4 <__mulsi3>
   1135c:	8085883a 	add	r2,r16,r2
   11360:	10800204 	addi	r2,r2,8
   11364:	10c00017 	ldw	r3,0(r2)
   11368:	e0bffb17 	ldw	r2,-20(fp)
   1136c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11370:	e13ffa17 	ldw	r4,-24(fp)
   11374:	00116940 	call	11694 <alt_release_fd>
  }
} 
   11378:	0001883a 	nop
   1137c:	e6ffff04 	addi	sp,fp,-4
   11380:	dfc00217 	ldw	ra,8(sp)
   11384:	df000117 	ldw	fp,4(sp)
   11388:	dc000017 	ldw	r16,0(sp)
   1138c:	dec00304 	addi	sp,sp,12
   11390:	f800283a 	ret

00011394 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11394:	defffb04 	addi	sp,sp,-20
   11398:	dfc00415 	stw	ra,16(sp)
   1139c:	df000315 	stw	fp,12(sp)
   113a0:	df000304 	addi	fp,sp,12
   113a4:	e13ffd15 	stw	r4,-12(fp)
   113a8:	e17ffe15 	stw	r5,-8(fp)
   113ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   113b0:	01c07fc4 	movi	r7,511
   113b4:	01800044 	movi	r6,1
   113b8:	e17ffd17 	ldw	r5,-12(fp)
   113bc:	01000074 	movhi	r4,1
   113c0:	21074f04 	addi	r4,r4,7484
   113c4:	00112b00 	call	112b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   113c8:	01c07fc4 	movi	r7,511
   113cc:	000d883a 	mov	r6,zero
   113d0:	e17ffe17 	ldw	r5,-8(fp)
   113d4:	01000074 	movhi	r4,1
   113d8:	21074c04 	addi	r4,r4,7472
   113dc:	00112b00 	call	112b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   113e0:	01c07fc4 	movi	r7,511
   113e4:	01800044 	movi	r6,1
   113e8:	e17fff17 	ldw	r5,-4(fp)
   113ec:	01000074 	movhi	r4,1
   113f0:	21075204 	addi	r4,r4,7496
   113f4:	00112b00 	call	112b0 <alt_open_fd>
}  
   113f8:	0001883a 	nop
   113fc:	e037883a 	mov	sp,fp
   11400:	dfc00117 	ldw	ra,4(sp)
   11404:	df000017 	ldw	fp,0(sp)
   11408:	dec00204 	addi	sp,sp,8
   1140c:	f800283a 	ret

00011410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11410:	defffe04 	addi	sp,sp,-8
   11414:	dfc00115 	stw	ra,4(sp)
   11418:	df000015 	stw	fp,0(sp)
   1141c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11420:	d0a00717 	ldw	r2,-32740(gp)
   11424:	10000326 	beq	r2,zero,11434 <alt_get_errno+0x24>
   11428:	d0a00717 	ldw	r2,-32740(gp)
   1142c:	103ee83a 	callr	r2
   11430:	00000106 	br	11438 <alt_get_errno+0x28>
   11434:	d0a0bd04 	addi	r2,gp,-32012
}
   11438:	e037883a 	mov	sp,fp
   1143c:	dfc00117 	ldw	ra,4(sp)
   11440:	df000017 	ldw	fp,0(sp)
   11444:	dec00204 	addi	sp,sp,8
   11448:	f800283a 	ret

0001144c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1144c:	defffb04 	addi	sp,sp,-20
   11450:	dfc00415 	stw	ra,16(sp)
   11454:	df000315 	stw	fp,12(sp)
   11458:	dc000215 	stw	r16,8(sp)
   1145c:	df000304 	addi	fp,sp,12
   11460:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11464:	e0bffe17 	ldw	r2,-8(fp)
   11468:	10800217 	ldw	r2,8(r2)
   1146c:	10d00034 	orhi	r3,r2,16384
   11470:	e0bffe17 	ldw	r2,-8(fp)
   11474:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11478:	e03ffd15 	stw	zero,-12(fp)
   1147c:	00002306 	br	1150c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11480:	04000074 	movhi	r16,1
   11484:	84074c04 	addi	r16,r16,7472
   11488:	e0bffd17 	ldw	r2,-12(fp)
   1148c:	01400304 	movi	r5,12
   11490:	1009883a 	mov	r4,r2
   11494:	0010ab40 	call	10ab4 <__mulsi3>
   11498:	8085883a 	add	r2,r16,r2
   1149c:	10c00017 	ldw	r3,0(r2)
   114a0:	e0bffe17 	ldw	r2,-8(fp)
   114a4:	10800017 	ldw	r2,0(r2)
   114a8:	1880151e 	bne	r3,r2,11500 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   114ac:	04000074 	movhi	r16,1
   114b0:	84074c04 	addi	r16,r16,7472
   114b4:	e0bffd17 	ldw	r2,-12(fp)
   114b8:	01400304 	movi	r5,12
   114bc:	1009883a 	mov	r4,r2
   114c0:	0010ab40 	call	10ab4 <__mulsi3>
   114c4:	8085883a 	add	r2,r16,r2
   114c8:	10800204 	addi	r2,r2,8
   114cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   114d0:	10000b0e 	bge	r2,zero,11500 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   114d4:	01400304 	movi	r5,12
   114d8:	e13ffd17 	ldw	r4,-12(fp)
   114dc:	0010ab40 	call	10ab4 <__mulsi3>
   114e0:	1007883a 	mov	r3,r2
   114e4:	00800074 	movhi	r2,1
   114e8:	10874c04 	addi	r2,r2,7472
   114ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   114f0:	e0bffe17 	ldw	r2,-8(fp)
   114f4:	18800226 	beq	r3,r2,11500 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   114f8:	00bffcc4 	movi	r2,-13
   114fc:	00000806 	br	11520 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11500:	e0bffd17 	ldw	r2,-12(fp)
   11504:	10800044 	addi	r2,r2,1
   11508:	e0bffd15 	stw	r2,-12(fp)
   1150c:	d0a00617 	ldw	r2,-32744(gp)
   11510:	1007883a 	mov	r3,r2
   11514:	e0bffd17 	ldw	r2,-12(fp)
   11518:	18bfd92e 	bgeu	r3,r2,11480 <__alt_data_end+0xffff1480>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1151c:	0005883a 	mov	r2,zero
}
   11520:	e6ffff04 	addi	sp,fp,-4
   11524:	dfc00217 	ldw	ra,8(sp)
   11528:	df000117 	ldw	fp,4(sp)
   1152c:	dc000017 	ldw	r16,0(sp)
   11530:	dec00304 	addi	sp,sp,12
   11534:	f800283a 	ret

00011538 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11538:	defff604 	addi	sp,sp,-40
   1153c:	dfc00915 	stw	ra,36(sp)
   11540:	df000815 	stw	fp,32(sp)
   11544:	df000804 	addi	fp,sp,32
   11548:	e13ffd15 	stw	r4,-12(fp)
   1154c:	e17ffe15 	stw	r5,-8(fp)
   11550:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11554:	00bfffc4 	movi	r2,-1
   11558:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1155c:	00bffb44 	movi	r2,-19
   11560:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11564:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11568:	d1600404 	addi	r5,gp,-32752
   1156c:	e13ffd17 	ldw	r4,-12(fp)
   11570:	001173c0 	call	1173c <alt_find_dev>
   11574:	e0bff815 	stw	r2,-32(fp)
   11578:	e0bff817 	ldw	r2,-32(fp)
   1157c:	1000051e 	bne	r2,zero,11594 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11580:	e13ffd17 	ldw	r4,-12(fp)
   11584:	00117cc0 	call	117cc <alt_find_file>
   11588:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1158c:	00800044 	movi	r2,1
   11590:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11594:	e0bff817 	ldw	r2,-32(fp)
   11598:	10002b26 	beq	r2,zero,11648 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1159c:	e13ff817 	ldw	r4,-32(fp)
   115a0:	00118d40 	call	118d4 <alt_get_fd>
   115a4:	e0bff915 	stw	r2,-28(fp)
   115a8:	e0bff917 	ldw	r2,-28(fp)
   115ac:	1000030e 	bge	r2,zero,115bc <open+0x84>
    {
      status = index;
   115b0:	e0bff917 	ldw	r2,-28(fp)
   115b4:	e0bffa15 	stw	r2,-24(fp)
   115b8:	00002506 	br	11650 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   115bc:	01400304 	movi	r5,12
   115c0:	e13ff917 	ldw	r4,-28(fp)
   115c4:	0010ab40 	call	10ab4 <__mulsi3>
   115c8:	1007883a 	mov	r3,r2
   115cc:	00800074 	movhi	r2,1
   115d0:	10874c04 	addi	r2,r2,7472
   115d4:	1885883a 	add	r2,r3,r2
   115d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   115dc:	e0fffe17 	ldw	r3,-8(fp)
   115e0:	00900034 	movhi	r2,16384
   115e4:	10bfffc4 	addi	r2,r2,-1
   115e8:	1886703a 	and	r3,r3,r2
   115ec:	e0bffc17 	ldw	r2,-16(fp)
   115f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   115f4:	e0bffb17 	ldw	r2,-20(fp)
   115f8:	1000051e 	bne	r2,zero,11610 <open+0xd8>
   115fc:	e13ffc17 	ldw	r4,-16(fp)
   11600:	001144c0 	call	1144c <alt_file_locked>
   11604:	e0bffa15 	stw	r2,-24(fp)
   11608:	e0bffa17 	ldw	r2,-24(fp)
   1160c:	10001016 	blt	r2,zero,11650 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11610:	e0bff817 	ldw	r2,-32(fp)
   11614:	10800317 	ldw	r2,12(r2)
   11618:	10000826 	beq	r2,zero,1163c <open+0x104>
   1161c:	e0bff817 	ldw	r2,-32(fp)
   11620:	10800317 	ldw	r2,12(r2)
   11624:	e1ffff17 	ldw	r7,-4(fp)
   11628:	e1bffe17 	ldw	r6,-8(fp)
   1162c:	e17ffd17 	ldw	r5,-12(fp)
   11630:	e13ffc17 	ldw	r4,-16(fp)
   11634:	103ee83a 	callr	r2
   11638:	00000106 	br	11640 <open+0x108>
   1163c:	0005883a 	mov	r2,zero
   11640:	e0bffa15 	stw	r2,-24(fp)
   11644:	00000206 	br	11650 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11648:	00bffb44 	movi	r2,-19
   1164c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11650:	e0bffa17 	ldw	r2,-24(fp)
   11654:	1000090e 	bge	r2,zero,1167c <open+0x144>
  {
    alt_release_fd (index);  
   11658:	e13ff917 	ldw	r4,-28(fp)
   1165c:	00116940 	call	11694 <alt_release_fd>
    ALT_ERRNO = -status;
   11660:	00114100 	call	11410 <alt_get_errno>
   11664:	1007883a 	mov	r3,r2
   11668:	e0bffa17 	ldw	r2,-24(fp)
   1166c:	0085c83a 	sub	r2,zero,r2
   11670:	18800015 	stw	r2,0(r3)
    return -1;
   11674:	00bfffc4 	movi	r2,-1
   11678:	00000106 	br	11680 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1167c:	e0bff917 	ldw	r2,-28(fp)
}
   11680:	e037883a 	mov	sp,fp
   11684:	dfc00117 	ldw	ra,4(sp)
   11688:	df000017 	ldw	fp,0(sp)
   1168c:	dec00204 	addi	sp,sp,8
   11690:	f800283a 	ret

00011694 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11694:	defffc04 	addi	sp,sp,-16
   11698:	dfc00315 	stw	ra,12(sp)
   1169c:	df000215 	stw	fp,8(sp)
   116a0:	dc000115 	stw	r16,4(sp)
   116a4:	df000204 	addi	fp,sp,8
   116a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   116ac:	e0bffe17 	ldw	r2,-8(fp)
   116b0:	108000d0 	cmplti	r2,r2,3
   116b4:	1000111e 	bne	r2,zero,116fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   116b8:	04000074 	movhi	r16,1
   116bc:	84074c04 	addi	r16,r16,7472
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	01400304 	movi	r5,12
   116c8:	1009883a 	mov	r4,r2
   116cc:	0010ab40 	call	10ab4 <__mulsi3>
   116d0:	8085883a 	add	r2,r16,r2
   116d4:	10800204 	addi	r2,r2,8
   116d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   116dc:	04000074 	movhi	r16,1
   116e0:	84074c04 	addi	r16,r16,7472
   116e4:	e0bffe17 	ldw	r2,-8(fp)
   116e8:	01400304 	movi	r5,12
   116ec:	1009883a 	mov	r4,r2
   116f0:	0010ab40 	call	10ab4 <__mulsi3>
   116f4:	8085883a 	add	r2,r16,r2
   116f8:	10000015 	stw	zero,0(r2)
  }
}
   116fc:	0001883a 	nop
   11700:	e6ffff04 	addi	sp,fp,-4
   11704:	dfc00217 	ldw	ra,8(sp)
   11708:	df000117 	ldw	fp,4(sp)
   1170c:	dc000017 	ldw	r16,0(sp)
   11710:	dec00304 	addi	sp,sp,12
   11714:	f800283a 	ret

00011718 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11718:	deffff04 	addi	sp,sp,-4
   1171c:	df000015 	stw	fp,0(sp)
   11720:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11724:	000170fa 	wrctl	ienable,zero
}
   11728:	0001883a 	nop
   1172c:	e037883a 	mov	sp,fp
   11730:	df000017 	ldw	fp,0(sp)
   11734:	dec00104 	addi	sp,sp,4
   11738:	f800283a 	ret

0001173c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1173c:	defffa04 	addi	sp,sp,-24
   11740:	dfc00515 	stw	ra,20(sp)
   11744:	df000415 	stw	fp,16(sp)
   11748:	df000404 	addi	fp,sp,16
   1174c:	e13ffe15 	stw	r4,-8(fp)
   11750:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11754:	e0bfff17 	ldw	r2,-4(fp)
   11758:	10800017 	ldw	r2,0(r2)
   1175c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11760:	e13ffe17 	ldw	r4,-8(fp)
   11764:	00102200 	call	10220 <strlen>
   11768:	10800044 	addi	r2,r2,1
   1176c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11770:	00000d06 	br	117a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11774:	e0bffc17 	ldw	r2,-16(fp)
   11778:	10800217 	ldw	r2,8(r2)
   1177c:	e0fffd17 	ldw	r3,-12(fp)
   11780:	180d883a 	mov	r6,r3
   11784:	e17ffe17 	ldw	r5,-8(fp)
   11788:	1009883a 	mov	r4,r2
   1178c:	00119b80 	call	119b8 <memcmp>
   11790:	1000021e 	bne	r2,zero,1179c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11794:	e0bffc17 	ldw	r2,-16(fp)
   11798:	00000706 	br	117b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1179c:	e0bffc17 	ldw	r2,-16(fp)
   117a0:	10800017 	ldw	r2,0(r2)
   117a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117a8:	e0fffc17 	ldw	r3,-16(fp)
   117ac:	e0bfff17 	ldw	r2,-4(fp)
   117b0:	18bff01e 	bne	r3,r2,11774 <__alt_data_end+0xffff1774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   117b4:	0005883a 	mov	r2,zero
}
   117b8:	e037883a 	mov	sp,fp
   117bc:	dfc00117 	ldw	ra,4(sp)
   117c0:	df000017 	ldw	fp,0(sp)
   117c4:	dec00204 	addi	sp,sp,8
   117c8:	f800283a 	ret

000117cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   117cc:	defffb04 	addi	sp,sp,-20
   117d0:	dfc00415 	stw	ra,16(sp)
   117d4:	df000315 	stw	fp,12(sp)
   117d8:	df000304 	addi	fp,sp,12
   117dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   117e0:	d0a00217 	ldw	r2,-32760(gp)
   117e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   117e8:	00003106 	br	118b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   117ec:	e0bffd17 	ldw	r2,-12(fp)
   117f0:	10800217 	ldw	r2,8(r2)
   117f4:	1009883a 	mov	r4,r2
   117f8:	00102200 	call	10220 <strlen>
   117fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11800:	e0bffd17 	ldw	r2,-12(fp)
   11804:	10c00217 	ldw	r3,8(r2)
   11808:	e0bffe17 	ldw	r2,-8(fp)
   1180c:	10bfffc4 	addi	r2,r2,-1
   11810:	1885883a 	add	r2,r3,r2
   11814:	10800003 	ldbu	r2,0(r2)
   11818:	10803fcc 	andi	r2,r2,255
   1181c:	1080201c 	xori	r2,r2,128
   11820:	10bfe004 	addi	r2,r2,-128
   11824:	10800bd8 	cmpnei	r2,r2,47
   11828:	1000031e 	bne	r2,zero,11838 <alt_find_file+0x6c>
    {
      len -= 1;
   1182c:	e0bffe17 	ldw	r2,-8(fp)
   11830:	10bfffc4 	addi	r2,r2,-1
   11834:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11838:	e0bffe17 	ldw	r2,-8(fp)
   1183c:	e0ffff17 	ldw	r3,-4(fp)
   11840:	1885883a 	add	r2,r3,r2
   11844:	10800003 	ldbu	r2,0(r2)
   11848:	10803fcc 	andi	r2,r2,255
   1184c:	1080201c 	xori	r2,r2,128
   11850:	10bfe004 	addi	r2,r2,-128
   11854:	10800be0 	cmpeqi	r2,r2,47
   11858:	1000081e 	bne	r2,zero,1187c <alt_find_file+0xb0>
   1185c:	e0bffe17 	ldw	r2,-8(fp)
   11860:	e0ffff17 	ldw	r3,-4(fp)
   11864:	1885883a 	add	r2,r3,r2
   11868:	10800003 	ldbu	r2,0(r2)
   1186c:	10803fcc 	andi	r2,r2,255
   11870:	1080201c 	xori	r2,r2,128
   11874:	10bfe004 	addi	r2,r2,-128
   11878:	10000a1e 	bne	r2,zero,118a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1187c:	e0bffd17 	ldw	r2,-12(fp)
   11880:	10800217 	ldw	r2,8(r2)
   11884:	e0fffe17 	ldw	r3,-8(fp)
   11888:	180d883a 	mov	r6,r3
   1188c:	e17fff17 	ldw	r5,-4(fp)
   11890:	1009883a 	mov	r4,r2
   11894:	00119b80 	call	119b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11898:	1000021e 	bne	r2,zero,118a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1189c:	e0bffd17 	ldw	r2,-12(fp)
   118a0:	00000706 	br	118c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   118a4:	e0bffd17 	ldw	r2,-12(fp)
   118a8:	10800017 	ldw	r2,0(r2)
   118ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118b0:	e0fffd17 	ldw	r3,-12(fp)
   118b4:	d0a00204 	addi	r2,gp,-32760
   118b8:	18bfcc1e 	bne	r3,r2,117ec <__alt_data_end+0xffff17ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   118bc:	0005883a 	mov	r2,zero
}
   118c0:	e037883a 	mov	sp,fp
   118c4:	dfc00117 	ldw	ra,4(sp)
   118c8:	df000017 	ldw	fp,0(sp)
   118cc:	dec00204 	addi	sp,sp,8
   118d0:	f800283a 	ret

000118d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   118d4:	defffa04 	addi	sp,sp,-24
   118d8:	dfc00515 	stw	ra,20(sp)
   118dc:	df000415 	stw	fp,16(sp)
   118e0:	dc000315 	stw	r16,12(sp)
   118e4:	df000404 	addi	fp,sp,16
   118e8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   118ec:	00bffa04 	movi	r2,-24
   118f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   118f4:	e03ffc15 	stw	zero,-16(fp)
   118f8:	00001d06 	br	11970 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   118fc:	04000074 	movhi	r16,1
   11900:	84074c04 	addi	r16,r16,7472
   11904:	e0bffc17 	ldw	r2,-16(fp)
   11908:	01400304 	movi	r5,12
   1190c:	1009883a 	mov	r4,r2
   11910:	0010ab40 	call	10ab4 <__mulsi3>
   11914:	8085883a 	add	r2,r16,r2
   11918:	10800017 	ldw	r2,0(r2)
   1191c:	1000111e 	bne	r2,zero,11964 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11920:	04000074 	movhi	r16,1
   11924:	84074c04 	addi	r16,r16,7472
   11928:	e0bffc17 	ldw	r2,-16(fp)
   1192c:	01400304 	movi	r5,12
   11930:	1009883a 	mov	r4,r2
   11934:	0010ab40 	call	10ab4 <__mulsi3>
   11938:	8085883a 	add	r2,r16,r2
   1193c:	e0fffe17 	ldw	r3,-8(fp)
   11940:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11944:	d0e00617 	ldw	r3,-32744(gp)
   11948:	e0bffc17 	ldw	r2,-16(fp)
   1194c:	1880020e 	bge	r3,r2,11958 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   11950:	e0bffc17 	ldw	r2,-16(fp)
   11954:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   11958:	e0bffc17 	ldw	r2,-16(fp)
   1195c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11960:	00000606 	br	1197c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11964:	e0bffc17 	ldw	r2,-16(fp)
   11968:	10800044 	addi	r2,r2,1
   1196c:	e0bffc15 	stw	r2,-16(fp)
   11970:	e0bffc17 	ldw	r2,-16(fp)
   11974:	10800810 	cmplti	r2,r2,32
   11978:	103fe01e 	bne	r2,zero,118fc <__alt_data_end+0xffff18fc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1197c:	e0bffd17 	ldw	r2,-12(fp)
}
   11980:	e6ffff04 	addi	sp,fp,-4
   11984:	dfc00217 	ldw	ra,8(sp)
   11988:	df000117 	ldw	fp,4(sp)
   1198c:	dc000017 	ldw	r16,0(sp)
   11990:	dec00304 	addi	sp,sp,12
   11994:	f800283a 	ret

00011998 <exit>:
   11998:	defffe04 	addi	sp,sp,-8
   1199c:	000b883a 	mov	r5,zero
   119a0:	dc000015 	stw	r16,0(sp)
   119a4:	dfc00115 	stw	ra,4(sp)
   119a8:	2021883a 	mov	r16,r4
   119ac:	00119e80 	call	119e8 <__call_exitprocs>
   119b0:	8009883a 	mov	r4,r16
   119b4:	0011b780 	call	11b78 <_exit>

000119b8 <memcmp>:
   119b8:	218d883a 	add	r6,r4,r6
   119bc:	21800826 	beq	r4,r6,119e0 <memcmp+0x28>
   119c0:	20800003 	ldbu	r2,0(r4)
   119c4:	28c00003 	ldbu	r3,0(r5)
   119c8:	10c00226 	beq	r2,r3,119d4 <memcmp+0x1c>
   119cc:	10c5c83a 	sub	r2,r2,r3
   119d0:	f800283a 	ret
   119d4:	21000044 	addi	r4,r4,1
   119d8:	29400044 	addi	r5,r5,1
   119dc:	003ff706 	br	119bc <__alt_data_end+0xffff19bc>
   119e0:	0005883a 	mov	r2,zero
   119e4:	f800283a 	ret

000119e8 <__call_exitprocs>:
   119e8:	defff504 	addi	sp,sp,-44
   119ec:	dd000515 	stw	r20,20(sp)
   119f0:	05000074 	movhi	r20,1
   119f4:	dc800315 	stw	r18,12(sp)
   119f8:	dfc00a15 	stw	ra,40(sp)
   119fc:	df000915 	stw	fp,36(sp)
   11a00:	ddc00815 	stw	r23,32(sp)
   11a04:	dd800715 	stw	r22,28(sp)
   11a08:	dd400615 	stw	r21,24(sp)
   11a0c:	dcc00415 	stw	r19,16(sp)
   11a10:	dc400215 	stw	r17,8(sp)
   11a14:	dc000115 	stw	r16,4(sp)
   11a18:	d9000015 	stw	r4,0(sp)
   11a1c:	2825883a 	mov	r18,r5
   11a20:	a507ac04 	addi	r20,r20,7856
   11a24:	a4400017 	ldw	r17,0(r20)
   11a28:	8cc00c17 	ldw	r19,48(r17)
   11a2c:	8c400c04 	addi	r17,r17,48
   11a30:	98004526 	beq	r19,zero,11b48 <__call_exitprocs+0x160>
   11a34:	9c000117 	ldw	r16,4(r19)
   11a38:	00900034 	movhi	r2,16384
   11a3c:	10bfffc4 	addi	r2,r2,-1
   11a40:	9d402217 	ldw	r21,136(r19)
   11a44:	85bfffc4 	addi	r22,r16,-1
   11a48:	80a1883a 	add	r16,r16,r2
   11a4c:	8421883a 	add	r16,r16,r16
   11a50:	8421883a 	add	r16,r16,r16
   11a54:	ac2f883a 	add	r23,r21,r16
   11a58:	84000204 	addi	r16,r16,8
   11a5c:	9c21883a 	add	r16,r19,r16
   11a60:	b0002716 	blt	r22,zero,11b00 <__call_exitprocs+0x118>
   11a64:	90000726 	beq	r18,zero,11a84 <__call_exitprocs+0x9c>
   11a68:	a800041e 	bne	r21,zero,11a7c <__call_exitprocs+0x94>
   11a6c:	b5bfffc4 	addi	r22,r22,-1
   11a70:	bdffff04 	addi	r23,r23,-4
   11a74:	843fff04 	addi	r16,r16,-4
   11a78:	003ff906 	br	11a60 <__alt_data_end+0xffff1a60>
   11a7c:	b9002017 	ldw	r4,128(r23)
   11a80:	913ffa1e 	bne	r18,r4,11a6c <__alt_data_end+0xffff1a6c>
   11a84:	99000117 	ldw	r4,4(r19)
   11a88:	82000017 	ldw	r8,0(r16)
   11a8c:	213fffc4 	addi	r4,r4,-1
   11a90:	b100021e 	bne	r22,r4,11a9c <__call_exitprocs+0xb4>
   11a94:	9d800115 	stw	r22,4(r19)
   11a98:	00000106 	br	11aa0 <__call_exitprocs+0xb8>
   11a9c:	80000015 	stw	zero,0(r16)
   11aa0:	403ff226 	beq	r8,zero,11a6c <__alt_data_end+0xffff1a6c>
   11aa4:	9f000117 	ldw	fp,4(r19)
   11aa8:	a8000526 	beq	r21,zero,11ac0 <__call_exitprocs+0xd8>
   11aac:	00800044 	movi	r2,1
   11ab0:	1592983a 	sll	r9,r2,r22
   11ab4:	a9404017 	ldw	r5,256(r21)
   11ab8:	494a703a 	and	r5,r9,r5
   11abc:	2800021e 	bne	r5,zero,11ac8 <__call_exitprocs+0xe0>
   11ac0:	403ee83a 	callr	r8
   11ac4:	00000906 	br	11aec <__call_exitprocs+0x104>
   11ac8:	a9004117 	ldw	r4,260(r21)
   11acc:	4908703a 	and	r4,r9,r4
   11ad0:	2000041e 	bne	r4,zero,11ae4 <__call_exitprocs+0xfc>
   11ad4:	b9400017 	ldw	r5,0(r23)
   11ad8:	d9000017 	ldw	r4,0(sp)
   11adc:	403ee83a 	callr	r8
   11ae0:	00000206 	br	11aec <__call_exitprocs+0x104>
   11ae4:	b9000017 	ldw	r4,0(r23)
   11ae8:	403ee83a 	callr	r8
   11aec:	99000117 	ldw	r4,4(r19)
   11af0:	e13fcc1e 	bne	fp,r4,11a24 <__alt_data_end+0xffff1a24>
   11af4:	89000017 	ldw	r4,0(r17)
   11af8:	993fdc26 	beq	r19,r4,11a6c <__alt_data_end+0xffff1a6c>
   11afc:	003fc906 	br	11a24 <__alt_data_end+0xffff1a24>
   11b00:	00800034 	movhi	r2,0
   11b04:	10800004 	addi	r2,r2,0
   11b08:	10000f26 	beq	r2,zero,11b48 <__call_exitprocs+0x160>
   11b0c:	99400117 	ldw	r5,4(r19)
   11b10:	99000017 	ldw	r4,0(r19)
   11b14:	2800091e 	bne	r5,zero,11b3c <__call_exitprocs+0x154>
   11b18:	20000826 	beq	r4,zero,11b3c <__call_exitprocs+0x154>
   11b1c:	89000015 	stw	r4,0(r17)
   11b20:	a8000226 	beq	r21,zero,11b2c <__call_exitprocs+0x144>
   11b24:	a809883a 	mov	r4,r21
   11b28:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   11b2c:	9809883a 	mov	r4,r19
   11b30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   11b34:	8cc00017 	ldw	r19,0(r17)
   11b38:	003fbd06 	br	11a30 <__alt_data_end+0xffff1a30>
   11b3c:	9823883a 	mov	r17,r19
   11b40:	2027883a 	mov	r19,r4
   11b44:	003fba06 	br	11a30 <__alt_data_end+0xffff1a30>
   11b48:	dfc00a17 	ldw	ra,40(sp)
   11b4c:	df000917 	ldw	fp,36(sp)
   11b50:	ddc00817 	ldw	r23,32(sp)
   11b54:	dd800717 	ldw	r22,28(sp)
   11b58:	dd400617 	ldw	r21,24(sp)
   11b5c:	dd000517 	ldw	r20,20(sp)
   11b60:	dcc00417 	ldw	r19,16(sp)
   11b64:	dc800317 	ldw	r18,12(sp)
   11b68:	dc400217 	ldw	r17,8(sp)
   11b6c:	dc000117 	ldw	r16,4(sp)
   11b70:	dec00b04 	addi	sp,sp,44
   11b74:	f800283a 	ret

00011b78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11b78:	defffd04 	addi	sp,sp,-12
   11b7c:	df000215 	stw	fp,8(sp)
   11b80:	df000204 	addi	fp,sp,8
   11b84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11b88:	0001883a 	nop
   11b8c:	e0bfff17 	ldw	r2,-4(fp)
   11b90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11b94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11b98:	10000226 	beq	r2,zero,11ba4 <_exit+0x2c>
    ALT_SIM_FAIL();
   11b9c:	002af070 	cmpltui	zero,zero,43969
   11ba0:	00000106 	br	11ba8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11ba4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11ba8:	003fff06 	br	11ba8 <__alt_data_end+0xffff1ba8>
